
SEP4Embd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000484  00800200  00004e60  00004ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001225  00800684  00800684  00005378  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000910  00000000  00000000  00005414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c35d  00000000  00000000  00005d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e97  00000000  00000000  00012081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000585f  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f58  00000000  00000000  0001a778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003882  00000000  00000000  0001c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aef4  00000000  00000000  0001ff52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a0  00000000  00000000  0002ae46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c1       	rjmp	.+1004   	; 0x3ee <__ctors_end>
       2:	00 00       	nop
       4:	15 c2       	rjmp	.+1066   	; 0x430 <__bad_interrupt>
       6:	00 00       	nop
       8:	13 c2       	rjmp	.+1062   	; 0x430 <__bad_interrupt>
       a:	00 00       	nop
       c:	11 c2       	rjmp	.+1058   	; 0x430 <__bad_interrupt>
       e:	00 00       	nop
      10:	0f c2       	rjmp	.+1054   	; 0x430 <__bad_interrupt>
      12:	00 00       	nop
      14:	0d c2       	rjmp	.+1050   	; 0x430 <__bad_interrupt>
      16:	00 00       	nop
      18:	0b c2       	rjmp	.+1046   	; 0x430 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	09 c2       	rjmp	.+1042   	; 0x430 <__bad_interrupt>
      1e:	00 00       	nop
      20:	07 c2       	rjmp	.+1038   	; 0x430 <__bad_interrupt>
      22:	00 00       	nop
      24:	05 c2       	rjmp	.+1034   	; 0x430 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c2       	rjmp	.+1030   	; 0x430 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	01 c2       	rjmp	.+1026   	; 0x430 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c6       	rjmp	.+3386   	; 0xd6c <__vector_12>
      32:	00 00       	nop
      34:	fd c1       	rjmp	.+1018   	; 0x430 <__bad_interrupt>
      36:	00 00       	nop
      38:	fb c1       	rjmp	.+1014   	; 0x430 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f9 c1       	rjmp	.+1010   	; 0x430 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c1       	rjmp	.+1006   	; 0x430 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c1       	rjmp	.+1002   	; 0x430 <__bad_interrupt>
      46:	00 00       	nop
      48:	f3 c1       	rjmp	.+998    	; 0x430 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f1 c1       	rjmp	.+994    	; 0x430 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ef c1       	rjmp	.+990    	; 0x430 <__bad_interrupt>
      52:	00 00       	nop
      54:	ed c1       	rjmp	.+986    	; 0x430 <__bad_interrupt>
      56:	00 00       	nop
      58:	eb c1       	rjmp	.+982    	; 0x430 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e9 c1       	rjmp	.+978    	; 0x430 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c1       	rjmp	.+974    	; 0x430 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <__vector_25>
      68:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__vector_26>
      6c:	e1 c1       	rjmp	.+962    	; 0x430 <__bad_interrupt>
      6e:	00 00       	nop
      70:	df c1       	rjmp	.+958    	; 0x430 <__bad_interrupt>
      72:	00 00       	nop
      74:	dd c1       	rjmp	.+954    	; 0x430 <__bad_interrupt>
      76:	00 00       	nop
      78:	db c1       	rjmp	.+950    	; 0x430 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d9 c1       	rjmp	.+946    	; 0x430 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d7 c1       	rjmp	.+942    	; 0x430 <__bad_interrupt>
      82:	00 00       	nop
      84:	d5 c1       	rjmp	.+938    	; 0x430 <__bad_interrupt>
      86:	00 00       	nop
      88:	d3 c1       	rjmp	.+934    	; 0x430 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 c1       	rjmp	.+930    	; 0x430 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__vector_36>
      94:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <__vector_37>
      98:	cb c1       	rjmp	.+918    	; 0x430 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c9 c1       	rjmp	.+914    	; 0x430 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c7 c1       	rjmp	.+910    	; 0x430 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c5 c1       	rjmp	.+906    	; 0x430 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c3 c1       	rjmp	.+902    	; 0x430 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c1 c1       	rjmp	.+898    	; 0x430 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bf c1       	rjmp	.+894    	; 0x430 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bd c1       	rjmp	.+890    	; 0x430 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bb c1       	rjmp	.+886    	; 0x430 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b9 c1       	rjmp	.+882    	; 0x430 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b7 c1       	rjmp	.+878    	; 0x430 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b5 c1       	rjmp	.+874    	; 0x430 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b3 c1       	rjmp	.+870    	; 0x430 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__vector_51>
      d0:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__vector_52>
      d4:	ad c1       	rjmp	.+858    	; 0x430 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__vector_54>
      dc:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__vector_55>
      e0:	a7 c1       	rjmp	.+846    	; 0x430 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6e 01       	movw	r12, r28
      e6:	6e 01       	movw	r12, r28
      e8:	6e 01       	movw	r12, r28
      ea:	a8 01       	movw	r20, r16
      ec:	b0 01       	movw	r22, r0
      ee:	c6 01       	movw	r24, r12
      f0:	6e 01       	movw	r12, r28
      f2:	6e 01       	movw	r12, r28
      f4:	a8 01       	movw	r20, r16
      f6:	b0 01       	movw	r22, r0

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	08 ec       	ldi	r16, 0xC8	; 200
      fa:	16 e1       	ldi	r17, 0x16	; 22
      fc:	0f 2e       	mov	r0, r31
      fe:	f8 ef       	ldi	r31, 0xF8	; 248
     100:	ef 2e       	mov	r14, r31
     102:	f6 e1       	ldi	r31, 0x16	; 22
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	17 96       	adiw	r26, 0x07	; 7
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	18 97       	sbiw	r26, 0x08	; 8
     120:	c0 85       	ldd	r28, Z+8	; 0x08
     122:	d1 85       	ldd	r29, Z+9	; 0x09
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	86 d4       	rcall	.+2316   	; 0xa36 <uxListRemove>
     12a:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <uxCurrentNumberOfTasks>
     134:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8b 8d       	ldd	r24, Y+27	; 0x1b
     144:	9c 8d       	ldd	r25, Y+28	; 0x1c
     146:	d3 d3       	rcall	.+1958   	; 0x8ee <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	d1 d3       	rcall	.+1954   	; 0x8ee <vPortFree>
     14c:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	41 d5       	rcall	.+2690   	; 0xbe0 <vPortYield>
     15e:	0e 94 57 15 	call	0x2aae	; 0x2aae <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	60 97       	sbiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	ce 01       	movw	r24, r28
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9a 87       	std	Y+10, r25	; 0x0a
     17e:	89 87       	std	Y+9, r24	; 0x09
     180:	81 2c       	mov	r8, r1
     182:	91 2c       	mov	r9, r1
     184:	a1 2c       	mov	r10, r1
     186:	b1 2c       	mov	r11, r1
     188:	69 84       	ldd	r6, Y+9	; 0x09
     18a:	7a 84       	ldd	r7, Y+10	; 0x0a
     18c:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <pxCurrentTimerList>
     190:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
     194:	80 81       	ld	r24, Z
     196:	88 23       	and	r24, r24
     198:	09 f4       	brne	.+2      	; 0x19c <prvTimerTask+0x38>
     19a:	0f c1       	rjmp	.+542    	; 0x3ba <prvTimerTask+0x256>
     19c:	07 80       	ldd	r0, Z+7	; 0x07
     19e:	f0 85       	ldd	r31, Z+8	; 0x08
     1a0:	e0 2d       	mov	r30, r0
     1a2:	20 80       	ld	r2, Z
     1a4:	31 80       	ldd	r3, Z+1	; 0x01
     1a6:	42 80       	ldd	r4, Z+2	; 0x02
     1a8:	53 80       	ldd	r5, Z+3	; 0x03
     1aa:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <vTaskSuspendAll>
     1ae:	ce 01       	movw	r24, r28
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	0e 94 c1 14 	call	0x2982	; 0x2982 <prvSampleTimeNow>
     1b6:	6b 87       	std	Y+11, r22	; 0x0b
     1b8:	7c 87       	std	Y+12, r23	; 0x0c
     1ba:	8d 87       	std	Y+13, r24	; 0x0d
     1bc:	9e 87       	std	Y+14, r25	; 0x0e
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	81 11       	cpse	r24, r1
     1c2:	65 c0       	rjmp	.+202    	; 0x28e <prvTimerTask+0x12a>
     1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c8:	ad 85       	ldd	r26, Y+13	; 0x0d
     1ca:	be 85       	ldd	r27, Y+14	; 0x0e
     1cc:	82 15       	cp	r24, r2
     1ce:	93 05       	cpc	r25, r3
     1d0:	a4 05       	cpc	r26, r4
     1d2:	b5 05       	cpc	r27, r5
     1d4:	08 f4       	brcc	.+2      	; 0x1d8 <prvTimerTask+0x74>
     1d6:	44 c0       	rjmp	.+136    	; 0x260 <prvTimerTask+0xfc>
     1d8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <xTaskResumeAll>
     1dc:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <pxCurrentTimerList>
     1e0:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
     1e4:	07 80       	ldd	r0, Z+7	; 0x07
     1e6:	f0 85       	ldd	r31, Z+8	; 0x08
     1e8:	e0 2d       	mov	r30, r0
     1ea:	a0 85       	ldd	r26, Z+8	; 0x08
     1ec:	b1 85       	ldd	r27, Z+9	; 0x09
     1ee:	b8 8b       	std	Y+16, r27	; 0x10
     1f0:	af 87       	std	Y+15, r26	; 0x0f
     1f2:	cd 01       	movw	r24, r26
     1f4:	02 96       	adiw	r24, 0x02	; 2
     1f6:	1f d4       	rcall	.+2110   	; 0xa36 <uxListRemove>
     1f8:	ef 85       	ldd	r30, Y+15	; 0x0f
     1fa:	f8 89       	ldd	r31, Y+16	; 0x10
     1fc:	87 89       	ldd	r24, Z+23	; 0x17
     1fe:	82 ff       	sbrs	r24, 2
     200:	21 c0       	rjmp	.+66     	; 0x244 <prvTimerTask+0xe0>
     202:	46 85       	ldd	r20, Z+14	; 0x0e
     204:	57 85       	ldd	r21, Z+15	; 0x0f
     206:	60 89       	ldd	r22, Z+16	; 0x10
     208:	71 89       	ldd	r23, Z+17	; 0x11
     20a:	42 0d       	add	r20, r2
     20c:	53 1d       	adc	r21, r3
     20e:	64 1d       	adc	r22, r4
     210:	75 1d       	adc	r23, r5
     212:	72 01       	movw	r14, r4
     214:	61 01       	movw	r12, r2
     216:	0b 85       	ldd	r16, Y+11	; 0x0b
     218:	1c 85       	ldd	r17, Y+12	; 0x0c
     21a:	2d 85       	ldd	r18, Y+13	; 0x0d
     21c:	3e 85       	ldd	r19, Y+14	; 0x0e
     21e:	cf 01       	movw	r24, r30
     220:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <prvInsertTimerInActiveList>
     224:	88 23       	and	r24, r24
     226:	99 f0       	breq	.+38     	; 0x24e <prvTimerTask+0xea>
     228:	c8 2c       	mov	r12, r8
     22a:	d9 2c       	mov	r13, r9
     22c:	ea 2c       	mov	r14, r10
     22e:	fb 2c       	mov	r15, r11
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	a2 01       	movw	r20, r4
     236:	91 01       	movw	r18, r2
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	8f 85       	ldd	r24, Y+15	; 0x0f
     23c:	98 89       	ldd	r25, Y+16	; 0x10
     23e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <xTimerGenericCommand>
     242:	05 c0       	rjmp	.+10     	; 0x24e <prvTimerTask+0xea>
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	af 85       	ldd	r26, Y+15	; 0x0f
     248:	b8 89       	ldd	r27, Y+16	; 0x10
     24a:	57 96       	adiw	r26, 0x17	; 23
     24c:	8c 93       	st	X, r24
     24e:	af 85       	ldd	r26, Y+15	; 0x0f
     250:	b8 89       	ldd	r27, Y+16	; 0x10
     252:	54 96       	adiw	r26, 0x14	; 20
     254:	ed 91       	ld	r30, X+
     256:	fc 91       	ld	r31, X
     258:	55 97       	sbiw	r26, 0x15	; 21
     25a:	cd 01       	movw	r24, r26
     25c:	19 95       	eicall
     25e:	9f c0       	rjmp	.+318    	; 0x39e <prvTimerTask+0x23a>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	b2 01       	movw	r22, r4
     264:	a1 01       	movw	r20, r2
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	48 1b       	sub	r20, r24
     270:	59 0b       	sbc	r21, r25
     272:	6a 0b       	sbc	r22, r26
     274:	7b 0b       	sbc	r23, r27
     276:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
     27a:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
     27e:	0e 94 85 09 	call	0x130a	; 0x130a <vQueueWaitForMessageRestricted>
     282:	0e 94 65 0f 	call	0x1eca	; 0x1eca <xTaskResumeAll>
     286:	81 11       	cpse	r24, r1
     288:	8a c0       	rjmp	.+276    	; 0x39e <prvTimerTask+0x23a>
     28a:	aa d4       	rcall	.+2388   	; 0xbe0 <vPortYield>
     28c:	88 c0       	rjmp	.+272    	; 0x39e <prvTimerTask+0x23a>
     28e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <xTaskResumeAll>
     292:	85 c0       	rjmp	.+266    	; 0x39e <prvTimerTask+0x23a>
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	88 23       	and	r24, r24
     298:	0c f4       	brge	.+2      	; 0x29c <prvTimerTask+0x138>
     29a:	81 c0       	rjmp	.+258    	; 0x39e <prvTimerTask+0x23a>
     29c:	4e 80       	ldd	r4, Y+6	; 0x06
     29e:	5f 80       	ldd	r5, Y+7	; 0x07
     2a0:	d2 01       	movw	r26, r4
     2a2:	1c 96       	adiw	r26, 0x0c	; 12
     2a4:	8d 91       	ld	r24, X+
     2a6:	9c 91       	ld	r25, X
     2a8:	1d 97       	sbiw	r26, 0x0d	; 13
     2aa:	89 2b       	or	r24, r25
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <prvTimerTask+0x150>
     2ae:	c2 01       	movw	r24, r4
     2b0:	02 96       	adiw	r24, 0x02	; 2
     2b2:	c1 d3       	rcall	.+1922   	; 0xa36 <uxListRemove>
     2b4:	ce 01       	movw	r24, r28
     2b6:	08 96       	adiw	r24, 0x08	; 8
     2b8:	0e 94 c1 14 	call	0x2982	; 0x2982 <prvSampleTimeNow>
     2bc:	8b 01       	movw	r16, r22
     2be:	9c 01       	movw	r18, r24
     2c0:	e9 81       	ldd	r30, Y+1	; 0x01
     2c2:	0e 2e       	mov	r0, r30
     2c4:	00 0c       	add	r0, r0
     2c6:	ff 0b       	sbc	r31, r31
     2c8:	ea 30       	cpi	r30, 0x0A	; 10
     2ca:	f1 05       	cpc	r31, r1
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <prvTimerTask+0x16c>
     2ce:	67 c0       	rjmp	.+206    	; 0x39e <prvTimerTask+0x23a>
     2d0:	88 27       	eor	r24, r24
     2d2:	ee 58       	subi	r30, 0x8E	; 142
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	8f 4f       	sbci	r24, 0xFF	; 255
     2d8:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <__tablejump2__>
     2dc:	f2 01       	movw	r30, r4
     2de:	87 89       	ldd	r24, Z+23	; 0x17
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	87 8b       	std	Z+23, r24	; 0x17
     2e4:	ca 80       	ldd	r12, Y+2	; 0x02
     2e6:	db 80       	ldd	r13, Y+3	; 0x03
     2e8:	ec 80       	ldd	r14, Y+4	; 0x04
     2ea:	fd 80       	ldd	r15, Y+5	; 0x05
     2ec:	46 85       	ldd	r20, Z+14	; 0x0e
     2ee:	57 85       	ldd	r21, Z+15	; 0x0f
     2f0:	60 89       	ldd	r22, Z+16	; 0x10
     2f2:	71 89       	ldd	r23, Z+17	; 0x11
     2f4:	4c 0d       	add	r20, r12
     2f6:	5d 1d       	adc	r21, r13
     2f8:	6e 1d       	adc	r22, r14
     2fa:	7f 1d       	adc	r23, r15
     2fc:	c2 01       	movw	r24, r4
     2fe:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <prvInsertTimerInActiveList>
     302:	88 23       	and	r24, r24
     304:	09 f4       	brne	.+2      	; 0x308 <prvTimerTask+0x1a4>
     306:	4b c0       	rjmp	.+150    	; 0x39e <prvTimerTask+0x23a>
     308:	d2 01       	movw	r26, r4
     30a:	54 96       	adiw	r26, 0x14	; 20
     30c:	ed 91       	ld	r30, X+
     30e:	fc 91       	ld	r31, X
     310:	55 97       	sbiw	r26, 0x15	; 21
     312:	c2 01       	movw	r24, r4
     314:	19 95       	eicall
     316:	f2 01       	movw	r30, r4
     318:	87 89       	ldd	r24, Z+23	; 0x17
     31a:	82 ff       	sbrs	r24, 2
     31c:	40 c0       	rjmp	.+128    	; 0x39e <prvTimerTask+0x23a>
     31e:	4a 81       	ldd	r20, Y+2	; 0x02
     320:	5b 81       	ldd	r21, Y+3	; 0x03
     322:	6c 81       	ldd	r22, Y+4	; 0x04
     324:	7d 81       	ldd	r23, Y+5	; 0x05
     326:	86 85       	ldd	r24, Z+14	; 0x0e
     328:	97 85       	ldd	r25, Z+15	; 0x0f
     32a:	a0 89       	ldd	r26, Z+16	; 0x10
     32c:	b1 89       	ldd	r27, Z+17	; 0x11
     32e:	9a 01       	movw	r18, r20
     330:	ab 01       	movw	r20, r22
     332:	28 0f       	add	r18, r24
     334:	39 1f       	adc	r19, r25
     336:	4a 1f       	adc	r20, r26
     338:	5b 1f       	adc	r21, r27
     33a:	c8 2c       	mov	r12, r8
     33c:	d9 2c       	mov	r13, r9
     33e:	ea 2c       	mov	r14, r10
     340:	fb 2c       	mov	r15, r11
     342:	00 e0       	ldi	r16, 0x00	; 0
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	c2 01       	movw	r24, r4
     34a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <xTimerGenericCommand>
     34e:	27 c0       	rjmp	.+78     	; 0x39e <prvTimerTask+0x23a>
     350:	d2 01       	movw	r26, r4
     352:	57 96       	adiw	r26, 0x17	; 23
     354:	8c 91       	ld	r24, X
     356:	57 97       	sbiw	r26, 0x17	; 23
     358:	8e 7f       	andi	r24, 0xFE	; 254
     35a:	57 96       	adiw	r26, 0x17	; 23
     35c:	8c 93       	st	X, r24
     35e:	1f c0       	rjmp	.+62     	; 0x39e <prvTimerTask+0x23a>
     360:	f2 01       	movw	r30, r4
     362:	87 89       	ldd	r24, Z+23	; 0x17
     364:	81 60       	ori	r24, 0x01	; 1
     366:	87 8b       	std	Z+23, r24	; 0x17
     368:	4a 81       	ldd	r20, Y+2	; 0x02
     36a:	5b 81       	ldd	r21, Y+3	; 0x03
     36c:	6c 81       	ldd	r22, Y+4	; 0x04
     36e:	7d 81       	ldd	r23, Y+5	; 0x05
     370:	46 87       	std	Z+14, r20	; 0x0e
     372:	57 87       	std	Z+15, r21	; 0x0f
     374:	60 8b       	std	Z+16, r22	; 0x10
     376:	71 8b       	std	Z+17, r23	; 0x11
     378:	40 0f       	add	r20, r16
     37a:	51 1f       	adc	r21, r17
     37c:	62 1f       	adc	r22, r18
     37e:	73 1f       	adc	r23, r19
     380:	68 01       	movw	r12, r16
     382:	79 01       	movw	r14, r18
     384:	c2 01       	movw	r24, r4
     386:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <prvInsertTimerInActiveList>
     38a:	09 c0       	rjmp	.+18     	; 0x39e <prvTimerTask+0x23a>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 fd       	sbrc	r24, 1
     392:	03 c0       	rjmp	.+6      	; 0x39a <prvTimerTask+0x236>
     394:	c2 01       	movw	r24, r4
     396:	ab d2       	rcall	.+1366   	; 0x8ee <vPortFree>
     398:	02 c0       	rjmp	.+4      	; 0x39e <prvTimerTask+0x23a>
     39a:	8e 7f       	andi	r24, 0xFE	; 254
     39c:	87 8b       	std	Z+23, r24	; 0x17
     39e:	28 2d       	mov	r18, r8
     3a0:	39 2d       	mov	r19, r9
     3a2:	4a 2d       	mov	r20, r10
     3a4:	5b 2d       	mov	r21, r11
     3a6:	66 2d       	mov	r22, r6
     3a8:	77 2d       	mov	r23, r7
     3aa:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
     3ae:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
     3b2:	14 d7       	rcall	.+3624   	; 0x11dc <xQueueReceive>
     3b4:	81 11       	cpse	r24, r1
     3b6:	6e cf       	rjmp	.-292    	; 0x294 <prvTimerTask+0x130>
     3b8:	e9 ce       	rjmp	.-558    	; 0x18c <prvTimerTask+0x28>
     3ba:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <vTaskSuspendAll>
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	0e 94 c1 14 	call	0x2982	; 0x2982 <prvSampleTimeNow>
     3c6:	6b 87       	std	Y+11, r22	; 0x0b
     3c8:	7c 87       	std	Y+12, r23	; 0x0c
     3ca:	8d 87       	std	Y+13, r24	; 0x0d
     3cc:	9e 87       	std	Y+14, r25	; 0x0e
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	81 11       	cpse	r24, r1
     3d2:	5d cf       	rjmp	.-326    	; 0x28e <prvTimerTask+0x12a>
     3d4:	e0 91 2e 17 	lds	r30, 0x172E	; 0x80172e <pxOverflowTimerList>
     3d8:	f0 91 2f 17 	lds	r31, 0x172F	; 0x80172f <pxOverflowTimerList+0x1>
     3dc:	80 81       	ld	r24, Z
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	81 11       	cpse	r24, r1
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	28 2c       	mov	r2, r8
     3e6:	39 2c       	mov	r3, r9
     3e8:	4a 2c       	mov	r4, r10
     3ea:	5b 2c       	mov	r5, r11
     3ec:	3a cf       	rjmp	.-396    	; 0x262 <prvTimerTask+0xfe>

000003ee <__ctors_end>:
     3ee:	11 24       	eor	r1, r1
     3f0:	1f be       	out	0x3f, r1	; 63
     3f2:	cf ef       	ldi	r28, 0xFF	; 255
     3f4:	d1 e2       	ldi	r29, 0x21	; 33
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	00 e0       	ldi	r16, 0x00	; 0
     3fc:	0c bf       	out	0x3c, r16	; 60

000003fe <__do_copy_data>:
     3fe:	16 e0       	ldi	r17, 0x06	; 6
     400:	a0 e0       	ldi	r26, 0x00	; 0
     402:	b2 e0       	ldi	r27, 0x02	; 2
     404:	e0 e6       	ldi	r30, 0x60	; 96
     406:	fe e4       	ldi	r31, 0x4E	; 78
     408:	00 e0       	ldi	r16, 0x00	; 0
     40a:	0b bf       	out	0x3b, r16	; 59
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	07 90       	elpm	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	a4 38       	cpi	r26, 0x84	; 132
     414:	b1 07       	cpc	r27, r17
     416:	d9 f7       	brne	.-10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

00000418 <__do_clear_bss>:
     418:	28 e1       	ldi	r18, 0x18	; 24
     41a:	a4 e8       	ldi	r26, 0x84	; 132
     41c:	b6 e0       	ldi	r27, 0x06	; 6
     41e:	01 c0       	rjmp	.+2      	; 0x422 <.do_clear_bss_start>

00000420 <.do_clear_bss_loop>:
     420:	1d 92       	st	X+, r1

00000422 <.do_clear_bss_start>:
     422:	a9 3a       	cpi	r26, 0xA9	; 169
     424:	b2 07       	cpc	r27, r18
     426:	e1 f7       	brne	.-8      	; 0x420 <.do_clear_bss_loop>
     428:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <main>
     42c:	0c 94 2e 27 	jmp	0x4e5c	; 0x4e5c <_exit>

00000430 <__bad_interrupt>:
     430:	e7 cd       	rjmp	.-1074   	; 0x0 <__vectors>

00000432 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <lora_handler_task+0x6>
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 3f 19 	call	0x327e	; 0x327e <lora_driver_reset_rn2483>
	vTaskDelay(2);
     444:	62 e0       	ldi	r22, 0x02	; 2
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 3f 10 	call	0x207e	; 0x207e <vTaskDelay>
	lora_driver_reset_rn2483(0);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 3f 19 	call	0x327e	; 0x327e <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     456:	66 e9       	ldi	r22, 0x96	; 150
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 3f 10 	call	0x207e	; 0x207e <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     462:	0e 94 f5 18 	call	0x31ea	; 0x31ea <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     46c:	0e 94 53 19 	call	0x32a6	; 0x32a6 <lora_driver_rn2483_factory_reset>
     470:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	8c e3       	ldi	r24, 0x3C	; 60
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     484:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <lora_driver_configure_to_eu868>
     488:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	8f e4       	ldi	r24, 0x4F	; 79
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     49c:	8a e9       	ldi	r24, 0x9A	; 154
     49e:	96 e0       	ldi	r25, 0x06	; 6
     4a0:	0e 94 65 19 	call	0x32ca	; 0x32ca <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     4a4:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     4a8:	0a e9       	ldi	r16, 0x9A	; 154
     4aa:	16 e0       	ldi	r17, 0x06	; 6
     4ac:	1f 93       	push	r17
     4ae:	0f 93       	push	r16
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	88 e6       	ldi	r24, 0x68	; 104
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	9f 93       	push	r25
     4ba:	8f 93       	push	r24
     4bc:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     4c0:	c8 01       	movw	r24, r16
     4c2:	0e 94 81 19 	call	0x3302	; 0x3302 <lora_driver_set_device_identifier>
     4c6:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	1f 93       	push	r17
     4d0:	0f 93       	push	r16
     4d2:	8c e7       	ldi	r24, 0x7C	; 124
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     4de:	a8 01       	movw	r20, r16
     4e0:	61 e9       	ldi	r22, 0x91	; 145
     4e2:	72 e0       	ldi	r23, 0x02	; 2
     4e4:	82 eb       	ldi	r24, 0xB2	; 178
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 af 1b 	call	0x375e	; 0x375e <lora_driver_set_otaa_identity>
     4ec:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	1f 93       	push	r17
     4f6:	0f 93       	push	r16
     4f8:	81 e9       	ldi	r24, 0x91	; 145
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	82 eb       	ldi	r24, 0xB2	; 178
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	83 ec       	ldi	r24, 0xC3	; 195
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     514:	0e 94 b4 19 	call	0x3368	; 0x3368 <lora_driver_save_mac>
     518:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	89 ef       	ldi	r24, 0xF9	; 249
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 ae 1a 	call	0x355c	; 0x355c <lora_driver_set_adaptive_data_rate>
     53c:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	88 e0       	ldi	r24, 0x08	; 8
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 b9 1a 	call	0x3572	; 0x3572 <lora_driver_set_receive_delay>
     558:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	8f 93       	push	r24
     564:	84 ef       	ldi	r24, 0xF4	; 244
     566:	8f 93       	push	r24
     568:	89 e2       	ldi	r24, 0x29	; 41
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	0a e0       	ldi	r16, 0x0A	; 10
     580:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     582:	0f 2e       	mov	r0, r31
     584:	f9 e4       	ldi	r31, 0x49	; 73
     586:	ef 2e       	mov	r14, r31
     588:	f3 e0       	ldi	r31, 0x03	; 3
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 ba 19 	call	0x3374	; 0x3374 <lora_driver_join>
     594:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     596:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	1f 93       	push	r17
     5a0:	0f 93       	push	r16
     5a2:	ff 92       	push	r15
     5a4:	ef 92       	push	r14
     5a6:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>

		if ( rc != LoRa_ACCEPTED)
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	f8 e0       	ldi	r31, 0x08	; 8
     5b8:	df 16       	cp	r13, r31
     5ba:	d9 f1       	breq	.+118    	; 0x632 <lora_handler_task+0x200>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     5c2:	66 e3       	ldi	r22, 0x36	; 54
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 3f 10 	call	0x207e	; 0x207e <vTaskDelay>
     5ce:	01 50       	subi	r16, 0x01	; 1
     5d0:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     5d2:	e9 f6       	brne	.-70     	; 0x58e <lora_handler_task+0x15c>
     5d4:	27 c0       	rjmp	.+78     	; 0x624 <lora_handler_task+0x1f2>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     5d6:	04 d3       	rcall	.+1544   	; 0xbe0 <vPortYield>
     5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <lora_handler_task+0x1a4>
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     5da:	48 ea       	ldi	r20, 0xA8	; 168
     5dc:	58 e4       	ldi	r21, 0x48	; 72
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <vTaskDelayUntil>
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2
		int16_t noise = 1050; // Dummy CO2


		_uplink_payload.bytes[0] = hum >> 8;
     5ea:	f8 01       	movw	r30, r16
     5ec:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     5ee:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     5f0:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     5f2:	b5 82       	std	Z+5, r11	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     5f4:	c6 82       	std	Z+6, r12	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     5f6:	d7 82       	std	Z+7, r13	; 0x07
		_uplink_payload.bytes[6] = noise >> 8;
     5f8:	c0 86       	std	Z+8, r12	; 0x08
		_uplink_payload.bytes[7] = noise & 0xFF;
     5fa:	d1 86       	std	Z+9, r13	; 0x09

		led_short_puls(led_ST4);  // OPTIONAL
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     602:	b8 01       	movw	r22, r16
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <lora_driver_sent_upload_message>
     60a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <lora_driver_map_return_code_to_text>
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	ff 92       	push	r15
     614:	ef 92       	push	r14
     616:	0e 94 10 24 	call	0x4820	; 0x4820 <printf>
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	db cf       	rjmp	.-74     	; 0x5da <lora_handler_task+0x1a8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <led_fast_blink>
     630:	d2 cf       	rjmp	.-92     	; 0x5d6 <lora_handler_task+0x1a4>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
     638:	e4 e8       	ldi	r30, 0x84	; 132
     63a:	f6 e0       	ldi	r31, 0x06	; 6
     63c:	86 e0       	ldi	r24, 0x06	; 6
     63e:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     644:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskGetTickCount>
     648:	69 83       	std	Y+1, r22	; 0x01
     64a:	7a 83       	std	Y+2, r23	; 0x02
     64c:	8b 83       	std	Y+3, r24	; 0x03
     64e:	9c 83       	std	Y+4, r25	; 0x04
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2
		int16_t noise = 1050; // Dummy CO2


		_uplink_payload.bytes[0] = hum >> 8;
     650:	04 e8       	ldi	r16, 0x84	; 132
     652:	16 e0       	ldi	r17, 0x06	; 6
     654:	0f 2e       	mov	r0, r31
     656:	f0 e3       	ldi	r31, 0x30	; 48
     658:	8f 2e       	mov	r8, r31
     65a:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
     65c:	0f 2e       	mov	r0, r31
     65e:	f9 e3       	ldi	r31, 0x39	; 57
     660:	9f 2e       	mov	r9, r31
     662:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
     664:	68 94       	set
     666:	aa 24       	eor	r10, r10
     668:	a1 f8       	bld	r10, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
     66a:	0f 2e       	mov	r0, r31
     66c:	f3 ea       	ldi	r31, 0xA3	; 163
     66e:	bf 2e       	mov	r11, r31
     670:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     672:	68 94       	set
     674:	cc 24       	eor	r12, r12
     676:	c2 f8       	bld	r12, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     678:	0f 2e       	mov	r0, r31
     67a:	fa e1       	ldi	r31, 0x1A	; 26
     67c:	df 2e       	mov	r13, r31
     67e:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[6] = noise >> 8;
		_uplink_payload.bytes[7] = noise & 0xFF;

		led_short_puls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     680:	0f 2e       	mov	r0, r31
     682:	f9 e6       	ldi	r31, 0x69	; 105
     684:	ef 2e       	mov	r14, r31
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	ff 2e       	mov	r15, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	a6 cf       	rjmp	.-180    	; 0x5da <lora_handler_task+0x1a8>

0000068e <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
	xTaskCreate(
     694:	e1 2c       	mov	r14, r1
     696:	f1 2c       	mov	r15, r1
     698:	08 2f       	mov	r16, r24
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	48 e8       	ldi	r20, 0x88	; 136
     6a0:	51 e0       	ldi	r21, 0x01	; 1
     6a2:	6e e7       	ldi	r22, 0x7E	; 126
     6a4:	73 e0       	ldi	r23, 0x03	; 3
     6a6:	89 e1       	ldi	r24, 0x19	; 25
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	08 95       	ret

000006b6 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     6b6:	e7 e0       	ldi	r30, 0x07	; 7
     6b8:	f1 e0       	ldi	r31, 0x01	; 1
     6ba:	80 81       	ld	r24, Z
     6bc:	8f 60       	ori	r24, 0x0F	; 15
     6be:	80 83       	st	Z, r24
     6c0:	08 95       	ret

000006c2 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     6c2:	e8 e0       	ldi	r30, 0x08	; 8
     6c4:	f1 e0       	ldi	r31, 0x01	; 1
     6c6:	90 81       	ld	r25, Z
     6c8:	90 7f       	andi	r25, 0xF0	; 240
     6ca:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     6cc:	90 81       	ld	r25, Z
     6ce:	8f 70       	andi	r24, 0x0F	; 15
     6d0:	98 2b       	or	r25, r24
     6d2:	90 83       	st	Z, r25
     6d4:	08 95       	ret

000006d6 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     6d6:	e8 e0       	ldi	r30, 0x08	; 8
     6d8:	f1 e0       	ldi	r31, 0x01	; 1
     6da:	80 81       	ld	r24, Z
     6dc:	80 7f       	andi	r24, 0xF0	; 240
     6de:	80 83       	st	Z, r24
     6e0:	08 95       	ret

000006e2 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     6e8:	e6 e0       	ldi	r30, 0x06	; 6
     6ea:	f7 e0       	ldi	r31, 0x07	; 7
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <prvInsertBlockIntoFreeList+0xe>
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	31 81       	ldd	r19, Z+1	; 0x01
     6f4:	2a 17       	cp	r18, r26
     6f6:	3b 07       	cpc	r19, r27
     6f8:	d0 f3       	brcs	.-12     	; 0x6ee <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	af 01       	movw	r20, r30
     700:	48 0f       	add	r20, r24
     702:	59 1f       	adc	r21, r25
     704:	a4 17       	cp	r26, r20
     706:	b5 07       	cpc	r27, r21
     708:	49 f4       	brne	.+18     	; 0x71c <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     70a:	12 96       	adiw	r26, 0x02	; 2
     70c:	4d 91       	ld	r20, X+
     70e:	5c 91       	ld	r21, X
     710:	13 97       	sbiw	r26, 0x03	; 3
     712:	84 0f       	add	r24, r20
     714:	95 1f       	adc	r25, r21
     716:	93 83       	std	Z+3, r25	; 0x03
     718:	82 83       	std	Z+2, r24	; 0x02
     71a:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     71c:	12 96       	adiw	r26, 0x02	; 2
     71e:	8d 91       	ld	r24, X+
     720:	9c 91       	ld	r25, X
     722:	13 97       	sbiw	r26, 0x03	; 3
     724:	ed 01       	movw	r28, r26
     726:	c8 0f       	add	r28, r24
     728:	d9 1f       	adc	r29, r25
     72a:	2c 17       	cp	r18, r28
     72c:	3d 07       	cpc	r19, r29
     72e:	d9 f4       	brne	.+54     	; 0x766 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     730:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <pxEnd>
     734:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <pxEnd+0x1>
     738:	c2 17       	cp	r28, r18
     73a:	d3 07       	cpc	r29, r19
     73c:	81 f0       	breq	.+32     	; 0x75e <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     73e:	2a 81       	ldd	r18, Y+2	; 0x02
     740:	3b 81       	ldd	r19, Y+3	; 0x03
     742:	82 0f       	add	r24, r18
     744:	93 1f       	adc	r25, r19
     746:	13 96       	adiw	r26, 0x03	; 3
     748:	9c 93       	st	X, r25
     74a:	8e 93       	st	-X, r24
     74c:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     74e:	c0 81       	ld	r28, Z
     750:	d1 81       	ldd	r29, Z+1	; 0x01
     752:	88 81       	ld	r24, Y
     754:	99 81       	ldd	r25, Y+1	; 0x01
     756:	11 96       	adiw	r26, 0x01	; 1
     758:	9c 93       	st	X, r25
     75a:	8e 93       	st	-X, r24
     75c:	07 c0       	rjmp	.+14     	; 0x76c <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     75e:	11 96       	adiw	r26, 0x01	; 1
     760:	dc 93       	st	X, r29
     762:	ce 93       	st	-X, r28
     764:	03 c0       	rjmp	.+6      	; 0x76c <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	3c 93       	st	X, r19
     76a:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     76c:	ae 17       	cp	r26, r30
     76e:	bf 07       	cpc	r27, r31
     770:	11 f0       	breq	.+4      	; 0x776 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     772:	b1 83       	std	Z+1, r27	; 0x01
     774:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     78e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     792:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <pxEnd>
     796:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <pxEnd+0x1>
     79a:	89 2b       	or	r24, r25
     79c:	41 f5       	brne	.+80     	; 0x7ee <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     79e:	e6 e0       	ldi	r30, 0x06	; 6
     7a0:	f7 e0       	ldi	r31, 0x07	; 7
     7a2:	aa e0       	ldi	r26, 0x0A	; 10
     7a4:	b7 e0       	ldi	r27, 0x07	; 7
     7a6:	b1 83       	std	Z+1, r27	; 0x01
     7a8:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     7aa:	13 82       	std	Z+3, r1	; 0x03
     7ac:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     7ae:	e6 ea       	ldi	r30, 0xA6	; 166
     7b0:	f6 e1       	ldi	r31, 0x16	; 22
     7b2:	f0 93 05 07 	sts	0x0705, r31	; 0x800705 <pxEnd+0x1>
     7b6:	e0 93 04 07 	sts	0x0704, r30	; 0x800704 <pxEnd>
	pxEnd->xBlockSize = 0;
     7ba:	13 82       	std	Z+3, r1	; 0x03
     7bc:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     7be:	11 82       	std	Z+1, r1	; 0x01
     7c0:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     7c2:	8c e9       	ldi	r24, 0x9C	; 156
     7c4:	9f e0       	ldi	r25, 0x0F	; 15
     7c6:	13 96       	adiw	r26, 0x03	; 3
     7c8:	9c 93       	st	X, r25
     7ca:	8e 93       	st	-X, r24
     7cc:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     7ce:	ed 93       	st	X+, r30
     7d0:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7d2:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <xMinimumEverFreeBytesRemaining+0x1>
     7d6:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7da:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <xFreeBytesRemaining+0x1>
     7de:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e8       	ldi	r25, 0x80	; 128
     7e6:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <xBlockAllocatedBit+0x1>
     7ea:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7ee:	e0 90 fe 06 	lds	r14, 0x06FE	; 0x8006fe <xBlockAllocatedBit>
     7f2:	f0 90 ff 06 	lds	r15, 0x06FF	; 0x8006ff <xBlockAllocatedBit+0x1>
     7f6:	c7 01       	movw	r24, r14
     7f8:	8c 23       	and	r24, r28
     7fa:	9d 23       	and	r25, r29
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f0       	breq	.+2      	; 0x802 <pvPortMalloc+0x86>
     800:	66 c0       	rjmp	.+204    	; 0x8ce <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     802:	20 97       	sbiw	r28, 0x00	; 0
     804:	09 f4       	brne	.+2      	; 0x808 <pvPortMalloc+0x8c>
     806:	66 c0       	rjmp	.+204    	; 0x8d4 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     808:	ae 01       	movw	r20, r28
     80a:	4c 5f       	subi	r20, 0xFC	; 252
     80c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     80e:	09 f4       	brne	.+2      	; 0x812 <pvPortMalloc+0x96>
     810:	5e c0       	rjmp	.+188    	; 0x8ce <pvPortMalloc+0x152>
     812:	00 91 02 07 	lds	r16, 0x0702	; 0x800702 <xFreeBytesRemaining>
     816:	10 91 03 07 	lds	r17, 0x0703	; 0x800703 <xFreeBytesRemaining+0x1>
     81a:	04 17       	cp	r16, r20
     81c:	15 07       	cpc	r17, r21
     81e:	08 f4       	brcc	.+2      	; 0x822 <pvPortMalloc+0xa6>
     820:	56 c0       	rjmp	.+172    	; 0x8ce <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     822:	c0 91 06 07 	lds	r28, 0x0706	; 0x800706 <xStart>
     826:	d0 91 07 07 	lds	r29, 0x0707	; 0x800707 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     82a:	e6 e0       	ldi	r30, 0x06	; 6
     82c:	f7 e0       	ldi	r31, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     82e:	02 c0       	rjmp	.+4      	; 0x834 <pvPortMalloc+0xb8>
     830:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     832:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     834:	2a 81       	ldd	r18, Y+2	; 0x02
     836:	3b 81       	ldd	r19, Y+3	; 0x03
     838:	24 17       	cp	r18, r20
     83a:	35 07       	cpc	r19, r21
     83c:	28 f4       	brcc	.+10     	; 0x848 <pvPortMalloc+0xcc>
     83e:	28 81       	ld	r18, Y
     840:	39 81       	ldd	r19, Y+1	; 0x01
     842:	21 15       	cp	r18, r1
     844:	31 05       	cpc	r19, r1
     846:	a1 f7       	brne	.-24     	; 0x830 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     848:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <pxEnd>
     84c:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <pxEnd+0x1>
     850:	c8 17       	cp	r28, r24
     852:	d9 07       	cpc	r29, r25
     854:	e1 f1       	breq	.+120    	; 0x8ce <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     856:	c0 80       	ld	r12, Z
     858:	d1 80       	ldd	r13, Z+1	; 0x01
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	c8 0e       	add	r12, r24
     85e:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     860:	88 81       	ld	r24, Y
     862:	99 81       	ldd	r25, Y+1	; 0x01
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     868:	2a 81       	ldd	r18, Y+2	; 0x02
     86a:	3b 81       	ldd	r19, Y+3	; 0x03
     86c:	24 1b       	sub	r18, r20
     86e:	35 0b       	sbc	r19, r21
     870:	29 30       	cpi	r18, 0x09	; 9
     872:	31 05       	cpc	r19, r1
     874:	48 f0       	brcs	.+18     	; 0x888 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     876:	ce 01       	movw	r24, r28
     878:	84 0f       	add	r24, r20
     87a:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     87c:	fc 01       	movw	r30, r24
     87e:	33 83       	std	Z+3, r19	; 0x03
     880:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     882:	5b 83       	std	Y+3, r21	; 0x03
     884:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     886:	2d df       	rcall	.-422    	; 0x6e2 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	9b 81       	ldd	r25, Y+3	; 0x03
     88c:	08 1b       	sub	r16, r24
     88e:	19 0b       	sbc	r17, r25
     890:	10 93 03 07 	sts	0x0703, r17	; 0x800703 <xFreeBytesRemaining+0x1>
     894:	00 93 02 07 	sts	0x0702, r16	; 0x800702 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     898:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <xMinimumEverFreeBytesRemaining>
     89c:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <xMinimumEverFreeBytesRemaining+0x1>
     8a0:	02 17       	cp	r16, r18
     8a2:	13 07       	cpc	r17, r19
     8a4:	20 f4       	brcc	.+8      	; 0x8ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8a6:	10 93 01 07 	sts	0x0701, r17	; 0x800701 <xMinimumEverFreeBytesRemaining+0x1>
     8aa:	00 93 00 07 	sts	0x0700, r16	; 0x800700 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     8ae:	e8 2a       	or	r14, r24
     8b0:	f9 2a       	or	r15, r25
     8b2:	fb 82       	std	Y+3, r15	; 0x03
     8b4:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     8b6:	19 82       	std	Y+1, r1	; 0x01
     8b8:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8ba:	0e 94 65 0f 	call	0x1eca	; 0x1eca <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     8be:	c1 14       	cp	r12, r1
     8c0:	d1 04       	cpc	r13, r1
     8c2:	59 f4       	brne	.+22     	; 0x8da <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     8c4:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <vApplicationMallocFailedHook>
     8c8:	c1 2c       	mov	r12, r1
     8ca:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8ce:	0e 94 65 0f 	call	0x1eca	; 0x1eca <xTaskResumeAll>
     8d2:	f8 cf       	rjmp	.-16     	; 0x8c4 <pvPortMalloc+0x148>
     8d4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <xTaskResumeAll>
     8d8:	f5 cf       	rjmp	.-22     	; 0x8c4 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     8da:	c6 01       	movw	r24, r12
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	08 95       	ret

000008ee <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	51 f1       	breq	.+84     	; 0x94a <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     8f6:	fc 01       	movw	r30, r24
     8f8:	34 97       	sbiw	r30, 0x04	; 4
     8fa:	22 81       	ldd	r18, Z+2	; 0x02
     8fc:	33 81       	ldd	r19, Z+3	; 0x03
     8fe:	40 91 fe 06 	lds	r20, 0x06FE	; 0x8006fe <xBlockAllocatedBit>
     902:	50 91 ff 06 	lds	r21, 0x06FF	; 0x8006ff <xBlockAllocatedBit+0x1>
     906:	b9 01       	movw	r22, r18
     908:	64 23       	and	r22, r20
     90a:	75 23       	and	r23, r21
     90c:	67 2b       	or	r22, r23
     90e:	e9 f0       	breq	.+58     	; 0x94a <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     910:	60 81       	ld	r22, Z
     912:	71 81       	ldd	r23, Z+1	; 0x01
     914:	67 2b       	or	r22, r23
     916:	c9 f4       	brne	.+50     	; 0x94a <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     918:	ef 01       	movw	r28, r30
     91a:	40 95       	com	r20
     91c:	50 95       	com	r21
     91e:	24 23       	and	r18, r20
     920:	35 23       	and	r19, r21
     922:	33 83       	std	Z+3, r19	; 0x03
     924:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     926:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     92a:	20 91 02 07 	lds	r18, 0x0702	; 0x800702 <xFreeBytesRemaining>
     92e:	30 91 03 07 	lds	r19, 0x0703	; 0x800703 <xFreeBytesRemaining+0x1>
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	9b 81       	ldd	r25, Y+3	; 0x03
     936:	82 0f       	add	r24, r18
     938:	93 1f       	adc	r25, r19
     93a:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <xFreeBytesRemaining+0x1>
     93e:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     942:	ce 01       	movw	r24, r28
     944:	ce de       	rcall	.-612    	; 0x6e2 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     946:	0e 94 65 0f 	call	0x1eca	; 0x1eca <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     950:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     952:	03 96       	adiw	r24, 0x03	; 3
     954:	92 83       	std	Z+2, r25	; 0x02
     956:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     958:	4f ef       	ldi	r20, 0xFF	; 255
     95a:	5f ef       	ldi	r21, 0xFF	; 255
     95c:	ba 01       	movw	r22, r20
     95e:	43 83       	std	Z+3, r20	; 0x03
     960:	54 83       	std	Z+4, r21	; 0x04
     962:	65 83       	std	Z+5, r22	; 0x05
     964:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     966:	90 87       	std	Z+8, r25	; 0x08
     968:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     96a:	92 87       	std	Z+10, r25	; 0x0a
     96c:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     96e:	10 82       	st	Z, r1
     970:	08 95       	ret

00000972 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     972:	fc 01       	movw	r30, r24
     974:	13 86       	std	Z+11, r1	; 0x0b
     976:	12 86       	std	Z+10, r1	; 0x0a
     978:	08 95       	ret

0000097a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	9c 01       	movw	r18, r24
     980:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     982:	dc 01       	movw	r26, r24
     984:	11 96       	adiw	r26, 0x01	; 1
     986:	cd 91       	ld	r28, X+
     988:	dc 91       	ld	r29, X
     98a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     98c:	d5 83       	std	Z+5, r29	; 0x05
     98e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     990:	8e 81       	ldd	r24, Y+6	; 0x06
     992:	9f 81       	ldd	r25, Y+7	; 0x07
     994:	97 83       	std	Z+7, r25	; 0x07
     996:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     998:	8e 81       	ldd	r24, Y+6	; 0x06
     99a:	9f 81       	ldd	r25, Y+7	; 0x07
     99c:	dc 01       	movw	r26, r24
     99e:	15 96       	adiw	r26, 0x05	; 5
     9a0:	7c 93       	st	X, r23
     9a2:	6e 93       	st	-X, r22
     9a4:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     9a6:	7f 83       	std	Y+7, r23	; 0x07
     9a8:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     9aa:	33 87       	std	Z+11, r19	; 0x0b
     9ac:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     9ae:	f9 01       	movw	r30, r18
     9b0:	80 81       	ld	r24, Z
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	80 83       	st	Z, r24
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9c6:	08 81       	ld	r16, Y
     9c8:	19 81       	ldd	r17, Y+1	; 0x01
     9ca:	2a 81       	ldd	r18, Y+2	; 0x02
     9cc:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9ce:	0f 3f       	cpi	r16, 0xFF	; 255
     9d0:	4f ef       	ldi	r20, 0xFF	; 255
     9d2:	14 07       	cpc	r17, r20
     9d4:	24 07       	cpc	r18, r20
     9d6:	34 07       	cpc	r19, r20
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9da:	fc 01       	movw	r30, r24
     9dc:	a1 85       	ldd	r26, Z+9	; 0x09
     9de:	b2 85       	ldd	r27, Z+10	; 0x0a
     9e0:	11 c0       	rjmp	.+34     	; 0xa04 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9e2:	dc 01       	movw	r26, r24
     9e4:	13 96       	adiw	r26, 0x03	; 3
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <vListInsert+0x2e>
     9e8:	df 01       	movw	r26, r30
     9ea:	14 96       	adiw	r26, 0x04	; 4
     9ec:	ed 91       	ld	r30, X+
     9ee:	fc 91       	ld	r31, X
     9f0:	15 97       	sbiw	r26, 0x05	; 5
     9f2:	40 81       	ld	r20, Z
     9f4:	51 81       	ldd	r21, Z+1	; 0x01
     9f6:	62 81       	ldd	r22, Z+2	; 0x02
     9f8:	73 81       	ldd	r23, Z+3	; 0x03
     9fa:	04 17       	cp	r16, r20
     9fc:	15 07       	cpc	r17, r21
     9fe:	26 07       	cpc	r18, r22
     a00:	37 07       	cpc	r19, r23
     a02:	90 f7       	brcc	.-28     	; 0x9e8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a04:	14 96       	adiw	r26, 0x04	; 4
     a06:	ed 91       	ld	r30, X+
     a08:	fc 91       	ld	r31, X
     a0a:	15 97       	sbiw	r26, 0x05	; 5
     a0c:	fd 83       	std	Y+5, r31	; 0x05
     a0e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a10:	d7 83       	std	Z+7, r29	; 0x07
     a12:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a14:	bf 83       	std	Y+7, r27	; 0x07
     a16:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a18:	15 96       	adiw	r26, 0x05	; 5
     a1a:	dc 93       	st	X, r29
     a1c:	ce 93       	st	-X, r28
     a1e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     a20:	9b 87       	std	Y+11, r25	; 0x0b
     a22:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a24:	fc 01       	movw	r30, r24
     a26:	20 81       	ld	r18, Z
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	20 83       	st	Z, r18
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	08 95       	ret

00000a36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     a3c:	a2 85       	ldd	r26, Z+10	; 0x0a
     a3e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a40:	c4 81       	ldd	r28, Z+4	; 0x04
     a42:	d5 81       	ldd	r29, Z+5	; 0x05
     a44:	86 81       	ldd	r24, Z+6	; 0x06
     a46:	97 81       	ldd	r25, Z+7	; 0x07
     a48:	9f 83       	std	Y+7, r25	; 0x07
     a4a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a4c:	c6 81       	ldd	r28, Z+6	; 0x06
     a4e:	d7 81       	ldd	r29, Z+7	; 0x07
     a50:	84 81       	ldd	r24, Z+4	; 0x04
     a52:	95 81       	ldd	r25, Z+5	; 0x05
     a54:	9d 83       	std	Y+5, r25	; 0x05
     a56:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a58:	11 96       	adiw	r26, 0x01	; 1
     a5a:	8d 91       	ld	r24, X+
     a5c:	9c 91       	ld	r25, X
     a5e:	12 97       	sbiw	r26, 0x02	; 2
     a60:	e8 17       	cp	r30, r24
     a62:	f9 07       	cpc	r31, r25
     a64:	31 f4       	brne	.+12     	; 0xa72 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a66:	86 81       	ldd	r24, Z+6	; 0x06
     a68:	97 81       	ldd	r25, Z+7	; 0x07
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	9c 93       	st	X, r25
     a6e:	8e 93       	st	-X, r24
     a70:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a72:	13 86       	std	Z+11, r1	; 0x0b
     a74:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a76:	8c 91       	ld	r24, X
     a78:	81 50       	subi	r24, 0x01	; 1
     a7a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a7c:	8c 91       	ld	r24, X
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a84:	31 e1       	ldi	r19, 0x11	; 17
     a86:	fc 01       	movw	r30, r24
     a88:	30 83       	st	Z, r19
     a8a:	31 97       	sbiw	r30, 0x01	; 1
     a8c:	22 e2       	ldi	r18, 0x22	; 34
     a8e:	20 83       	st	Z, r18
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	a3 e3       	ldi	r26, 0x33	; 51
     a94:	a0 83       	st	Z, r26
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	60 83       	st	Z, r22
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	70 83       	st	Z, r23
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	10 82       	st	Z, r1
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	10 82       	st	Z, r1
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	60 e8       	ldi	r22, 0x80	; 128
     aaa:	60 83       	st	Z, r22
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	10 82       	st	Z, r1
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	10 82       	st	Z, r1
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	10 82       	st	Z, r1
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	62 e0       	ldi	r22, 0x02	; 2
     abc:	60 83       	st	Z, r22
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	63 e0       	ldi	r22, 0x03	; 3
     ac2:	60 83       	st	Z, r22
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	64 e0       	ldi	r22, 0x04	; 4
     ac8:	60 83       	st	Z, r22
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	65 e0       	ldi	r22, 0x05	; 5
     ace:	60 83       	st	Z, r22
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	66 e0       	ldi	r22, 0x06	; 6
     ad4:	60 83       	st	Z, r22
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	67 e0       	ldi	r22, 0x07	; 7
     ada:	60 83       	st	Z, r22
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	68 e0       	ldi	r22, 0x08	; 8
     ae0:	60 83       	st	Z, r22
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	69 e0       	ldi	r22, 0x09	; 9
     ae6:	60 83       	st	Z, r22
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	60 e1       	ldi	r22, 0x10	; 16
     aec:	60 83       	st	Z, r22
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	30 83       	st	Z, r19
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	32 e1       	ldi	r19, 0x12	; 18
     af6:	30 83       	st	Z, r19
     af8:	31 97       	sbiw	r30, 0x01	; 1
     afa:	33 e1       	ldi	r19, 0x13	; 19
     afc:	30 83       	st	Z, r19
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	34 e1       	ldi	r19, 0x14	; 20
     b02:	30 83       	st	Z, r19
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	35 e1       	ldi	r19, 0x15	; 21
     b08:	30 83       	st	Z, r19
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	36 e1       	ldi	r19, 0x16	; 22
     b0e:	30 83       	st	Z, r19
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	37 e1       	ldi	r19, 0x17	; 23
     b14:	30 83       	st	Z, r19
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	38 e1       	ldi	r19, 0x18	; 24
     b1a:	30 83       	st	Z, r19
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	39 e1       	ldi	r19, 0x19	; 25
     b20:	30 83       	st	Z, r19
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	30 e2       	ldi	r19, 0x20	; 32
     b26:	30 83       	st	Z, r19
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	31 e2       	ldi	r19, 0x21	; 33
     b2c:	30 83       	st	Z, r19
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	20 83       	st	Z, r18
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	23 e2       	ldi	r18, 0x23	; 35
     b36:	20 83       	st	Z, r18
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	40 83       	st	Z, r20
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	50 83       	st	Z, r21
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	26 e2       	ldi	r18, 0x26	; 38
     b44:	20 83       	st	Z, r18
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	27 e2       	ldi	r18, 0x27	; 39
     b4a:	20 83       	st	Z, r18
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	28 e2       	ldi	r18, 0x28	; 40
     b50:	20 83       	st	Z, r18
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	29 e2       	ldi	r18, 0x29	; 41
     b56:	20 83       	st	Z, r18
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	20 e3       	ldi	r18, 0x30	; 48
     b5c:	20 83       	st	Z, r18
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	21 e3       	ldi	r18, 0x31	; 49
     b62:	20 83       	st	Z, r18
     b64:	89 97       	sbiw	r24, 0x29	; 41
     b66:	08 95       	ret

00000b68 <xPortStartScheduler>:
     b68:	a8 95       	wdr
     b6a:	90 ec       	ldi	r25, 0xC0	; 192
     b6c:	88 e1       	ldi	r24, 0x18	; 24
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	a8 95       	wdr
     b74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b7e:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     b82:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     b86:	cd 91       	ld	r28, X+
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	dd 91       	ld	r29, X+
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	ff 91       	pop	r31
     b90:	ef 91       	pop	r30
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	bf 91       	pop	r27
     b98:	af 91       	pop	r26
     b9a:	9f 91       	pop	r25
     b9c:	8f 91       	pop	r24
     b9e:	7f 91       	pop	r23
     ba0:	6f 91       	pop	r22
     ba2:	5f 91       	pop	r21
     ba4:	4f 91       	pop	r20
     ba6:	3f 91       	pop	r19
     ba8:	2f 91       	pop	r18
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	bf 90       	pop	r11
     bb8:	af 90       	pop	r10
     bba:	9f 90       	pop	r9
     bbc:	8f 90       	pop	r8
     bbe:	7f 90       	pop	r7
     bc0:	6f 90       	pop	r6
     bc2:	5f 90       	pop	r5
     bc4:	4f 90       	pop	r4
     bc6:	3f 90       	pop	r3
     bc8:	2f 90       	pop	r2
     bca:	1f 90       	pop	r1
     bcc:	0f 90       	pop	r0
     bce:	0c be       	out	0x3c, r0	; 60
     bd0:	0f 90       	pop	r0
     bd2:	0b be       	out	0x3b, r0	; 59
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	0f 90       	pop	r0
     bda:	08 95       	ret
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	08 95       	ret

00000be0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	0f 92       	push	r0
     be8:	0b b6       	in	r0, 0x3b	; 59
     bea:	0f 92       	push	r0
     bec:	0c b6       	in	r0, 0x3c	; 60
     bee:	0f 92       	push	r0
     bf0:	1f 92       	push	r1
     bf2:	11 24       	eor	r1, r1
     bf4:	2f 92       	push	r2
     bf6:	3f 92       	push	r3
     bf8:	4f 92       	push	r4
     bfa:	5f 92       	push	r5
     bfc:	6f 92       	push	r6
     bfe:	7f 92       	push	r7
     c00:	8f 92       	push	r8
     c02:	9f 92       	push	r9
     c04:	af 92       	push	r10
     c06:	bf 92       	push	r11
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     c34:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     c38:	0d b6       	in	r0, 0x3d	; 61
     c3a:	0d 92       	st	X+, r0
     c3c:	0e b6       	in	r0, 0x3e	; 62
     c3e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c40:	0e 94 67 10 	call	0x20ce	; 0x20ce <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c44:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     c48:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     c4c:	cd 91       	ld	r28, X+
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	dd 91       	ld	r29, X+
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	bf 91       	pop	r27
     c5e:	af 91       	pop	r26
     c60:	9f 91       	pop	r25
     c62:	8f 91       	pop	r24
     c64:	7f 91       	pop	r23
     c66:	6f 91       	pop	r22
     c68:	5f 91       	pop	r21
     c6a:	4f 91       	pop	r20
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	9f 90       	pop	r9
     c82:	8f 90       	pop	r8
     c84:	7f 90       	pop	r7
     c86:	6f 90       	pop	r6
     c88:	5f 90       	pop	r5
     c8a:	4f 90       	pop	r4
     c8c:	3f 90       	pop	r3
     c8e:	2f 90       	pop	r2
     c90:	1f 90       	pop	r1
     c92:	0f 90       	pop	r0
     c94:	0c be       	out	0x3c, r0	; 60
     c96:	0f 90       	pop	r0
     c98:	0b be       	out	0x3b, r0	; 59
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ca0:	08 95       	ret

00000ca2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	0f 92       	push	r0
     caa:	0b b6       	in	r0, 0x3b	; 59
     cac:	0f 92       	push	r0
     cae:	0c b6       	in	r0, 0x3c	; 60
     cb0:	0f 92       	push	r0
     cb2:	1f 92       	push	r1
     cb4:	11 24       	eor	r1, r1
     cb6:	2f 92       	push	r2
     cb8:	3f 92       	push	r3
     cba:	4f 92       	push	r4
     cbc:	5f 92       	push	r5
     cbe:	6f 92       	push	r6
     cc0:	7f 92       	push	r7
     cc2:	8f 92       	push	r8
     cc4:	9f 92       	push	r9
     cc6:	af 92       	push	r10
     cc8:	bf 92       	push	r11
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	ef 93       	push	r30
     cf0:	ff 93       	push	r31
     cf2:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     cf6:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     cfa:	0d b6       	in	r0, 0x3d	; 61
     cfc:	0d 92       	st	X+, r0
     cfe:	0e b6       	in	r0, 0x3e	; 62
     d00:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     d02:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     d04:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xTaskIncrementTick>
     d08:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d0a:	0e 94 67 10 	call	0x20ce	; 0x20ce <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     d0e:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     d12:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     d16:	cd 91       	ld	r28, X+
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	dd 91       	ld	r29, X+
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	bf 90       	pop	r11
     d48:	af 90       	pop	r10
     d4a:	9f 90       	pop	r9
     d4c:	8f 90       	pop	r8
     d4e:	7f 90       	pop	r7
     d50:	6f 90       	pop	r6
     d52:	5f 90       	pop	r5
     d54:	4f 90       	pop	r4
     d56:	3f 90       	pop	r3
     d58:	2f 90       	pop	r2
     d5a:	1f 90       	pop	r1
     d5c:	0f 90       	pop	r0
     d5e:	0c be       	out	0x3c, r0	; 60
     d60:	0f 90       	pop	r0
     d62:	0b be       	out	0x3b, r0	; 59
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d6a:	08 95       	ret

00000d6c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d6c:	9a df       	rcall	.-204    	; 0xca2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d6e:	18 95       	reti

00000d70 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	0f 92       	push	r0
     d76:	fc 01       	movw	r30, r24
     d78:	96 8d       	ldd	r25, Z+30	; 0x1e
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	91 11       	cpse	r25, r1
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	08 95       	ret

00000d86 <prvCopyDataToQueue>:
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	04 2f       	mov	r16, r20
     d92:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d94:	48 a1       	ldd	r20, Y+32	; 0x20
     d96:	41 11       	cpse	r20, r1
     d98:	0c c0       	rjmp	.+24     	; 0xdb2 <prvCopyDataToQueue+0x2c>
     d9a:	88 81       	ld	r24, Y
     d9c:	99 81       	ldd	r25, Y+1	; 0x01
     d9e:	89 2b       	or	r24, r25
     da0:	09 f0       	breq	.+2      	; 0xda4 <prvCopyDataToQueue+0x1e>
     da2:	42 c0       	rjmp	.+132    	; 0xe28 <prvCopyDataToQueue+0xa2>
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	9d 81       	ldd	r25, Y+5	; 0x05
     da8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <xTaskPriorityDisinherit>
     dac:	1d 82       	std	Y+5, r1	; 0x05
     dae:	1c 82       	std	Y+4, r1	; 0x04
     db0:	42 c0       	rjmp	.+132    	; 0xe36 <prvCopyDataToQueue+0xb0>
     db2:	01 11       	cpse	r16, r1
     db4:	17 c0       	rjmp	.+46     	; 0xde4 <prvCopyDataToQueue+0x5e>
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	0e 94 b1 23 	call	0x4762	; 0x4762 <memcpy>
     dc0:	28 a1       	ldd	r18, Y+32	; 0x20
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	9b 81       	ldd	r25, Y+3	; 0x03
     dc6:	82 0f       	add	r24, r18
     dc8:	91 1d       	adc	r25, r1
     dca:	9b 83       	std	Y+3, r25	; 0x03
     dcc:	8a 83       	std	Y+2, r24	; 0x02
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	82 17       	cp	r24, r18
     dd4:	93 07       	cpc	r25, r19
     dd6:	50 f1       	brcs	.+84     	; 0xe2c <prvCopyDataToQueue+0xa6>
     dd8:	88 81       	ld	r24, Y
     dda:	99 81       	ldd	r25, Y+1	; 0x01
     ddc:	9b 83       	std	Y+3, r25	; 0x03
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	29 c0       	rjmp	.+82     	; 0xe36 <prvCopyDataToQueue+0xb0>
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	9f 81       	ldd	r25, Y+7	; 0x07
     dea:	0e 94 b1 23 	call	0x4762	; 0x4762 <memcpy>
     dee:	88 a1       	ldd	r24, Y+32	; 0x20
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	91 95       	neg	r25
     df4:	81 95       	neg	r24
     df6:	91 09       	sbc	r25, r1
     df8:	2e 81       	ldd	r18, Y+6	; 0x06
     dfa:	3f 81       	ldd	r19, Y+7	; 0x07
     dfc:	28 0f       	add	r18, r24
     dfe:	39 1f       	adc	r19, r25
     e00:	3f 83       	std	Y+7, r19	; 0x07
     e02:	2e 83       	std	Y+6, r18	; 0x06
     e04:	48 81       	ld	r20, Y
     e06:	59 81       	ldd	r21, Y+1	; 0x01
     e08:	24 17       	cp	r18, r20
     e0a:	35 07       	cpc	r19, r21
     e0c:	30 f4       	brcc	.+12     	; 0xe1a <prvCopyDataToQueue+0x94>
     e0e:	2c 81       	ldd	r18, Y+4	; 0x04
     e10:	3d 81       	ldd	r19, Y+5	; 0x05
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	9f 83       	std	Y+7, r25	; 0x07
     e18:	8e 83       	std	Y+6, r24	; 0x06
     e1a:	02 30       	cpi	r16, 0x02	; 2
     e1c:	49 f4       	brne	.+18     	; 0xe30 <prvCopyDataToQueue+0xaa>
     e1e:	11 23       	and	r17, r17
     e20:	49 f0       	breq	.+18     	; 0xe34 <prvCopyDataToQueue+0xae>
     e22:	11 50       	subi	r17, 0x01	; 1
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <prvCopyDataToQueue+0xb0>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <prvCopyDataToQueue+0xb0>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <prvCopyDataToQueue+0xb0>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <prvCopyDataToQueue+0xb0>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	1f 5f       	subi	r17, 0xFF	; 255
     e38:	1e 8f       	std	Y+30, r17	; 0x1e
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <prvCopyDataFromQueue>:
     e44:	fc 01       	movw	r30, r24
     e46:	40 a1       	ldd	r20, Z+32	; 0x20
     e48:	44 23       	and	r20, r20
     e4a:	a9 f0       	breq	.+42     	; 0xe76 <prvCopyDataFromQueue+0x32>
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	26 81       	ldd	r18, Z+6	; 0x06
     e50:	37 81       	ldd	r19, Z+7	; 0x07
     e52:	24 0f       	add	r18, r20
     e54:	35 1f       	adc	r19, r21
     e56:	37 83       	std	Z+7, r19	; 0x07
     e58:	26 83       	std	Z+6, r18	; 0x06
     e5a:	84 81       	ldd	r24, Z+4	; 0x04
     e5c:	95 81       	ldd	r25, Z+5	; 0x05
     e5e:	28 17       	cp	r18, r24
     e60:	39 07       	cpc	r19, r25
     e62:	20 f0       	brcs	.+8      	; 0xe6c <prvCopyDataFromQueue+0x28>
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	97 83       	std	Z+7, r25	; 0x07
     e6a:	86 83       	std	Z+6, r24	; 0x06
     e6c:	cb 01       	movw	r24, r22
     e6e:	66 81       	ldd	r22, Z+6	; 0x06
     e70:	77 81       	ldd	r23, Z+7	; 0x07
     e72:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <memcpy>
     e76:	08 95       	ret

00000e78 <prvUnlockQueue>:
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	8c 01       	movw	r16, r24
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	0f 92       	push	r0
     e8a:	fc 01       	movw	r30, r24
     e8c:	c2 a1       	ldd	r28, Z+34	; 0x22
     e8e:	1c 16       	cp	r1, r28
     e90:	ac f4       	brge	.+42     	; 0xebc <prvUnlockQueue+0x44>
     e92:	83 89       	ldd	r24, Z+19	; 0x13
     e94:	81 11       	cpse	r24, r1
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <prvUnlockQueue+0x2c>
     e98:	11 c0       	rjmp	.+34     	; 0xebc <prvUnlockQueue+0x44>
     e9a:	f8 01       	movw	r30, r16
     e9c:	83 89       	ldd	r24, Z+19	; 0x13
     e9e:	81 11       	cpse	r24, r1
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <prvUnlockQueue+0x34>
     ea2:	0c c0       	rjmp	.+24     	; 0xebc <prvUnlockQueue+0x44>
     ea4:	78 01       	movw	r14, r16
     ea6:	f3 e1       	ldi	r31, 0x13	; 19
     ea8:	ef 0e       	add	r14, r31
     eaa:	f1 1c       	adc	r15, r1
     eac:	c7 01       	movw	r24, r14
     eae:	0e 94 1d 11 	call	0x223a	; 0x223a <xTaskRemoveFromEventList>
     eb2:	81 11       	cpse	r24, r1
     eb4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <vTaskMissedYield>
     eb8:	c1 50       	subi	r28, 0x01	; 1
     eba:	79 f7       	brne	.-34     	; 0xe9a <prvUnlockQueue+0x22>
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	f8 01       	movw	r30, r16
     ec0:	82 a3       	std	Z+34, r24	; 0x22
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	0f 92       	push	r0
     ecc:	c1 a1       	ldd	r28, Z+33	; 0x21
     ece:	1c 16       	cp	r1, r28
     ed0:	ac f4       	brge	.+42     	; 0xefc <prvUnlockQueue+0x84>
     ed2:	80 85       	ldd	r24, Z+8	; 0x08
     ed4:	81 11       	cpse	r24, r1
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <prvUnlockQueue+0x6c>
     ed8:	11 c0       	rjmp	.+34     	; 0xefc <prvUnlockQueue+0x84>
     eda:	f8 01       	movw	r30, r16
     edc:	80 85       	ldd	r24, Z+8	; 0x08
     ede:	81 11       	cpse	r24, r1
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <prvUnlockQueue+0x74>
     ee2:	0c c0       	rjmp	.+24     	; 0xefc <prvUnlockQueue+0x84>
     ee4:	78 01       	movw	r14, r16
     ee6:	f8 e0       	ldi	r31, 0x08	; 8
     ee8:	ef 0e       	add	r14, r31
     eea:	f1 1c       	adc	r15, r1
     eec:	c7 01       	movw	r24, r14
     eee:	0e 94 1d 11 	call	0x223a	; 0x223a <xTaskRemoveFromEventList>
     ef2:	81 11       	cpse	r24, r1
     ef4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <vTaskMissedYield>
     ef8:	c1 50       	subi	r28, 0x01	; 1
     efa:	79 f7       	brne	.-34     	; 0xeda <prvUnlockQueue+0x62>
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	f8 01       	movw	r30, r16
     f00:	81 a3       	std	Z+33, r24	; 0x21
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	08 95       	ret

00000f12 <xQueueGenericReset>:
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	0f 92       	push	r0
     f1e:	e8 81       	ld	r30, Y
     f20:	f9 81       	ldd	r31, Y+1	; 0x01
     f22:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f24:	28 a1       	ldd	r18, Y+32	; 0x20
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	82 9f       	mul	r24, r18
     f2c:	a0 01       	movw	r20, r0
     f2e:	83 9f       	mul	r24, r19
     f30:	50 0d       	add	r21, r0
     f32:	92 9f       	mul	r25, r18
     f34:	50 0d       	add	r21, r0
     f36:	11 24       	eor	r1, r1
     f38:	4e 0f       	add	r20, r30
     f3a:	5f 1f       	adc	r21, r31
     f3c:	5d 83       	std	Y+5, r21	; 0x05
     f3e:	4c 83       	std	Y+4, r20	; 0x04
     f40:	1e 8e       	std	Y+30, r1	; 0x1e
     f42:	fb 83       	std	Y+3, r31	; 0x03
     f44:	ea 83       	std	Y+2, r30	; 0x02
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	82 9f       	mul	r24, r18
     f4a:	a0 01       	movw	r20, r0
     f4c:	83 9f       	mul	r24, r19
     f4e:	50 0d       	add	r21, r0
     f50:	92 9f       	mul	r25, r18
     f52:	50 0d       	add	r21, r0
     f54:	11 24       	eor	r1, r1
     f56:	cf 01       	movw	r24, r30
     f58:	84 0f       	add	r24, r20
     f5a:	95 1f       	adc	r25, r21
     f5c:	9f 83       	std	Y+7, r25	; 0x07
     f5e:	8e 83       	std	Y+6, r24	; 0x06
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	89 a3       	std	Y+33, r24	; 0x21
     f64:	8a a3       	std	Y+34, r24	; 0x22
     f66:	61 11       	cpse	r22, r1
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <xQueueGenericReset+0x6e>
     f6a:	88 85       	ldd	r24, Y+8	; 0x08
     f6c:	88 23       	and	r24, r24
     f6e:	71 f0       	breq	.+28     	; 0xf8c <xQueueGenericReset+0x7a>
     f70:	ce 01       	movw	r24, r28
     f72:	08 96       	adiw	r24, 0x08	; 8
     f74:	0e 94 1d 11 	call	0x223a	; 0x223a <xTaskRemoveFromEventList>
     f78:	88 23       	and	r24, r24
     f7a:	41 f0       	breq	.+16     	; 0xf8c <xQueueGenericReset+0x7a>
     f7c:	31 de       	rcall	.-926    	; 0xbe0 <vPortYield>
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <xQueueGenericReset+0x7a>
     f80:	ce 01       	movw	r24, r28
     f82:	08 96       	adiw	r24, 0x08	; 8
     f84:	e5 dc       	rcall	.-1590   	; 0x950 <vListInitialise>
     f86:	ce 01       	movw	r24, r28
     f88:	43 96       	adiw	r24, 0x13	; 19
     f8a:	e2 dc       	rcall	.-1596   	; 0x950 <vListInitialise>
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <xQueueGenericCreate>:
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	08 2f       	mov	r16, r24
     fa4:	16 2f       	mov	r17, r22
     fa6:	f4 2e       	mov	r15, r20
     fa8:	66 23       	and	r22, r22
     faa:	b9 f0       	breq	.+46     	; 0xfda <xQueueGenericCreate+0x42>
     fac:	86 9f       	mul	r24, r22
     fae:	c0 01       	movw	r24, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	85 96       	adiw	r24, 0x25	; 37
     fb4:	e3 db       	rcall	.-2106   	; 0x77c <pvPortMalloc>
     fb6:	ec 01       	movw	r28, r24
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	41 f4       	brne	.+16     	; 0xfcc <xQueueGenericCreate+0x34>
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <xQueueGenericCreate+0x4e>
     fbe:	0f 8f       	std	Y+31, r16	; 0x1f
     fc0:	18 a3       	std	Y+32, r17	; 0x20
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	ce 01       	movw	r24, r28
     fc6:	a5 df       	rcall	.-182    	; 0xf12 <xQueueGenericReset>
     fc8:	fc a2       	std	Y+36, r15	; 0x24
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <xQueueGenericCreate+0x4e>
     fcc:	85 96       	adiw	r24, 0x25	; 37
     fce:	99 83       	std	Y+1, r25	; 0x01
     fd0:	88 83       	st	Y, r24
     fd2:	f5 cf       	rjmp	.-22     	; 0xfbe <xQueueGenericCreate+0x26>
     fd4:	d9 83       	std	Y+1, r29	; 0x01
     fd6:	c8 83       	st	Y, r28
     fd8:	f2 cf       	rjmp	.-28     	; 0xfbe <xQueueGenericCreate+0x26>
     fda:	85 e2       	ldi	r24, 0x25	; 37
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	ce db       	rcall	.-2148   	; 0x77c <pvPortMalloc>
     fe0:	ec 01       	movw	r28, r24
     fe2:	89 2b       	or	r24, r25
     fe4:	b9 f7       	brne	.-18     	; 0xfd4 <xQueueGenericCreate+0x3c>
     fe6:	ce 01       	movw	r24, r28
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	08 95       	ret

00000ff4 <xQueueGenericSend>:
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	bf 92       	push	r11
     ffa:	cf 92       	push	r12
     ffc:	df 92       	push	r13
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	29 97       	sbiw	r28, 0x09	; 9
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	7c 01       	movw	r14, r24
    101c:	5b 01       	movw	r10, r22
    101e:	2e 83       	std	Y+6, r18	; 0x06
    1020:	3f 83       	std	Y+7, r19	; 0x07
    1022:	48 87       	std	Y+8, r20	; 0x08
    1024:	59 87       	std	Y+9, r21	; 0x09
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	99 24       	eor	r9, r9
    102a:	93 94       	inc	r9
    102c:	6c 01       	movw	r12, r24
    102e:	88 e0       	ldi	r24, 0x08	; 8
    1030:	c8 0e       	add	r12, r24
    1032:	d1 1c       	adc	r13, r1
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
    103a:	f7 01       	movw	r30, r14
    103c:	96 8d       	ldd	r25, Z+30	; 0x1e
    103e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1040:	98 17       	cp	r25, r24
    1042:	10 f0       	brcs	.+4      	; 0x1048 <xQueueGenericSend+0x54>
    1044:	02 30       	cpi	r16, 0x02	; 2
    1046:	b1 f4       	brne	.+44     	; 0x1074 <xQueueGenericSend+0x80>
    1048:	40 2f       	mov	r20, r16
    104a:	b5 01       	movw	r22, r10
    104c:	c7 01       	movw	r24, r14
    104e:	9b de       	rcall	.-714    	; 0xd86 <prvCopyDataToQueue>
    1050:	f7 01       	movw	r30, r14
    1052:	93 89       	ldd	r25, Z+19	; 0x13
    1054:	99 23       	and	r25, r25
    1056:	41 f0       	breq	.+16     	; 0x1068 <xQueueGenericSend+0x74>
    1058:	c7 01       	movw	r24, r14
    105a:	43 96       	adiw	r24, 0x13	; 19
    105c:	0e 94 1d 11 	call	0x223a	; 0x223a <xTaskRemoveFromEventList>
    1060:	88 23       	and	r24, r24
    1062:	21 f0       	breq	.+8      	; 0x106c <xQueueGenericSend+0x78>
    1064:	bd dd       	rcall	.-1158   	; 0xbe0 <vPortYield>
    1066:	02 c0       	rjmp	.+4      	; 0x106c <xQueueGenericSend+0x78>
    1068:	81 11       	cpse	r24, r1
    106a:	ba dd       	rcall	.-1164   	; 0xbe0 <vPortYield>
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	4e c0       	rjmp	.+156    	; 0x1110 <xQueueGenericSend+0x11c>
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	9f 81       	ldd	r25, Y+7	; 0x07
    1078:	a8 85       	ldd	r26, Y+8	; 0x08
    107a:	b9 85       	ldd	r27, Y+9	; 0x09
    107c:	89 2b       	or	r24, r25
    107e:	8a 2b       	or	r24, r26
    1080:	8b 2b       	or	r24, r27
    1082:	21 f4       	brne	.+8      	; 0x108c <xQueueGenericSend+0x98>
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	42 c0       	rjmp	.+132    	; 0x1110 <xQueueGenericSend+0x11c>
    108c:	11 11       	cpse	r17, r1
    108e:	05 c0       	rjmp	.+10     	; 0x109a <xQueueGenericSend+0xa6>
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	0e 94 75 11 	call	0x22ea	; 0x22ea <vTaskInternalSetTimeOutState>
    1098:	19 2d       	mov	r17, r9
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	2c d6       	rcall	.+3160   	; 0x1cf8 <vTaskSuspendAll>
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	0f 92       	push	r0
    10a6:	f7 01       	movw	r30, r14
    10a8:	81 a1       	ldd	r24, Z+33	; 0x21
    10aa:	8f 3f       	cpi	r24, 0xFF	; 255
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <xQueueGenericSend+0xbc>
    10ae:	11 a2       	std	Z+33, r1	; 0x21
    10b0:	f7 01       	movw	r30, r14
    10b2:	82 a1       	ldd	r24, Z+34	; 0x22
    10b4:	8f 3f       	cpi	r24, 0xFF	; 255
    10b6:	09 f4       	brne	.+2      	; 0x10ba <xQueueGenericSend+0xc6>
    10b8:	12 a2       	std	Z+34, r1	; 0x22
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	be 01       	movw	r22, r28
    10c0:	6a 5f       	subi	r22, 0xFA	; 250
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCheckForTimeOut>
    10cc:	81 11       	cpse	r24, r1
    10ce:	1c c0       	rjmp	.+56     	; 0x1108 <xQueueGenericSend+0x114>
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	0f 92       	push	r0
    10d6:	f7 01       	movw	r30, r14
    10d8:	96 8d       	ldd	r25, Z+30	; 0x1e
    10da:	87 8d       	ldd	r24, Z+31	; 0x1f
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	98 13       	cpse	r25, r24
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <xQueueGenericSend+0x10c>
    10e4:	4e 81       	ldd	r20, Y+6	; 0x06
    10e6:	5f 81       	ldd	r21, Y+7	; 0x07
    10e8:	68 85       	ldd	r22, Y+8	; 0x08
    10ea:	79 85       	ldd	r23, Y+9	; 0x09
    10ec:	c6 01       	movw	r24, r12
    10ee:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskPlaceOnEventList>
    10f2:	c7 01       	movw	r24, r14
    10f4:	c1 de       	rcall	.-638    	; 0xe78 <prvUnlockQueue>
    10f6:	e9 d6       	rcall	.+3538   	; 0x1eca <xTaskResumeAll>
    10f8:	81 11       	cpse	r24, r1
    10fa:	9c cf       	rjmp	.-200    	; 0x1034 <xQueueGenericSend+0x40>
    10fc:	71 dd       	rcall	.-1310   	; 0xbe0 <vPortYield>
    10fe:	9a cf       	rjmp	.-204    	; 0x1034 <xQueueGenericSend+0x40>
    1100:	c7 01       	movw	r24, r14
    1102:	ba de       	rcall	.-652    	; 0xe78 <prvUnlockQueue>
    1104:	e2 d6       	rcall	.+3524   	; 0x1eca <xTaskResumeAll>
    1106:	96 cf       	rjmp	.-212    	; 0x1034 <xQueueGenericSend+0x40>
    1108:	c7 01       	movw	r24, r14
    110a:	b6 de       	rcall	.-660    	; 0xe78 <prvUnlockQueue>
    110c:	de d6       	rcall	.+3516   	; 0x1eca <xTaskResumeAll>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	29 96       	adiw	r28, 0x09	; 9
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	9f 90       	pop	r9
    1132:	08 95       	ret

00001134 <xQueueCreateMutex>:
    1134:	0f 93       	push	r16
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	48 2f       	mov	r20, r24
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	2b df       	rcall	.-426    	; 0xf98 <xQueueGenericCreate>
    1142:	ec 01       	movw	r28, r24
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	61 f0       	breq	.+24     	; 0x1160 <xQueueCreateMutex+0x2c>
    1148:	1d 82       	std	Y+5, r1	; 0x05
    114a:	1c 82       	std	Y+4, r1	; 0x04
    114c:	19 82       	std	Y+1, r1	; 0x01
    114e:	18 82       	st	Y, r1
    1150:	1e 82       	std	Y+6, r1	; 0x06
    1152:	00 e0       	ldi	r16, 0x00	; 0
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	4a df       	rcall	.-364    	; 0xff4 <xQueueGenericSend>
    1160:	ce 01       	movw	r24, r28
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <xQueueGenericSendFromISR>:
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	8a 01       	movw	r16, r20
    1178:	fc 01       	movw	r30, r24
    117a:	56 8d       	ldd	r21, Z+30	; 0x1e
    117c:	37 8d       	ldd	r19, Z+31	; 0x1f
    117e:	53 17       	cp	r21, r19
    1180:	10 f0       	brcs	.+4      	; 0x1186 <xQueueGenericSendFromISR+0x1c>
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	e9 f4       	brne	.+58     	; 0x11c0 <xQueueGenericSendFromISR+0x56>
    1186:	42 2f       	mov	r20, r18
    1188:	78 01       	movw	r14, r16
    118a:	ec 01       	movw	r28, r24
    118c:	1a a1       	ldd	r17, Y+34	; 0x22
    118e:	fb dd       	rcall	.-1034   	; 0xd86 <prvCopyDataToQueue>
    1190:	1f 3f       	cpi	r17, 0xFF	; 255
    1192:	81 f4       	brne	.+32     	; 0x11b4 <xQueueGenericSendFromISR+0x4a>
    1194:	8b 89       	ldd	r24, Y+19	; 0x13
    1196:	88 23       	and	r24, r24
    1198:	a9 f0       	breq	.+42     	; 0x11c4 <xQueueGenericSendFromISR+0x5a>
    119a:	ce 01       	movw	r24, r28
    119c:	43 96       	adiw	r24, 0x13	; 19
    119e:	0e 94 1d 11 	call	0x223a	; 0x223a <xTaskRemoveFromEventList>
    11a2:	88 23       	and	r24, r24
    11a4:	89 f0       	breq	.+34     	; 0x11c8 <xQueueGenericSendFromISR+0x5e>
    11a6:	e1 14       	cp	r14, r1
    11a8:	f1 04       	cpc	r15, r1
    11aa:	81 f0       	breq	.+32     	; 0x11cc <xQueueGenericSendFromISR+0x62>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	f7 01       	movw	r30, r14
    11b0:	80 83       	st	Z, r24
    11b2:	0d c0       	rjmp	.+26     	; 0x11ce <xQueueGenericSendFromISR+0x64>
    11b4:	ff 24       	eor	r15, r15
    11b6:	f3 94       	inc	r15
    11b8:	f1 0e       	add	r15, r17
    11ba:	fa a2       	std	Y+34, r15	; 0x22
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <xQueueGenericSendFromISR+0x64>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <xQueueGenericSendFromISR+0x64>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <xQueueGenericSendFromISR+0x64>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <xQueueGenericSendFromISR+0x64>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	08 95       	ret

000011dc <xQueueReceive>:
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	29 97       	sbiw	r28, 0x09	; 9
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	8c 01       	movw	r16, r24
    1204:	5b 01       	movw	r10, r22
    1206:	2e 83       	std	Y+6, r18	; 0x06
    1208:	3f 83       	std	Y+7, r19	; 0x07
    120a:	48 87       	std	Y+8, r20	; 0x08
    120c:	59 87       	std	Y+9, r21	; 0x09
    120e:	e1 2c       	mov	r14, r1
    1210:	99 24       	eor	r9, r9
    1212:	93 94       	inc	r9
    1214:	6c 01       	movw	r12, r24
    1216:	83 e1       	ldi	r24, 0x13	; 19
    1218:	c8 0e       	add	r12, r24
    121a:	d1 1c       	adc	r13, r1
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	0f 92       	push	r0
    1222:	f8 01       	movw	r30, r16
    1224:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1226:	ff 20       	and	r15, r15
    1228:	91 f0       	breq	.+36     	; 0x124e <xQueueReceive+0x72>
    122a:	b5 01       	movw	r22, r10
    122c:	c8 01       	movw	r24, r16
    122e:	0a de       	rcall	.-1004   	; 0xe44 <prvCopyDataFromQueue>
    1230:	fa 94       	dec	r15
    1232:	f8 01       	movw	r30, r16
    1234:	f6 8e       	std	Z+30, r15	; 0x1e
    1236:	80 85       	ldd	r24, Z+8	; 0x08
    1238:	88 23       	and	r24, r24
    123a:	29 f0       	breq	.+10     	; 0x1246 <xQueueReceive+0x6a>
    123c:	c8 01       	movw	r24, r16
    123e:	08 96       	adiw	r24, 0x08	; 8
    1240:	fc d7       	rcall	.+4088   	; 0x223a <xTaskRemoveFromEventList>
    1242:	81 11       	cpse	r24, r1
    1244:	cd dc       	rcall	.-1638   	; 0xbe0 <vPortYield>
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	4c c0       	rjmp	.+152    	; 0x12e6 <xQueueReceive+0x10a>
    124e:	8e 81       	ldd	r24, Y+6	; 0x06
    1250:	9f 81       	ldd	r25, Y+7	; 0x07
    1252:	a8 85       	ldd	r26, Y+8	; 0x08
    1254:	b9 85       	ldd	r27, Y+9	; 0x09
    1256:	89 2b       	or	r24, r25
    1258:	8a 2b       	or	r24, r26
    125a:	8b 2b       	or	r24, r27
    125c:	21 f4       	brne	.+8      	; 0x1266 <xQueueReceive+0x8a>
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	40 c0       	rjmp	.+128    	; 0x12e6 <xQueueReceive+0x10a>
    1266:	e1 10       	cpse	r14, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <xQueueReceive+0x98>
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 75 11 	call	0x22ea	; 0x22ea <vTaskInternalSetTimeOutState>
    1272:	e9 2c       	mov	r14, r9
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	3f d5       	rcall	.+2686   	; 0x1cf8 <vTaskSuspendAll>
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	0f 92       	push	r0
    1280:	f8 01       	movw	r30, r16
    1282:	81 a1       	ldd	r24, Z+33	; 0x21
    1284:	8f 3f       	cpi	r24, 0xFF	; 255
    1286:	09 f4       	brne	.+2      	; 0x128a <xQueueReceive+0xae>
    1288:	11 a2       	std	Z+33, r1	; 0x21
    128a:	f8 01       	movw	r30, r16
    128c:	82 a1       	ldd	r24, Z+34	; 0x22
    128e:	8f 3f       	cpi	r24, 0xFF	; 255
    1290:	09 f4       	brne	.+2      	; 0x1294 <xQueueReceive+0xb8>
    1292:	12 a2       	std	Z+34, r1	; 0x22
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	be 01       	movw	r22, r28
    129a:	6a 5f       	subi	r22, 0xFA	; 250
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	ce 01       	movw	r24, r28
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCheckForTimeOut>
    12a6:	81 11       	cpse	r24, r1
    12a8:	15 c0       	rjmp	.+42     	; 0x12d4 <xQueueReceive+0xf8>
    12aa:	c8 01       	movw	r24, r16
    12ac:	61 dd       	rcall	.-1342   	; 0xd70 <prvIsQueueEmpty>
    12ae:	88 23       	and	r24, r24
    12b0:	69 f0       	breq	.+26     	; 0x12cc <xQueueReceive+0xf0>
    12b2:	4e 81       	ldd	r20, Y+6	; 0x06
    12b4:	5f 81       	ldd	r21, Y+7	; 0x07
    12b6:	68 85       	ldd	r22, Y+8	; 0x08
    12b8:	79 85       	ldd	r23, Y+9	; 0x09
    12ba:	c6 01       	movw	r24, r12
    12bc:	87 d7       	rcall	.+3854   	; 0x21cc <vTaskPlaceOnEventList>
    12be:	c8 01       	movw	r24, r16
    12c0:	db dd       	rcall	.-1098   	; 0xe78 <prvUnlockQueue>
    12c2:	03 d6       	rcall	.+3078   	; 0x1eca <xTaskResumeAll>
    12c4:	81 11       	cpse	r24, r1
    12c6:	aa cf       	rjmp	.-172    	; 0x121c <xQueueReceive+0x40>
    12c8:	8b dc       	rcall	.-1770   	; 0xbe0 <vPortYield>
    12ca:	a8 cf       	rjmp	.-176    	; 0x121c <xQueueReceive+0x40>
    12cc:	c8 01       	movw	r24, r16
    12ce:	d4 dd       	rcall	.-1112   	; 0xe78 <prvUnlockQueue>
    12d0:	fc d5       	rcall	.+3064   	; 0x1eca <xTaskResumeAll>
    12d2:	a4 cf       	rjmp	.-184    	; 0x121c <xQueueReceive+0x40>
    12d4:	c8 01       	movw	r24, r16
    12d6:	d0 dd       	rcall	.-1120   	; 0xe78 <prvUnlockQueue>
    12d8:	f8 d5       	rcall	.+3056   	; 0x1eca <xTaskResumeAll>
    12da:	c8 01       	movw	r24, r16
    12dc:	49 dd       	rcall	.-1390   	; 0xd70 <prvIsQueueEmpty>
    12de:	88 23       	and	r24, r24
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <xQueueReceive+0x108>
    12e2:	9c cf       	rjmp	.-200    	; 0x121c <xQueueReceive+0x40>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	29 96       	adiw	r28, 0x09	; 9
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	08 95       	ret

0000130a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	0f 92       	push	r0
    1316:	89 a1       	ldd	r24, Y+33	; 0x21
    1318:	8f 3f       	cpi	r24, 0xFF	; 255
    131a:	09 f4       	brne	.+2      	; 0x131e <vQueueWaitForMessageRestricted+0x14>
    131c:	19 a2       	std	Y+33, r1	; 0x21
    131e:	8a a1       	ldd	r24, Y+34	; 0x22
    1320:	8f 3f       	cpi	r24, 0xFF	; 255
    1322:	09 f4       	brne	.+2      	; 0x1326 <vQueueWaitForMessageRestricted+0x1c>
    1324:	1a a2       	std	Y+34, r1	; 0x22
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132c:	81 11       	cpse	r24, r1
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1330:	ce 01       	movw	r24, r28
    1332:	43 96       	adiw	r24, 0x13	; 19
    1334:	62 d7       	rcall	.+3780   	; 0x21fa <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1336:	ce 01       	movw	r24, r28
    1338:	9f dd       	rcall	.-1218   	; 0xe78 <prvUnlockQueue>
    }
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1340:	fc 01       	movw	r30, r24
    1342:	44 81       	ldd	r20, Z+4	; 0x04
    1344:	55 81       	ldd	r21, Z+5	; 0x05
    1346:	22 81       	ldd	r18, Z+2	; 0x02
    1348:	33 81       	ldd	r19, Z+3	; 0x03
    134a:	24 0f       	add	r18, r20
    134c:	35 1f       	adc	r19, r21
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	b9 01       	movw	r22, r18
    1354:	68 1b       	sub	r22, r24
    1356:	79 0b       	sbc	r23, r25
    1358:	cb 01       	movw	r24, r22
    135a:	64 17       	cp	r22, r20
    135c:	75 07       	cpc	r23, r21
    135e:	10 f0       	brcs	.+4      	; 0x1364 <prvBytesInBuffer+0x24>
    1360:	84 1b       	sub	r24, r20
    1362:	95 0b       	sbc	r25, r21
    1364:	08 95       	ret

00001366 <prvWriteBytesToBuffer>:
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	6c 01       	movw	r12, r24
    137c:	5b 01       	movw	r10, r22
    137e:	7a 01       	movw	r14, r20
    1380:	fc 01       	movw	r30, r24
    1382:	c2 81       	ldd	r28, Z+2	; 0x02
    1384:	d3 81       	ldd	r29, Z+3	; 0x03
    1386:	04 81       	ldd	r16, Z+4	; 0x04
    1388:	15 81       	ldd	r17, Z+5	; 0x05
    138a:	0c 1b       	sub	r16, r28
    138c:	1d 0b       	sbc	r17, r29
    138e:	40 17       	cp	r20, r16
    1390:	51 07       	cpc	r21, r17
    1392:	08 f4       	brcc	.+2      	; 0x1396 <prvWriteBytesToBuffer+0x30>
    1394:	8a 01       	movw	r16, r20
    1396:	f6 01       	movw	r30, r12
    1398:	84 85       	ldd	r24, Z+12	; 0x0c
    139a:	95 85       	ldd	r25, Z+13	; 0x0d
    139c:	a8 01       	movw	r20, r16
    139e:	b5 01       	movw	r22, r10
    13a0:	8c 0f       	add	r24, r28
    13a2:	9d 1f       	adc	r25, r29
    13a4:	0e 94 b1 23 	call	0x4762	; 0x4762 <memcpy>
    13a8:	0e 15       	cp	r16, r14
    13aa:	1f 05       	cpc	r17, r15
    13ac:	58 f4       	brcc	.+22     	; 0x13c4 <prvWriteBytesToBuffer+0x5e>
    13ae:	a7 01       	movw	r20, r14
    13b0:	40 1b       	sub	r20, r16
    13b2:	51 0b       	sbc	r21, r17
    13b4:	b5 01       	movw	r22, r10
    13b6:	60 0f       	add	r22, r16
    13b8:	71 1f       	adc	r23, r17
    13ba:	f6 01       	movw	r30, r12
    13bc:	84 85       	ldd	r24, Z+12	; 0x0c
    13be:	95 85       	ldd	r25, Z+13	; 0x0d
    13c0:	0e 94 b1 23 	call	0x4762	; 0x4762 <memcpy>
    13c4:	ce 01       	movw	r24, r28
    13c6:	8e 0d       	add	r24, r14
    13c8:	9f 1d       	adc	r25, r15
    13ca:	f6 01       	movw	r30, r12
    13cc:	24 81       	ldd	r18, Z+4	; 0x04
    13ce:	35 81       	ldd	r19, Z+5	; 0x05
    13d0:	82 17       	cp	r24, r18
    13d2:	93 07       	cpc	r25, r19
    13d4:	10 f0       	brcs	.+4      	; 0x13da <prvWriteBytesToBuffer+0x74>
    13d6:	82 1b       	sub	r24, r18
    13d8:	93 0b       	sbc	r25, r19
    13da:	f6 01       	movw	r30, r12
    13dc:	93 83       	std	Z+3, r25	; 0x03
    13de:	82 83       	std	Z+2, r24	; 0x02
    13e0:	c7 01       	movw	r24, r14
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	af 90       	pop	r10
    13f6:	08 95       	ret

000013f8 <prvWriteMessageToBuffer>:
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	1f 92       	push	r1
    140a:	1f 92       	push	r1
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	5a 83       	std	Y+2, r21	; 0x02
    1412:	49 83       	std	Y+1, r20	; 0x01
    1414:	21 15       	cp	r18, r1
    1416:	31 05       	cpc	r19, r1
    1418:	c9 f0       	breq	.+50     	; 0x144c <prvWriteMessageToBuffer+0x54>
    141a:	6b 01       	movw	r12, r22
    141c:	7c 01       	movw	r14, r24
    141e:	fc 01       	movw	r30, r24
    1420:	86 85       	ldd	r24, Z+14	; 0x0e
    1422:	80 fd       	sbrc	r24, 0
    1424:	08 c0       	rjmp	.+16     	; 0x1436 <prvWriteMessageToBuffer+0x3e>
    1426:	ca 01       	movw	r24, r20
    1428:	24 17       	cp	r18, r20
    142a:	35 07       	cpc	r19, r21
    142c:	08 f4       	brcc	.+2      	; 0x1430 <prvWriteMessageToBuffer+0x38>
    142e:	c9 01       	movw	r24, r18
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	11 c0       	rjmp	.+34     	; 0x1458 <prvWriteMessageToBuffer+0x60>
    1436:	20 17       	cp	r18, r16
    1438:	31 07       	cpc	r19, r17
    143a:	58 f0       	brcs	.+22     	; 0x1452 <prvWriteMessageToBuffer+0x5a>
    143c:	42 e0       	ldi	r20, 0x02	; 2
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	be 01       	movw	r22, r28
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	c7 01       	movw	r24, r14
    1448:	8e df       	rcall	.-228    	; 0x1366 <prvWriteBytesToBuffer>
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <prvWriteMessageToBuffer+0x60>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	08 c0       	rjmp	.+16     	; 0x1462 <prvWriteMessageToBuffer+0x6a>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <prvWriteMessageToBuffer+0x6a>
    1458:	49 81       	ldd	r20, Y+1	; 0x01
    145a:	5a 81       	ldd	r21, Y+2	; 0x02
    145c:	b6 01       	movw	r22, r12
    145e:	c7 01       	movw	r24, r14
    1460:	82 df       	rcall	.-252    	; 0x1366 <prvWriteBytesToBuffer>
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	08 95       	ret

00001478 <prvReadBytesFromBuffer>:
    1478:	af 92       	push	r10
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	7c 01       	movw	r14, r24
    148e:	5b 01       	movw	r10, r22
    1490:	e9 01       	movw	r28, r18
    1492:	42 17       	cp	r20, r18
    1494:	53 07       	cpc	r21, r19
    1496:	08 f4       	brcc	.+2      	; 0x149a <prvReadBytesFromBuffer+0x22>
    1498:	ea 01       	movw	r28, r20
    149a:	20 97       	sbiw	r28, 0x00	; 0
    149c:	79 f1       	breq	.+94     	; 0x14fc <prvReadBytesFromBuffer+0x84>
    149e:	f7 01       	movw	r30, r14
    14a0:	00 81       	ld	r16, Z
    14a2:	11 81       	ldd	r17, Z+1	; 0x01
    14a4:	c4 80       	ldd	r12, Z+4	; 0x04
    14a6:	d5 80       	ldd	r13, Z+5	; 0x05
    14a8:	c0 1a       	sub	r12, r16
    14aa:	d1 0a       	sbc	r13, r17
    14ac:	cc 15       	cp	r28, r12
    14ae:	dd 05       	cpc	r29, r13
    14b0:	08 f4       	brcc	.+2      	; 0x14b4 <prvReadBytesFromBuffer+0x3c>
    14b2:	6e 01       	movw	r12, r28
    14b4:	f7 01       	movw	r30, r14
    14b6:	64 85       	ldd	r22, Z+12	; 0x0c
    14b8:	75 85       	ldd	r23, Z+13	; 0x0d
    14ba:	60 0f       	add	r22, r16
    14bc:	71 1f       	adc	r23, r17
    14be:	a6 01       	movw	r20, r12
    14c0:	c5 01       	movw	r24, r10
    14c2:	0e 94 b1 23 	call	0x4762	; 0x4762 <memcpy>
    14c6:	cc 16       	cp	r12, r28
    14c8:	dd 06       	cpc	r13, r29
    14ca:	58 f4       	brcc	.+22     	; 0x14e2 <prvReadBytesFromBuffer+0x6a>
    14cc:	ae 01       	movw	r20, r28
    14ce:	4c 19       	sub	r20, r12
    14d0:	5d 09       	sbc	r21, r13
    14d2:	f7 01       	movw	r30, r14
    14d4:	64 85       	ldd	r22, Z+12	; 0x0c
    14d6:	75 85       	ldd	r23, Z+13	; 0x0d
    14d8:	c5 01       	movw	r24, r10
    14da:	8c 0d       	add	r24, r12
    14dc:	9d 1d       	adc	r25, r13
    14de:	0e 94 b1 23 	call	0x4762	; 0x4762 <memcpy>
    14e2:	0c 0f       	add	r16, r28
    14e4:	1d 1f       	adc	r17, r29
    14e6:	f7 01       	movw	r30, r14
    14e8:	84 81       	ldd	r24, Z+4	; 0x04
    14ea:	95 81       	ldd	r25, Z+5	; 0x05
    14ec:	08 17       	cp	r16, r24
    14ee:	19 07       	cpc	r17, r25
    14f0:	10 f0       	brcs	.+4      	; 0x14f6 <prvReadBytesFromBuffer+0x7e>
    14f2:	08 1b       	sub	r16, r24
    14f4:	19 0b       	sbc	r17, r25
    14f6:	f7 01       	movw	r30, r14
    14f8:	11 83       	std	Z+1, r17	; 0x01
    14fa:	00 83       	st	Z, r16
    14fc:	ce 01       	movw	r24, r28
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	df 90       	pop	r13
    150c:	cf 90       	pop	r12
    150e:	bf 90       	pop	r11
    1510:	af 90       	pop	r10
    1512:	08 95       	ret

00001514 <xStreamBufferGenericCreate>:
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	eb 01       	movw	r28, r22
    1520:	11 e0       	ldi	r17, 0x01	; 1
    1522:	41 30       	cpi	r20, 0x01	; 1
    1524:	09 f0       	breq	.+2      	; 0x1528 <xStreamBufferGenericCreate+0x14>
    1526:	10 e0       	ldi	r17, 0x00	; 0
    1528:	20 97       	sbiw	r28, 0x00	; 0
    152a:	11 f4       	brne	.+4      	; 0x1530 <xStreamBufferGenericCreate+0x1c>
    152c:	c1 e0       	ldi	r28, 0x01	; 1
    152e:	d0 e0       	ldi	r29, 0x00	; 0
    1530:	7c 01       	movw	r14, r24
    1532:	2f ef       	ldi	r18, 0xFF	; 255
    1534:	e2 1a       	sub	r14, r18
    1536:	f2 0a       	sbc	r15, r18
    1538:	41 96       	adiw	r24, 0x11	; 17
    153a:	20 d9       	rcall	.-3520   	; 0x77c <pvPortMalloc>
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	81 f0       	breq	.+32     	; 0x1560 <xStreamBufferGenericCreate+0x4c>
    1540:	20 e1       	ldi	r18, 0x10	; 16
    1542:	fc 01       	movw	r30, r24
    1544:	11 92       	st	Z+, r1
    1546:	2a 95       	dec	r18
    1548:	e9 f7       	brne	.-6      	; 0x1544 <xStreamBufferGenericCreate+0x30>
    154a:	9c 01       	movw	r18, r24
    154c:	20 5f       	subi	r18, 0xF0	; 240
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	fc 01       	movw	r30, r24
    1552:	35 87       	std	Z+13, r19	; 0x0d
    1554:	24 87       	std	Z+12, r18	; 0x0c
    1556:	f5 82       	std	Z+5, r15	; 0x05
    1558:	e4 82       	std	Z+4, r14	; 0x04
    155a:	d7 83       	std	Z+7, r29	; 0x07
    155c:	c6 83       	std	Z+6, r28	; 0x06
    155e:	16 87       	std	Z+14, r17	; 0x0e
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	08 95       	ret

0000156c <xStreamBufferReset>:
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	fc 01       	movw	r30, r24
    1572:	27 85       	ldd	r18, Z+15	; 0x0f
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	0f 92       	push	r0
    157a:	80 85       	ldd	r24, Z+8	; 0x08
    157c:	91 85       	ldd	r25, Z+9	; 0x09
    157e:	89 2b       	or	r24, r25
    1580:	d1 f4       	brne	.+52     	; 0x15b6 <xStreamBufferReset+0x4a>
    1582:	82 85       	ldd	r24, Z+10	; 0x0a
    1584:	93 85       	ldd	r25, Z+11	; 0x0b
    1586:	89 2b       	or	r24, r25
    1588:	c1 f4       	brne	.+48     	; 0x15ba <xStreamBufferReset+0x4e>
    158a:	86 85       	ldd	r24, Z+14	; 0x0e
    158c:	46 81       	ldd	r20, Z+6	; 0x06
    158e:	57 81       	ldd	r21, Z+7	; 0x07
    1590:	64 81       	ldd	r22, Z+4	; 0x04
    1592:	75 81       	ldd	r23, Z+5	; 0x05
    1594:	a4 85       	ldd	r26, Z+12	; 0x0c
    1596:	b5 85       	ldd	r27, Z+13	; 0x0d
    1598:	90 e1       	ldi	r25, 0x10	; 16
    159a:	ef 01       	movw	r28, r30
    159c:	19 92       	st	Y+, r1
    159e:	9a 95       	dec	r25
    15a0:	e9 f7       	brne	.-6      	; 0x159c <xStreamBufferReset+0x30>
    15a2:	b5 87       	std	Z+13, r27	; 0x0d
    15a4:	a4 87       	std	Z+12, r26	; 0x0c
    15a6:	75 83       	std	Z+5, r23	; 0x05
    15a8:	64 83       	std	Z+4, r22	; 0x04
    15aa:	57 83       	std	Z+7, r21	; 0x07
    15ac:	46 83       	std	Z+6, r20	; 0x06
    15ae:	86 87       	std	Z+14, r24	; 0x0e
    15b0:	27 87       	std	Z+15, r18	; 0x0f
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <xStreamBufferReset+0x50>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <xStreamBufferReset+0x50>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <xStreamBufferSpacesAvailable>:
    15c6:	fc 01       	movw	r30, r24
    15c8:	24 81       	ldd	r18, Z+4	; 0x04
    15ca:	35 81       	ldd	r19, Z+5	; 0x05
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	42 81       	ldd	r20, Z+2	; 0x02
    15d2:	53 81       	ldd	r21, Z+3	; 0x03
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	84 1b       	sub	r24, r20
    15dc:	95 0b       	sbc	r25, r21
    15de:	82 17       	cp	r24, r18
    15e0:	93 07       	cpc	r25, r19
    15e2:	10 f0       	brcs	.+4      	; 0x15e8 <xStreamBufferSpacesAvailable+0x22>
    15e4:	82 1b       	sub	r24, r18
    15e6:	93 0b       	sbc	r25, r19
    15e8:	08 95       	ret

000015ea <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    15ea:	2f 92       	push	r2
    15ec:	3f 92       	push	r3
    15ee:	4f 92       	push	r4
    15f0:	5f 92       	push	r5
    15f2:	6f 92       	push	r6
    15f4:	7f 92       	push	r7
    15f6:	8f 92       	push	r8
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	29 97       	sbiw	r28, 0x09	; 9
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	5c 01       	movw	r10, r24
    1620:	1b 01       	movw	r2, r22
    1622:	2a 01       	movw	r4, r20
    1624:	0e 83       	std	Y+6, r16	; 0x06
    1626:	1f 83       	std	Y+7, r17	; 0x07
    1628:	28 87       	std	Y+8, r18	; 0x08
    162a:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    162c:	fc 01       	movw	r30, r24
    162e:	86 85       	ldd	r24, Z+14	; 0x0e
    1630:	80 ff       	sbrs	r24, 0
    1632:	05 c0       	rjmp	.+10     	; 0x163e <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1634:	3a 01       	movw	r6, r20
    1636:	f2 e0       	ldi	r31, 0x02	; 2
    1638:	6f 0e       	add	r6, r31
    163a:	71 1c       	adc	r7, r1
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    163e:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	a8 85       	ldd	r26, Y+8	; 0x08
    1646:	b9 85       	ldd	r27, Y+9	; 0x09
    1648:	89 2b       	or	r24, r25
    164a:	8a 2b       	or	r24, r26
    164c:	8b 2b       	or	r24, r27
    164e:	09 f4       	brne	.+2      	; 0x1652 <xStreamBufferSend+0x68>
    1650:	34 c0       	rjmp	.+104    	; 0x16ba <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	33 d6       	rcall	.+3174   	; 0x22be <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    165e:	c5 01       	movw	r24, r10
    1660:	b2 df       	rcall	.-156    	; 0x15c6 <xStreamBufferSpacesAvailable>
    1662:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1664:	86 15       	cp	r24, r6
    1666:	97 05       	cpc	r25, r7
    1668:	18 f5       	brcc	.+70     	; 0x16b0 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 bd 13 	call	0x277a	; 0x277a <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1672:	a5 d6       	rcall	.+3402   	; 0x23be <xTaskGetCurrentTaskHandle>
    1674:	f5 01       	movw	r30, r10
    1676:	93 87       	std	Z+11, r25	; 0x0b
    1678:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    167e:	ce 80       	ldd	r12, Y+6	; 0x06
    1680:	df 80       	ldd	r13, Y+7	; 0x07
    1682:	e8 84       	ldd	r14, Y+8	; 0x08
    1684:	f9 84       	ldd	r15, Y+9	; 0x09
    1686:	00 e0       	ldi	r16, 0x00	; 0
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	cb 01       	movw	r24, r22
    1696:	e6 d6       	rcall	.+3532   	; 0x2464 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1698:	f5 01       	movw	r30, r10
    169a:	13 86       	std	Z+11, r1	; 0x0b
    169c:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    169e:	be 01       	movw	r22, r28
    16a0:	6a 5f       	subi	r22, 0xFA	; 250
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	ce 01       	movw	r24, r28
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	31 d6       	rcall	.+3170   	; 0x230c <xTaskCheckForTimeOut>
    16aa:	88 23       	and	r24, r24
    16ac:	a9 f2       	breq	.-86     	; 0x1658 <xStreamBufferSend+0x6e>
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    16b0:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	81 14       	cp	r8, r1
    16b6:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16b8:	19 f4       	brne	.+6      	; 0x16c0 <xStreamBufferSend+0xd6>
    16ba:	c5 01       	movw	r24, r10
    16bc:	84 df       	rcall	.-248    	; 0x15c6 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16be:	4c 01       	movw	r8, r24
    16c0:	83 01       	movw	r16, r6
    16c2:	94 01       	movw	r18, r8
    16c4:	a2 01       	movw	r20, r4
    16c6:	b1 01       	movw	r22, r2
    16c8:	c5 01       	movw	r24, r10
    16ca:	96 de       	rcall	.-724    	; 0x13f8 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    16cc:	7c 01       	movw	r14, r24
    16ce:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16d0:	d9 f0       	breq	.+54     	; 0x1708 <xStreamBufferSend+0x11e>
    16d2:	c5 01       	movw	r24, r10
    16d4:	35 de       	rcall	.-918    	; 0x1340 <prvBytesInBuffer>
    16d6:	f5 01       	movw	r30, r10
    16d8:	26 81       	ldd	r18, Z+6	; 0x06
    16da:	37 81       	ldd	r19, Z+7	; 0x07
    16dc:	82 17       	cp	r24, r18
    16de:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    16e0:	98 f0       	brcs	.+38     	; 0x1708 <xStreamBufferSend+0x11e>
    16e2:	0a d3       	rcall	.+1556   	; 0x1cf8 <vTaskSuspendAll>
    16e4:	f5 01       	movw	r30, r10
    16e6:	80 85       	ldd	r24, Z+8	; 0x08
    16e8:	91 85       	ldd	r25, Z+9	; 0x09
    16ea:	89 2b       	or	r24, r25
    16ec:	61 f0       	breq	.+24     	; 0x1706 <xStreamBufferSend+0x11c>
    16ee:	80 85       	ldd	r24, Z+8	; 0x08
    16f0:	91 85       	ldd	r25, Z+9	; 0x09
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	ba 01       	movw	r22, r20
    16fe:	3c d7       	rcall	.+3704   	; 0x2578 <xTaskGenericNotify>
    1700:	f5 01       	movw	r30, r10
    1702:	11 86       	std	Z+9, r1	; 0x09
    1704:	10 86       	std	Z+8, r1	; 0x08
    1706:	e1 d3       	rcall	.+1986   	; 0x1eca <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1708:	c7 01       	movw	r24, r14
    170a:	29 96       	adiw	r28, 0x09	; 9
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	3f 90       	pop	r3
    1738:	2f 90       	pop	r2
    173a:	08 95       	ret

0000173c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    1752:	5b 01       	movw	r10, r22
    1754:	6a 01       	movw	r12, r20
    1756:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1758:	8e 85       	ldd	r24, Y+14	; 0x0e
    175a:	80 ff       	sbrs	r24, 0
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    175e:	8a 01       	movw	r16, r20
    1760:	0e 5f       	subi	r16, 0xFE	; 254
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1766:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1768:	ce 01       	movw	r24, r28
    176a:	2d df       	rcall	.-422    	; 0x15c6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    176c:	9c 01       	movw	r18, r24
    176e:	a6 01       	movw	r20, r12
    1770:	b5 01       	movw	r22, r10
    1772:	ce 01       	movw	r24, r28
    1774:	41 de       	rcall	.-894    	; 0x13f8 <prvWriteMessageToBuffer>
    1776:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1778:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    177a:	b1 f0       	breq	.+44     	; 0x17a8 <xStreamBufferSendFromISR+0x6c>
    177c:	ce 01       	movw	r24, r28
    177e:	e0 dd       	rcall	.-1088   	; 0x1340 <prvBytesInBuffer>
    1780:	2e 81       	ldd	r18, Y+6	; 0x06
    1782:	3f 81       	ldd	r19, Y+7	; 0x07
    1784:	82 17       	cp	r24, r18
    1786:	93 07       	cpc	r25, r19
    1788:	78 f0       	brcs	.+30     	; 0x17a8 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    178a:	88 85       	ldd	r24, Y+8	; 0x08
    178c:	99 85       	ldd	r25, Y+9	; 0x09
    178e:	89 2b       	or	r24, r25
    1790:	59 f0       	breq	.+22     	; 0x17a8 <xStreamBufferSendFromISR+0x6c>
    1792:	88 85       	ldd	r24, Y+8	; 0x08
    1794:	99 85       	ldd	r25, Y+9	; 0x09
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	10 e0       	ldi	r17, 0x00	; 0
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	ba 01       	movw	r22, r20
    17a2:	62 d7       	rcall	.+3780   	; 0x2668 <xTaskGenericNotifyFromISR>
    17a4:	19 86       	std	Y+9, r1	; 0x09
    17a6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    17a8:	c6 01       	movw	r24, r12
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	08 95       	ret

000017c0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17c0:	4f 92       	push	r4
    17c2:	5f 92       	push	r5
    17c4:	6f 92       	push	r6
    17c6:	7f 92       	push	r7
    17c8:	8f 92       	push	r8
    17ca:	9f 92       	push	r9
    17cc:	af 92       	push	r10
    17ce:	bf 92       	push	r11
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	1f 92       	push	r1
    17e2:	1f 92       	push	r1
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	5c 01       	movw	r10, r24
    17ea:	2b 01       	movw	r4, r22
    17ec:	3a 01       	movw	r6, r20
    17ee:	68 01       	movw	r12, r16
    17f0:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17f2:	fc 01       	movw	r30, r24
    17f4:	86 85       	ldd	r24, Z+14	; 0x0e
    17f6:	80 fd       	sbrc	r24, 0
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    17fa:	81 2c       	mov	r8, r1
    17fc:	91 2c       	mov	r9, r1
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1800:	68 94       	set
    1802:	88 24       	eor	r8, r8
    1804:	81 f8       	bld	r8, 1
    1806:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1808:	c1 14       	cp	r12, r1
    180a:	d1 04       	cpc	r13, r1
    180c:	e1 04       	cpc	r14, r1
    180e:	f1 04       	cpc	r15, r1
    1810:	29 f1       	breq	.+74     	; 0x185c <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1818:	c5 01       	movw	r24, r10
    181a:	92 dd       	rcall	.-1244   	; 0x1340 <prvBytesInBuffer>
    181c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    181e:	88 16       	cp	r8, r24
    1820:	99 06       	cpc	r9, r25
    1822:	38 f0       	brcs	.+14     	; 0x1832 <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1828:	a8 d7       	rcall	.+3920   	; 0x277a <xTaskNotifyStateClear>
    182a:	c9 d5       	rcall	.+2962   	; 0x23be <xTaskGetCurrentTaskHandle>
    182c:	f5 01       	movw	r30, r10
    182e:	91 87       	std	Z+9, r25	; 0x09
    1830:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1836:	80 16       	cp	r8, r16
    1838:	91 06       	cpc	r9, r17
    183a:	b0 f0       	brcs	.+44     	; 0x1868 <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    183c:	00 e0       	ldi	r16, 0x00	; 0
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	cb 01       	movw	r24, r22
    184c:	0b d6       	rcall	.+3094   	; 0x2464 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    184e:	f5 01       	movw	r30, r10
    1850:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1852:	10 86       	std	Z+8, r1	; 0x08
    1854:	c5 01       	movw	r24, r10
    1856:	74 dd       	rcall	.-1304   	; 0x1340 <prvBytesInBuffer>
    1858:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <xStreamBufferReceive+0xa2>
    185c:	c5 01       	movw	r24, r10
    185e:	70 dd       	rcall	.-1312   	; 0x1340 <prvBytesInBuffer>
    1860:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1862:	80 16       	cp	r8, r16
    1864:	91 06       	cpc	r9, r17
    1866:	b8 f5       	brcc	.+110    	; 0x18d6 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1868:	81 14       	cp	r8, r1
    186a:	91 04       	cpc	r9, r1
    186c:	c1 f0       	breq	.+48     	; 0x189e <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    186e:	f5 01       	movw	r30, r10
    1870:	e0 80       	ld	r14, Z
    1872:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1874:	98 01       	movw	r18, r16
    1876:	a4 01       	movw	r20, r8
    1878:	be 01       	movw	r22, r28
    187a:	6f 5f       	subi	r22, 0xFF	; 255
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	c5 01       	movw	r24, r10
    1880:	fb dd       	rcall	.-1034   	; 0x1478 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1886:	08 19       	sub	r16, r8
    1888:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    188a:	68 16       	cp	r6, r24
    188c:	79 06       	cpc	r7, r25
    188e:	30 f4       	brcc	.+12     	; 0x189c <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1890:	f5 01       	movw	r30, r10
    1892:	f1 82       	std	Z+1, r15	; 0x01
    1894:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1896:	61 2c       	mov	r6, r1
    1898:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    189a:	01 c0       	rjmp	.+2      	; 0x189e <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    189c:	3c 01       	movw	r6, r24
    189e:	98 01       	movw	r18, r16
    18a0:	a3 01       	movw	r20, r6
    18a2:	b2 01       	movw	r22, r4
    18a4:	c5 01       	movw	r24, r10
    18a6:	e8 dd       	rcall	.-1072   	; 0x1478 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    18a8:	7c 01       	movw	r14, r24
    18aa:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    18ac:	b1 f0       	breq	.+44     	; 0x18da <xStreamBufferReceive+0x11a>
    18ae:	24 d2       	rcall	.+1096   	; 0x1cf8 <vTaskSuspendAll>
    18b0:	f5 01       	movw	r30, r10
    18b2:	82 85       	ldd	r24, Z+10	; 0x0a
    18b4:	93 85       	ldd	r25, Z+11	; 0x0b
    18b6:	89 2b       	or	r24, r25
    18b8:	61 f0       	breq	.+24     	; 0x18d2 <xStreamBufferReceive+0x112>
    18ba:	82 85       	ldd	r24, Z+10	; 0x0a
    18bc:	93 85       	ldd	r25, Z+11	; 0x0b
    18be:	00 e0       	ldi	r16, 0x00	; 0
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	ba 01       	movw	r22, r20
    18ca:	56 d6       	rcall	.+3244   	; 0x2578 <xTaskGenericNotify>
    18cc:	f5 01       	movw	r30, r10
    18ce:	13 86       	std	Z+11, r1	; 0x0b
    18d0:	12 86       	std	Z+10, r1	; 0x0a
    18d2:	fb d2       	rcall	.+1526   	; 0x1eca <xTaskResumeAll>
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18d6:	e1 2c       	mov	r14, r1
    18d8:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18da:	c7 01       	movw	r24, r14
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	7f 90       	pop	r7
    18fa:	6f 90       	pop	r6
    18fc:	5f 90       	pop	r5
    18fe:	4f 90       	pop	r4
    1900:	08 95       	ret

00001902 <prvResetNextTaskUnblockTime>:
    1902:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1906:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    190a:	80 81       	ld	r24, Z
    190c:	81 11       	cpse	r24, r1
    190e:	0c c0       	rjmp	.+24     	; 0x1928 <prvResetNextTaskUnblockTime+0x26>
    1910:	8f ef       	ldi	r24, 0xFF	; 255
    1912:	9f ef       	ldi	r25, 0xFF	; 255
    1914:	dc 01       	movw	r26, r24
    1916:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    191a:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    191e:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1922:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1926:	08 95       	ret
    1928:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    192c:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1930:	07 80       	ldd	r0, Z+7	; 0x07
    1932:	f0 85       	ldd	r31, Z+8	; 0x08
    1934:	e0 2d       	mov	r30, r0
    1936:	00 84       	ldd	r0, Z+8	; 0x08
    1938:	f1 85       	ldd	r31, Z+9	; 0x09
    193a:	e0 2d       	mov	r30, r0
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	a4 81       	ldd	r26, Z+4	; 0x04
    1942:	b5 81       	ldd	r27, Z+5	; 0x05
    1944:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1948:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    194c:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1950:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1954:	08 95       	ret

00001956 <prvAddCurrentTaskToDelayedList>:
    1956:	8f 92       	push	r8
    1958:	9f 92       	push	r9
    195a:	af 92       	push	r10
    195c:	bf 92       	push	r11
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	cf 93       	push	r28
    1968:	6b 01       	movw	r12, r22
    196a:	7c 01       	movw	r14, r24
    196c:	c4 2f       	mov	r28, r20
    196e:	80 90 b7 16 	lds	r8, 0x16B7	; 0x8016b7 <xTickCount>
    1972:	90 90 b8 16 	lds	r9, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1976:	a0 90 b9 16 	lds	r10, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    197a:	b0 90 ba 16 	lds	r11, 0x16BA	; 0x8016ba <xTickCount+0x3>
    197e:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    1982:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1986:	02 96       	adiw	r24, 0x02	; 2
    1988:	56 d8       	rcall	.-3924   	; 0xa36 <uxListRemove>
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	c8 16       	cp	r12, r24
    198e:	d8 06       	cpc	r13, r24
    1990:	e8 06       	cpc	r14, r24
    1992:	f8 06       	cpc	r15, r24
    1994:	69 f4       	brne	.+26     	; 0x19b0 <prvAddCurrentTaskToDelayedList+0x5a>
    1996:	cc 23       	and	r28, r28
    1998:	59 f0       	breq	.+22     	; 0x19b0 <prvAddCurrentTaskToDelayedList+0x5a>
    199a:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    199e:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    19a2:	6e 5f       	subi	r22, 0xFE	; 254
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	8c eb       	ldi	r24, 0xBC	; 188
    19a8:	96 e1       	ldi	r25, 0x16	; 22
    19aa:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <prvAddCurrentTaskToDelayedList+0xd8>
    19b0:	c8 0c       	add	r12, r8
    19b2:	d9 1c       	adc	r13, r9
    19b4:	ea 1c       	adc	r14, r10
    19b6:	fb 1c       	adc	r15, r11
    19b8:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    19bc:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    19c0:	c2 82       	std	Z+2, r12	; 0x02
    19c2:	d3 82       	std	Z+3, r13	; 0x03
    19c4:	e4 82       	std	Z+4, r14	; 0x04
    19c6:	f5 82       	std	Z+5, r15	; 0x05
    19c8:	c8 14       	cp	r12, r8
    19ca:	d9 04       	cpc	r13, r9
    19cc:	ea 04       	cpc	r14, r10
    19ce:	fb 04       	cpc	r15, r11
    19d0:	68 f4       	brcc	.+26     	; 0x19ec <prvAddCurrentTaskToDelayedList+0x96>
    19d2:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    19d6:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    19da:	80 91 de 16 	lds	r24, 0x16DE	; 0x8016de <pxOverflowDelayedTaskList>
    19de:	90 91 df 16 	lds	r25, 0x16DF	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    19e2:	6e 5f       	subi	r22, 0xFE	; 254
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInsert>
    19ea:	21 c0       	rjmp	.+66     	; 0x1a2e <prvAddCurrentTaskToDelayedList+0xd8>
    19ec:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    19f0:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    19f4:	80 91 e0 16 	lds	r24, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    19f8:	90 91 e1 16 	lds	r25, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    19fc:	6e 5f       	subi	r22, 0xFE	; 254
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInsert>
    1a04:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <xNextTaskUnblockTime>
    1a08:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1a0c:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <xNextTaskUnblockTime+0x2>
    1a10:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1a14:	c8 16       	cp	r12, r24
    1a16:	d9 06       	cpc	r13, r25
    1a18:	ea 06       	cpc	r14, r26
    1a1a:	fb 06       	cpc	r15, r27
    1a1c:	40 f4       	brcc	.+16     	; 0x1a2e <prvAddCurrentTaskToDelayedList+0xd8>
    1a1e:	c0 92 ad 16 	sts	0x16AD, r12	; 0x8016ad <xNextTaskUnblockTime>
    1a22:	d0 92 ae 16 	sts	0x16AE, r13	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1a26:	e0 92 af 16 	sts	0x16AF, r14	; 0x8016af <xNextTaskUnblockTime+0x2>
    1a2a:	f0 92 b0 16 	sts	0x16B0, r15	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1a2e:	cf 91       	pop	r28
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	bf 90       	pop	r11
    1a3a:	af 90       	pop	r10
    1a3c:	9f 90       	pop	r9
    1a3e:	8f 90       	pop	r8
    1a40:	08 95       	ret

00001a42 <xTaskCreate>:
    1a42:	4f 92       	push	r4
    1a44:	5f 92       	push	r5
    1a46:	6f 92       	push	r6
    1a48:	7f 92       	push	r7
    1a4a:	8f 92       	push	r8
    1a4c:	9f 92       	push	r9
    1a4e:	af 92       	push	r10
    1a50:	bf 92       	push	r11
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	4c 01       	movw	r8, r24
    1a62:	6b 01       	movw	r12, r22
    1a64:	5a 01       	movw	r10, r20
    1a66:	29 01       	movw	r4, r18
    1a68:	ca 01       	movw	r24, r20
    1a6a:	0e 94 be 03 	call	0x77c	; 0x77c <pvPortMalloc>
    1a6e:	3c 01       	movw	r6, r24
    1a70:	89 2b       	or	r24, r25
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <xTaskCreate+0x34>
    1a74:	f4 c0       	rjmp	.+488    	; 0x1c5e <xTaskCreate+0x21c>
    1a76:	80 e3       	ldi	r24, 0x30	; 48
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 be 03 	call	0x77c	; 0x77c <pvPortMalloc>
    1a7e:	ec 01       	movw	r28, r24
    1a80:	89 2b       	or	r24, r25
    1a82:	99 f0       	breq	.+38     	; 0x1aaa <xTaskCreate+0x68>
    1a84:	7c 8e       	std	Y+28, r7	; 0x1c
    1a86:	6b 8e       	std	Y+27, r6	; 0x1b
    1a88:	a5 01       	movw	r20, r10
    1a8a:	65 ea       	ldi	r22, 0xA5	; 165
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	c3 01       	movw	r24, r6
    1a90:	0e 94 ba 23 	call	0x4774	; 0x4774 <memset>
    1a94:	21 e0       	ldi	r18, 0x01	; 1
    1a96:	a2 1a       	sub	r10, r18
    1a98:	b1 08       	sbc	r11, r1
    1a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9e:	a8 0e       	add	r10, r24
    1aa0:	b9 1e       	adc	r11, r25
    1aa2:	c1 14       	cp	r12, r1
    1aa4:	d1 04       	cpc	r13, r1
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <xTaskCreate+0x70>
    1aa8:	20 c0       	rjmp	.+64     	; 0x1aea <xTaskCreate+0xa8>
    1aaa:	c3 01       	movw	r24, r6
    1aac:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortFree>
    1ab0:	d6 c0       	rjmp	.+428    	; 0x1c5e <xTaskCreate+0x21c>
    1ab2:	d6 01       	movw	r26, r12
    1ab4:	8c 91       	ld	r24, X
    1ab6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab8:	8c 91       	ld	r24, X
    1aba:	88 23       	and	r24, r24
    1abc:	a1 f0       	breq	.+40     	; 0x1ae6 <xTaskCreate+0xa4>
    1abe:	ae 01       	movw	r20, r28
    1ac0:	42 5e       	subi	r20, 0xE2	; 226
    1ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	31 96       	adiw	r30, 0x01	; 1
    1ac8:	b8 e0       	ldi	r27, 0x08	; 8
    1aca:	cb 0e       	add	r12, r27
    1acc:	d1 1c       	adc	r13, r1
    1ace:	cf 01       	movw	r24, r30
    1ad0:	21 91       	ld	r18, Z+
    1ad2:	da 01       	movw	r26, r20
    1ad4:	2d 93       	st	X+, r18
    1ad6:	ad 01       	movw	r20, r26
    1ad8:	dc 01       	movw	r26, r24
    1ada:	8c 91       	ld	r24, X
    1adc:	88 23       	and	r24, r24
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <xTaskCreate+0xa4>
    1ae0:	ec 15       	cp	r30, r12
    1ae2:	fd 05       	cpc	r31, r13
    1ae4:	a1 f7       	brne	.-24     	; 0x1ace <xTaskCreate+0x8c>
    1ae6:	1c a2       	std	Y+36, r1	; 0x24
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <xTaskCreate+0xaa>
    1aea:	1d 8e       	std	Y+29, r1	; 0x1d
    1aec:	04 30       	cpi	r16, 0x04	; 4
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <xTaskCreate+0xb0>
    1af0:	03 e0       	ldi	r16, 0x03	; 3
    1af2:	0a 8f       	std	Y+26, r16	; 0x1a
    1af4:	0f a3       	std	Y+39, r16	; 0x27
    1af6:	18 a6       	std	Y+40, r1	; 0x28
    1af8:	6e 01       	movw	r12, r28
    1afa:	b2 e0       	ldi	r27, 0x02	; 2
    1afc:	cb 0e       	add	r12, r27
    1afe:	d1 1c       	adc	r13, r1
    1b00:	c6 01       	movw	r24, r12
    1b02:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialiseItem>
    1b06:	ce 01       	movw	r24, r28
    1b08:	0e 96       	adiw	r24, 0x0e	; 14
    1b0a:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialiseItem>
    1b0e:	db 87       	std	Y+11, r29	; 0x0b
    1b10:	ca 87       	std	Y+10, r28	; 0x0a
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 e0       	ldi	r26, 0x00	; 0
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	80 1b       	sub	r24, r16
    1b1c:	91 09       	sbc	r25, r1
    1b1e:	a1 09       	sbc	r26, r1
    1b20:	b1 09       	sbc	r27, r1
    1b22:	8e 87       	std	Y+14, r24	; 0x0e
    1b24:	9f 87       	std	Y+15, r25	; 0x0f
    1b26:	a8 8b       	std	Y+16, r26	; 0x10
    1b28:	b9 8b       	std	Y+17, r27	; 0x11
    1b2a:	df 8b       	std	Y+23, r29	; 0x17
    1b2c:	ce 8b       	std	Y+22, r28	; 0x16
    1b2e:	1a a6       	std	Y+42, r1	; 0x2a
    1b30:	19 a6       	std	Y+41, r1	; 0x29
    1b32:	1b a6       	std	Y+43, r1	; 0x2b
    1b34:	1c a6       	std	Y+44, r1	; 0x2c
    1b36:	1d a6       	std	Y+45, r1	; 0x2d
    1b38:	1e a6       	std	Y+46, r1	; 0x2e
    1b3a:	1f a6       	std	Y+47, r1	; 0x2f
    1b3c:	a2 01       	movw	r20, r4
    1b3e:	b4 01       	movw	r22, r8
    1b40:	c5 01       	movw	r24, r10
    1b42:	0e 94 42 05 	call	0xa84	; 0xa84 <pxPortInitialiseStack>
    1b46:	99 83       	std	Y+1, r25	; 0x01
    1b48:	88 83       	st	Y, r24
    1b4a:	e1 14       	cp	r14, r1
    1b4c:	f1 04       	cpc	r15, r1
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <xTaskCreate+0x114>
    1b50:	f7 01       	movw	r30, r14
    1b52:	d1 83       	std	Z+1, r29	; 0x01
    1b54:	c0 83       	st	Z, r28
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	0f 92       	push	r0
    1b5c:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <uxCurrentNumberOfTasks>
    1b66:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    1b6a:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1b6e:	89 2b       	or	r24, r25
    1b70:	d1 f5       	brne	.+116    	; 0x1be6 <xTaskCreate+0x1a4>
    1b72:	d0 93 25 17 	sts	0x1725, r29	; 0x801725 <pxCurrentTCB+0x1>
    1b76:	c0 93 24 17 	sts	0x1724, r28	; 0x801724 <pxCurrentTCB>
    1b7a:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <xTaskCreate+0x142>
    1b82:	41 c0       	rjmp	.+130    	; 0x1c06 <xTaskCreate+0x1c4>
    1b84:	88 ef       	ldi	r24, 0xF8	; 248
    1b86:	96 e1       	ldi	r25, 0x16	; 22
    1b88:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	97 e1       	ldi	r25, 0x17	; 23
    1b90:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1b94:	8e e0       	ldi	r24, 0x0E	; 14
    1b96:	97 e1       	ldi	r25, 0x17	; 23
    1b98:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1b9c:	89 e1       	ldi	r24, 0x19	; 25
    1b9e:	97 e1       	ldi	r25, 0x17	; 23
    1ba0:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1ba4:	8d ee       	ldi	r24, 0xED	; 237
    1ba6:	96 e1       	ldi	r25, 0x16	; 22
    1ba8:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1bac:	82 ee       	ldi	r24, 0xE2	; 226
    1bae:	96 e1       	ldi	r25, 0x16	; 22
    1bb0:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1bb4:	83 ed       	ldi	r24, 0xD3	; 211
    1bb6:	96 e1       	ldi	r25, 0x16	; 22
    1bb8:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	96 e1       	ldi	r25, 0x16	; 22
    1bc0:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1bc4:	8c eb       	ldi	r24, 0xBC	; 188
    1bc6:	96 e1       	ldi	r25, 0x16	; 22
    1bc8:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    1bcc:	8d ee       	ldi	r24, 0xED	; 237
    1bce:	96 e1       	ldi	r25, 0x16	; 22
    1bd0:	90 93 e1 16 	sts	0x16E1, r25	; 0x8016e1 <pxDelayedTaskList+0x1>
    1bd4:	80 93 e0 16 	sts	0x16E0, r24	; 0x8016e0 <pxDelayedTaskList>
    1bd8:	82 ee       	ldi	r24, 0xE2	; 226
    1bda:	96 e1       	ldi	r25, 0x16	; 22
    1bdc:	90 93 df 16 	sts	0x16DF, r25	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    1be0:	80 93 de 16 	sts	0x16DE, r24	; 0x8016de <pxOverflowDelayedTaskList>
    1be4:	10 c0       	rjmp	.+32     	; 0x1c06 <xTaskCreate+0x1c4>
    1be6:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xSchedulerRunning>
    1bea:	81 11       	cpse	r24, r1
    1bec:	0c c0       	rjmp	.+24     	; 0x1c06 <xTaskCreate+0x1c4>
    1bee:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1bf2:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1bf6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bf8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bfa:	89 17       	cp	r24, r25
    1bfc:	20 f0       	brcs	.+8      	; 0x1c06 <xTaskCreate+0x1c4>
    1bfe:	d0 93 25 17 	sts	0x1725, r29	; 0x801725 <pxCurrentTCB+0x1>
    1c02:	c0 93 24 17 	sts	0x1724, r28	; 0x801724 <pxCurrentTCB>
    1c06:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <uxTaskNumber>
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <uxTaskNumber>
    1c10:	8d a3       	std	Y+37, r24	; 0x25
    1c12:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c14:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    1c18:	98 17       	cp	r25, r24
    1c1a:	10 f4       	brcc	.+4      	; 0x1c20 <xTaskCreate+0x1de>
    1c1c:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    1c20:	fb e0       	ldi	r31, 0x0B	; 11
    1c22:	8f 9f       	mul	r24, r31
    1c24:	c0 01       	movw	r24, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	b6 01       	movw	r22, r12
    1c2a:	88 50       	subi	r24, 0x08	; 8
    1c2c:	99 4e       	sbci	r25, 0xE9	; 233
    1c2e:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    1c32:	0f 90       	pop	r0
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xSchedulerRunning>
    1c3a:	88 23       	and	r24, r24
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <xTaskCreate+0x214>
    1c3e:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1c42:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1c46:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c4a:	98 17       	cp	r25, r24
    1c4c:	30 f4       	brcc	.+12     	; 0x1c5a <xTaskCreate+0x218>
    1c4e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vPortYield>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <xTaskCreate+0x21e>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <xTaskCreate+0x21e>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <xTaskCreate+0x21e>
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	cf 90       	pop	r12
    1c6e:	bf 90       	pop	r11
    1c70:	af 90       	pop	r10
    1c72:	9f 90       	pop	r9
    1c74:	8f 90       	pop	r8
    1c76:	7f 90       	pop	r7
    1c78:	6f 90       	pop	r6
    1c7a:	5f 90       	pop	r5
    1c7c:	4f 90       	pop	r4
    1c7e:	08 95       	ret

00001c80 <vTaskStartScheduler>:
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	0f 2e       	mov	r0, r31
    1c88:	fb ea       	ldi	r31, 0xAB	; 171
    1c8a:	ef 2e       	mov	r14, r31
    1c8c:	f6 e1       	ldi	r31, 0x16	; 22
    1c8e:	ff 2e       	mov	r15, r31
    1c90:	f0 2d       	mov	r31, r0
    1c92:	00 e0       	ldi	r16, 0x00	; 0
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 ec       	ldi	r20, 0xC0	; 192
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	65 e8       	ldi	r22, 0x85	; 133
    1c9e:	73 e0       	ldi	r23, 0x03	; 3
    1ca0:	8c e7       	ldi	r24, 0x7C	; 124
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	ce de       	rcall	.-612    	; 0x1a42 <xTaskCreate>
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	19 f5       	brne	.+70     	; 0x1cf0 <vTaskStartScheduler+0x70>
    1caa:	ed d5       	rcall	.+3034   	; 0x2886 <xTimerCreateTimerTask>
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	01 f5       	brne	.+64     	; 0x1cf0 <vTaskStartScheduler+0x70>
    1cb0:	f8 94       	cli
    1cb2:	8f ef       	ldi	r24, 0xFF	; 255
    1cb4:	9f ef       	ldi	r25, 0xFF	; 255
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1cbc:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1cc0:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1cc4:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <xSchedulerRunning>
    1cce:	10 92 b7 16 	sts	0x16B7, r1	; 0x8016b7 <xTickCount>
    1cd2:	10 92 b8 16 	sts	0x16B8, r1	; 0x8016b8 <xTickCount+0x1>
    1cd6:	10 92 b9 16 	sts	0x16B9, r1	; 0x8016b9 <xTickCount+0x2>
    1cda:	10 92 ba 16 	sts	0x16BA, r1	; 0x8016ba <xTickCount+0x3>
    1cde:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1ce2:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1ce6:	81 a5       	ldd	r24, Z+41	; 0x29
    1ce8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <task_switch_in>
    1cec:	0e 94 b4 05 	call	0xb68	; 0xb68 <xPortStartScheduler>
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	08 95       	ret

00001cf8 <vTaskSuspendAll>:
    1cf8:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1cfc:	8f 5f       	subi	r24, 0xFF	; 255
    1cfe:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <uxSchedulerSuspended>
    1d02:	08 95       	ret

00001d04 <xTaskGetTickCount>:
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	0f 92       	push	r0
    1d0a:	60 91 b7 16 	lds	r22, 0x16B7	; 0x8016b7 <xTickCount>
    1d0e:	70 91 b8 16 	lds	r23, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1d12:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    1d16:	90 91 ba 16 	lds	r25, 0x16BA	; 0x8016ba <xTickCount+0x3>
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	08 95       	ret

00001d20 <xTaskIncrementTick>:
    1d20:	9f 92       	push	r9
    1d22:	af 92       	push	r10
    1d24:	bf 92       	push	r11
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	ad c0       	rjmp	.+346    	; 0x1e98 <xTaskIncrementTick+0x178>
    1d3e:	c0 90 b7 16 	lds	r12, 0x16B7	; 0x8016b7 <xTickCount>
    1d42:	d0 90 b8 16 	lds	r13, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1d46:	e0 90 b9 16 	lds	r14, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    1d4a:	f0 90 ba 16 	lds	r15, 0x16BA	; 0x8016ba <xTickCount+0x3>
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	c8 1a       	sub	r12, r24
    1d52:	d8 0a       	sbc	r13, r24
    1d54:	e8 0a       	sbc	r14, r24
    1d56:	f8 0a       	sbc	r15, r24
    1d58:	c0 92 b7 16 	sts	0x16B7, r12	; 0x8016b7 <xTickCount>
    1d5c:	d0 92 b8 16 	sts	0x16B8, r13	; 0x8016b8 <xTickCount+0x1>
    1d60:	e0 92 b9 16 	sts	0x16B9, r14	; 0x8016b9 <xTickCount+0x2>
    1d64:	f0 92 ba 16 	sts	0x16BA, r15	; 0x8016ba <xTickCount+0x3>
    1d68:	c1 14       	cp	r12, r1
    1d6a:	d1 04       	cpc	r13, r1
    1d6c:	e1 04       	cpc	r14, r1
    1d6e:	f1 04       	cpc	r15, r1
    1d70:	b1 f4       	brne	.+44     	; 0x1d9e <xTaskIncrementTick+0x7e>
    1d72:	80 91 e0 16 	lds	r24, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1d76:	90 91 e1 16 	lds	r25, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1d7a:	20 91 de 16 	lds	r18, 0x16DE	; 0x8016de <pxOverflowDelayedTaskList>
    1d7e:	30 91 df 16 	lds	r19, 0x16DF	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    1d82:	30 93 e1 16 	sts	0x16E1, r19	; 0x8016e1 <pxDelayedTaskList+0x1>
    1d86:	20 93 e0 16 	sts	0x16E0, r18	; 0x8016e0 <pxDelayedTaskList>
    1d8a:	90 93 df 16 	sts	0x16DF, r25	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    1d8e:	80 93 de 16 	sts	0x16DE, r24	; 0x8016de <pxOverflowDelayedTaskList>
    1d92:	80 91 b2 16 	lds	r24, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	80 93 b2 16 	sts	0x16B2, r24	; 0x8016b2 <xNumOfOverflows>
    1d9c:	b2 dd       	rcall	.-1180   	; 0x1902 <prvResetNextTaskUnblockTime>
    1d9e:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <xNextTaskUnblockTime>
    1da2:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1da6:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <xNextTaskUnblockTime+0x2>
    1daa:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1dae:	c8 16       	cp	r12, r24
    1db0:	d9 06       	cpc	r13, r25
    1db2:	ea 06       	cpc	r14, r26
    1db4:	fb 06       	cpc	r15, r27
    1db6:	10 f4       	brcc	.+4      	; 0x1dbc <xTaskIncrementTick+0x9c>
    1db8:	b1 2c       	mov	r11, r1
    1dba:	5d c0       	rjmp	.+186    	; 0x1e76 <xTaskIncrementTick+0x156>
    1dbc:	b1 2c       	mov	r11, r1
    1dbe:	0f 2e       	mov	r0, r31
    1dc0:	fb e0       	ldi	r31, 0x0B	; 11
    1dc2:	af 2e       	mov	r10, r31
    1dc4:	f0 2d       	mov	r31, r0
    1dc6:	99 24       	eor	r9, r9
    1dc8:	93 94       	inc	r9
    1dca:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1dce:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1dd2:	80 81       	ld	r24, Z
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	0c c0       	rjmp	.+24     	; 0x1df0 <xTaskIncrementTick+0xd0>
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	9f ef       	ldi	r25, 0xFF	; 255
    1ddc:	dc 01       	movw	r26, r24
    1dde:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1de2:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1de6:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1dea:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1dee:	43 c0       	rjmp	.+134    	; 0x1e76 <xTaskIncrementTick+0x156>
    1df0:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1df4:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1df8:	07 80       	ldd	r0, Z+7	; 0x07
    1dfa:	f0 85       	ldd	r31, Z+8	; 0x08
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	c0 85       	ldd	r28, Z+8	; 0x08
    1e00:	d1 85       	ldd	r29, Z+9	; 0x09
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	ac 81       	ldd	r26, Y+4	; 0x04
    1e08:	bd 81       	ldd	r27, Y+5	; 0x05
    1e0a:	c8 16       	cp	r12, r24
    1e0c:	d9 06       	cpc	r13, r25
    1e0e:	ea 06       	cpc	r14, r26
    1e10:	fb 06       	cpc	r15, r27
    1e12:	48 f4       	brcc	.+18     	; 0x1e26 <xTaskIncrementTick+0x106>
    1e14:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1e18:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1e1c:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1e20:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1e24:	28 c0       	rjmp	.+80     	; 0x1e76 <xTaskIncrementTick+0x156>
    1e26:	8e 01       	movw	r16, r28
    1e28:	0e 5f       	subi	r16, 0xFE	; 254
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    1e32:	88 8d       	ldd	r24, Y+24	; 0x18
    1e34:	99 8d       	ldd	r25, Y+25	; 0x19
    1e36:	89 2b       	or	r24, r25
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <xTaskIncrementTick+0x122>
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	0e 96       	adiw	r24, 0x0e	; 14
    1e3e:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    1e42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e44:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    1e48:	98 17       	cp	r25, r24
    1e4a:	10 f4       	brcc	.+4      	; 0x1e50 <xTaskIncrementTick+0x130>
    1e4c:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    1e50:	a8 9e       	mul	r10, r24
    1e52:	c0 01       	movw	r24, r0
    1e54:	11 24       	eor	r1, r1
    1e56:	b8 01       	movw	r22, r16
    1e58:	88 50       	subi	r24, 0x08	; 8
    1e5a:	99 4e       	sbci	r25, 0xE9	; 233
    1e5c:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    1e60:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1e64:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1e68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e6c:	98 17       	cp	r25, r24
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <xTaskIncrementTick+0x152>
    1e70:	ac cf       	rjmp	.-168    	; 0x1dca <xTaskIncrementTick+0xaa>
    1e72:	b9 2c       	mov	r11, r9
    1e74:	aa cf       	rjmp	.-172    	; 0x1dca <xTaskIncrementTick+0xaa>
    1e76:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1e7a:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1e7e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e80:	8b e0       	ldi	r24, 0x0B	; 11
    1e82:	e8 9f       	mul	r30, r24
    1e84:	f0 01       	movw	r30, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	e8 50       	subi	r30, 0x08	; 8
    1e8a:	f9 4e       	sbci	r31, 0xE9	; 233
    1e8c:	80 81       	ld	r24, Z
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	48 f0       	brcs	.+18     	; 0x1ea4 <xTaskIncrementTick+0x184>
    1e92:	bb 24       	eor	r11, r11
    1e94:	b3 94       	inc	r11
    1e96:	06 c0       	rjmp	.+12     	; 0x1ea4 <xTaskIncrementTick+0x184>
    1e98:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <uxPendedTicks>
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	80 93 b4 16 	sts	0x16B4, r24	; 0x8016b4 <uxPendedTicks>
    1ea2:	b1 2c       	mov	r11, r1
    1ea4:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <xYieldPending>
    1ea8:	88 23       	and	r24, r24
    1eaa:	11 f0       	breq	.+4      	; 0x1eb0 <xTaskIncrementTick+0x190>
    1eac:	bb 24       	eor	r11, r11
    1eae:	b3 94       	inc	r11
    1eb0:	8b 2d       	mov	r24, r11
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	bf 90       	pop	r11
    1ec4:	af 90       	pop	r10
    1ec6:	9f 90       	pop	r9
    1ec8:	08 95       	ret

00001eca <xTaskResumeAll>:
    1eca:	cf 92       	push	r12
    1ecc:	df 92       	push	r13
    1ece:	ef 92       	push	r14
    1ed0:	ff 92       	push	r15
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	0f 92       	push	r0
    1ee0:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1ee4:	81 50       	subi	r24, 0x01	; 1
    1ee6:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <uxSchedulerSuspended>
    1eea:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1eee:	81 11       	cpse	r24, r1
    1ef0:	5a c0       	rjmp	.+180    	; 0x1fa6 <xTaskResumeAll+0xdc>
    1ef2:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	2c c0       	rjmp	.+88     	; 0x1f52 <xTaskResumeAll+0x88>
    1efa:	58 c0       	rjmp	.+176    	; 0x1fac <xTaskResumeAll+0xe2>
    1efc:	d7 01       	movw	r26, r14
    1efe:	17 96       	adiw	r26, 0x07	; 7
    1f00:	ed 91       	ld	r30, X+
    1f02:	fc 91       	ld	r31, X
    1f04:	18 97       	sbiw	r26, 0x08	; 8
    1f06:	c0 85       	ldd	r28, Z+8	; 0x08
    1f08:	d1 85       	ldd	r29, Z+9	; 0x09
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	0e 96       	adiw	r24, 0x0e	; 14
    1f0e:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    1f12:	8e 01       	movw	r16, r28
    1f14:	0e 5f       	subi	r16, 0xFE	; 254
    1f16:	1f 4f       	sbci	r17, 0xFF	; 255
    1f18:	c8 01       	movw	r24, r16
    1f1a:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    1f1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f20:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    1f24:	98 17       	cp	r25, r24
    1f26:	10 f4       	brcc	.+4      	; 0x1f2c <xTaskResumeAll+0x62>
    1f28:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    1f2c:	d8 9e       	mul	r13, r24
    1f2e:	c0 01       	movw	r24, r0
    1f30:	11 24       	eor	r1, r1
    1f32:	b8 01       	movw	r22, r16
    1f34:	88 50       	subi	r24, 0x08	; 8
    1f36:	99 4e       	sbci	r25, 0xE9	; 233
    1f38:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    1f3c:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1f40:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1f44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f48:	98 17       	cp	r25, r24
    1f4a:	88 f0       	brcs	.+34     	; 0x1f6e <xTaskResumeAll+0xa4>
    1f4c:	c0 92 b3 16 	sts	0x16B3, r12	; 0x8016b3 <xYieldPending>
    1f50:	0e c0       	rjmp	.+28     	; 0x1f6e <xTaskResumeAll+0xa4>
    1f52:	c0 e0       	ldi	r28, 0x00	; 0
    1f54:	d0 e0       	ldi	r29, 0x00	; 0
    1f56:	0f 2e       	mov	r0, r31
    1f58:	f3 ed       	ldi	r31, 0xD3	; 211
    1f5a:	ef 2e       	mov	r14, r31
    1f5c:	f6 e1       	ldi	r31, 0x16	; 22
    1f5e:	ff 2e       	mov	r15, r31
    1f60:	f0 2d       	mov	r31, r0
    1f62:	0f 2e       	mov	r0, r31
    1f64:	fb e0       	ldi	r31, 0x0B	; 11
    1f66:	df 2e       	mov	r13, r31
    1f68:	f0 2d       	mov	r31, r0
    1f6a:	cc 24       	eor	r12, r12
    1f6c:	c3 94       	inc	r12
    1f6e:	f7 01       	movw	r30, r14
    1f70:	80 81       	ld	r24, Z
    1f72:	81 11       	cpse	r24, r1
    1f74:	c3 cf       	rjmp	.-122    	; 0x1efc <xTaskResumeAll+0x32>
    1f76:	cd 2b       	or	r28, r29
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <xTaskResumeAll+0xb2>
    1f7a:	c3 dc       	rcall	.-1658   	; 0x1902 <prvResetNextTaskUnblockTime>
    1f7c:	c0 91 b4 16 	lds	r28, 0x16B4	; 0x8016b4 <uxPendedTicks>
    1f80:	cc 23       	and	r28, r28
    1f82:	49 f0       	breq	.+18     	; 0x1f96 <xTaskResumeAll+0xcc>
    1f84:	d1 e0       	ldi	r29, 0x01	; 1
    1f86:	cc de       	rcall	.-616    	; 0x1d20 <xTaskIncrementTick>
    1f88:	81 11       	cpse	r24, r1
    1f8a:	d0 93 b3 16 	sts	0x16B3, r29	; 0x8016b3 <xYieldPending>
    1f8e:	c1 50       	subi	r28, 0x01	; 1
    1f90:	d1 f7       	brne	.-12     	; 0x1f86 <xTaskResumeAll+0xbc>
    1f92:	10 92 b4 16 	sts	0x16B4, r1	; 0x8016b4 <uxPendedTicks>
    1f96:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <xYieldPending>
    1f9a:	88 23       	and	r24, r24
    1f9c:	31 f0       	breq	.+12     	; 0x1faa <xTaskResumeAll+0xe0>
    1f9e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vPortYield>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <xTaskResumeAll+0xe2>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	01 c0       	rjmp	.+2      	; 0x1fac <xTaskResumeAll+0xe2>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	df 90       	pop	r13
    1fbe:	cf 90       	pop	r12
    1fc0:	08 95       	ret

00001fc2 <vTaskDelayUntil>:
    1fc2:	cf 92       	push	r12
    1fc4:	df 92       	push	r13
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	ec 01       	movw	r28, r24
    1fd4:	6a 01       	movw	r12, r20
    1fd6:	7b 01       	movw	r14, r22
    1fd8:	8f de       	rcall	.-738    	; 0x1cf8 <vTaskSuspendAll>
    1fda:	00 91 b7 16 	lds	r16, 0x16B7	; 0x8016b7 <xTickCount>
    1fde:	10 91 b8 16 	lds	r17, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1fe2:	20 91 b9 16 	lds	r18, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    1fe6:	30 91 ba 16 	lds	r19, 0x16BA	; 0x8016ba <xTickCount+0x3>
    1fea:	88 81       	ld	r24, Y
    1fec:	99 81       	ldd	r25, Y+1	; 0x01
    1fee:	aa 81       	ldd	r26, Y+2	; 0x02
    1ff0:	bb 81       	ldd	r27, Y+3	; 0x03
    1ff2:	ac 01       	movw	r20, r24
    1ff4:	bd 01       	movw	r22, r26
    1ff6:	4c 0d       	add	r20, r12
    1ff8:	5d 1d       	adc	r21, r13
    1ffa:	6e 1d       	adc	r22, r14
    1ffc:	7f 1d       	adc	r23, r15
    1ffe:	08 17       	cp	r16, r24
    2000:	19 07       	cpc	r17, r25
    2002:	2a 07       	cpc	r18, r26
    2004:	3b 07       	cpc	r19, r27
    2006:	78 f4       	brcc	.+30     	; 0x2026 <vTaskDelayUntil+0x64>
    2008:	48 17       	cp	r20, r24
    200a:	59 07       	cpc	r21, r25
    200c:	6a 07       	cpc	r22, r26
    200e:	7b 07       	cpc	r23, r27
    2010:	40 f5       	brcc	.+80     	; 0x2062 <vTaskDelayUntil+0xa0>
    2012:	48 83       	st	Y, r20
    2014:	59 83       	std	Y+1, r21	; 0x01
    2016:	6a 83       	std	Y+2, r22	; 0x02
    2018:	7b 83       	std	Y+3, r23	; 0x03
    201a:	04 17       	cp	r16, r20
    201c:	15 07       	cpc	r17, r21
    201e:	26 07       	cpc	r18, r22
    2020:	37 07       	cpc	r19, r23
    2022:	a0 f4       	brcc	.+40     	; 0x204c <vTaskDelayUntil+0x8a>
    2024:	0b c0       	rjmp	.+22     	; 0x203c <vTaskDelayUntil+0x7a>
    2026:	48 17       	cp	r20, r24
    2028:	59 07       	cpc	r21, r25
    202a:	6a 07       	cpc	r22, r26
    202c:	7b 07       	cpc	r23, r27
    202e:	a0 f0       	brcs	.+40     	; 0x2058 <vTaskDelayUntil+0x96>
    2030:	04 17       	cp	r16, r20
    2032:	15 07       	cpc	r17, r21
    2034:	26 07       	cpc	r18, r22
    2036:	37 07       	cpc	r19, r23
    2038:	78 f0       	brcs	.+30     	; 0x2058 <vTaskDelayUntil+0x96>
    203a:	13 c0       	rjmp	.+38     	; 0x2062 <vTaskDelayUntil+0xa0>
    203c:	cb 01       	movw	r24, r22
    203e:	ba 01       	movw	r22, r20
    2040:	60 1b       	sub	r22, r16
    2042:	71 0b       	sbc	r23, r17
    2044:	82 0b       	sbc	r24, r18
    2046:	93 0b       	sbc	r25, r19
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	85 dc       	rcall	.-1782   	; 0x1956 <prvAddCurrentTaskToDelayedList>
    204c:	3e df       	rcall	.-388    	; 0x1eca <xTaskResumeAll>
    204e:	81 11       	cpse	r24, r1
    2050:	0d c0       	rjmp	.+26     	; 0x206c <vTaskDelayUntil+0xaa>
    2052:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vPortYield>
    2056:	0a c0       	rjmp	.+20     	; 0x206c <vTaskDelayUntil+0xaa>
    2058:	48 83       	st	Y, r20
    205a:	59 83       	std	Y+1, r21	; 0x01
    205c:	6a 83       	std	Y+2, r22	; 0x02
    205e:	7b 83       	std	Y+3, r23	; 0x03
    2060:	ed cf       	rjmp	.-38     	; 0x203c <vTaskDelayUntil+0x7a>
    2062:	48 83       	st	Y, r20
    2064:	59 83       	std	Y+1, r21	; 0x01
    2066:	6a 83       	std	Y+2, r22	; 0x02
    2068:	7b 83       	std	Y+3, r23	; 0x03
    206a:	f0 cf       	rjmp	.-32     	; 0x204c <vTaskDelayUntil+0x8a>
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	ff 90       	pop	r15
    2076:	ef 90       	pop	r14
    2078:	df 90       	pop	r13
    207a:	cf 90       	pop	r12
    207c:	08 95       	ret

0000207e <vTaskDelay>:
    207e:	cf 92       	push	r12
    2080:	df 92       	push	r13
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	6b 01       	movw	r12, r22
    2088:	7c 01       	movw	r14, r24
    208a:	67 2b       	or	r22, r23
    208c:	68 2b       	or	r22, r24
    208e:	69 2b       	or	r22, r25
    2090:	41 f0       	breq	.+16     	; 0x20a2 <vTaskDelay+0x24>
    2092:	32 de       	rcall	.-924    	; 0x1cf8 <vTaskSuspendAll>
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	c7 01       	movw	r24, r14
    2098:	b6 01       	movw	r22, r12
    209a:	5d dc       	rcall	.-1862   	; 0x1956 <prvAddCurrentTaskToDelayedList>
    209c:	16 df       	rcall	.-468    	; 0x1eca <xTaskResumeAll>
    209e:	81 11       	cpse	r24, r1
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <vTaskDelay+0x28>
    20a2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vPortYield>
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	08 95       	ret

000020b0 <vTaskSetApplicationTaskTag>:
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	21 f4       	brne	.+8      	; 0x20bc <vTaskSetApplicationTaskTag+0xc>
    20b4:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    20b8:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	0f 92       	push	r0
    20c2:	fc 01       	movw	r30, r24
    20c4:	72 a7       	std	Z+42, r23	; 0x2a
    20c6:	61 a7       	std	Z+41, r22	; 0x29
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	08 95       	ret

000020ce <vTaskSwitchContext>:
    20ce:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    20d2:	88 23       	and	r24, r24
    20d4:	21 f0       	breq	.+8      	; 0x20de <vTaskSwitchContext+0x10>
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    20dc:	08 95       	ret
    20de:	10 92 b3 16 	sts	0x16B3, r1	; 0x8016b3 <xYieldPending>
    20e2:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    20e6:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    20ea:	81 a5       	ldd	r24, Z+41	; 0x29
    20ec:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <task_switch_out>
    20f0:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
    20f4:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    20f8:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    20fc:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2100:	2d 91       	ld	r18, X+
    2102:	3c 91       	ld	r19, X
    2104:	83 8d       	ldd	r24, Z+27	; 0x1b
    2106:	94 8d       	ldd	r25, Z+28	; 0x1c
    2108:	82 17       	cp	r24, r18
    210a:	93 07       	cpc	r25, r19
    210c:	58 f0       	brcs	.+22     	; 0x2124 <vTaskSwitchContext+0x56>
    210e:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    2112:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2116:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    211a:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    211e:	63 5e       	subi	r22, 0xE3	; 227
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	d3 d4       	rcall	.+2470   	; 0x2aca <vApplicationStackOverflowHook>
    2124:	80 91 b6 16 	lds	r24, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	9b e0       	ldi	r25, 0x0B	; 11
    212e:	89 9f       	mul	r24, r25
    2130:	f0 01       	movw	r30, r0
    2132:	11 24       	eor	r1, r1
    2134:	e8 50       	subi	r30, 0x08	; 8
    2136:	f9 4e       	sbci	r31, 0xE9	; 233
    2138:	90 81       	ld	r25, Z
    213a:	91 11       	cpse	r25, r1
    213c:	0e c0       	rjmp	.+28     	; 0x215a <vTaskSwitchContext+0x8c>
    213e:	4b e0       	ldi	r20, 0x0B	; 11
    2140:	81 50       	subi	r24, 0x01	; 1
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	42 9f       	mul	r20, r18
    2148:	f0 01       	movw	r30, r0
    214a:	43 9f       	mul	r20, r19
    214c:	f0 0d       	add	r31, r0
    214e:	11 24       	eor	r1, r1
    2150:	e8 50       	subi	r30, 0x08	; 8
    2152:	f9 4e       	sbci	r31, 0xE9	; 233
    2154:	90 81       	ld	r25, Z
    2156:	99 23       	and	r25, r25
    2158:	99 f3       	breq	.-26     	; 0x2140 <vTaskSwitchContext+0x72>
    215a:	9b e0       	ldi	r25, 0x0B	; 11
    215c:	92 9f       	mul	r25, r18
    215e:	a0 01       	movw	r20, r0
    2160:	93 9f       	mul	r25, r19
    2162:	50 0d       	add	r21, r0
    2164:	11 24       	eor	r1, r1
    2166:	da 01       	movw	r26, r20
    2168:	a8 50       	subi	r26, 0x08	; 8
    216a:	b9 4e       	sbci	r27, 0xE9	; 233
    216c:	11 96       	adiw	r26, 0x01	; 1
    216e:	ed 91       	ld	r30, X+
    2170:	fc 91       	ld	r31, X
    2172:	12 97       	sbiw	r26, 0x02	; 2
    2174:	04 80       	ldd	r0, Z+4	; 0x04
    2176:	f5 81       	ldd	r31, Z+5	; 0x05
    2178:	e0 2d       	mov	r30, r0
    217a:	12 96       	adiw	r26, 0x02	; 2
    217c:	fc 93       	st	X, r31
    217e:	ee 93       	st	-X, r30
    2180:	11 97       	sbiw	r26, 0x01	; 1
    2182:	45 50       	subi	r20, 0x05	; 5
    2184:	59 4e       	sbci	r21, 0xE9	; 233
    2186:	e4 17       	cp	r30, r20
    2188:	f5 07       	cpc	r31, r21
    218a:	29 f4       	brne	.+10     	; 0x2196 <vTaskSwitchContext+0xc8>
    218c:	44 81       	ldd	r20, Z+4	; 0x04
    218e:	55 81       	ldd	r21, Z+5	; 0x05
    2190:	fd 01       	movw	r30, r26
    2192:	52 83       	std	Z+2, r21	; 0x02
    2194:	41 83       	std	Z+1, r20	; 0x01
    2196:	9b e0       	ldi	r25, 0x0B	; 11
    2198:	92 9f       	mul	r25, r18
    219a:	f0 01       	movw	r30, r0
    219c:	93 9f       	mul	r25, r19
    219e:	f0 0d       	add	r31, r0
    21a0:	11 24       	eor	r1, r1
    21a2:	e8 50       	subi	r30, 0x08	; 8
    21a4:	f9 4e       	sbci	r31, 0xE9	; 233
    21a6:	01 80       	ldd	r0, Z+1	; 0x01
    21a8:	f2 81       	ldd	r31, Z+2	; 0x02
    21aa:	e0 2d       	mov	r30, r0
    21ac:	20 85       	ldd	r18, Z+8	; 0x08
    21ae:	31 85       	ldd	r19, Z+9	; 0x09
    21b0:	30 93 25 17 	sts	0x1725, r19	; 0x801725 <pxCurrentTCB+0x1>
    21b4:	20 93 24 17 	sts	0x1724, r18	; 0x801724 <pxCurrentTCB>
    21b8:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    21bc:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    21c0:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    21c4:	81 a5       	ldd	r24, Z+41	; 0x29
    21c6:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <task_switch_in>
    21ca:	08 95       	ret

000021cc <vTaskPlaceOnEventList>:
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	6a 01       	movw	r12, r20
    21d6:	7b 01       	movw	r14, r22
    21d8:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    21dc:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    21e0:	62 5f       	subi	r22, 0xF2	; 242
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInsert>
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	c7 01       	movw	r24, r14
    21ec:	b6 01       	movw	r22, r12
    21ee:	b3 db       	rcall	.-2202   	; 0x1956 <prvAddCurrentTaskToDelayedList>
    21f0:	ff 90       	pop	r15
    21f2:	ef 90       	pop	r14
    21f4:	df 90       	pop	r13
    21f6:	cf 90       	pop	r12
    21f8:	08 95       	ret

000021fa <vTaskPlaceOnEventListRestricted>:
    21fa:	cf 92       	push	r12
    21fc:	df 92       	push	r13
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	cf 93       	push	r28
    2204:	6a 01       	movw	r12, r20
    2206:	7b 01       	movw	r14, r22
    2208:	c2 2f       	mov	r28, r18
    220a:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    220e:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2212:	62 5f       	subi	r22, 0xF2	; 242
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    221a:	cc 23       	and	r28, r28
    221c:	21 f0       	breq	.+8      	; 0x2226 <__stack+0x27>
    221e:	cc 24       	eor	r12, r12
    2220:	ca 94       	dec	r12
    2222:	dc 2c       	mov	r13, r12
    2224:	76 01       	movw	r14, r12
    2226:	4c 2f       	mov	r20, r28
    2228:	c7 01       	movw	r24, r14
    222a:	b6 01       	movw	r22, r12
    222c:	94 db       	rcall	.-2264   	; 0x1956 <prvAddCurrentTaskToDelayedList>
    222e:	cf 91       	pop	r28
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	08 95       	ret

0000223a <xTaskRemoveFromEventList>:
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	dc 01       	movw	r26, r24
    2244:	17 96       	adiw	r26, 0x07	; 7
    2246:	ed 91       	ld	r30, X+
    2248:	fc 91       	ld	r31, X
    224a:	18 97       	sbiw	r26, 0x08	; 8
    224c:	c0 85       	ldd	r28, Z+8	; 0x08
    224e:	d1 85       	ldd	r29, Z+9	; 0x09
    2250:	8e 01       	movw	r16, r28
    2252:	02 5f       	subi	r16, 0xF2	; 242
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	c8 01       	movw	r24, r16
    2258:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    225c:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    2260:	81 11       	cpse	r24, r1
    2262:	16 c0       	rjmp	.+44     	; 0x2290 <xTaskRemoveFromEventList+0x56>
    2264:	0c 50       	subi	r16, 0x0C	; 12
    2266:	11 09       	sbc	r17, r1
    2268:	c8 01       	movw	r24, r16
    226a:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    226e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2270:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    2274:	98 17       	cp	r25, r24
    2276:	10 f4       	brcc	.+4      	; 0x227c <xTaskRemoveFromEventList+0x42>
    2278:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    227c:	bb e0       	ldi	r27, 0x0B	; 11
    227e:	8b 9f       	mul	r24, r27
    2280:	c0 01       	movw	r24, r0
    2282:	11 24       	eor	r1, r1
    2284:	b8 01       	movw	r22, r16
    2286:	88 50       	subi	r24, 0x08	; 8
    2288:	99 4e       	sbci	r25, 0xE9	; 233
    228a:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    228e:	05 c0       	rjmp	.+10     	; 0x229a <xTaskRemoveFromEventList+0x60>
    2290:	b8 01       	movw	r22, r16
    2292:	83 ed       	ldi	r24, 0xD3	; 211
    2294:	96 e1       	ldi	r25, 0x16	; 22
    2296:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    229a:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    229e:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    22a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    22a6:	89 17       	cp	r24, r25
    22a8:	20 f4       	brcc	.+8      	; 0x22b2 <xTaskRemoveFromEventList+0x78>
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <xTaskRemoveFromEventList+0x7a>
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <vTaskSetTimeOutState>:
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	0f 92       	push	r0
    22c4:	20 91 b2 16 	lds	r18, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 83       	st	Z, r18
    22cc:	40 91 b7 16 	lds	r20, 0x16B7	; 0x8016b7 <xTickCount>
    22d0:	50 91 b8 16 	lds	r21, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    22d4:	60 91 b9 16 	lds	r22, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    22d8:	70 91 ba 16 	lds	r23, 0x16BA	; 0x8016ba <xTickCount+0x3>
    22dc:	41 83       	std	Z+1, r20	; 0x01
    22de:	52 83       	std	Z+2, r21	; 0x02
    22e0:	63 83       	std	Z+3, r22	; 0x03
    22e2:	74 83       	std	Z+4, r23	; 0x04
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	08 95       	ret

000022ea <vTaskInternalSetTimeOutState>:
    22ea:	20 91 b2 16 	lds	r18, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    22ee:	fc 01       	movw	r30, r24
    22f0:	20 83       	st	Z, r18
    22f2:	40 91 b7 16 	lds	r20, 0x16B7	; 0x8016b7 <xTickCount>
    22f6:	50 91 b8 16 	lds	r21, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    22fa:	60 91 b9 16 	lds	r22, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    22fe:	70 91 ba 16 	lds	r23, 0x16BA	; 0x8016ba <xTickCount+0x3>
    2302:	41 83       	std	Z+1, r20	; 0x01
    2304:	52 83       	std	Z+2, r21	; 0x02
    2306:	63 83       	std	Z+3, r22	; 0x03
    2308:	74 83       	std	Z+4, r23	; 0x04
    230a:	08 95       	ret

0000230c <xTaskCheckForTimeOut>:
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	fb 01       	movw	r30, r22
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	0f 92       	push	r0
    2324:	40 91 b7 16 	lds	r20, 0x16B7	; 0x8016b7 <xTickCount>
    2328:	50 91 b8 16 	lds	r21, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    232c:	60 91 b9 16 	lds	r22, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    2330:	70 91 ba 16 	lds	r23, 0x16BA	; 0x8016ba <xTickCount+0x3>
    2334:	00 81       	ld	r16, Z
    2336:	11 81       	ldd	r17, Z+1	; 0x01
    2338:	22 81       	ldd	r18, Z+2	; 0x02
    233a:	33 81       	ldd	r19, Z+3	; 0x03
    233c:	0f 3f       	cpi	r16, 0xFF	; 255
    233e:	af ef       	ldi	r26, 0xFF	; 255
    2340:	1a 07       	cpc	r17, r26
    2342:	2a 07       	cpc	r18, r26
    2344:	3a 07       	cpc	r19, r26
    2346:	49 f1       	breq	.+82     	; 0x239a <xTaskCheckForTimeOut+0x8e>
    2348:	ec 01       	movw	r28, r24
    234a:	c9 80       	ldd	r12, Y+1	; 0x01
    234c:	da 80       	ldd	r13, Y+2	; 0x02
    234e:	eb 80       	ldd	r14, Y+3	; 0x03
    2350:	fc 80       	ldd	r15, Y+4	; 0x04
    2352:	a0 91 b2 16 	lds	r26, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    2356:	b8 81       	ld	r27, Y
    2358:	ba 17       	cp	r27, r26
    235a:	29 f0       	breq	.+10     	; 0x2366 <xTaskCheckForTimeOut+0x5a>
    235c:	4c 15       	cp	r20, r12
    235e:	5d 05       	cpc	r21, r13
    2360:	6e 05       	cpc	r22, r14
    2362:	7f 05       	cpc	r23, r15
    2364:	e0 f4       	brcc	.+56     	; 0x239e <xTaskCheckForTimeOut+0x92>
    2366:	4c 19       	sub	r20, r12
    2368:	5d 09       	sbc	r21, r13
    236a:	6e 09       	sbc	r22, r14
    236c:	7f 09       	sbc	r23, r15
    236e:	40 17       	cp	r20, r16
    2370:	51 07       	cpc	r21, r17
    2372:	62 07       	cpc	r22, r18
    2374:	73 07       	cpc	r23, r19
    2376:	58 f4       	brcc	.+22     	; 0x238e <xTaskCheckForTimeOut+0x82>
    2378:	04 1b       	sub	r16, r20
    237a:	15 0b       	sbc	r17, r21
    237c:	26 0b       	sbc	r18, r22
    237e:	37 0b       	sbc	r19, r23
    2380:	00 83       	st	Z, r16
    2382:	11 83       	std	Z+1, r17	; 0x01
    2384:	22 83       	std	Z+2, r18	; 0x02
    2386:	33 83       	std	Z+3, r19	; 0x03
    2388:	b0 df       	rcall	.-160    	; 0x22ea <vTaskInternalSetTimeOutState>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	09 c0       	rjmp	.+18     	; 0x23a0 <xTaskCheckForTimeOut+0x94>
    238e:	10 82       	st	Z, r1
    2390:	11 82       	std	Z+1, r1	; 0x01
    2392:	12 82       	std	Z+2, r1	; 0x02
    2394:	13 82       	std	Z+3, r1	; 0x03
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <xTaskCheckForTimeOut+0x94>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <xTaskCheckForTimeOut+0x94>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	0f 90       	pop	r0
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ff 90       	pop	r15
    23ae:	ef 90       	pop	r14
    23b0:	df 90       	pop	r13
    23b2:	cf 90       	pop	r12
    23b4:	08 95       	ret

000023b6 <vTaskMissedYield>:
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    23bc:	08 95       	ret

000023be <xTaskGetCurrentTaskHandle>:
    23be:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    23c2:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    23c6:	08 95       	ret

000023c8 <xTaskGetSchedulerState>:
    23c8:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xSchedulerRunning>
    23cc:	88 23       	and	r24, r24
    23ce:	31 f0       	breq	.+12     	; 0x23dc <xTaskGetSchedulerState+0x14>
    23d0:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    23d4:	88 23       	and	r24, r24
    23d6:	21 f0       	breq	.+8      	; 0x23e0 <xTaskGetSchedulerState+0x18>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	08 95       	ret
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	08 95       	ret
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	08 95       	ret

000023e4 <xTaskPriorityDisinherit>:
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	fc 01       	movw	r30, r24
    23ee:	89 2b       	or	r24, r25
    23f0:	79 f1       	breq	.+94     	; 0x2450 <xTaskPriorityDisinherit+0x6c>
    23f2:	80 a5       	ldd	r24, Z+40	; 0x28
    23f4:	81 50       	subi	r24, 0x01	; 1
    23f6:	80 a7       	std	Z+40, r24	; 0x28
    23f8:	22 8d       	ldd	r18, Z+26	; 0x1a
    23fa:	97 a1       	ldd	r25, Z+39	; 0x27
    23fc:	29 17       	cp	r18, r25
    23fe:	51 f1       	breq	.+84     	; 0x2454 <xTaskPriorityDisinherit+0x70>
    2400:	81 11       	cpse	r24, r1
    2402:	2a c0       	rjmp	.+84     	; 0x2458 <xTaskPriorityDisinherit+0x74>
    2404:	ef 01       	movw	r28, r30
    2406:	8f 01       	movw	r16, r30
    2408:	0e 5f       	subi	r16, 0xFE	; 254
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	c8 01       	movw	r24, r16
    240e:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    2412:	8f a1       	ldd	r24, Y+39	; 0x27
    2414:	8a 8f       	std	Y+26, r24	; 0x1a
    2416:	44 e0       	ldi	r20, 0x04	; 4
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	48 1b       	sub	r20, r24
    2420:	51 09       	sbc	r21, r1
    2422:	61 09       	sbc	r22, r1
    2424:	71 09       	sbc	r23, r1
    2426:	4e 87       	std	Y+14, r20	; 0x0e
    2428:	5f 87       	std	Y+15, r21	; 0x0f
    242a:	68 8b       	std	Y+16, r22	; 0x10
    242c:	79 8b       	std	Y+17, r23	; 0x11
    242e:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    2432:	98 17       	cp	r25, r24
    2434:	10 f4       	brcc	.+4      	; 0x243a <xTaskPriorityDisinherit+0x56>
    2436:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    243a:	2b e0       	ldi	r18, 0x0B	; 11
    243c:	82 9f       	mul	r24, r18
    243e:	c0 01       	movw	r24, r0
    2440:	11 24       	eor	r1, r1
    2442:	b8 01       	movw	r22, r16
    2444:	88 50       	subi	r24, 0x08	; 8
    2446:	99 4e       	sbci	r25, 0xE9	; 233
    2448:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	05 c0       	rjmp	.+10     	; 0x245a <xTaskPriorityDisinherit+0x76>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	03 c0       	rjmp	.+6      	; 0x245a <xTaskPriorityDisinherit+0x76>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	01 c0       	rjmp	.+2      	; 0x245a <xTaskPriorityDisinherit+0x76>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	08 95       	ret

00002464 <xTaskNotifyWait>:
    2464:	4f 92       	push	r4
    2466:	5f 92       	push	r5
    2468:	6f 92       	push	r6
    246a:	7f 92       	push	r7
    246c:	8f 92       	push	r8
    246e:	9f 92       	push	r9
    2470:	af 92       	push	r10
    2472:	bf 92       	push	r11
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	49 01       	movw	r8, r18
    2482:	5a 01       	movw	r10, r20
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	0f 92       	push	r0
    248a:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    248e:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2492:	27 a5       	ldd	r18, Z+47	; 0x2f
    2494:	22 30       	cpi	r18, 0x02	; 2
    2496:	39 f1       	breq	.+78     	; 0x24e6 <xTaskNotifyWait+0x82>
    2498:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    249c:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    24a0:	43 a4       	ldd	r4, Z+43	; 0x2b
    24a2:	54 a4       	ldd	r5, Z+44	; 0x2c
    24a4:	65 a4       	ldd	r6, Z+45	; 0x2d
    24a6:	76 a4       	ldd	r7, Z+46	; 0x2e
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	80 95       	com	r24
    24ae:	90 95       	com	r25
    24b0:	a0 95       	com	r26
    24b2:	b0 95       	com	r27
    24b4:	84 21       	and	r24, r4
    24b6:	95 21       	and	r25, r5
    24b8:	a6 21       	and	r26, r6
    24ba:	b7 21       	and	r27, r7
    24bc:	83 a7       	std	Z+43, r24	; 0x2b
    24be:	94 a7       	std	Z+44, r25	; 0x2c
    24c0:	a5 a7       	std	Z+45, r26	; 0x2d
    24c2:	b6 a7       	std	Z+46, r27	; 0x2e
    24c4:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    24c8:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	87 a7       	std	Z+47, r24	; 0x2f
    24d0:	c1 14       	cp	r12, r1
    24d2:	d1 04       	cpc	r13, r1
    24d4:	e1 04       	cpc	r14, r1
    24d6:	f1 04       	cpc	r15, r1
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <xTaskNotifyWait+0x82>
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	c7 01       	movw	r24, r14
    24de:	b6 01       	movw	r22, r12
    24e0:	3a da       	rcall	.-2956   	; 0x1956 <prvAddCurrentTaskToDelayedList>
    24e2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vPortYield>
    24e6:	0f 90       	pop	r0
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
    24f0:	01 15       	cp	r16, r1
    24f2:	11 05       	cpc	r17, r1
    24f4:	69 f0       	breq	.+26     	; 0x2510 <xTaskNotifyWait+0xac>
    24f6:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    24fa:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    24fe:	83 a5       	ldd	r24, Z+43	; 0x2b
    2500:	94 a5       	ldd	r25, Z+44	; 0x2c
    2502:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2504:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2506:	f8 01       	movw	r30, r16
    2508:	80 83       	st	Z, r24
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	a2 83       	std	Z+2, r26	; 0x02
    250e:	b3 83       	std	Z+3, r27	; 0x03
    2510:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    2514:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2518:	87 a5       	ldd	r24, Z+47	; 0x2f
    251a:	82 30       	cpi	r24, 0x02	; 2
    251c:	b1 f4       	brne	.+44     	; 0x254a <xTaskNotifyWait+0xe6>
    251e:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    2522:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2526:	83 a5       	ldd	r24, Z+43	; 0x2b
    2528:	94 a5       	ldd	r25, Z+44	; 0x2c
    252a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    252c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    252e:	80 94       	com	r8
    2530:	90 94       	com	r9
    2532:	a0 94       	com	r10
    2534:	b0 94       	com	r11
    2536:	88 22       	and	r8, r24
    2538:	99 22       	and	r9, r25
    253a:	aa 22       	and	r10, r26
    253c:	bb 22       	and	r11, r27
    253e:	83 a6       	std	Z+43, r8	; 0x2b
    2540:	94 a6       	std	Z+44, r9	; 0x2c
    2542:	a5 a6       	std	Z+45, r10	; 0x2d
    2544:	b6 a6       	std	Z+46, r11	; 0x2e
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	01 c0       	rjmp	.+2      	; 0x254c <xTaskNotifyWait+0xe8>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    2550:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2554:	17 a6       	std	Z+47, r1	; 0x2f
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	ff 90       	pop	r15
    2560:	ef 90       	pop	r14
    2562:	df 90       	pop	r13
    2564:	cf 90       	pop	r12
    2566:	bf 90       	pop	r11
    2568:	af 90       	pop	r10
    256a:	9f 90       	pop	r9
    256c:	8f 90       	pop	r8
    256e:	7f 90       	pop	r7
    2570:	6f 90       	pop	r6
    2572:	5f 90       	pop	r5
    2574:	4f 90       	pop	r4
    2576:	08 95       	ret

00002578 <xTaskGenericNotify>:
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	fc 01       	movw	r30, r24
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	0f 92       	push	r0
    2588:	01 15       	cp	r16, r1
    258a:	11 05       	cpc	r17, r1
    258c:	49 f0       	breq	.+18     	; 0x25a0 <xTaskGenericNotify+0x28>
    258e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2590:	94 a5       	ldd	r25, Z+44	; 0x2c
    2592:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2594:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2596:	e8 01       	movw	r28, r16
    2598:	88 83       	st	Y, r24
    259a:	99 83       	std	Y+1, r25	; 0x01
    259c:	aa 83       	std	Y+2, r26	; 0x02
    259e:	bb 83       	std	Y+3, r27	; 0x03
    25a0:	87 a5       	ldd	r24, Z+47	; 0x2f
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	97 a7       	std	Z+47, r25	; 0x2f
    25a6:	22 30       	cpi	r18, 0x02	; 2
    25a8:	b1 f0       	breq	.+44     	; 0x25d6 <xTaskGenericNotify+0x5e>
    25aa:	18 f4       	brcc	.+6      	; 0x25b2 <xTaskGenericNotify+0x3a>
    25ac:	21 30       	cpi	r18, 0x01	; 1
    25ae:	31 f0       	breq	.+12     	; 0x25bc <xTaskGenericNotify+0x44>
    25b0:	2a c0       	rjmp	.+84     	; 0x2606 <xTaskGenericNotify+0x8e>
    25b2:	23 30       	cpi	r18, 0x03	; 3
    25b4:	e9 f0       	breq	.+58     	; 0x25f0 <xTaskGenericNotify+0x78>
    25b6:	24 30       	cpi	r18, 0x04	; 4
    25b8:	01 f1       	breq	.+64     	; 0x25fa <xTaskGenericNotify+0x82>
    25ba:	25 c0       	rjmp	.+74     	; 0x2606 <xTaskGenericNotify+0x8e>
    25bc:	03 a5       	ldd	r16, Z+43	; 0x2b
    25be:	14 a5       	ldd	r17, Z+44	; 0x2c
    25c0:	25 a5       	ldd	r18, Z+45	; 0x2d
    25c2:	36 a5       	ldd	r19, Z+46	; 0x2e
    25c4:	40 2b       	or	r20, r16
    25c6:	51 2b       	or	r21, r17
    25c8:	62 2b       	or	r22, r18
    25ca:	73 2b       	or	r23, r19
    25cc:	43 a7       	std	Z+43, r20	; 0x2b
    25ce:	54 a7       	std	Z+44, r21	; 0x2c
    25d0:	65 a7       	std	Z+45, r22	; 0x2d
    25d2:	76 a7       	std	Z+46, r23	; 0x2e
    25d4:	18 c0       	rjmp	.+48     	; 0x2606 <xTaskGenericNotify+0x8e>
    25d6:	43 a5       	ldd	r20, Z+43	; 0x2b
    25d8:	54 a5       	ldd	r21, Z+44	; 0x2c
    25da:	65 a5       	ldd	r22, Z+45	; 0x2d
    25dc:	76 a5       	ldd	r23, Z+46	; 0x2e
    25de:	4f 5f       	subi	r20, 0xFF	; 255
    25e0:	5f 4f       	sbci	r21, 0xFF	; 255
    25e2:	6f 4f       	sbci	r22, 0xFF	; 255
    25e4:	7f 4f       	sbci	r23, 0xFF	; 255
    25e6:	43 a7       	std	Z+43, r20	; 0x2b
    25e8:	54 a7       	std	Z+44, r21	; 0x2c
    25ea:	65 a7       	std	Z+45, r22	; 0x2d
    25ec:	76 a7       	std	Z+46, r23	; 0x2e
    25ee:	0b c0       	rjmp	.+22     	; 0x2606 <xTaskGenericNotify+0x8e>
    25f0:	43 a7       	std	Z+43, r20	; 0x2b
    25f2:	54 a7       	std	Z+44, r21	; 0x2c
    25f4:	65 a7       	std	Z+45, r22	; 0x2d
    25f6:	76 a7       	std	Z+46, r23	; 0x2e
    25f8:	06 c0       	rjmp	.+12     	; 0x2606 <xTaskGenericNotify+0x8e>
    25fa:	82 30       	cpi	r24, 0x02	; 2
    25fc:	49 f1       	breq	.+82     	; 0x2650 <xTaskGenericNotify+0xd8>
    25fe:	43 a7       	std	Z+43, r20	; 0x2b
    2600:	54 a7       	std	Z+44, r21	; 0x2c
    2602:	65 a7       	std	Z+45, r22	; 0x2d
    2604:	76 a7       	std	Z+46, r23	; 0x2e
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	29 f5       	brne	.+74     	; 0x2654 <xTaskGenericNotify+0xdc>
    260a:	ef 01       	movw	r28, r30
    260c:	8f 01       	movw	r16, r30
    260e:	0e 5f       	subi	r16, 0xFE	; 254
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	c8 01       	movw	r24, r16
    2614:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    2618:	8a 8d       	ldd	r24, Y+26	; 0x1a
    261a:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    261e:	98 17       	cp	r25, r24
    2620:	10 f4       	brcc	.+4      	; 0x2626 <xTaskGenericNotify+0xae>
    2622:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    2626:	2b e0       	ldi	r18, 0x0B	; 11
    2628:	82 9f       	mul	r24, r18
    262a:	c0 01       	movw	r24, r0
    262c:	11 24       	eor	r1, r1
    262e:	b8 01       	movw	r22, r16
    2630:	88 50       	subi	r24, 0x08	; 8
    2632:	99 4e       	sbci	r25, 0xE9	; 233
    2634:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    2638:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    263c:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2640:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2642:	82 8d       	ldd	r24, Z+26	; 0x1a
    2644:	89 17       	cp	r24, r25
    2646:	40 f4       	brcc	.+16     	; 0x2658 <xTaskGenericNotify+0xe0>
    2648:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vPortYield>
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	05 c0       	rjmp	.+10     	; 0x265a <xTaskGenericNotify+0xe2>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	03 c0       	rjmp	.+6      	; 0x265a <xTaskGenericNotify+0xe2>
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	01 c0       	rjmp	.+2      	; 0x265a <xTaskGenericNotify+0xe2>
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	0f 90       	pop	r0
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	08 95       	ret

00002668 <xTaskGenericNotifyFromISR>:
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	fc 01       	movw	r30, r24
    2676:	01 15       	cp	r16, r1
    2678:	11 05       	cpc	r17, r1
    267a:	49 f0       	breq	.+18     	; 0x268e <xTaskGenericNotifyFromISR+0x26>
    267c:	83 a5       	ldd	r24, Z+43	; 0x2b
    267e:	94 a5       	ldd	r25, Z+44	; 0x2c
    2680:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2682:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2684:	e8 01       	movw	r28, r16
    2686:	88 83       	st	Y, r24
    2688:	99 83       	std	Y+1, r25	; 0x01
    268a:	aa 83       	std	Y+2, r26	; 0x02
    268c:	bb 83       	std	Y+3, r27	; 0x03
    268e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2690:	92 e0       	ldi	r25, 0x02	; 2
    2692:	97 a7       	std	Z+47, r25	; 0x2f
    2694:	22 30       	cpi	r18, 0x02	; 2
    2696:	b1 f0       	breq	.+44     	; 0x26c4 <xTaskGenericNotifyFromISR+0x5c>
    2698:	18 f4       	brcc	.+6      	; 0x26a0 <xTaskGenericNotifyFromISR+0x38>
    269a:	21 30       	cpi	r18, 0x01	; 1
    269c:	31 f0       	breq	.+12     	; 0x26aa <xTaskGenericNotifyFromISR+0x42>
    269e:	2a c0       	rjmp	.+84     	; 0x26f4 <xTaskGenericNotifyFromISR+0x8c>
    26a0:	23 30       	cpi	r18, 0x03	; 3
    26a2:	e9 f0       	breq	.+58     	; 0x26de <xTaskGenericNotifyFromISR+0x76>
    26a4:	24 30       	cpi	r18, 0x04	; 4
    26a6:	01 f1       	breq	.+64     	; 0x26e8 <xTaskGenericNotifyFromISR+0x80>
    26a8:	25 c0       	rjmp	.+74     	; 0x26f4 <xTaskGenericNotifyFromISR+0x8c>
    26aa:	03 a5       	ldd	r16, Z+43	; 0x2b
    26ac:	14 a5       	ldd	r17, Z+44	; 0x2c
    26ae:	25 a5       	ldd	r18, Z+45	; 0x2d
    26b0:	36 a5       	ldd	r19, Z+46	; 0x2e
    26b2:	40 2b       	or	r20, r16
    26b4:	51 2b       	or	r21, r17
    26b6:	62 2b       	or	r22, r18
    26b8:	73 2b       	or	r23, r19
    26ba:	43 a7       	std	Z+43, r20	; 0x2b
    26bc:	54 a7       	std	Z+44, r21	; 0x2c
    26be:	65 a7       	std	Z+45, r22	; 0x2d
    26c0:	76 a7       	std	Z+46, r23	; 0x2e
    26c2:	18 c0       	rjmp	.+48     	; 0x26f4 <xTaskGenericNotifyFromISR+0x8c>
    26c4:	43 a5       	ldd	r20, Z+43	; 0x2b
    26c6:	54 a5       	ldd	r21, Z+44	; 0x2c
    26c8:	65 a5       	ldd	r22, Z+45	; 0x2d
    26ca:	76 a5       	ldd	r23, Z+46	; 0x2e
    26cc:	4f 5f       	subi	r20, 0xFF	; 255
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	6f 4f       	sbci	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	43 a7       	std	Z+43, r20	; 0x2b
    26d6:	54 a7       	std	Z+44, r21	; 0x2c
    26d8:	65 a7       	std	Z+45, r22	; 0x2d
    26da:	76 a7       	std	Z+46, r23	; 0x2e
    26dc:	0b c0       	rjmp	.+22     	; 0x26f4 <xTaskGenericNotifyFromISR+0x8c>
    26de:	43 a7       	std	Z+43, r20	; 0x2b
    26e0:	54 a7       	std	Z+44, r21	; 0x2c
    26e2:	65 a7       	std	Z+45, r22	; 0x2d
    26e4:	76 a7       	std	Z+46, r23	; 0x2e
    26e6:	06 c0       	rjmp	.+12     	; 0x26f4 <xTaskGenericNotifyFromISR+0x8c>
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	d9 f1       	breq	.+118    	; 0x2762 <xTaskGenericNotifyFromISR+0xfa>
    26ec:	43 a7       	std	Z+43, r20	; 0x2b
    26ee:	54 a7       	std	Z+44, r21	; 0x2c
    26f0:	65 a7       	std	Z+45, r22	; 0x2d
    26f2:	76 a7       	std	Z+46, r23	; 0x2e
    26f4:	81 30       	cpi	r24, 0x01	; 1
    26f6:	b9 f5       	brne	.+110    	; 0x2766 <xTaskGenericNotifyFromISR+0xfe>
    26f8:	ef 01       	movw	r28, r30
    26fa:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    26fe:	81 11       	cpse	r24, r1
    2700:	17 c0       	rjmp	.+46     	; 0x2730 <xTaskGenericNotifyFromISR+0xc8>
    2702:	8f 01       	movw	r16, r30
    2704:	0e 5f       	subi	r16, 0xFE	; 254
    2706:	1f 4f       	sbci	r17, 0xFF	; 255
    2708:	c8 01       	movw	r24, r16
    270a:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
    270e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2710:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    2714:	98 17       	cp	r25, r24
    2716:	10 f4       	brcc	.+4      	; 0x271c <xTaskGenericNotifyFromISR+0xb4>
    2718:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    271c:	eb e0       	ldi	r30, 0x0B	; 11
    271e:	8e 9f       	mul	r24, r30
    2720:	c0 01       	movw	r24, r0
    2722:	11 24       	eor	r1, r1
    2724:	b8 01       	movw	r22, r16
    2726:	88 50       	subi	r24, 0x08	; 8
    2728:	99 4e       	sbci	r25, 0xE9	; 233
    272a:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    272e:	07 c0       	rjmp	.+14     	; 0x273e <xTaskGenericNotifyFromISR+0xd6>
    2730:	bf 01       	movw	r22, r30
    2732:	62 5f       	subi	r22, 0xF2	; 242
    2734:	7f 4f       	sbci	r23, 0xFF	; 255
    2736:	83 ed       	ldi	r24, 0xD3	; 211
    2738:	96 e1       	ldi	r25, 0x16	; 22
    273a:	0e 94 bd 04 	call	0x97a	; 0x97a <vListInsertEnd>
    273e:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    2742:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2746:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2748:	82 8d       	ldd	r24, Z+26	; 0x1a
    274a:	89 17       	cp	r24, r25
    274c:	70 f4       	brcc	.+28     	; 0x276a <xTaskGenericNotifyFromISR+0x102>
    274e:	e1 14       	cp	r14, r1
    2750:	f1 04       	cpc	r15, r1
    2752:	19 f0       	breq	.+6      	; 0x275a <xTaskGenericNotifyFromISR+0xf2>
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	e7 01       	movw	r28, r14
    2758:	88 83       	st	Y, r24
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    2760:	05 c0       	rjmp	.+10     	; 0x276c <xTaskGenericNotifyFromISR+0x104>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	03 c0       	rjmp	.+6      	; 0x276c <xTaskGenericNotifyFromISR+0x104>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	01 c0       	rjmp	.+2      	; 0x276c <xTaskGenericNotifyFromISR+0x104>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	08 95       	ret

0000277a <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	21 f4       	brne	.+8      	; 0x2786 <xTaskNotifyStateClear+0xc>
    277e:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    2782:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    278c:	fc 01       	movw	r30, r24
    278e:	27 a5       	ldd	r18, Z+47	; 0x2f
    2790:	22 30       	cpi	r18, 0x02	; 2
    2792:	19 f4       	brne	.+6      	; 0x279a <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2794:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	01 c0       	rjmp	.+2      	; 0x279c <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    279a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    279c:	0f 90       	pop	r0
    279e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    27a0:	08 95       	ret

000027a2 <prvInsertTimerInActiveList>:
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	fc 01       	movw	r30, r24
    27b0:	42 83       	std	Z+2, r20	; 0x02
    27b2:	53 83       	std	Z+3, r21	; 0x03
    27b4:	64 83       	std	Z+4, r22	; 0x04
    27b6:	75 83       	std	Z+5, r23	; 0x05
    27b8:	93 87       	std	Z+11, r25	; 0x0b
    27ba:	82 87       	std	Z+10, r24	; 0x0a
    27bc:	04 17       	cp	r16, r20
    27be:	15 07       	cpc	r17, r21
    27c0:	26 07       	cpc	r18, r22
    27c2:	37 07       	cpc	r19, r23
    27c4:	c0 f0       	brcs	.+48     	; 0x27f6 <prvInsertTimerInActiveList+0x54>
    27c6:	0c 19       	sub	r16, r12
    27c8:	1d 09       	sbc	r17, r13
    27ca:	2e 09       	sbc	r18, r14
    27cc:	3f 09       	sbc	r19, r15
    27ce:	86 85       	ldd	r24, Z+14	; 0x0e
    27d0:	97 85       	ldd	r25, Z+15	; 0x0f
    27d2:	a0 89       	ldd	r26, Z+16	; 0x10
    27d4:	b1 89       	ldd	r27, Z+17	; 0x11
    27d6:	08 17       	cp	r16, r24
    27d8:	19 07       	cpc	r17, r25
    27da:	2a 07       	cpc	r18, r26
    27dc:	3b 07       	cpc	r19, r27
    27de:	00 f5       	brcc	.+64     	; 0x2820 <prvInsertTimerInActiveList+0x7e>
    27e0:	bf 01       	movw	r22, r30
    27e2:	6e 5f       	subi	r22, 0xFE	; 254
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <pxOverflowTimerList>
    27ea:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <pxOverflowTimerList+0x1>
    27ee:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInsert>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	18 c0       	rjmp	.+48     	; 0x2826 <prvInsertTimerInActiveList+0x84>
    27f6:	0c 15       	cp	r16, r12
    27f8:	1d 05       	cpc	r17, r13
    27fa:	2e 05       	cpc	r18, r14
    27fc:	3f 05       	cpc	r19, r15
    27fe:	28 f4       	brcc	.+10     	; 0x280a <prvInsertTimerInActiveList+0x68>
    2800:	4c 15       	cp	r20, r12
    2802:	5d 05       	cpc	r21, r13
    2804:	6e 05       	cpc	r22, r14
    2806:	7f 05       	cpc	r23, r15
    2808:	68 f4       	brcc	.+26     	; 0x2824 <prvInsertTimerInActiveList+0x82>
    280a:	bf 01       	movw	r22, r30
    280c:	6e 5f       	subi	r22, 0xFE	; 254
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <pxCurrentTimerList>
    2814:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
    2818:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInsert>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <prvInsertTimerInActiveList+0x84>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <prvInsertTimerInActiveList+0x84>
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	df 90       	pop	r13
    2830:	cf 90       	pop	r12
    2832:	08 95       	ret

00002834 <prvCheckForValidListAndQueue>:
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	0f 92       	push	r0
    283a:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    283e:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    2842:	89 2b       	or	r24, r25
    2844:	e9 f4       	brne	.+58     	; 0x2880 <prvCheckForValidListAndQueue+0x4c>
    2846:	8d e3       	ldi	r24, 0x3D	; 61
    2848:	97 e1       	ldi	r25, 0x17	; 23
    284a:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    284e:	82 e3       	ldi	r24, 0x32	; 50
    2850:	97 e1       	ldi	r25, 0x17	; 23
    2852:	0e 94 a8 04 	call	0x950	; 0x950 <vListInitialise>
    2856:	8d e3       	ldi	r24, 0x3D	; 61
    2858:	97 e1       	ldi	r25, 0x17	; 23
    285a:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <pxCurrentTimerList+0x1>
    285e:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <pxCurrentTimerList>
    2862:	82 e3       	ldi	r24, 0x32	; 50
    2864:	97 e1       	ldi	r25, 0x17	; 23
    2866:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <pxOverflowTimerList+0x1>
    286a:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <pxOverflowTimerList>
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	67 e0       	ldi	r22, 0x07	; 7
    2872:	8a e0       	ldi	r24, 0x0A	; 10
    2874:	0e 94 cc 07 	call	0xf98	; 0xf98 <xQueueGenericCreate>
    2878:	90 93 2d 17 	sts	0x172D, r25	; 0x80172d <xTimerQueue+0x1>
    287c:	80 93 2c 17 	sts	0x172C, r24	; 0x80172c <xTimerQueue>
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	08 95       	ret

00002886 <xTimerCreateTimerTask>:
    2886:	ef 92       	push	r14
    2888:	ff 92       	push	r15
    288a:	0f 93       	push	r16
    288c:	d3 df       	rcall	.-90     	; 0x2834 <prvCheckForValidListAndQueue>
    288e:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    2892:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    2896:	89 2b       	or	r24, r25
    2898:	89 f0       	breq	.+34     	; 0x28bc <xTimerCreateTimerTask+0x36>
    289a:	0f 2e       	mov	r0, r31
    289c:	fa e2       	ldi	r31, 0x2A	; 42
    289e:	ef 2e       	mov	r14, r31
    28a0:	f7 e1       	ldi	r31, 0x17	; 23
    28a2:	ff 2e       	mov	r15, r31
    28a4:	f0 2d       	mov	r31, r0
    28a6:	03 e0       	ldi	r16, 0x03	; 3
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	45 e5       	ldi	r20, 0x55	; 85
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	6a e8       	ldi	r22, 0x8A	; 138
    28b2:	73 e0       	ldi	r23, 0x03	; 3
    28b4:	82 eb       	ldi	r24, 0xB2	; 178
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	c4 d8       	rcall	.-3704   	; 0x1a42 <xTaskCreate>
    28ba:	01 c0       	rjmp	.+2      	; 0x28be <xTimerCreateTimerTask+0x38>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	0f 91       	pop	r16
    28c0:	ff 90       	pop	r15
    28c2:	ef 90       	pop	r14
    28c4:	08 95       	ret

000028c6 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    28c6:	8f 92       	push	r8
    28c8:	9f 92       	push	r9
    28ca:	af 92       	push	r10
    28cc:	bf 92       	push	r11
    28ce:	cf 92       	push	r12
    28d0:	df 92       	push	r13
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	27 97       	sbiw	r28, 0x07	; 7
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    28ee:	e0 91 2c 17 	lds	r30, 0x172C	; 0x80172c <xTimerQueue>
    28f2:	f0 91 2d 17 	lds	r31, 0x172D	; 0x80172d <xTimerQueue+0x1>
    28f6:	30 97       	sbiw	r30, 0x00	; 0
    28f8:	81 f1       	breq	.+96     	; 0x295a <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    28fa:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    28fc:	2a 83       	std	Y+2, r18	; 0x02
    28fe:	3b 83       	std	Y+3, r19	; 0x03
    2900:	4c 83       	std	Y+4, r20	; 0x04
    2902:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2904:	9f 83       	std	Y+7, r25	; 0x07
    2906:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2908:	66 30       	cpi	r22, 0x06	; 6
    290a:	f4 f4       	brge	.+60     	; 0x2948 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    290c:	5d dd       	rcall	.-1350   	; 0x23c8 <xTaskGetSchedulerState>
    290e:	82 30       	cpi	r24, 0x02	; 2
    2910:	69 f4       	brne	.+26     	; 0x292c <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2912:	00 e0       	ldi	r16, 0x00	; 0
    2914:	a7 01       	movw	r20, r14
    2916:	96 01       	movw	r18, r12
    2918:	be 01       	movw	r22, r28
    291a:	6f 5f       	subi	r22, 0xFF	; 255
    291c:	7f 4f       	sbci	r23, 0xFF	; 255
    291e:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    2922:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    2926:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueGenericSend>
    292a:	18 c0       	rjmp	.+48     	; 0x295c <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    292c:	00 e0       	ldi	r16, 0x00	; 0
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	a9 01       	movw	r20, r18
    2934:	be 01       	movw	r22, r28
    2936:	6f 5f       	subi	r22, 0xFF	; 255
    2938:	7f 4f       	sbci	r23, 0xFF	; 255
    293a:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    293e:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    2942:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueGenericSend>
    2946:	0a c0       	rjmp	.+20     	; 0x295c <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	a8 01       	movw	r20, r16
    294c:	be 01       	movw	r22, r28
    294e:	6f 5f       	subi	r22, 0xFF	; 255
    2950:	7f 4f       	sbci	r23, 0xFF	; 255
    2952:	cf 01       	movw	r24, r30
    2954:	0e 94 b5 08 	call	0x116a	; 0x116a <xQueueGenericSendFromISR>
    2958:	01 c0       	rjmp	.+2      	; 0x295c <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    295a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    295c:	27 96       	adiw	r28, 0x07	; 7
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
    2978:	bf 90       	pop	r11
    297a:	af 90       	pop	r10
    297c:	9f 90       	pop	r9
    297e:	8f 90       	pop	r8
    2980:	08 95       	ret

00002982 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2982:	2f 92       	push	r2
    2984:	3f 92       	push	r3
    2986:	4f 92       	push	r4
    2988:	5f 92       	push	r5
    298a:	6f 92       	push	r6
    298c:	7f 92       	push	r7
    298e:	8f 92       	push	r8
    2990:	9f 92       	push	r9
    2992:	af 92       	push	r10
    2994:	bf 92       	push	r11
    2996:	cf 92       	push	r12
    2998:	df 92       	push	r13
    299a:	ef 92       	push	r14
    299c:	ff 92       	push	r15
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    29a8:	ad d9       	rcall	.-3238   	; 0x1d04 <xTaskGetTickCount>
    29aa:	2b 01       	movw	r4, r22
    29ac:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    29ae:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <xLastTime.2432>
    29b2:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <xLastTime.2432+0x1>
    29b6:	a0 91 28 17 	lds	r26, 0x1728	; 0x801728 <xLastTime.2432+0x2>
    29ba:	b0 91 29 17 	lds	r27, 0x1729	; 0x801729 <xLastTime.2432+0x3>
    29be:	48 16       	cp	r4, r24
    29c0:	59 06       	cpc	r5, r25
    29c2:	6a 06       	cpc	r6, r26
    29c4:	7b 06       	cpc	r7, r27
    29c6:	08 f0       	brcs	.+2      	; 0x29ca <prvSampleTimeNow+0x48>
    29c8:	53 c0       	rjmp	.+166    	; 0x2a70 <prvSampleTimeNow+0xee>
    29ca:	3b c0       	rjmp	.+118    	; 0x2a42 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    29cc:	07 80       	ldd	r0, Z+7	; 0x07
    29ce:	f0 85       	ldd	r31, Z+8	; 0x08
    29d0:	e0 2d       	mov	r30, r0
    29d2:	80 80       	ld	r8, Z
    29d4:	91 80       	ldd	r9, Z+1	; 0x01
    29d6:	a2 80       	ldd	r10, Z+2	; 0x02
    29d8:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    29da:	c0 85       	ldd	r28, Z+8	; 0x08
    29dc:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29de:	8e 01       	movw	r16, r28
    29e0:	0e 5f       	subi	r16, 0xFE	; 254
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	c8 01       	movw	r24, r16
    29e6:	0e 94 1b 05 	call	0xa36	; 0xa36 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29ea:	ec 89       	ldd	r30, Y+20	; 0x14
    29ec:	fd 89       	ldd	r31, Y+21	; 0x15
    29ee:	ce 01       	movw	r24, r28
    29f0:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29f2:	8f 89       	ldd	r24, Y+23	; 0x17
    29f4:	82 ff       	sbrs	r24, 2
    29f6:	25 c0       	rjmp	.+74     	; 0x2a42 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    29f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    29fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    29fc:	a8 89       	ldd	r26, Y+16	; 0x10
    29fe:	b9 89       	ldd	r27, Y+17	; 0x11
    2a00:	88 0d       	add	r24, r8
    2a02:	99 1d       	adc	r25, r9
    2a04:	aa 1d       	adc	r26, r10
    2a06:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2a08:	88 16       	cp	r8, r24
    2a0a:	99 06       	cpc	r9, r25
    2a0c:	aa 06       	cpc	r10, r26
    2a0e:	bb 06       	cpc	r11, r27
    2a10:	70 f4       	brcc	.+28     	; 0x2a2e <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a12:	8a 83       	std	Y+2, r24	; 0x02
    2a14:	9b 83       	std	Y+3, r25	; 0x03
    2a16:	ac 83       	std	Y+4, r26	; 0x04
    2a18:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a1a:	db 87       	std	Y+11, r29	; 0x0b
    2a1c:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a1e:	b8 01       	movw	r22, r16
    2a20:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <pxCurrentTimerList>
    2a24:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
    2a28:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInsert>
    2a2c:	0a c0       	rjmp	.+20     	; 0x2a42 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a2e:	c1 2c       	mov	r12, r1
    2a30:	d1 2c       	mov	r13, r1
    2a32:	76 01       	movw	r14, r12
    2a34:	00 e0       	ldi	r16, 0x00	; 0
    2a36:	10 e0       	ldi	r17, 0x00	; 0
    2a38:	a5 01       	movw	r20, r10
    2a3a:	94 01       	movw	r18, r8
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	ce 01       	movw	r24, r28
    2a40:	42 df       	rcall	.-380    	; 0x28c6 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a42:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <pxCurrentTimerList>
    2a46:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
    2a4a:	80 81       	ld	r24, Z
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	be cf       	rjmp	.-132    	; 0x29cc <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2a50:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <pxOverflowTimerList>
    2a54:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <pxOverflowTimerList+0x1>
    2a58:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <pxCurrentTimerList+0x1>
    2a5c:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2a60:	f0 93 2f 17 	sts	0x172F, r31	; 0x80172f <pxOverflowTimerList+0x1>
    2a64:	e0 93 2e 17 	sts	0x172E, r30	; 0x80172e <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	f1 01       	movw	r30, r2
    2a6c:	80 83       	st	Z, r24
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2a70:	f1 01       	movw	r30, r2
    2a72:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2a74:	40 92 26 17 	sts	0x1726, r4	; 0x801726 <xLastTime.2432>
    2a78:	50 92 27 17 	sts	0x1727, r5	; 0x801727 <xLastTime.2432+0x1>
    2a7c:	60 92 28 17 	sts	0x1728, r6	; 0x801728 <xLastTime.2432+0x2>
    2a80:	70 92 29 17 	sts	0x1729, r7	; 0x801729 <xLastTime.2432+0x3>

    return xTimeNow;
}
    2a84:	c3 01       	movw	r24, r6
    2a86:	b2 01       	movw	r22, r4
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	bf 90       	pop	r11
    2a9a:	af 90       	pop	r10
    2a9c:	9f 90       	pop	r9
    2a9e:	8f 90       	pop	r8
    2aa0:	7f 90       	pop	r7
    2aa2:	6f 90       	pop	r6
    2aa4:	5f 90       	pop	r5
    2aa6:	4f 90       	pop	r4
    2aa8:	3f 90       	pop	r3
    2aaa:	2f 90       	pop	r2
    2aac:	08 95       	ret

00002aae <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2aae:	08 95       	ret

00002ab0 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ab0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ab2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ab4:	2f ef       	ldi	r18, 0xFF	; 255
    2ab6:	80 e7       	ldi	r24, 0x70	; 112
    2ab8:	92 e0       	ldi	r25, 0x02	; 2
    2aba:	21 50       	subi	r18, 0x01	; 1
    2abc:	80 40       	sbci	r24, 0x00	; 0
    2abe:	90 40       	sbci	r25, 0x00	; 0
    2ac0:	e1 f7       	brne	.-8      	; 0x2aba <vApplicationMallocFailedHook+0xa>
    2ac2:	00 c0       	rjmp	.+0      	; 0x2ac4 <vApplicationMallocFailedHook+0x14>
    2ac4:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2ac6:	1f 9a       	sbi	0x03, 7	; 3
    2ac8:	f5 cf       	rjmp	.-22     	; 0x2ab4 <vApplicationMallocFailedHook+0x4>

00002aca <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2aca:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2acc:	2f 9a       	sbi	0x05, 7	; 5
    2ace:	2f ef       	ldi	r18, 0xFF	; 255
    2ad0:	87 ea       	ldi	r24, 0xA7	; 167
    2ad2:	91 e6       	ldi	r25, 0x61	; 97
    2ad4:	21 50       	subi	r18, 0x01	; 1
    2ad6:	80 40       	sbci	r24, 0x00	; 0
    2ad8:	90 40       	sbci	r25, 0x00	; 0
    2ada:	e1 f7       	brne	.-8      	; 0x2ad4 <vApplicationStackOverflowHook+0xa>
    2adc:	00 c0       	rjmp	.+0      	; 0x2ade <vApplicationStackOverflowHook+0x14>
    2ade:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2ae0:	1f 9a       	sbi	0x03, 7	; 3
    2ae2:	f5 cf       	rjmp	.-22     	; 0x2ace <vApplicationStackOverflowHook+0x4>

00002ae4 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <task1+0x6>
    2aea:	1f 92       	push	r1
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	db da       	rcall	.-2634   	; 0x20b0 <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2afa:	04 d9       	rcall	.-3576   	; 0x1d04 <xTaskGetTickCount>
    2afc:	69 83       	std	Y+1, r22	; 0x01
    2afe:	7a 83       	std	Y+2, r23	; 0x02
    2b00:	8b 83       	std	Y+3, r24	; 0x03
    2b02:	9c 83       	std	Y+4, r25	; 0x04
    2b04:	11 e0       	ldi	r17, 0x01	; 1

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2b06:	4f e1       	ldi	r20, 0x1F	; 31
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	ce 01       	movw	r24, r28
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	57 da       	rcall	.-2898   	; 0x1fc2 <vTaskDelayUntil>
    2b14:	82 b1       	in	r24, 0x02	; 2
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2b16:	81 27       	eor	r24, r17
    2b18:	82 b9       	out	0x02, r24	; 2
    2b1a:	f5 cf       	rjmp	.-22     	; 0x2b06 <task1+0x22>

00002b1c <task2>:
    2b1c:	cf 93       	push	r28
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    2b1e:	df 93       	push	r29
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <task2+0x6>
    2b22:	1f 92       	push	r1
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    2b28:	62 e0       	ldi	r22, 0x02	; 2
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	bf da       	rcall	.-2690   	; 0x20b0 <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2b32:	e8 d8       	rcall	.-3632   	; 0x1d04 <xTaskGetTickCount>
    2b34:	69 83       	std	Y+1, r22	; 0x01
    2b36:	7a 83       	std	Y+2, r23	; 0x02
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	4e e3       	ldi	r20, 0x3E	; 62

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	70 e0       	ldi	r23, 0x00	; 0
    2b44:	ce 01       	movw	r24, r28
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	3c da       	rcall	.-2952   	; 0x1fc2 <vTaskDelayUntil>
    2b4a:	82 b1       	in	r24, 0x02	; 2
		//puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA7);
    2b4c:	80 58       	subi	r24, 0x80	; 128
    2b4e:	82 b9       	out	0x02, r24	; 2
    2b50:	f5 cf       	rjmp	.-22     	; 0x2b3c <task2+0x20>

00002b52 <create_tasks_and_semaphores>:
    2b52:	ef 92       	push	r14
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2b58:	80 91 87 18 	lds	r24, 0x1887	; 0x801887 <xTestSemaphore>
    2b5c:	90 91 88 18 	lds	r25, 0x1888	; 0x801888 <xTestSemaphore+0x1>
    2b60:	89 2b       	or	r24, r25
    2b62:	89 f4       	brne	.+34     	; 0x2b86 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	0e 94 9a 08 	call	0x1134	; 0x1134 <xQueueCreateMutex>
    2b6a:	90 93 88 18 	sts	0x1888, r25	; 0x801888 <xTestSemaphore+0x1>
    2b6e:	80 93 87 18 	sts	0x1887, r24	; 0x801887 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	41 f0       	breq	.+16     	; 0x2b86 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2b76:	00 e0       	ldi	r16, 0x00	; 0
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	a9 01       	movw	r20, r18
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	70 e0       	ldi	r23, 0x00	; 0
    2b82:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    2b86:	e1 2c       	mov	r14, r1
    2b88:	f1 2c       	mov	r15, r1
    2b8a:	02 e0       	ldi	r16, 0x02	; 2
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 ec       	ldi	r20, 0xC0	; 192
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	62 e9       	ldi	r22, 0x92	; 146
    2b96:	73 e0       	ldi	r23, 0x03	; 3
    2b98:	82 e7       	ldi	r24, 0x72	; 114
    2b9a:	95 e1       	ldi	r25, 0x15	; 21
    2b9c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    2ba0:	01 e0       	ldi	r16, 0x01	; 1
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 ec       	ldi	r20, 0xC0	; 192
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	68 e9       	ldi	r22, 0x98	; 152
    2bac:	73 e0       	ldi	r23, 0x03	; 3
    2bae:	8e e8       	ldi	r24, 0x8E	; 142
    2bb0:	95 e1       	ldi	r25, 0x15	; 21
    2bb2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskCreate>
	,  (const portCHAR *)"Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	ef 90       	pop	r14
    2bbc:	08 95       	ret

00002bbe <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2bbe:	81 b1       	in	r24, 0x01	; 1
    2bc0:	81 68       	ori	r24, 0x81	; 129
    2bc2:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    2bc4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	0e 94 3b 20 	call	0x4076	; 0x4076 <stdioCreate>
	// Let's create some tasks
	create_tasks_and_semaphores();
    2bce:	c1 df       	rcall	.-126    	; 0x2b52 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    2bd0:	85 e0       	ldi	r24, 0x05	; 5
    2bd2:	0f d0       	rcall	.+30     	; 0x2bf2 <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	0e d3       	rcall	.+1564   	; 0x31f8 <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	0c 94 47 03 	jmp	0x68e	; 0x68e <lora_handler_create>
    2be2:	08 95       	ret

00002be4 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2be4:	ec df       	rcall	.-40     	; 0x2bbe <initialiseSystem>
	printf("Program Started!!\n");
    2be6:	8e e9       	ldi	r24, 0x9E	; 158
    2be8:	93 e0       	ldi	r25, 0x03	; 3
    2bea:	0e 94 23 24 	call	0x4846	; 0x4846 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2bee:	48 d8       	rcall	.-3952   	; 0x1c80 <vTaskStartScheduler>
    2bf0:	ff cf       	rjmp	.-2      	; 0x2bf0 <main+0xc>

00002bf2 <hal_create>:
    2bf2:	e9 e8       	ldi	r30, 0x89	; 137
    2bf4:	f8 e1       	ldi	r31, 0x18	; 24
    2bf6:	21 e5       	ldi	r18, 0x51	; 81
    2bf8:	3c e1       	ldi	r19, 0x1C	; 28
    2bfa:	31 83       	std	Z+1, r19	; 0x01
    2bfc:	20 83       	st	Z, r18
    2bfe:	24 e5       	ldi	r18, 0x54	; 84
    2c00:	3c e1       	ldi	r19, 0x1C	; 28
    2c02:	33 83       	std	Z+3, r19	; 0x03
    2c04:	22 83       	std	Z+2, r18	; 0x02
    2c06:	2f e5       	ldi	r18, 0x5F	; 95
    2c08:	3c e1       	ldi	r19, 0x1C	; 28
    2c0a:	35 83       	std	Z+5, r19	; 0x05
    2c0c:	24 83       	std	Z+4, r18	; 0x04
    2c0e:	23 e6       	ldi	r18, 0x63	; 99
    2c10:	3c e1       	ldi	r19, 0x1C	; 28
    2c12:	37 83       	std	Z+7, r19	; 0x07
    2c14:	26 83       	std	Z+6, r18	; 0x06
    2c16:	29 e6       	ldi	r18, 0x69	; 105
    2c18:	3c e1       	ldi	r19, 0x1C	; 28
    2c1a:	31 87       	std	Z+9, r19	; 0x09
    2c1c:	20 87       	std	Z+8, r18	; 0x08
    2c1e:	25 e7       	ldi	r18, 0x75	; 117
    2c20:	3c e1       	ldi	r19, 0x1C	; 28
    2c22:	33 87       	std	Z+11, r19	; 0x0b
    2c24:	22 87       	std	Z+10, r18	; 0x0a
    2c26:	2a e7       	ldi	r18, 0x7A	; 122
    2c28:	3c e1       	ldi	r19, 0x1C	; 28
    2c2a:	35 87       	std	Z+13, r19	; 0x0d
    2c2c:	24 87       	std	Z+12, r18	; 0x0c
    2c2e:	26 e8       	ldi	r18, 0x86	; 134
    2c30:	3c e1       	ldi	r19, 0x1C	; 28
    2c32:	37 87       	std	Z+15, r19	; 0x0f
    2c34:	26 87       	std	Z+14, r18	; 0x0e
    2c36:	26 e6       	ldi	r18, 0x66	; 102
    2c38:	3c e1       	ldi	r19, 0x1C	; 28
    2c3a:	31 8b       	std	Z+17, r19	; 0x11
    2c3c:	20 8b       	std	Z+16, r18	; 0x10
    2c3e:	2b e8       	ldi	r18, 0x8B	; 139
    2c40:	3c e1       	ldi	r19, 0x1C	; 28
    2c42:	33 8b       	std	Z+19, r19	; 0x13
    2c44:	22 8b       	std	Z+18, r18	; 0x12
    2c46:	28 e9       	ldi	r18, 0x98	; 152
    2c48:	3c e1       	ldi	r19, 0x1C	; 28
    2c4a:	35 8b       	std	Z+21, r19	; 0x15
    2c4c:	24 8b       	std	Z+20, r18	; 0x14
    2c4e:	68 2f       	mov	r22, r24
    2c50:	cf 01       	movw	r24, r30
    2c52:	9e c0       	rjmp	.+316    	; 0x2d90 <led_create>
    2c54:	08 95       	ret

00002c56 <_turn_off>:
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	ee 0f       	add	r30, r30
    2c60:	ff 1f       	adc	r31, r31
    2c62:	e8 0f       	add	r30, r24
    2c64:	f9 1f       	adc	r31, r25
    2c66:	ee 0f       	add	r30, r30
    2c68:	ff 1f       	adc	r31, r31
    2c6a:	e8 5b       	subi	r30, 0xB8	; 184
    2c6c:	f8 4e       	sbci	r31, 0xE8	; 232
    2c6e:	23 81       	ldd	r18, Z+3	; 0x03
    2c70:	21 11       	cpse	r18, r1
    2c72:	0a c0       	rjmp	.+20     	; 0x2c88 <_turn_off+0x32>
    2c74:	ef 01       	movw	r28, r30
    2c76:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    2c7a:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    2c7e:	6a 81       	ldd	r22, Y+2	; 0x02
    2c80:	88 81       	ld	r24, Y
    2c82:	99 81       	ldd	r25, Y+1	; 0x01
    2c84:	19 95       	eicall
    2c86:	12 c0       	rjmp	.+36     	; 0x2cac <_turn_off+0x56>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	aa 0f       	add	r26, r26
    2c8c:	bb 1f       	adc	r27, r27
    2c8e:	ed 01       	movw	r28, r26
    2c90:	c8 0f       	add	r28, r24
    2c92:	d9 1f       	adc	r29, r25
    2c94:	cc 0f       	add	r28, r28
    2c96:	dd 1f       	adc	r29, r29
    2c98:	c8 5b       	subi	r28, 0xB8	; 184
    2c9a:	d8 4e       	sbci	r29, 0xE8	; 232
    2c9c:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <register_access+0x12>
    2ca0:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <register_access+0x13>
    2ca4:	6a 81       	ldd	r22, Y+2	; 0x02
    2ca6:	88 81       	ld	r24, Y
    2ca8:	99 81       	ldd	r25, Y+1	; 0x01
    2caa:	19 95       	eicall
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	08 95       	ret

00002cb2 <_turn_on>:
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	fc 01       	movw	r30, r24
    2cba:	ee 0f       	add	r30, r30
    2cbc:	ff 1f       	adc	r31, r31
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f9 1f       	adc	r31, r25
    2cc2:	ee 0f       	add	r30, r30
    2cc4:	ff 1f       	adc	r31, r31
    2cc6:	e8 5b       	subi	r30, 0xB8	; 184
    2cc8:	f8 4e       	sbci	r31, 0xE8	; 232
    2cca:	23 81       	ldd	r18, Z+3	; 0x03
    2ccc:	21 11       	cpse	r18, r1
    2cce:	0a c0       	rjmp	.+20     	; 0x2ce4 <_turn_on+0x32>
    2cd0:	ef 01       	movw	r28, r30
    2cd2:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <register_access+0x12>
    2cd6:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <register_access+0x13>
    2cda:	6a 81       	ldd	r22, Y+2	; 0x02
    2cdc:	88 81       	ld	r24, Y
    2cde:	99 81       	ldd	r25, Y+1	; 0x01
    2ce0:	19 95       	eicall
    2ce2:	12 c0       	rjmp	.+36     	; 0x2d08 <_turn_on+0x56>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	aa 0f       	add	r26, r26
    2ce8:	bb 1f       	adc	r27, r27
    2cea:	ed 01       	movw	r28, r26
    2cec:	c8 0f       	add	r28, r24
    2cee:	d9 1f       	adc	r29, r25
    2cf0:	cc 0f       	add	r28, r28
    2cf2:	dd 1f       	adc	r29, r29
    2cf4:	c8 5b       	subi	r28, 0xB8	; 184
    2cf6:	d8 4e       	sbci	r29, 0xE8	; 232
    2cf8:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    2cfc:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    2d00:	6a 81       	ldd	r22, Y+2	; 0x02
    2d02:	88 81       	ld	r24, Y
    2d04:	99 81       	ldd	r25, Y+1	; 0x01
    2d06:	19 95       	eicall
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	08 95       	ret

00002d0e <_hal_led_task>:
    2d0e:	0f 2e       	mov	r0, r31
    2d10:	f9 e8       	ldi	r31, 0x89	; 137
    2d12:	cf 2e       	mov	r12, r31
    2d14:	f8 e1       	ldi	r31, 0x18	; 24
    2d16:	df 2e       	mov	r13, r31
    2d18:	f0 2d       	mov	r31, r0
    2d1a:	04 e0       	ldi	r16, 0x04	; 4
    2d1c:	c8 e4       	ldi	r28, 0x48	; 72
    2d1e:	d7 e1       	ldi	r29, 0x17	; 23
    2d20:	10 e0       	ldi	r17, 0x00	; 0
    2d22:	8c 81       	ldd	r24, Y+4	; 0x04
    2d24:	81 30       	cpi	r24, 0x01	; 1
    2d26:	69 f0       	breq	.+26     	; 0x2d42 <_hal_led_task+0x34>
    2d28:	e8 f0       	brcs	.+58     	; 0x2d64 <_hal_led_task+0x56>
    2d2a:	82 30       	cpi	r24, 0x02	; 2
    2d2c:	39 f5       	brne	.+78     	; 0x2d7c <_hal_led_task+0x6e>
    2d2e:	d6 01       	movw	r26, r12
    2d30:	1c 96       	adiw	r26, 0x0c	; 12
    2d32:	ed 91       	ld	r30, X+
    2d34:	fc 91       	ld	r31, X
    2d36:	1d 97       	sbiw	r26, 0x0d	; 13
    2d38:	6a 81       	ldd	r22, Y+2	; 0x02
    2d3a:	88 81       	ld	r24, Y
    2d3c:	99 81       	ldd	r25, Y+1	; 0x01
    2d3e:	19 95       	eicall
    2d40:	1d c0       	rjmp	.+58     	; 0x2d7c <_hal_led_task+0x6e>
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	8a 30       	cpi	r24, 0x0A	; 10
    2d48:	10 f4       	brcc	.+4      	; 0x2d4e <_hal_led_task+0x40>
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	17 c0       	rjmp	.+46     	; 0x2d7c <_hal_led_task+0x6e>
    2d4e:	1d 82       	std	Y+5, r1	; 0x05
    2d50:	d6 01       	movw	r26, r12
    2d52:	1c 96       	adiw	r26, 0x0c	; 12
    2d54:	ed 91       	ld	r30, X+
    2d56:	fc 91       	ld	r31, X
    2d58:	1d 97       	sbiw	r26, 0x0d	; 13
    2d5a:	6a 81       	ldd	r22, Y+2	; 0x02
    2d5c:	88 81       	ld	r24, Y
    2d5e:	99 81       	ldd	r25, Y+1	; 0x01
    2d60:	19 95       	eicall
    2d62:	0c c0       	rjmp	.+24     	; 0x2d7c <_hal_led_task+0x6e>
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	88 23       	and	r24, r24
    2d68:	31 f0       	breq	.+12     	; 0x2d76 <_hal_led_task+0x68>
    2d6a:	81 2f       	mov	r24, r17
    2d6c:	a2 df       	rcall	.-188    	; 0x2cb2 <_turn_on>
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	81 50       	subi	r24, 0x01	; 1
    2d72:	8d 83       	std	Y+5, r24	; 0x05
    2d74:	03 c0       	rjmp	.+6      	; 0x2d7c <_hal_led_task+0x6e>
    2d76:	0c 83       	std	Y+4, r16	; 0x04
    2d78:	81 2f       	mov	r24, r17
    2d7a:	6d df       	rcall	.-294    	; 0x2c56 <_turn_off>
    2d7c:	1f 5f       	subi	r17, 0xFF	; 255
    2d7e:	26 96       	adiw	r28, 0x06	; 6
    2d80:	14 30       	cpi	r17, 0x04	; 4
    2d82:	79 f6       	brne	.-98     	; 0x2d22 <_hal_led_task+0x14>
    2d84:	65 e0       	ldi	r22, 0x05	; 5
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	78 d9       	rcall	.-3344   	; 0x207e <vTaskDelay>
    2d8e:	c6 cf       	rjmp	.-116    	; 0x2d1c <_hal_led_task+0xe>

00002d90 <led_create>:
    2d90:	cf 92       	push	r12
    2d92:	df 92       	push	r13
    2d94:	ef 92       	push	r14
    2d96:	ff 92       	push	r15
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	06 2f       	mov	r16, r22
    2da2:	0f 2e       	mov	r0, r31
    2da4:	f9 e8       	ldi	r31, 0x89	; 137
    2da6:	ef 2e       	mov	r14, r31
    2da8:	f8 e1       	ldi	r31, 0x18	; 24
    2daa:	ff 2e       	mov	r15, r31
    2dac:	f0 2d       	mov	r31, r0
    2dae:	d7 01       	movw	r26, r14
    2db0:	18 96       	adiw	r26, 0x08	; 8
    2db2:	ed 91       	ld	r30, X+
    2db4:	fc 91       	ld	r31, X
    2db6:	19 97       	sbiw	r26, 0x09	; 9
    2db8:	66 e0       	ldi	r22, 0x06	; 6
    2dba:	87 e2       	ldi	r24, 0x27	; 39
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	19 95       	eicall
    2dc0:	c8 e4       	ldi	r28, 0x48	; 72
    2dc2:	d7 e1       	ldi	r29, 0x17	; 23
    2dc4:	0f 2e       	mov	r0, r31
    2dc6:	f8 e2       	ldi	r31, 0x28	; 40
    2dc8:	cf 2e       	mov	r12, r31
    2dca:	d1 2c       	mov	r13, r1
    2dcc:	f0 2d       	mov	r31, r0
    2dce:	d9 82       	std	Y+1, r13	; 0x01
    2dd0:	c8 82       	st	Y, r12
    2dd2:	86 e0       	ldi	r24, 0x06	; 6
    2dd4:	8a 83       	std	Y+2, r24	; 0x02
    2dd6:	1b 82       	std	Y+3, r1	; 0x03
    2dd8:	14 e0       	ldi	r17, 0x04	; 4
    2dda:	1c 83       	std	Y+4, r17	; 0x04
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	3b df       	rcall	.-394    	; 0x2c56 <_turn_off>
    2de0:	d7 01       	movw	r26, r14
    2de2:	18 96       	adiw	r26, 0x08	; 8
    2de4:	ed 91       	ld	r30, X+
    2de6:	fc 91       	ld	r31, X
    2de8:	19 97       	sbiw	r26, 0x09	; 9
    2dea:	67 e0       	ldi	r22, 0x07	; 7
    2dec:	87 e2       	ldi	r24, 0x27	; 39
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	19 95       	eicall
    2df2:	df 82       	std	Y+7, r13	; 0x07
    2df4:	ce 82       	std	Y+6, r12	; 0x06
    2df6:	87 e0       	ldi	r24, 0x07	; 7
    2df8:	88 87       	std	Y+8, r24	; 0x08
    2dfa:	19 86       	std	Y+9, r1	; 0x09
    2dfc:	1a 87       	std	Y+10, r17	; 0x0a
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	2a df       	rcall	.-428    	; 0x2c56 <_turn_off>
    2e02:	d7 01       	movw	r26, r14
    2e04:	18 96       	adiw	r26, 0x08	; 8
    2e06:	ed 91       	ld	r30, X+
    2e08:	fc 91       	ld	r31, X
    2e0a:	19 97       	sbiw	r26, 0x09	; 9
    2e0c:	65 e0       	ldi	r22, 0x05	; 5
    2e0e:	83 e3       	ldi	r24, 0x33	; 51
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	19 95       	eicall
    2e14:	d7 01       	movw	r26, r14
    2e16:	18 96       	adiw	r26, 0x08	; 8
    2e18:	ed 91       	ld	r30, X+
    2e1a:	fc 91       	ld	r31, X
    2e1c:	19 97       	sbiw	r26, 0x09	; 9
    2e1e:	61 e0       	ldi	r22, 0x01	; 1
    2e20:	84 e3       	ldi	r24, 0x34	; 52
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	19 95       	eicall
    2e26:	84 e3       	ldi	r24, 0x34	; 52
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9d 87       	std	Y+13, r25	; 0x0d
    2e2c:	8c 87       	std	Y+12, r24	; 0x0c
    2e2e:	85 e0       	ldi	r24, 0x05	; 5
    2e30:	8e 87       	std	Y+14, r24	; 0x0e
    2e32:	1f 86       	std	Y+15, r1	; 0x0f
    2e34:	18 8b       	std	Y+16, r17	; 0x10
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	0e df       	rcall	.-484    	; 0x2c56 <_turn_off>
    2e3a:	d7 01       	movw	r26, r14
    2e3c:	18 96       	adiw	r26, 0x08	; 8
    2e3e:	ed 91       	ld	r30, X+
    2e40:	fc 91       	ld	r31, X
    2e42:	19 97       	sbiw	r26, 0x09	; 9
    2e44:	64 e0       	ldi	r22, 0x04	; 4
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	91 e0       	ldi	r25, 0x01	; 1
    2e4a:	19 95       	eicall
    2e4c:	d7 01       	movw	r26, r14
    2e4e:	18 96       	adiw	r26, 0x08	; 8
    2e50:	ed 91       	ld	r30, X+
    2e52:	fc 91       	ld	r31, X
    2e54:	19 97       	sbiw	r26, 0x09	; 9
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	82 e0       	ldi	r24, 0x02	; 2
    2e5a:	91 e0       	ldi	r25, 0x01	; 1
    2e5c:	19 95       	eicall
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	91 e0       	ldi	r25, 0x01	; 1
    2e62:	9b 8b       	std	Y+19, r25	; 0x13
    2e64:	8a 8b       	std	Y+18, r24	; 0x12
    2e66:	1c 8b       	std	Y+20, r17	; 0x14
    2e68:	1d 8a       	std	Y+21, r1	; 0x15
    2e6a:	1e 8b       	std	Y+22, r17	; 0x16
    2e6c:	83 e0       	ldi	r24, 0x03	; 3
    2e6e:	f3 de       	rcall	.-538    	; 0x2c56 <_turn_off>
    2e70:	e1 2c       	mov	r14, r1
    2e72:	f1 2c       	mov	r15, r1
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 ec       	ldi	r20, 0xC0	; 192
    2e7a:	50 e0       	ldi	r21, 0x00	; 0
    2e7c:	60 eb       	ldi	r22, 0xB0	; 176
    2e7e:	73 e0       	ldi	r23, 0x03	; 3
    2e80:	87 e8       	ldi	r24, 0x87	; 135
    2e82:	96 e1       	ldi	r25, 0x16	; 22
    2e84:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskCreate>
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	ff 90       	pop	r15
    2e92:	ef 90       	pop	r14
    2e94:	df 90       	pop	r13
    2e96:	cf 90       	pop	r12
    2e98:	08 95       	ret

00002e9a <led_slow_blink>:
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	c8 2f       	mov	r28, r24
    2ea4:	d0 e0       	ldi	r29, 0x00	; 0
    2ea6:	8e 01       	movw	r16, r28
    2ea8:	00 0f       	add	r16, r16
    2eaa:	11 1f       	adc	r17, r17
    2eac:	d8 01       	movw	r26, r16
    2eae:	ac 0f       	add	r26, r28
    2eb0:	bd 1f       	adc	r27, r29
    2eb2:	aa 0f       	add	r26, r26
    2eb4:	bb 1f       	adc	r27, r27
    2eb6:	a8 5b       	subi	r26, 0xB8	; 184
    2eb8:	b8 4e       	sbci	r27, 0xE8	; 232
    2eba:	e0 91 95 18 	lds	r30, 0x1895	; 0x801895 <register_access+0xc>
    2ebe:	f0 91 96 18 	lds	r31, 0x1896	; 0x801896 <register_access+0xd>
    2ec2:	12 96       	adiw	r26, 0x02	; 2
    2ec4:	6c 91       	ld	r22, X
    2ec6:	12 97       	sbiw	r26, 0x02	; 2
    2ec8:	8d 91       	ld	r24, X+
    2eca:	9c 91       	ld	r25, X
    2ecc:	19 95       	eicall
    2ece:	c0 0f       	add	r28, r16
    2ed0:	d1 1f       	adc	r29, r17
    2ed2:	cc 0f       	add	r28, r28
    2ed4:	dd 1f       	adc	r29, r29
    2ed6:	c8 5b       	subi	r28, 0xB8	; 184
    2ed8:	d8 4e       	sbci	r29, 0xE8	; 232
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	8c 83       	std	Y+4, r24	; 0x04
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	08 95       	ret

00002ee8 <led_fast_blink>:
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	c8 2f       	mov	r28, r24
    2ef2:	d0 e0       	ldi	r29, 0x00	; 0
    2ef4:	8e 01       	movw	r16, r28
    2ef6:	00 0f       	add	r16, r16
    2ef8:	11 1f       	adc	r17, r17
    2efa:	d8 01       	movw	r26, r16
    2efc:	ac 0f       	add	r26, r28
    2efe:	bd 1f       	adc	r27, r29
    2f00:	aa 0f       	add	r26, r26
    2f02:	bb 1f       	adc	r27, r27
    2f04:	a8 5b       	subi	r26, 0xB8	; 184
    2f06:	b8 4e       	sbci	r27, 0xE8	; 232
    2f08:	e0 91 95 18 	lds	r30, 0x1895	; 0x801895 <register_access+0xc>
    2f0c:	f0 91 96 18 	lds	r31, 0x1896	; 0x801896 <register_access+0xd>
    2f10:	12 96       	adiw	r26, 0x02	; 2
    2f12:	6c 91       	ld	r22, X
    2f14:	12 97       	sbiw	r26, 0x02	; 2
    2f16:	8d 91       	ld	r24, X+
    2f18:	9c 91       	ld	r25, X
    2f1a:	19 95       	eicall
    2f1c:	c0 0f       	add	r28, r16
    2f1e:	d1 1f       	adc	r29, r17
    2f20:	cc 0f       	add	r28, r28
    2f22:	dd 1f       	adc	r29, r29
    2f24:	c8 5b       	subi	r28, 0xB8	; 184
    2f26:	d8 4e       	sbci	r29, 0xE8	; 232
    2f28:	82 e0       	ldi	r24, 0x02	; 2
    2f2a:	8c 83       	std	Y+4, r24	; 0x04
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	08 95       	ret

00002f36 <led_led_on>:
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	f9 01       	movw	r30, r18
    2f3c:	ee 0f       	add	r30, r30
    2f3e:	ff 1f       	adc	r31, r31
    2f40:	e2 0f       	add	r30, r18
    2f42:	f3 1f       	adc	r31, r19
    2f44:	ee 0f       	add	r30, r30
    2f46:	ff 1f       	adc	r31, r31
    2f48:	e8 5b       	subi	r30, 0xB8	; 184
    2f4a:	f8 4e       	sbci	r31, 0xE8	; 232
    2f4c:	93 e0       	ldi	r25, 0x03	; 3
    2f4e:	94 83       	std	Z+4, r25	; 0x04
    2f50:	b0 ce       	rjmp	.-672    	; 0x2cb2 <_turn_on>
    2f52:	08 95       	ret

00002f54 <led_led_off>:
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	f9 01       	movw	r30, r18
    2f5a:	ee 0f       	add	r30, r30
    2f5c:	ff 1f       	adc	r31, r31
    2f5e:	e2 0f       	add	r30, r18
    2f60:	f3 1f       	adc	r31, r19
    2f62:	ee 0f       	add	r30, r30
    2f64:	ff 1f       	adc	r31, r31
    2f66:	e8 5b       	subi	r30, 0xB8	; 184
    2f68:	f8 4e       	sbci	r31, 0xE8	; 232
    2f6a:	94 e0       	ldi	r25, 0x04	; 4
    2f6c:	94 83       	std	Z+4, r25	; 0x04
    2f6e:	73 ce       	rjmp	.-794    	; 0x2c56 <_turn_off>
    2f70:	08 95       	ret

00002f72 <led_long_puls>:
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	fc 01       	movw	r30, r24
    2f76:	ee 0f       	add	r30, r30
    2f78:	ff 1f       	adc	r31, r31
    2f7a:	df 01       	movw	r26, r30
    2f7c:	a8 0f       	add	r26, r24
    2f7e:	b9 1f       	adc	r27, r25
    2f80:	aa 0f       	add	r26, r26
    2f82:	bb 1f       	adc	r27, r27
    2f84:	a8 5b       	subi	r26, 0xB8	; 184
    2f86:	b8 4e       	sbci	r27, 0xE8	; 232
    2f88:	24 e0       	ldi	r18, 0x04	; 4
    2f8a:	15 96       	adiw	r26, 0x05	; 5
    2f8c:	2c 93       	st	X, r18
    2f8e:	15 97       	sbiw	r26, 0x05	; 5
    2f90:	fd 01       	movw	r30, r26
    2f92:	14 82       	std	Z+4, r1	; 0x04
    2f94:	08 95       	ret

00002f96 <led_short_puls>:
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	fc 01       	movw	r30, r24
    2f9a:	ee 0f       	add	r30, r30
    2f9c:	ff 1f       	adc	r31, r31
    2f9e:	df 01       	movw	r26, r30
    2fa0:	a8 0f       	add	r26, r24
    2fa2:	b9 1f       	adc	r27, r25
    2fa4:	aa 0f       	add	r26, r26
    2fa6:	bb 1f       	adc	r27, r27
    2fa8:	a8 5b       	subi	r26, 0xB8	; 184
    2faa:	b8 4e       	sbci	r27, 0xE8	; 232
    2fac:	21 e0       	ldi	r18, 0x01	; 1
    2fae:	15 96       	adiw	r26, 0x05	; 5
    2fb0:	2c 93       	st	X, r18
    2fb2:	15 97       	sbiw	r26, 0x05	; 5
    2fb4:	fd 01       	movw	r30, r26
    2fb6:	14 82       	std	Z+4, r1	; 0x04
    2fb8:	08 95       	ret

00002fba <_serial_call_back>:
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	1f 92       	push	r1
    2fc4:	1f 92       	push	r1
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	8c 01       	movw	r16, r24
    2fcc:	19 82       	std	Y+1, r1	; 0x01
    2fce:	2d c0       	rjmp	.+90     	; 0x302a <_serial_call_back+0x70>
    2fd0:	e0 91 c4 17 	lds	r30, 0x17C4	; 0x8017c4 <rec_buf_inp.2947>
    2fd4:	ec 32       	cpi	r30, 0x2C	; 44
    2fd6:	50 f4       	brcc	.+20     	; 0x2fec <_serial_call_back+0x32>
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	8e 0f       	add	r24, r30
    2fdc:	80 93 c4 17 	sts	0x17C4, r24	; 0x8017c4 <rec_buf_inp.2947>
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	ea 50       	subi	r30, 0x0A	; 10
    2fe4:	f8 4e       	sbci	r31, 0xE8	; 232
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	80 83       	st	Z, r24
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <_serial_call_back+0x36>
    2fec:	10 92 c4 17 	sts	0x17C4, r1	; 0x8017c4 <rec_buf_inp.2947>
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	8a 30       	cpi	r24, 0x0A	; 10
    2ff4:	d1 f4       	brne	.+52     	; 0x302a <_serial_call_back+0x70>
    2ff6:	40 91 c4 17 	lds	r20, 0x17C4	; 0x8017c4 <rec_buf_inp.2947>
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	fa 01       	movw	r30, r20
    2ffe:	ec 50       	subi	r30, 0x0C	; 12
    3000:	f8 4e       	sbci	r31, 0xE8	; 232
    3002:	10 82       	st	Z, r1
    3004:	41 50       	subi	r20, 0x01	; 1
    3006:	51 09       	sbc	r21, r1
    3008:	9e 01       	movw	r18, r28
    300a:	2f 5f       	subi	r18, 0xFF	; 255
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	66 ef       	ldi	r22, 0xF6	; 246
    3010:	77 e1       	ldi	r23, 0x17	; 23
    3012:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    3016:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    301a:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferSendFromISR>
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	81 11       	cpse	r24, r1
    3022:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vPortYield>
    3026:	10 92 c4 17 	sts	0x17C4, r1	; 0x8017c4 <rec_buf_inp.2947>
    302a:	be 01       	movw	r22, r28
    302c:	6e 5f       	subi	r22, 0xFE	; 254
    302e:	7f 4f       	sbci	r23, 0xFF	; 255
    3030:	c8 01       	movw	r24, r16
    3032:	8f d5       	rcall	.+2846   	; 0x3b52 <serial_get_byte>
    3034:	88 23       	and	r24, r24
    3036:	61 f2       	breq	.-104    	; 0x2fd0 <_serial_call_back+0x16>
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret

00003046 <_upload_message>:
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	8c 01       	movw	r16, r24
    3050:	eb 01       	movw	r28, r22
    3052:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    3056:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    305a:	0e 94 b6 0a 	call	0x156c	; 0x156c <xStreamBufferReset>
    305e:	b8 01       	movw	r22, r16
    3060:	80 e6       	ldi	r24, 0x60	; 96
    3062:	97 e1       	ldi	r25, 0x17	; 23
    3064:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <strcpy>
    3068:	20 97       	sbiw	r28, 0x00	; 0
    306a:	79 f0       	breq	.+30     	; 0x308a <_upload_message+0x44>
    306c:	e0 e6       	ldi	r30, 0x60	; 96
    306e:	f7 e1       	ldi	r31, 0x17	; 23
    3070:	01 90       	ld	r0, Z+
    3072:	00 20       	and	r0, r0
    3074:	e9 f7       	brne	.-6      	; 0x3070 <_upload_message+0x2a>
    3076:	31 97       	sbiw	r30, 0x01	; 1
    3078:	80 e2       	ldi	r24, 0x20	; 32
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
    3080:	be 01       	movw	r22, r28
    3082:	80 e6       	ldi	r24, 0x60	; 96
    3084:	97 e1       	ldi	r25, 0x17	; 23
    3086:	0e 94 e6 23 	call	0x47cc	; 0x47cc <strcat>
    308a:	e0 e6       	ldi	r30, 0x60	; 96
    308c:	f7 e1       	ldi	r31, 0x17	; 23
    308e:	df 01       	movw	r26, r30
    3090:	0d 90       	ld	r0, X+
    3092:	00 20       	and	r0, r0
    3094:	e9 f7       	brne	.-6      	; 0x3090 <_upload_message+0x4a>
    3096:	11 97       	sbiw	r26, 0x01	; 1
    3098:	8d e0       	ldi	r24, 0x0D	; 13
    309a:	9a e0       	ldi	r25, 0x0A	; 10
    309c:	11 96       	adiw	r26, 0x01	; 1
    309e:	9c 93       	st	X, r25
    30a0:	8e 93       	st	-X, r24
    30a2:	12 96       	adiw	r26, 0x02	; 2
    30a4:	1c 92       	st	X, r1
    30a6:	01 90       	ld	r0, Z+
    30a8:	00 20       	and	r0, r0
    30aa:	e9 f7       	brne	.-6      	; 0x30a6 <_upload_message+0x60>
    30ac:	31 97       	sbiw	r30, 0x01	; 1
    30ae:	e0 56       	subi	r30, 0x60	; 96
    30b0:	f7 41       	sbci	r31, 0x17	; 23
    30b2:	ae 2f       	mov	r26, r30
    30b4:	80 e6       	ldi	r24, 0x60	; 96
    30b6:	97 e1       	ldi	r25, 0x17	; 23
    30b8:	ac 01       	movw	r20, r24
    30ba:	6a 2f       	mov	r22, r26
    30bc:	80 91 c9 17 	lds	r24, 0x17C9	; 0x8017c9 <_rn2483_serial>
    30c0:	90 91 ca 17 	lds	r25, 0x17CA	; 0x8017ca <_rn2483_serial+0x1>
    30c4:	f6 d4       	rcall	.+2540   	; 0x3ab2 <serial_send_bytes>
    30c6:	81 11       	cpse	r24, r1
    30c8:	11 c0       	rjmp	.+34     	; 0x30ec <_upload_message+0xa6>
    30ca:	08 e2       	ldi	r16, 0x28	; 40
    30cc:	15 e0       	ldi	r17, 0x05	; 5
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	4d e2       	ldi	r20, 0x2D	; 45
    30d4:	50 e0       	ldi	r21, 0x00	; 0
    30d6:	60 e5       	ldi	r22, 0x50	; 80
    30d8:	78 e1       	ldi	r23, 0x18	; 24
    30da:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    30de:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    30e2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <xStreamBufferReceive>
    30e6:	80 e5       	ldi	r24, 0x50	; 80
    30e8:	98 e1       	ldi	r25, 0x18	; 24
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <_upload_message+0xaa>
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	08 95       	ret

000030fa <_reply2return_code>:
    30fa:	2f 92       	push	r2
    30fc:	3f 92       	push	r3
    30fe:	4f 92       	push	r4
    3100:	5f 92       	push	r5
    3102:	6f 92       	push	r6
    3104:	7f 92       	push	r7
    3106:	8f 92       	push	r8
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	5c 01       	movw	r10, r24
    3120:	fc 01       	movw	r30, r24
    3122:	01 90       	ld	r0, Z+
    3124:	00 20       	and	r0, r0
    3126:	e9 f7       	brne	.-6      	; 0x3122 <_reply2return_code+0x28>
    3128:	31 97       	sbiw	r30, 0x01	; 1
    312a:	6f 01       	movw	r12, r30
    312c:	c8 1a       	sub	r12, r24
    312e:	d9 0a       	sbc	r13, r25
    3130:	5c 2c       	mov	r5, r12
    3132:	0f 2e       	mov	r0, r31
    3134:	f1 e5       	ldi	r31, 0x51	; 81
    3136:	8f 2e       	mov	r8, r31
    3138:	f6 e0       	ldi	r31, 0x06	; 6
    313a:	9f 2e       	mov	r9, r31
    313c:	f0 2d       	mov	r31, r0
    313e:	e1 2c       	mov	r14, r1
    3140:	f1 2c       	mov	r15, r1
    3142:	4c 2c       	mov	r4, r12
    3144:	37 01       	movw	r6, r14
    3146:	f4 01       	movw	r30, r8
    3148:	01 81       	ldd	r16, Z+1	; 0x01
    314a:	12 81       	ldd	r17, Z+2	; 0x02
    314c:	e8 01       	movw	r28, r16
    314e:	09 90       	ld	r0, Y+
    3150:	00 20       	and	r0, r0
    3152:	e9 f7       	brne	.-6      	; 0x314e <_reply2return_code+0x54>
    3154:	21 97       	sbiw	r28, 0x01	; 1
    3156:	c0 1b       	sub	r28, r16
    3158:	d1 0b       	sbc	r29, r17
    315a:	3c 2e       	mov	r3, r28
    315c:	f9 e0       	ldi	r31, 0x09	; 9
    315e:	cf 16       	cp	r12, r31
    3160:	d1 04       	cpc	r13, r1
    3162:	58 f0       	brcs	.+22     	; 0x317a <_reply2return_code+0x80>
    3164:	f4 01       	movw	r30, r8
    3166:	20 80       	ld	r2, Z
    3168:	fe e0       	ldi	r31, 0x0E	; 14
    316a:	2f 12       	cpse	r2, r31
    316c:	06 c0       	rjmp	.+12     	; 0x317a <_reply2return_code+0x80>
    316e:	b8 01       	movw	r22, r16
    3170:	c5 01       	movw	r24, r10
    3172:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcasestr>
    3176:	89 2b       	or	r24, r25
    3178:	09 f5       	brne	.+66     	; 0x31bc <_reply2return_code+0xc2>
    317a:	44 2d       	mov	r20, r4
    317c:	35 14       	cp	r3, r5
    317e:	08 f4       	brcc	.+2      	; 0x3182 <_reply2return_code+0x88>
    3180:	4c 2f       	mov	r20, r28
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	b8 01       	movw	r22, r16
    3186:	c5 01       	movw	r24, r10
    3188:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <strncasecmp>
    318c:	89 2b       	or	r24, r25
    318e:	49 f4       	brne	.+18     	; 0x31a2 <_reply2return_code+0xa8>
    3190:	f3 01       	movw	r30, r6
    3192:	ee 0f       	add	r30, r30
    3194:	ff 1f       	adc	r31, r31
    3196:	e6 0d       	add	r30, r6
    3198:	f7 1d       	adc	r31, r7
    319a:	ef 5a       	subi	r30, 0xAF	; 175
    319c:	f9 4f       	sbci	r31, 0xF9	; 249
    319e:	20 80       	ld	r2, Z
    31a0:	0d c0       	rjmp	.+26     	; 0x31bc <_reply2return_code+0xc2>
    31a2:	8f ef       	ldi	r24, 0xFF	; 255
    31a4:	e8 1a       	sub	r14, r24
    31a6:	f8 0a       	sbc	r15, r24
    31a8:	e3 e0       	ldi	r30, 0x03	; 3
    31aa:	8e 0e       	add	r8, r30
    31ac:	91 1c       	adc	r9, r1
    31ae:	f1 e1       	ldi	r31, 0x11	; 17
    31b0:	ef 16       	cp	r14, r31
    31b2:	f1 04       	cpc	r15, r1
    31b4:	39 f6       	brne	.-114    	; 0x3144 <_reply2return_code+0x4a>
    31b6:	68 94       	set
    31b8:	22 24       	eor	r2, r2
    31ba:	24 f8       	bld	r2, 4
    31bc:	82 2d       	mov	r24, r2
    31be:	df 91       	pop	r29
    31c0:	cf 91       	pop	r28
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	ff 90       	pop	r15
    31c8:	ef 90       	pop	r14
    31ca:	df 90       	pop	r13
    31cc:	cf 90       	pop	r12
    31ce:	bf 90       	pop	r11
    31d0:	af 90       	pop	r10
    31d2:	9f 90       	pop	r9
    31d4:	8f 90       	pop	r8
    31d6:	7f 90       	pop	r7
    31d8:	6f 90       	pop	r6
    31da:	5f 90       	pop	r5
    31dc:	4f 90       	pop	r4
    31de:	3f 90       	pop	r3
    31e0:	2f 90       	pop	r2
    31e2:	08 95       	ret

000031e4 <_upload_message_rc>:
    31e4:	30 df       	rcall	.-416    	; 0x3046 <_upload_message>
    31e6:	89 cf       	rjmp	.-238    	; 0x30fa <_reply2return_code>
    31e8:	08 95       	ret

000031ea <lora_driver_flush_buffers>:
    31ea:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    31ee:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    31f2:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <xStreamBufferReset>
    31f6:	08 95       	ret

000031f8 <lora_driver_create>:
    31f8:	8f 92       	push	r8
    31fa:	9f 92       	push	r9
    31fc:	af 92       	push	r10
    31fe:	cf 92       	push	r12
    3200:	ef 92       	push	r14
    3202:	0f 93       	push	r16
    3204:	1f 93       	push	r17
    3206:	cf 93       	push	r28
    3208:	c8 2f       	mov	r28, r24
    320a:	8b 01       	movw	r16, r22
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	88 ec       	ldi	r24, 0xC8	; 200
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 8a 0a 	call	0x1514	; 0x1514 <xStreamBufferGenericCreate>
    321a:	90 93 c8 17 	sts	0x17C8, r25	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    321e:	80 93 c7 17 	sts	0x17C7, r24	; 0x8017c7 <_serial_reply_buffer_handle>
    3222:	10 93 c6 17 	sts	0x17C6, r17	; 0x8017c6 <_downlinkMessageBuffer+0x1>
    3226:	00 93 c5 17 	sts	0x17C5, r16	; 0x8017c5 <_downlinkMessageBuffer>
    322a:	0f 2e       	mov	r0, r31
    322c:	fd ed       	ldi	r31, 0xDD	; 221
    322e:	8f 2e       	mov	r8, r31
    3230:	f7 e1       	ldi	r31, 0x17	; 23
    3232:	9f 2e       	mov	r9, r31
    3234:	f0 2d       	mov	r31, r0
    3236:	68 94       	set
    3238:	aa 24       	eor	r10, r10
    323a:	a6 f8       	bld	r10, 6
    323c:	68 94       	set
    323e:	cc 24       	eor	r12, r12
    3240:	c6 f8       	bld	r12, 6
    3242:	e1 2c       	mov	r14, r1
    3244:	00 e0       	ldi	r16, 0x00	; 0
    3246:	23 e0       	ldi	r18, 0x03	; 3
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	51 ee       	ldi	r21, 0xE1	; 225
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	8c 2f       	mov	r24, r28
    3252:	74 d3       	rcall	.+1768   	; 0x393c <serial_new_instance>
    3254:	90 93 ca 17 	sts	0x17CA, r25	; 0x8017ca <_rn2483_serial+0x1>
    3258:	80 93 c9 17 	sts	0x17C9, r24	; 0x8017c9 <_rn2483_serial>
    325c:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    3260:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    3264:	64 e0       	ldi	r22, 0x04	; 4
    3266:	87 e0       	ldi	r24, 0x07	; 7
    3268:	91 e0       	ldi	r25, 0x01	; 1
    326a:	19 95       	eicall
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	ef 90       	pop	r14
    3274:	cf 90       	pop	r12
    3276:	af 90       	pop	r10
    3278:	9f 90       	pop	r9
    327a:	8f 90       	pop	r8
    327c:	08 95       	ret

0000327e <lora_driver_reset_rn2483>:
    327e:	88 23       	and	r24, r24
    3280:	49 f0       	breq	.+18     	; 0x3294 <lora_driver_reset_rn2483+0x16>
    3282:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <register_access+0x12>
    3286:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <register_access+0x13>
    328a:	64 e0       	ldi	r22, 0x04	; 4
    328c:	88 e0       	ldi	r24, 0x08	; 8
    328e:	91 e0       	ldi	r25, 0x01	; 1
    3290:	19 95       	eicall
    3292:	08 95       	ret
    3294:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    3298:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    329c:	64 e0       	ldi	r22, 0x04	; 4
    329e:	88 e0       	ldi	r24, 0x08	; 8
    32a0:	91 e0       	ldi	r25, 0x01	; 1
    32a2:	19 95       	eicall
    32a4:	08 95       	ret

000032a6 <lora_driver_rn2483_factory_reset>:
    32a6:	60 e0       	ldi	r22, 0x00	; 0
    32a8:	70 e0       	ldi	r23, 0x00	; 0
    32aa:	87 ed       	ldi	r24, 0xD7	; 215
    32ac:	93 e0       	ldi	r25, 0x03	; 3
    32ae:	cb de       	rcall	.-618    	; 0x3046 <_upload_message>
    32b0:	e0 e5       	ldi	r30, 0x50	; 80
    32b2:	f8 e1       	ldi	r31, 0x18	; 24
    32b4:	01 90       	ld	r0, Z+
    32b6:	00 20       	and	r0, r0
    32b8:	e9 f7       	brne	.-6      	; 0x32b4 <lora_driver_rn2483_factory_reset+0xe>
    32ba:	31 97       	sbiw	r30, 0x01	; 1
    32bc:	e0 55       	subi	r30, 0x50	; 80
    32be:	f8 41       	sbci	r31, 0x18	; 24
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	75 97       	sbiw	r30, 0x15	; 21
    32c4:	08 f0       	brcs	.+2      	; 0x32c8 <lora_driver_rn2483_factory_reset+0x22>
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	08 95       	ret

000032ca <lora_driver_get_rn2483_hweui>:
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	ec 01       	movw	r28, r24
    32d0:	60 e0       	ldi	r22, 0x00	; 0
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	88 ee       	ldi	r24, 0xE8	; 232
    32d6:	93 e0       	ldi	r25, 0x03	; 3
    32d8:	b6 de       	rcall	.-660    	; 0x3046 <_upload_message>
    32da:	e0 e5       	ldi	r30, 0x50	; 80
    32dc:	f8 e1       	ldi	r31, 0x18	; 24
    32de:	01 90       	ld	r0, Z+
    32e0:	00 20       	and	r0, r0
    32e2:	e9 f7       	brne	.-6      	; 0x32de <lora_driver_get_rn2483_hweui+0x14>
    32e4:	e1 56       	subi	r30, 0x61	; 97
    32e6:	f8 41       	sbci	r31, 0x18	; 24
    32e8:	39 f4       	brne	.+14     	; 0x32f8 <lora_driver_get_rn2483_hweui+0x2e>
    32ea:	60 e5       	ldi	r22, 0x50	; 80
    32ec:	78 e1       	ldi	r23, 0x18	; 24
    32ee:	ce 01       	movw	r24, r28
    32f0:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <strcpy>
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <lora_driver_get_rn2483_hweui+0x32>
    32f8:	18 82       	st	Y, r1
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	08 95       	ret

00003302 <lora_driver_set_device_identifier>:
    3302:	fc 01       	movw	r30, r24
    3304:	01 90       	ld	r0, Z+
    3306:	00 20       	and	r0, r0
    3308:	e9 f7       	brne	.-6      	; 0x3304 <lora_driver_set_device_identifier+0x2>
    330a:	9f 01       	movw	r18, r30
    330c:	21 51       	subi	r18, 0x11	; 17
    330e:	31 09       	sbc	r19, r1
    3310:	28 17       	cp	r18, r24
    3312:	39 07       	cpc	r19, r25
    3314:	29 f4       	brne	.+10     	; 0x3320 <lora_driver_set_device_identifier+0x1e>
    3316:	bc 01       	movw	r22, r24
    3318:	86 e1       	ldi	r24, 0x16	; 22
    331a:	94 e0       	ldi	r25, 0x04	; 4
    331c:	63 cf       	rjmp	.-314    	; 0x31e4 <_upload_message_rc>
    331e:	08 95       	ret
    3320:	89 e0       	ldi	r24, 0x09	; 9
    3322:	08 95       	ret

00003324 <lora_driver_set_application_identifier>:
    3324:	fc 01       	movw	r30, r24
    3326:	01 90       	ld	r0, Z+
    3328:	00 20       	and	r0, r0
    332a:	e9 f7       	brne	.-6      	; 0x3326 <lora_driver_set_application_identifier+0x2>
    332c:	9f 01       	movw	r18, r30
    332e:	21 51       	subi	r18, 0x11	; 17
    3330:	31 09       	sbc	r19, r1
    3332:	28 17       	cp	r18, r24
    3334:	39 07       	cpc	r19, r25
    3336:	29 f4       	brne	.+10     	; 0x3342 <lora_driver_set_application_identifier+0x1e>
    3338:	bc 01       	movw	r22, r24
    333a:	85 e2       	ldi	r24, 0x25	; 37
    333c:	94 e0       	ldi	r25, 0x04	; 4
    333e:	52 cf       	rjmp	.-348    	; 0x31e4 <_upload_message_rc>
    3340:	08 95       	ret
    3342:	89 e0       	ldi	r24, 0x09	; 9
    3344:	08 95       	ret

00003346 <lora_driver_set_application_key>:
    3346:	fc 01       	movw	r30, r24
    3348:	01 90       	ld	r0, Z+
    334a:	00 20       	and	r0, r0
    334c:	e9 f7       	brne	.-6      	; 0x3348 <lora_driver_set_application_key+0x2>
    334e:	9f 01       	movw	r18, r30
    3350:	21 52       	subi	r18, 0x21	; 33
    3352:	31 09       	sbc	r19, r1
    3354:	28 17       	cp	r18, r24
    3356:	39 07       	cpc	r19, r25
    3358:	29 f4       	brne	.+10     	; 0x3364 <lora_driver_set_application_key+0x1e>
    335a:	bc 01       	movw	r22, r24
    335c:	84 e3       	ldi	r24, 0x34	; 52
    335e:	94 e0       	ldi	r25, 0x04	; 4
    3360:	41 cf       	rjmp	.-382    	; 0x31e4 <_upload_message_rc>
    3362:	08 95       	ret
    3364:	89 e0       	ldi	r24, 0x09	; 9
    3366:	08 95       	ret

00003368 <lora_driver_save_mac>:
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	83 e7       	ldi	r24, 0x73	; 115
    336e:	94 e0       	ldi	r25, 0x04	; 4
    3370:	39 cf       	rjmp	.-398    	; 0x31e4 <_upload_message_rc>
    3372:	08 95       	ret

00003374 <lora_driver_join>:
    3374:	0f 93       	push	r16
    3376:	1f 93       	push	r17
    3378:	e8 2f       	mov	r30, r24
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	e3 5b       	subi	r30, 0xB3	; 179
    3382:	f9 4f       	sbci	r31, 0xF9	; 249
    3384:	60 81       	ld	r22, Z
    3386:	71 81       	ldd	r23, Z+1	; 0x01
    3388:	8c e7       	ldi	r24, 0x7C	; 124
    338a:	94 e0       	ldi	r25, 0x04	; 4
    338c:	2b df       	rcall	.-426    	; 0x31e4 <_upload_message_rc>
    338e:	81 11       	cpse	r24, r1
    3390:	14 c0       	rjmp	.+40     	; 0x33ba <lora_driver_join+0x46>
    3392:	08 e2       	ldi	r16, 0x28	; 40
    3394:	15 e0       	ldi	r17, 0x05	; 5
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	4d e2       	ldi	r20, 0x2D	; 45
    339c:	50 e0       	ldi	r21, 0x00	; 0
    339e:	60 e5       	ldi	r22, 0x50	; 80
    33a0:	78 e1       	ldi	r23, 0x18	; 24
    33a2:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    33a6:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    33aa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <xStreamBufferReceive>
    33ae:	88 23       	and	r24, r24
    33b0:	21 f0       	breq	.+8      	; 0x33ba <lora_driver_join+0x46>
    33b2:	80 e5       	ldi	r24, 0x50	; 80
    33b4:	98 e1       	ldi	r25, 0x18	; 24
    33b6:	a1 de       	rcall	.-702    	; 0x30fa <_reply2return_code>
    33b8:	03 c0       	rjmp	.+6      	; 0x33c0 <lora_driver_join+0x4c>
    33ba:	80 e5       	ldi	r24, 0x50	; 80
    33bc:	98 e1       	ldi	r25, 0x18	; 24
    33be:	9d de       	rcall	.-710    	; 0x30fa <_reply2return_code>
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	08 95       	ret

000033c6 <lora_driver_sent_upload_message>:
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	1f 92       	push	r1
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	db 01       	movw	r26, r22
    33d6:	11 96       	adiw	r26, 0x01	; 1
    33d8:	9c 91       	ld	r25, X
    33da:	11 97       	sbiw	r26, 0x01	; 1
    33dc:	95 31       	cpi	r25, 0x15	; 21
    33de:	08 f0       	brcs	.+2      	; 0x33e2 <lora_driver_sent_upload_message+0x1c>
    33e0:	b4 c0       	rjmp	.+360    	; 0x354a <lora_driver_sent_upload_message+0x184>
    33e2:	99 23       	and	r25, r25
    33e4:	81 f1       	breq	.+96     	; 0x3446 <lora_driver_sent_upload_message+0x80>
    33e6:	60 e0       	ldi	r22, 0x00	; 0
    33e8:	70 e0       	ldi	r23, 0x00	; 0
    33ea:	27 2f       	mov	r18, r23
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	46 2f       	mov	r20, r22
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	fd 01       	movw	r30, r26
    33f4:	e4 0f       	add	r30, r20
    33f6:	f5 1f       	adc	r31, r21
    33f8:	92 81       	ldd	r25, Z+2	; 0x02
    33fa:	92 95       	swap	r25
    33fc:	9f 70       	andi	r25, 0x0F	; 15
    33fe:	9a 30       	cpi	r25, 0x0A	; 10
    3400:	10 f0       	brcs	.+4      	; 0x3406 <lora_driver_sent_upload_message+0x40>
    3402:	99 5c       	subi	r25, 0xC9	; 201
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <lora_driver_sent_upload_message+0x42>
    3406:	90 5d       	subi	r25, 0xD0	; 208
    3408:	f9 01       	movw	r30, r18
    340a:	ef 51       	subi	r30, 0x1F	; 31
    340c:	f8 4e       	sbci	r31, 0xE8	; 232
    340e:	90 83       	st	Z, r25
    3410:	2f 5f       	subi	r18, 0xFF	; 255
    3412:	3f 4f       	sbci	r19, 0xFF	; 255
    3414:	fd 01       	movw	r30, r26
    3416:	e4 0f       	add	r30, r20
    3418:	f5 1f       	adc	r31, r21
    341a:	92 81       	ldd	r25, Z+2	; 0x02
    341c:	9f 70       	andi	r25, 0x0F	; 15
    341e:	49 2f       	mov	r20, r25
    3420:	50 e0       	ldi	r21, 0x00	; 0
    3422:	4a 30       	cpi	r20, 0x0A	; 10
    3424:	51 05       	cpc	r21, r1
    3426:	14 f0       	brlt	.+4      	; 0x342c <lora_driver_sent_upload_message+0x66>
    3428:	99 5c       	subi	r25, 0xC9	; 201
    342a:	01 c0       	rjmp	.+2      	; 0x342e <lora_driver_sent_upload_message+0x68>
    342c:	90 5d       	subi	r25, 0xD0	; 208
    342e:	f9 01       	movw	r30, r18
    3430:	ef 51       	subi	r30, 0x1F	; 31
    3432:	f8 4e       	sbci	r31, 0xE8	; 232
    3434:	90 83       	st	Z, r25
    3436:	7e 5f       	subi	r23, 0xFE	; 254
    3438:	6f 5f       	subi	r22, 0xFF	; 255
    343a:	11 96       	adiw	r26, 0x01	; 1
    343c:	9c 91       	ld	r25, X
    343e:	11 97       	sbiw	r26, 0x01	; 1
    3440:	69 17       	cp	r22, r25
    3442:	98 f2       	brcs	.-90     	; 0x33ea <lora_driver_sent_upload_message+0x24>
    3444:	01 c0       	rjmp	.+2      	; 0x3448 <lora_driver_sent_upload_message+0x82>
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	e7 2f       	mov	r30, r23
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	ef 51       	subi	r30, 0x1F	; 31
    344e:	f8 4e       	sbci	r31, 0xE8	; 232
    3450:	10 82       	st	Z, r1
    3452:	4c 91       	ld	r20, X
    3454:	81 11       	cpse	r24, r1
    3456:	03 c0       	rjmp	.+6      	; 0x345e <lora_driver_sent_upload_message+0x98>
    3458:	85 e8       	ldi	r24, 0x85	; 133
    345a:	94 e0       	ldi	r25, 0x04	; 4
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <lora_driver_sent_upload_message+0x9c>
    345e:	87 e8       	ldi	r24, 0x87	; 135
    3460:	94 e0       	ldi	r25, 0x04	; 4
    3462:	21 ee       	ldi	r18, 0xE1	; 225
    3464:	37 e1       	ldi	r19, 0x17	; 23
    3466:	3f 93       	push	r19
    3468:	2f 93       	push	r18
    346a:	1f 92       	push	r1
    346c:	4f 93       	push	r20
    346e:	9f 93       	push	r25
    3470:	8f 93       	push	r24
    3472:	8b e8       	ldi	r24, 0x8B	; 139
    3474:	94 e0       	ldi	r25, 0x04	; 4
    3476:	9f 93       	push	r25
    3478:	8f 93       	push	r24
    347a:	83 e2       	ldi	r24, 0x23	; 35
    347c:	98 e1       	ldi	r25, 0x18	; 24
    347e:	9f 93       	push	r25
    3480:	8f 93       	push	r24
    3482:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	70 e0       	ldi	r23, 0x00	; 0
    348a:	83 e2       	ldi	r24, 0x23	; 35
    348c:	98 e1       	ldi	r25, 0x18	; 24
    348e:	aa de       	rcall	.-684    	; 0x31e4 <_upload_message_rc>
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	81 11       	cpse	r24, r1
    349c:	59 c0       	rjmp	.+178    	; 0x3550 <lora_driver_sent_upload_message+0x18a>
    349e:	08 e2       	ldi	r16, 0x28	; 40
    34a0:	15 e0       	ldi	r17, 0x05	; 5
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	4d e2       	ldi	r20, 0x2D	; 45
    34a8:	50 e0       	ldi	r21, 0x00	; 0
    34aa:	60 e5       	ldi	r22, 0x50	; 80
    34ac:	78 e1       	ldi	r23, 0x18	; 24
    34ae:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    34b2:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    34b6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <xStreamBufferReceive>
    34ba:	88 23       	and	r24, r24
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <lora_driver_sent_upload_message+0xfa>
    34be:	47 c0       	rjmp	.+142    	; 0x354e <lora_driver_sent_upload_message+0x188>
    34c0:	80 e5       	ldi	r24, 0x50	; 80
    34c2:	98 e1       	ldi	r25, 0x18	; 24
    34c4:	1a de       	rcall	.-972    	; 0x30fa <_reply2return_code>
    34c6:	8e 30       	cpi	r24, 0x0E	; 14
    34c8:	09 f0       	breq	.+2      	; 0x34cc <lora_driver_sent_upload_message+0x106>
    34ca:	42 c0       	rjmp	.+132    	; 0x3550 <lora_driver_sent_upload_message+0x18a>
    34cc:	87 e0       	ldi	r24, 0x07	; 7
    34ce:	89 83       	std	Y+1, r24	; 0x01
    34d0:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <_downlinkMessageBuffer>
    34d4:	90 91 c6 17 	lds	r25, 0x17C6	; 0x8017c6 <_downlinkMessageBuffer+0x1>
    34d8:	89 2b       	or	r24, r25
    34da:	a9 f1       	breq	.+106    	; 0x3546 <lora_driver_sent_upload_message+0x180>
    34dc:	be 01       	movw	r22, r28
    34de:	6f 5f       	subi	r22, 0xFF	; 255
    34e0:	7f 4f       	sbci	r23, 0xFF	; 255
    34e2:	80 e5       	ldi	r24, 0x50	; 80
    34e4:	98 e1       	ldi	r25, 0x18	; 24
    34e6:	68 d1       	rcall	.+720    	; 0x37b8 <decode_port_no>
    34e8:	80 93 cb 17 	sts	0x17CB, r24	; 0x8017cb <_downlink_payload>
    34ec:	e9 81       	ldd	r30, Y+1	; 0x01
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	e0 5b       	subi	r30, 0xB0	; 176
    34f2:	f7 4e       	sbci	r31, 0xE7	; 231
    34f4:	df 01       	movw	r26, r30
    34f6:	0d 90       	ld	r0, X+
    34f8:	00 20       	and	r0, r0
    34fa:	e9 f7       	brne	.-6      	; 0x34f6 <lora_driver_sent_upload_message+0x130>
    34fc:	11 97       	sbiw	r26, 0x01	; 1
    34fe:	ae 1b       	sub	r26, r30
    3500:	bf 0b       	sbc	r27, r31
    3502:	aa 23       	and	r26, r26
    3504:	91 f0       	breq	.+36     	; 0x352a <lora_driver_sent_upload_message+0x164>
    3506:	bb 27       	eor	r27, r27
    3508:	cd 01       	movw	r24, r26
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	9c 01       	movw	r18, r24
    350e:	12 f4       	brpl	.+4      	; 0x3514 <lora_driver_sent_upload_message+0x14e>
    3510:	2f 5f       	subi	r18, 0xFF	; 255
    3512:	3f 4f       	sbci	r19, 0xFF	; 255
    3514:	35 95       	asr	r19
    3516:	27 95       	ror	r18
    3518:	20 93 cc 17 	sts	0x17CC, r18	; 0x8017cc <_downlink_payload+0x1>
    351c:	af 01       	movw	r20, r30
    351e:	4f 5f       	subi	r20, 0xFF	; 255
    3520:	5f 4f       	sbci	r21, 0xFF	; 255
    3522:	64 e1       	ldi	r22, 0x14	; 20
    3524:	8d ec       	ldi	r24, 0xCD	; 205
    3526:	97 e1       	ldi	r25, 0x17	; 23
    3528:	73 d1       	rcall	.+742    	; 0x3810 <decode_hexadecimal_string_bytes>
    352a:	01 e0       	ldi	r16, 0x01	; 1
    352c:	10 e0       	ldi	r17, 0x00	; 0
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	46 e1       	ldi	r20, 0x16	; 22
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	6b ec       	ldi	r22, 0xCB	; 203
    3538:	77 e1       	ldi	r23, 0x17	; 23
    353a:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <_downlinkMessageBuffer>
    353e:	90 91 c6 17 	lds	r25, 0x17C6	; 0x8017c6 <_downlinkMessageBuffer+0x1>
    3542:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xStreamBufferSend>
    3546:	8e e0       	ldi	r24, 0x0E	; 14
    3548:	03 c0       	rjmp	.+6      	; 0x3550 <lora_driver_sent_upload_message+0x18a>
    354a:	84 e1       	ldi	r24, 0x14	; 20
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <lora_driver_sent_upload_message+0x18a>
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	0f 90       	pop	r0
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	08 95       	ret

0000355c <lora_driver_set_adaptive_data_rate>:
    355c:	81 30       	cpi	r24, 0x01	; 1
    355e:	19 f0       	breq	.+6      	; 0x3566 <lora_driver_set_adaptive_data_rate+0xa>
    3560:	6b e9       	ldi	r22, 0x9B	; 155
    3562:	74 e0       	ldi	r23, 0x04	; 4
    3564:	02 c0       	rjmp	.+4      	; 0x356a <lora_driver_set_adaptive_data_rate+0xe>
    3566:	64 e7       	ldi	r22, 0x74	; 116
    3568:	75 e0       	ldi	r23, 0x05	; 5
    356a:	8f e9       	ldi	r24, 0x9F	; 159
    356c:	94 e0       	ldi	r25, 0x04	; 4
    356e:	3a ce       	rjmp	.-908    	; 0x31e4 <_upload_message_rc>
    3570:	08 95       	ret

00003572 <lora_driver_set_receive_delay>:
    3572:	9f 93       	push	r25
    3574:	8f 93       	push	r24
    3576:	80 ed       	ldi	r24, 0xD0	; 208
    3578:	94 e0       	ldi	r25, 0x04	; 4
    357a:	9f 93       	push	r25
    357c:	8f 93       	push	r24
    357e:	83 e2       	ldi	r24, 0x23	; 35
    3580:	98 e1       	ldi	r25, 0x18	; 24
    3582:	9f 93       	push	r25
    3584:	8f 93       	push	r24
    3586:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	83 e2       	ldi	r24, 0x23	; 35
    3590:	98 e1       	ldi	r25, 0x18	; 24
    3592:	28 de       	rcall	.-944    	; 0x31e4 <_upload_message_rc>
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	08 95       	ret

000035a2 <lora_driver_configure_to_eu868>:
    35a2:	2f 92       	push	r2
    35a4:	3f 92       	push	r3
    35a6:	4f 92       	push	r4
    35a8:	5f 92       	push	r5
    35aa:	6f 92       	push	r6
    35ac:	7f 92       	push	r7
    35ae:	8f 92       	push	r8
    35b0:	9f 92       	push	r9
    35b2:	af 92       	push	r10
    35b4:	bf 92       	push	r11
    35b6:	cf 92       	push	r12
    35b8:	df 92       	push	r13
    35ba:	ef 92       	push	r14
    35bc:	ff 92       	push	r15
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	a0 97       	sbiw	r28, 0x20	; 32
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	6d ef       	ldi	r22, 0xFD	; 253
    35d8:	74 e0       	ldi	r23, 0x04	; 4
    35da:	89 e0       	ldi	r24, 0x09	; 9
    35dc:	95 e0       	ldi	r25, 0x05	; 5
    35de:	33 dd       	rcall	.-1434   	; 0x3046 <_upload_message>
    35e0:	8c dd       	rcall	.-1256   	; 0x30fa <_reply2return_code>
    35e2:	81 11       	cpse	r24, r1
    35e4:	a3 c0       	rjmp	.+326    	; 0x372c <lora_driver_configure_to_eu868+0x18a>
    35e6:	80 e2       	ldi	r24, 0x20	; 32
    35e8:	ec e1       	ldi	r30, 0x1C	; 28
    35ea:	f2 e0       	ldi	r31, 0x02	; 2
    35ec:	de 01       	movw	r26, r28
    35ee:	11 96       	adiw	r26, 0x01	; 1
    35f0:	01 90       	ld	r0, Z+
    35f2:	0d 92       	st	X+, r0
    35f4:	8a 95       	dec	r24
    35f6:	e1 f7       	brne	.-8      	; 0x35f0 <lora_driver_configure_to_eu868+0x4e>
    35f8:	9e 01       	movw	r18, r28
    35fa:	2f 5f       	subi	r18, 0xFF	; 255
    35fc:	3f 4f       	sbci	r19, 0xFF	; 255
    35fe:	69 01       	movw	r12, r18
    3600:	e1 2c       	mov	r14, r1
    3602:	f1 2c       	mov	r15, r1
    3604:	0f 2e       	mov	r0, r31
    3606:	f5 e1       	ldi	r31, 0x15	; 21
    3608:	af 2e       	mov	r10, r31
    360a:	f5 e0       	ldi	r31, 0x05	; 5
    360c:	bf 2e       	mov	r11, r31
    360e:	f0 2d       	mov	r31, r0
    3610:	03 e2       	ldi	r16, 0x23	; 35
    3612:	18 e1       	ldi	r17, 0x18	; 24
    3614:	0f 2e       	mov	r0, r31
    3616:	fe e2       	ldi	r31, 0x2E	; 46
    3618:	4f 2e       	mov	r4, r31
    361a:	f5 e0       	ldi	r31, 0x05	; 5
    361c:	5f 2e       	mov	r5, r31
    361e:	f0 2d       	mov	r31, r0
    3620:	0f 2e       	mov	r0, r31
    3622:	f5 e4       	ldi	r31, 0x45	; 69
    3624:	8f 2e       	mov	r8, r31
    3626:	f5 e0       	ldi	r31, 0x05	; 5
    3628:	9f 2e       	mov	r9, r31
    362a:	f0 2d       	mov	r31, r0
    362c:	0f 2e       	mov	r0, r31
    362e:	ff e5       	ldi	r31, 0x5F	; 95
    3630:	6f 2e       	mov	r6, r31
    3632:	f5 e0       	ldi	r31, 0x05	; 5
    3634:	7f 2e       	mov	r7, r31
    3636:	f0 2d       	mov	r31, r0
    3638:	3e 2c       	mov	r3, r14
    363a:	2f 2c       	mov	r2, r15
    363c:	ff 92       	push	r15
    363e:	ef 92       	push	r14
    3640:	bf 92       	push	r11
    3642:	af 92       	push	r10
    3644:	1f 93       	push	r17
    3646:	0f 93       	push	r16
    3648:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	c8 01       	movw	r24, r16
    3652:	f9 dc       	rcall	.-1550   	; 0x3046 <_upload_message>
    3654:	52 dd       	rcall	.-1372   	; 0x30fa <_reply2return_code>
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	81 11       	cpse	r24, r1
    3664:	63 c0       	rjmp	.+198    	; 0x372c <lora_driver_configure_to_eu868+0x18a>
    3666:	32 e0       	ldi	r19, 0x02	; 2
    3668:	3e 15       	cp	r19, r14
    366a:	e8 f4       	brcc	.+58     	; 0x36a6 <lora_driver_configure_to_eu868+0x104>
    366c:	f6 01       	movw	r30, r12
    366e:	83 81       	ldd	r24, Z+3	; 0x03
    3670:	8f 93       	push	r24
    3672:	82 81       	ldd	r24, Z+2	; 0x02
    3674:	8f 93       	push	r24
    3676:	81 81       	ldd	r24, Z+1	; 0x01
    3678:	8f 93       	push	r24
    367a:	80 81       	ld	r24, Z
    367c:	8f 93       	push	r24
    367e:	ff 92       	push	r15
    3680:	ef 92       	push	r14
    3682:	5f 92       	push	r5
    3684:	4f 92       	push	r4
    3686:	1f 93       	push	r17
    3688:	0f 93       	push	r16
    368a:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
    368e:	60 e0       	ldi	r22, 0x00	; 0
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	c8 01       	movw	r24, r16
    3694:	d8 dc       	rcall	.-1616   	; 0x3046 <_upload_message>
    3696:	31 dd       	rcall	.-1438   	; 0x30fa <_reply2return_code>
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	81 11       	cpse	r24, r1
    36a4:	43 c0       	rjmp	.+134    	; 0x372c <lora_driver_configure_to_eu868+0x18a>
    36a6:	2f 92       	push	r2
    36a8:	3f 92       	push	r3
    36aa:	9f 92       	push	r9
    36ac:	8f 92       	push	r8
    36ae:	1f 93       	push	r17
    36b0:	0f 93       	push	r16
    36b2:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
    36b6:	60 e0       	ldi	r22, 0x00	; 0
    36b8:	70 e0       	ldi	r23, 0x00	; 0
    36ba:	c8 01       	movw	r24, r16
    36bc:	c4 dc       	rcall	.-1656   	; 0x3046 <_upload_message>
    36be:	1d dd       	rcall	.-1478   	; 0x30fa <_reply2return_code>
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	81 11       	cpse	r24, r1
    36ce:	2e c0       	rjmp	.+92     	; 0x372c <lora_driver_configure_to_eu868+0x18a>
    36d0:	2f 92       	push	r2
    36d2:	3f 92       	push	r3
    36d4:	7f 92       	push	r7
    36d6:	6f 92       	push	r6
    36d8:	1f 93       	push	r17
    36da:	0f 93       	push	r16
    36dc:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	c8 01       	movw	r24, r16
    36e6:	af dc       	rcall	.-1698   	; 0x3046 <_upload_message>
    36e8:	08 dd       	rcall	.-1520   	; 0x30fa <_reply2return_code>
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	81 11       	cpse	r24, r1
    36f8:	19 c0       	rjmp	.+50     	; 0x372c <lora_driver_configure_to_eu868+0x18a>
    36fa:	3f ef       	ldi	r19, 0xFF	; 255
    36fc:	e3 1a       	sub	r14, r19
    36fe:	f3 0a       	sbc	r15, r19
    3700:	84 e0       	ldi	r24, 0x04	; 4
    3702:	c8 0e       	add	r12, r24
    3704:	d1 1c       	adc	r13, r1
    3706:	98 e0       	ldi	r25, 0x08	; 8
    3708:	e9 16       	cp	r14, r25
    370a:	f1 04       	cpc	r15, r1
    370c:	09 f0       	breq	.+2      	; 0x3710 <lora_driver_configure_to_eu868+0x16e>
    370e:	94 cf       	rjmp	.-216    	; 0x3638 <lora_driver_configure_to_eu868+0x96>
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	87 e7       	ldi	r24, 0x77	; 119
    3716:	95 e0       	ldi	r25, 0x05	; 5
    3718:	96 dc       	rcall	.-1748   	; 0x3046 <_upload_message>
    371a:	ef dc       	rcall	.-1570   	; 0x30fa <_reply2return_code>
    371c:	81 11       	cpse	r24, r1
    371e:	06 c0       	rjmp	.+12     	; 0x372c <lora_driver_configure_to_eu868+0x18a>
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	88 e8       	ldi	r24, 0x88	; 136
    3726:	95 e0       	ldi	r25, 0x05	; 5
    3728:	8e dc       	rcall	.-1764   	; 0x3046 <_upload_message>
    372a:	e7 dc       	rcall	.-1586   	; 0x30fa <_reply2return_code>
    372c:	a0 96       	adiw	r28, 0x20	; 32
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	f8 94       	cli
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	cd bf       	out	0x3d, r28	; 61
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	1f 91       	pop	r17
    373e:	0f 91       	pop	r16
    3740:	ff 90       	pop	r15
    3742:	ef 90       	pop	r14
    3744:	df 90       	pop	r13
    3746:	cf 90       	pop	r12
    3748:	bf 90       	pop	r11
    374a:	af 90       	pop	r10
    374c:	9f 90       	pop	r9
    374e:	8f 90       	pop	r8
    3750:	7f 90       	pop	r7
    3752:	6f 90       	pop	r6
    3754:	5f 90       	pop	r5
    3756:	4f 90       	pop	r4
    3758:	3f 90       	pop	r3
    375a:	2f 90       	pop	r2
    375c:	08 95       	ret

0000375e <lora_driver_set_otaa_identity>:
    375e:	ef 92       	push	r14
    3760:	ff 92       	push	r15
    3762:	0f 93       	push	r16
    3764:	1f 93       	push	r17
    3766:	cf 93       	push	r28
    3768:	df 93       	push	r29
    376a:	ec 01       	movw	r28, r24
    376c:	8b 01       	movw	r16, r22
    376e:	7a 01       	movw	r14, r20
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	f4 de       	rcall	.-536    	; 0x355c <lora_driver_set_adaptive_data_rate>
    3774:	81 11       	cpse	r24, r1
    3776:	0d c0       	rjmp	.+26     	; 0x3792 <lora_driver_set_otaa_identity+0x34>
    3778:	ce 01       	movw	r24, r28
    377a:	d4 dd       	rcall	.-1112   	; 0x3324 <lora_driver_set_application_identifier>
    377c:	81 11       	cpse	r24, r1
    377e:	09 c0       	rjmp	.+18     	; 0x3792 <lora_driver_set_otaa_identity+0x34>
    3780:	c8 01       	movw	r24, r16
    3782:	e1 dd       	rcall	.-1086   	; 0x3346 <lora_driver_set_application_key>
    3784:	81 11       	cpse	r24, r1
    3786:	05 c0       	rjmp	.+10     	; 0x3792 <lora_driver_set_otaa_identity+0x34>
    3788:	c7 01       	movw	r24, r14
    378a:	bb dd       	rcall	.-1162   	; 0x3302 <lora_driver_set_device_identifier>
    378c:	81 11       	cpse	r24, r1
    378e:	01 c0       	rjmp	.+2      	; 0x3792 <lora_driver_set_otaa_identity+0x34>
    3790:	eb dd       	rcall	.-1066   	; 0x3368 <lora_driver_save_mac>
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	ef 90       	pop	r14
    379e:	08 95       	ret

000037a0 <lora_driver_map_return_code_to_text>:
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	fc 01       	movw	r30, r24
    37a4:	ee 0f       	add	r30, r30
    37a6:	ff 1f       	adc	r31, r31
    37a8:	8e 0f       	add	r24, r30
    37aa:	9f 1f       	adc	r25, r31
    37ac:	fc 01       	movw	r30, r24
    37ae:	ef 5a       	subi	r30, 0xAF	; 175
    37b0:	f9 4f       	sbci	r31, 0xF9	; 249
    37b2:	81 81       	ldd	r24, Z+1	; 0x01
    37b4:	92 81       	ldd	r25, Z+2	; 0x02
    37b6:	08 95       	ret

000037b8 <decode_port_no>:
    37b8:	dc 01       	movw	r26, r24
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	29 f1       	breq	.+74     	; 0x3808 <decode_port_no+0x50>
    37be:	fb 01       	movw	r30, r22
    37c0:	20 81       	ld	r18, Z
    37c2:	fc 01       	movw	r30, r24
    37c4:	01 90       	ld	r0, Z+
    37c6:	00 20       	and	r0, r0
    37c8:	e9 f7       	brne	.-6      	; 0x37c4 <decode_port_no+0xc>
    37ca:	31 97       	sbiw	r30, 0x01	; 1
    37cc:	e8 1b       	sub	r30, r24
    37ce:	f9 0b       	sbc	r31, r25
    37d0:	82 2f       	mov	r24, r18
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	e8 17       	cp	r30, r24
    37d6:	f9 07       	cpc	r31, r25
    37d8:	c8 f0       	brcs	.+50     	; 0x380c <decode_port_no+0x54>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	08 c0       	rjmp	.+16     	; 0x37ee <decode_port_no+0x36>
    37de:	88 0f       	add	r24, r24
    37e0:	38 2f       	mov	r19, r24
    37e2:	33 0f       	add	r19, r19
    37e4:	33 0f       	add	r19, r19
    37e6:	83 0f       	add	r24, r19
    37e8:	80 53       	subi	r24, 0x30	; 48
    37ea:	89 0f       	add	r24, r25
    37ec:	2f 5f       	subi	r18, 0xFF	; 255
    37ee:	fd 01       	movw	r30, r26
    37f0:	e2 0f       	add	r30, r18
    37f2:	f1 1d       	adc	r31, r1
    37f4:	90 81       	ld	r25, Z
    37f6:	30 ed       	ldi	r19, 0xD0	; 208
    37f8:	39 0f       	add	r19, r25
    37fa:	3a 30       	cpi	r19, 0x0A	; 10
    37fc:	10 f4       	brcc	.+4      	; 0x3802 <decode_port_no+0x4a>
    37fe:	91 11       	cpse	r25, r1
    3800:	ee cf       	rjmp	.-36     	; 0x37de <decode_port_no+0x26>
    3802:	fb 01       	movw	r30, r22
    3804:	20 83       	st	Z, r18
    3806:	08 95       	ret
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	08 95       	ret
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	08 95       	ret

00003810 <decode_hexadecimal_string_bytes>:
    3810:	0f 93       	push	r16
    3812:	1f 93       	push	r17
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	dc 01       	movw	r26, r24
    381a:	ea 01       	movw	r28, r20
    381c:	20 97       	sbiw	r28, 0x00	; 0
    381e:	e1 f1       	breq	.+120    	; 0x3898 <decode_hexadecimal_string_bytes+0x88>
    3820:	fa 01       	movw	r30, r20
    3822:	01 90       	ld	r0, Z+
    3824:	00 20       	and	r0, r0
    3826:	e9 f7       	brne	.-6      	; 0x3822 <decode_hexadecimal_string_bytes+0x12>
    3828:	31 97       	sbiw	r30, 0x01	; 1
    382a:	e4 1b       	sub	r30, r20
    382c:	f5 0b       	sbc	r31, r21
    382e:	32 97       	sbiw	r30, 0x02	; 2
    3830:	10 f5       	brcc	.+68     	; 0x3876 <decode_hexadecimal_string_bytes+0x66>
    3832:	32 c0       	rjmp	.+100    	; 0x3898 <decode_hexadecimal_string_bytes+0x88>
    3834:	8d 01       	movw	r16, r26
    3836:	04 0f       	add	r16, r20
    3838:	15 1f       	adc	r17, r21
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	ae 01       	movw	r20, r28
    383e:	42 0f       	add	r20, r18
    3840:	53 1f       	adc	r21, r19
    3842:	fa 01       	movw	r30, r20
    3844:	90 81       	ld	r25, Z
    3846:	91 34       	cpi	r25, 0x41	; 65
    3848:	28 f0       	brcs	.+10     	; 0x3854 <decode_hexadecimal_string_bytes+0x44>
    384a:	97 53       	subi	r25, 0x37	; 55
    384c:	59 2f       	mov	r21, r25
    384e:	52 95       	swap	r21
    3850:	50 7f       	andi	r21, 0xF0	; 240
    3852:	03 c0       	rjmp	.+6      	; 0x385a <decode_hexadecimal_string_bytes+0x4a>
    3854:	59 2f       	mov	r21, r25
    3856:	52 95       	swap	r21
    3858:	50 7f       	andi	r21, 0xF0	; 240
    385a:	2c 0f       	add	r18, r28
    385c:	3d 1f       	adc	r19, r29
    385e:	f9 01       	movw	r30, r18
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	91 34       	cpi	r25, 0x41	; 65
    3864:	10 f0       	brcs	.+4      	; 0x386a <decode_hexadecimal_string_bytes+0x5a>
    3866:	97 53       	subi	r25, 0x37	; 55
    3868:	01 c0       	rjmp	.+2      	; 0x386c <decode_hexadecimal_string_bytes+0x5c>
    386a:	90 53       	subi	r25, 0x30	; 48
    386c:	95 0f       	add	r25, r21
    386e:	f8 01       	movw	r30, r16
    3870:	90 83       	st	Z, r25
    3872:	8f 5f       	subi	r24, 0xFF	; 255
    3874:	01 c0       	rjmp	.+2      	; 0x3878 <decode_hexadecimal_string_bytes+0x68>
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	28 2f       	mov	r18, r24
    387a:	22 0f       	add	r18, r18
    387c:	48 2f       	mov	r20, r24
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	fe 01       	movw	r30, r28
    3882:	01 90       	ld	r0, Z+
    3884:	00 20       	and	r0, r0
    3886:	e9 f7       	brne	.-6      	; 0x3882 <decode_hexadecimal_string_bytes+0x72>
    3888:	31 97       	sbiw	r30, 0x01	; 1
    388a:	ec 1b       	sub	r30, r28
    388c:	fd 0b       	sbc	r31, r29
    388e:	4e 17       	cp	r20, r30
    3890:	5f 07       	cpc	r21, r31
    3892:	10 f4       	brcc	.+4      	; 0x3898 <decode_hexadecimal_string_bytes+0x88>
    3894:	86 13       	cpse	r24, r22
    3896:	ce cf       	rjmp	.-100    	; 0x3834 <decode_hexadecimal_string_bytes+0x24>
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	08 95       	ret

000038a2 <reg_read_register>:
    38a2:	fc 01       	movw	r30, r24
    38a4:	80 81       	ld	r24, Z
    38a6:	08 95       	ret

000038a8 <reg_read_bit>:
    38a8:	fc 01       	movw	r30, r24
    38aa:	20 81       	ld	r18, Z
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <reg_read_bit+0xe>
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	6a 95       	dec	r22
    38b8:	e2 f7       	brpl	.-8      	; 0x38b2 <reg_read_bit+0xa>
    38ba:	82 23       	and	r24, r18
    38bc:	08 95       	ret

000038be <reg_read_bits>:
    38be:	fc 01       	movw	r30, r24
    38c0:	80 81       	ld	r24, Z
    38c2:	86 23       	and	r24, r22
    38c4:	08 95       	ret

000038c6 <reg_set_register>:
    38c6:	fc 01       	movw	r30, r24
    38c8:	60 83       	st	Z, r22
    38ca:	08 95       	ret

000038cc <reg_clear_register>:
    38cc:	fc 01       	movw	r30, r24
    38ce:	10 82       	st	Z, r1
    38d0:	08 95       	ret

000038d2 <reg_set_bit>:
    38d2:	fc 01       	movw	r30, r24
    38d4:	40 81       	ld	r20, Z
    38d6:	21 e0       	ldi	r18, 0x01	; 1
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <reg_set_bit+0xe>
    38dc:	22 0f       	add	r18, r18
    38de:	33 1f       	adc	r19, r19
    38e0:	6a 95       	dec	r22
    38e2:	e2 f7       	brpl	.-8      	; 0x38dc <reg_set_bit+0xa>
    38e4:	24 2b       	or	r18, r20
    38e6:	20 83       	st	Z, r18
    38e8:	08 95       	ret

000038ea <reg_set_bits>:
    38ea:	fc 01       	movw	r30, r24
    38ec:	20 81       	ld	r18, Z
    38ee:	62 2b       	or	r22, r18
    38f0:	60 83       	st	Z, r22
    38f2:	08 95       	ret

000038f4 <reg_toggle_bit>:
    38f4:	fc 01       	movw	r30, r24
    38f6:	40 81       	ld	r20, Z
    38f8:	21 e0       	ldi	r18, 0x01	; 1
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	02 c0       	rjmp	.+4      	; 0x3902 <reg_toggle_bit+0xe>
    38fe:	22 0f       	add	r18, r18
    3900:	33 1f       	adc	r19, r19
    3902:	6a 95       	dec	r22
    3904:	e2 f7       	brpl	.-8      	; 0x38fe <reg_toggle_bit+0xa>
    3906:	24 27       	eor	r18, r20
    3908:	20 83       	st	Z, r18
    390a:	08 95       	ret

0000390c <reg_toggle_bits>:
    390c:	fc 01       	movw	r30, r24
    390e:	20 81       	ld	r18, Z
    3910:	62 27       	eor	r22, r18
    3912:	60 83       	st	Z, r22
    3914:	08 95       	ret

00003916 <reg_clear_bit>:
    3916:	fc 01       	movw	r30, r24
    3918:	90 81       	ld	r25, Z
    391a:	21 e0       	ldi	r18, 0x01	; 1
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <reg_clear_bit+0xe>
    3920:	22 0f       	add	r18, r18
    3922:	33 1f       	adc	r19, r19
    3924:	6a 95       	dec	r22
    3926:	e2 f7       	brpl	.-8      	; 0x3920 <reg_clear_bit+0xa>
    3928:	20 95       	com	r18
    392a:	29 23       	and	r18, r25
    392c:	20 83       	st	Z, r18
    392e:	08 95       	ret

00003930 <reg_clear_bits>:
    3930:	fc 01       	movw	r30, r24
    3932:	90 81       	ld	r25, Z
    3934:	60 95       	com	r22
    3936:	69 23       	and	r22, r25
    3938:	60 83       	st	Z, r22
    393a:	08 95       	ret

0000393c <serial_new_instance>:
    393c:	2f 92       	push	r2
    393e:	3f 92       	push	r3
    3940:	4f 92       	push	r4
    3942:	5f 92       	push	r5
    3944:	6f 92       	push	r6
    3946:	7f 92       	push	r7
    3948:	8f 92       	push	r8
    394a:	9f 92       	push	r9
    394c:	af 92       	push	r10
    394e:	cf 92       	push	r12
    3950:	ef 92       	push	r14
    3952:	ff 92       	push	r15
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
    3960:	f8 2e       	mov	r15, r24
    3962:	2a 01       	movw	r4, r20
    3964:	3b 01       	movw	r6, r22
    3966:	88 e0       	ldi	r24, 0x08	; 8
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	d6 d5       	rcall	.+2988   	; 0x4518 <malloc>
    396c:	8c 01       	movw	r16, r24
    396e:	8f 2d       	mov	r24, r15
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	fc 01       	movw	r30, r24
    3978:	e3 58       	subi	r30, 0x83	; 131
    397a:	f7 4e       	sbci	r31, 0xE7	; 231
    397c:	11 83       	std	Z+1, r17	; 0x01
    397e:	00 83       	st	Z, r16
    3980:	fc 01       	movw	r30, r24
    3982:	ea 5f       	subi	r30, 0xFA	; 250
    3984:	fd 4f       	sbci	r31, 0xFD	; 253
    3986:	80 81       	ld	r24, Z
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	d8 01       	movw	r26, r16
    398c:	8d 93       	st	X+, r24
    398e:	9c 93       	st	X, r25
    3990:	6c 2d       	mov	r22, r12
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	84 e0       	ldi	r24, 0x04	; 4
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	a5 d5       	rcall	.+2890   	; 0x44e4 <calloc>
    399a:	1c 01       	movw	r2, r24
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	86 e0       	ldi	r24, 0x06	; 6
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	9f d5       	rcall	.+2878   	; 0x44e4 <calloc>
    39a6:	7c 01       	movw	r14, r24
    39a8:	4c 2d       	mov	r20, r12
    39aa:	b1 01       	movw	r22, r2
    39ac:	8d d3       	rcall	.+1818   	; 0x40c8 <fifo_init>
    39ae:	f8 01       	movw	r30, r16
    39b0:	f5 82       	std	Z+5, r15	; 0x05
    39b2:	e4 82       	std	Z+4, r14	; 0x04
    39b4:	6a 2d       	mov	r22, r10
    39b6:	70 e0       	ldi	r23, 0x00	; 0
    39b8:	84 e0       	ldi	r24, 0x04	; 4
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	93 d5       	rcall	.+2854   	; 0x44e4 <calloc>
    39be:	1c 01       	movw	r2, r24
    39c0:	61 e0       	ldi	r22, 0x01	; 1
    39c2:	70 e0       	ldi	r23, 0x00	; 0
    39c4:	86 e0       	ldi	r24, 0x06	; 6
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	8d d5       	rcall	.+2842   	; 0x44e4 <calloc>
    39ca:	7c 01       	movw	r14, r24
    39cc:	4a 2d       	mov	r20, r10
    39ce:	b1 01       	movw	r22, r2
    39d0:	7b d3       	rcall	.+1782   	; 0x40c8 <fifo_init>
    39d2:	d8 01       	movw	r26, r16
    39d4:	13 96       	adiw	r26, 0x03	; 3
    39d6:	fc 92       	st	X, r15
    39d8:	ee 92       	st	-X, r14
    39da:	12 97       	sbiw	r26, 0x02	; 2
    39dc:	17 96       	adiw	r26, 0x07	; 7
    39de:	9c 92       	st	X, r9
    39e0:	8e 92       	st	-X, r8
    39e2:	16 97       	sbiw	r26, 0x06	; 6
    39e4:	ff b6       	in	r15, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	ed 91       	ld	r30, X+
    39ea:	fc 91       	ld	r31, X
    39ec:	11 97       	sbiw	r26, 0x01	; 1
    39ee:	36 97       	sbiw	r30, 0x06	; 6
    39f0:	80 81       	ld	r24, Z
    39f2:	82 60       	ori	r24, 0x02	; 2
    39f4:	80 83       	st	Z, r24
    39f6:	8d 90       	ld	r8, X+
    39f8:	9c 90       	ld	r9, X
    39fa:	c3 01       	movw	r24, r6
    39fc:	b2 01       	movw	r22, r4
    39fe:	79 d4       	rcall	.+2290   	; 0x42f2 <__floatunsisf>
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	51 e4       	ldi	r21, 0x41	; 65
    3a08:	02 d5       	rcall	.+2564   	; 0x440e <__mulsf3>
    3a0a:	9b 01       	movw	r18, r22
    3a0c:	ac 01       	movw	r20, r24
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	74 e2       	ldi	r23, 0x24	; 36
    3a12:	84 e7       	ldi	r24, 0x74	; 116
    3a14:	9b e4       	ldi	r25, 0x4B	; 75
    3a16:	d9 d3       	rcall	.+1970   	; 0x41ca <__divsf3>
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e8       	ldi	r20, 0x80	; 128
    3a1e:	5f e3       	ldi	r21, 0x3F	; 63
    3a20:	6f d3       	rcall	.+1758   	; 0x4100 <__subsf3>
    3a22:	3b d4       	rcall	.+2166   	; 0x429a <__fixunssfsi>
    3a24:	f4 01       	movw	r30, r8
    3a26:	32 97       	sbiw	r30, 0x02	; 2
    3a28:	60 83       	st	Z, r22
    3a2a:	d8 01       	movw	r26, r16
    3a2c:	ed 91       	ld	r30, X+
    3a2e:	fc 91       	ld	r31, X
    3a30:	11 97       	sbiw	r26, 0x01	; 1
    3a32:	35 97       	sbiw	r30, 0x05	; 5
    3a34:	88 e9       	ldi	r24, 0x98	; 152
    3a36:	80 83       	st	Z, r24
    3a38:	ed 91       	ld	r30, X+
    3a3a:	fc 91       	ld	r31, X
    3a3c:	34 97       	sbiw	r30, 0x04	; 4
    3a3e:	86 e0       	ldi	r24, 0x06	; 6
    3a40:	80 83       	st	Z, r24
    3a42:	ff be       	out	0x3f, r15	; 63
    3a44:	c8 01       	movw	r24, r16
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	cf 90       	pop	r12
    3a54:	af 90       	pop	r10
    3a56:	9f 90       	pop	r9
    3a58:	8f 90       	pop	r8
    3a5a:	7f 90       	pop	r7
    3a5c:	6f 90       	pop	r6
    3a5e:	5f 90       	pop	r5
    3a60:	4f 90       	pop	r4
    3a62:	3f 90       	pop	r3
    3a64:	2f 90       	pop	r2
    3a66:	08 95       	ret

00003a68 <serial_send_byte>:
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	ec 01       	movw	r28, r24
    3a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a70:	fb 81       	ldd	r31, Y+3	; 0x03
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	25 81       	ldd	r18, Z+5	; 0x05
    3a78:	98 1b       	sub	r25, r24
    3a7a:	92 23       	and	r25, r18
    3a7c:	84 81       	ldd	r24, Z+4	; 0x04
    3a7e:	98 17       	cp	r25, r24
    3a80:	a1 f0       	breq	.+40     	; 0x3aaa <serial_send_byte+0x42>
    3a82:	93 81       	ldd	r25, Z+3	; 0x03
    3a84:	26 95       	lsr	r18
    3a86:	29 23       	and	r18, r25
    3a88:	a0 81       	ld	r26, Z
    3a8a:	b1 81       	ldd	r27, Z+1	; 0x01
    3a8c:	a2 0f       	add	r26, r18
    3a8e:	b1 1d       	adc	r27, r1
    3a90:	6c 93       	st	X, r22
    3a92:	9f 5f       	subi	r25, 0xFF	; 255
    3a94:	25 81       	ldd	r18, Z+5	; 0x05
    3a96:	92 23       	and	r25, r18
    3a98:	93 83       	std	Z+3, r25	; 0x03
    3a9a:	e8 81       	ld	r30, Y
    3a9c:	f9 81       	ldd	r31, Y+1	; 0x01
    3a9e:	35 97       	sbiw	r30, 0x05	; 5
    3aa0:	80 81       	ld	r24, Z
    3aa2:	80 62       	ori	r24, 0x20	; 32
    3aa4:	80 83       	st	Z, r24
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	01 c0       	rjmp	.+2      	; 0x3aac <serial_send_byte+0x44>
    3aaa:	82 e0       	ldi	r24, 0x02	; 2
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	08 95       	ret

00003ab2 <serial_send_bytes>:
    3ab2:	ef 92       	push	r14
    3ab4:	ff 92       	push	r15
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	7c 01       	movw	r14, r24
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	12 96       	adiw	r26, 0x02	; 2
    3ac4:	ed 91       	ld	r30, X+
    3ac6:	fc 91       	ld	r31, X
    3ac8:	13 97       	sbiw	r26, 0x03	; 3
    3aca:	93 81       	ldd	r25, Z+3	; 0x03
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	98 1b       	sub	r25, r24
    3ad0:	85 81       	ldd	r24, Z+5	; 0x05
    3ad2:	98 23       	and	r25, r24
    3ad4:	84 81       	ldd	r24, Z+4	; 0x04
    3ad6:	89 1b       	sub	r24, r25
    3ad8:	86 17       	cp	r24, r22
    3ada:	98 f1       	brcs	.+102    	; 0x3b42 <serial_send_bytes+0x90>
    3adc:	66 23       	and	r22, r22
    3ade:	41 f1       	breq	.+80     	; 0x3b30 <serial_send_bytes+0x7e>
    3ae0:	84 2f       	mov	r24, r20
    3ae2:	95 2f       	mov	r25, r21
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	61 50       	subi	r22, 0x01	; 1
    3ae8:	46 2f       	mov	r20, r22
    3aea:	50 e0       	ldi	r21, 0x00	; 0
    3aec:	4f 5f       	subi	r20, 0xFF	; 255
    3aee:	5f 4f       	sbci	r21, 0xFF	; 255
    3af0:	48 0f       	add	r20, r24
    3af2:	59 1f       	adc	r21, r25
    3af4:	e7 01       	movw	r28, r14
    3af6:	ea 81       	ldd	r30, Y+2	; 0x02
    3af8:	fb 81       	ldd	r31, Y+3	; 0x03
    3afa:	93 81       	ldd	r25, Z+3	; 0x03
    3afc:	82 81       	ldd	r24, Z+2	; 0x02
    3afe:	25 81       	ldd	r18, Z+5	; 0x05
    3b00:	98 1b       	sub	r25, r24
    3b02:	92 23       	and	r25, r18
    3b04:	84 81       	ldd	r24, Z+4	; 0x04
    3b06:	98 17       	cp	r25, r24
    3b08:	79 f0       	breq	.+30     	; 0x3b28 <serial_send_bytes+0x76>
    3b0a:	8c 91       	ld	r24, X
    3b0c:	93 81       	ldd	r25, Z+3	; 0x03
    3b0e:	26 95       	lsr	r18
    3b10:	29 23       	and	r18, r25
    3b12:	60 81       	ld	r22, Z
    3b14:	71 81       	ldd	r23, Z+1	; 0x01
    3b16:	8b 01       	movw	r16, r22
    3b18:	02 0f       	add	r16, r18
    3b1a:	11 1d       	adc	r17, r1
    3b1c:	e8 01       	movw	r28, r16
    3b1e:	88 83       	st	Y, r24
    3b20:	9f 5f       	subi	r25, 0xFF	; 255
    3b22:	85 81       	ldd	r24, Z+5	; 0x05
    3b24:	98 23       	and	r25, r24
    3b26:	93 83       	std	Z+3, r25	; 0x03
    3b28:	11 96       	adiw	r26, 0x01	; 1
    3b2a:	a4 17       	cp	r26, r20
    3b2c:	b5 07       	cpc	r27, r21
    3b2e:	11 f7       	brne	.-60     	; 0x3af4 <serial_send_bytes+0x42>
    3b30:	d7 01       	movw	r26, r14
    3b32:	ed 91       	ld	r30, X+
    3b34:	fc 91       	ld	r31, X
    3b36:	35 97       	sbiw	r30, 0x05	; 5
    3b38:	80 81       	ld	r24, Z
    3b3a:	80 62       	ori	r24, 0x20	; 32
    3b3c:	80 83       	st	Z, r24
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	01 c0       	rjmp	.+2      	; 0x3b44 <serial_send_bytes+0x92>
    3b42:	82 e0       	ldi	r24, 0x02	; 2
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	08 95       	ret

00003b52 <serial_get_byte>:
    3b52:	dc 01       	movw	r26, r24
    3b54:	14 96       	adiw	r26, 0x04	; 4
    3b56:	ed 91       	ld	r30, X+
    3b58:	fc 91       	ld	r31, X
    3b5a:	15 97       	sbiw	r26, 0x05	; 5
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	98 17       	cp	r25, r24
    3b62:	89 f0       	breq	.+34     	; 0x3b86 <serial_get_byte+0x34>
    3b64:	92 81       	ldd	r25, Z+2	; 0x02
    3b66:	85 81       	ldd	r24, Z+5	; 0x05
    3b68:	86 95       	lsr	r24
    3b6a:	89 23       	and	r24, r25
    3b6c:	a0 81       	ld	r26, Z
    3b6e:	b1 81       	ldd	r27, Z+1	; 0x01
    3b70:	a8 0f       	add	r26, r24
    3b72:	b1 1d       	adc	r27, r1
    3b74:	8c 91       	ld	r24, X
    3b76:	db 01       	movw	r26, r22
    3b78:	8c 93       	st	X, r24
    3b7a:	9f 5f       	subi	r25, 0xFF	; 255
    3b7c:	85 81       	ldd	r24, Z+5	; 0x05
    3b7e:	98 23       	and	r25, r24
    3b80:	92 83       	std	Z+2, r25	; 0x02
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	08 95       	ret
    3b86:	83 e0       	ldi	r24, 0x03	; 3
    3b88:	08 95       	ret

00003b8a <__vector_25>:
    3b8a:	1f 92       	push	r1
    3b8c:	0f 92       	push	r0
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	0f 92       	push	r0
    3b92:	11 24       	eor	r1, r1
    3b94:	0b b6       	in	r0, 0x3b	; 59
    3b96:	0f 92       	push	r0
    3b98:	2f 93       	push	r18
    3b9a:	3f 93       	push	r19
    3b9c:	4f 93       	push	r20
    3b9e:	5f 93       	push	r21
    3ba0:	6f 93       	push	r22
    3ba2:	7f 93       	push	r23
    3ba4:	8f 93       	push	r24
    3ba6:	9f 93       	push	r25
    3ba8:	af 93       	push	r26
    3baa:	bf 93       	push	r27
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	ef 93       	push	r30
    3bb2:	ff 93       	push	r31
    3bb4:	a0 91 7d 18 	lds	r26, 0x187D	; 0x80187d <_ser_handle>
    3bb8:	b0 91 7e 18 	lds	r27, 0x187E	; 0x80187e <_ser_handle+0x1>
    3bbc:	10 97       	sbiw	r26, 0x00	; 0
    3bbe:	11 f1       	breq	.+68     	; 0x3c04 <__vector_25+0x7a>
    3bc0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3bc4:	14 96       	adiw	r26, 0x04	; 4
    3bc6:	ed 91       	ld	r30, X+
    3bc8:	fc 91       	ld	r31, X
    3bca:	15 97       	sbiw	r26, 0x05	; 5
    3bcc:	93 81       	ldd	r25, Z+3	; 0x03
    3bce:	82 81       	ldd	r24, Z+2	; 0x02
    3bd0:	25 81       	ldd	r18, Z+5	; 0x05
    3bd2:	98 1b       	sub	r25, r24
    3bd4:	92 23       	and	r25, r18
    3bd6:	84 81       	ldd	r24, Z+4	; 0x04
    3bd8:	98 17       	cp	r25, r24
    3bda:	61 f0       	breq	.+24     	; 0x3bf4 <__vector_25+0x6a>
    3bdc:	83 81       	ldd	r24, Z+3	; 0x03
    3bde:	26 95       	lsr	r18
    3be0:	28 23       	and	r18, r24
    3be2:	c0 81       	ld	r28, Z
    3be4:	d1 81       	ldd	r29, Z+1	; 0x01
    3be6:	c2 0f       	add	r28, r18
    3be8:	d1 1d       	adc	r29, r1
    3bea:	68 83       	st	Y, r22
    3bec:	8f 5f       	subi	r24, 0xFF	; 255
    3bee:	95 81       	ldd	r25, Z+5	; 0x05
    3bf0:	89 23       	and	r24, r25
    3bf2:	83 83       	std	Z+3, r24	; 0x03
    3bf4:	16 96       	adiw	r26, 0x06	; 6
    3bf6:	ed 91       	ld	r30, X+
    3bf8:	fc 91       	ld	r31, X
    3bfa:	17 97       	sbiw	r26, 0x07	; 7
    3bfc:	30 97       	sbiw	r30, 0x00	; 0
    3bfe:	11 f0       	breq	.+4      	; 0x3c04 <__vector_25+0x7a>
    3c00:	cd 01       	movw	r24, r26
    3c02:	19 95       	eicall
    3c04:	ff 91       	pop	r31
    3c06:	ef 91       	pop	r30
    3c08:	df 91       	pop	r29
    3c0a:	cf 91       	pop	r28
    3c0c:	bf 91       	pop	r27
    3c0e:	af 91       	pop	r26
    3c10:	9f 91       	pop	r25
    3c12:	8f 91       	pop	r24
    3c14:	7f 91       	pop	r23
    3c16:	6f 91       	pop	r22
    3c18:	5f 91       	pop	r21
    3c1a:	4f 91       	pop	r20
    3c1c:	3f 91       	pop	r19
    3c1e:	2f 91       	pop	r18
    3c20:	0f 90       	pop	r0
    3c22:	0b be       	out	0x3b, r0	; 59
    3c24:	0f 90       	pop	r0
    3c26:	0f be       	out	0x3f, r0	; 63
    3c28:	0f 90       	pop	r0
    3c2a:	1f 90       	pop	r1
    3c2c:	18 95       	reti

00003c2e <__vector_26>:
    3c2e:	1f 92       	push	r1
    3c30:	0f 92       	push	r0
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	0f 92       	push	r0
    3c36:	11 24       	eor	r1, r1
    3c38:	0b b6       	in	r0, 0x3b	; 59
    3c3a:	0f 92       	push	r0
    3c3c:	2f 93       	push	r18
    3c3e:	8f 93       	push	r24
    3c40:	9f 93       	push	r25
    3c42:	af 93       	push	r26
    3c44:	bf 93       	push	r27
    3c46:	ef 93       	push	r30
    3c48:	ff 93       	push	r31
    3c4a:	e0 91 7d 18 	lds	r30, 0x187D	; 0x80187d <_ser_handle>
    3c4e:	f0 91 7e 18 	lds	r31, 0x187E	; 0x80187e <_ser_handle+0x1>
    3c52:	30 97       	sbiw	r30, 0x00	; 0
    3c54:	b9 f0       	breq	.+46     	; 0x3c84 <__vector_26+0x56>
    3c56:	02 80       	ldd	r0, Z+2	; 0x02
    3c58:	f3 81       	ldd	r31, Z+3	; 0x03
    3c5a:	e0 2d       	mov	r30, r0
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	98 17       	cp	r25, r24
    3c62:	b1 f0       	breq	.+44     	; 0x3c90 <__vector_26+0x62>
    3c64:	92 81       	ldd	r25, Z+2	; 0x02
    3c66:	85 81       	ldd	r24, Z+5	; 0x05
    3c68:	28 2f       	mov	r18, r24
    3c6a:	26 95       	lsr	r18
    3c6c:	29 23       	and	r18, r25
    3c6e:	a0 81       	ld	r26, Z
    3c70:	b1 81       	ldd	r27, Z+1	; 0x01
    3c72:	a2 0f       	add	r26, r18
    3c74:	b1 1d       	adc	r27, r1
    3c76:	2c 91       	ld	r18, X
    3c78:	9f 5f       	subi	r25, 0xFF	; 255
    3c7a:	89 23       	and	r24, r25
    3c7c:	82 83       	std	Z+2, r24	; 0x02
    3c7e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c82:	0b c0       	rjmp	.+22     	; 0x3c9a <__vector_26+0x6c>
    3c84:	e1 ec       	ldi	r30, 0xC1	; 193
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	8f 7d       	andi	r24, 0xDF	; 223
    3c8c:	80 83       	st	Z, r24
    3c8e:	05 c0       	rjmp	.+10     	; 0x3c9a <__vector_26+0x6c>
    3c90:	e1 ec       	ldi	r30, 0xC1	; 193
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	80 81       	ld	r24, Z
    3c96:	8f 7d       	andi	r24, 0xDF	; 223
    3c98:	80 83       	st	Z, r24
    3c9a:	ff 91       	pop	r31
    3c9c:	ef 91       	pop	r30
    3c9e:	bf 91       	pop	r27
    3ca0:	af 91       	pop	r26
    3ca2:	9f 91       	pop	r25
    3ca4:	8f 91       	pop	r24
    3ca6:	2f 91       	pop	r18
    3ca8:	0f 90       	pop	r0
    3caa:	0b be       	out	0x3b, r0	; 59
    3cac:	0f 90       	pop	r0
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	0f 90       	pop	r0
    3cb2:	1f 90       	pop	r1
    3cb4:	18 95       	reti

00003cb6 <__vector_36>:
    3cb6:	1f 92       	push	r1
    3cb8:	0f 92       	push	r0
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	0f 92       	push	r0
    3cbe:	11 24       	eor	r1, r1
    3cc0:	0b b6       	in	r0, 0x3b	; 59
    3cc2:	0f 92       	push	r0
    3cc4:	2f 93       	push	r18
    3cc6:	3f 93       	push	r19
    3cc8:	4f 93       	push	r20
    3cca:	5f 93       	push	r21
    3ccc:	6f 93       	push	r22
    3cce:	7f 93       	push	r23
    3cd0:	8f 93       	push	r24
    3cd2:	9f 93       	push	r25
    3cd4:	af 93       	push	r26
    3cd6:	bf 93       	push	r27
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	ef 93       	push	r30
    3cde:	ff 93       	push	r31
    3ce0:	a0 91 7f 18 	lds	r26, 0x187F	; 0x80187f <_ser_handle+0x2>
    3ce4:	b0 91 80 18 	lds	r27, 0x1880	; 0x801880 <_ser_handle+0x3>
    3ce8:	10 97       	sbiw	r26, 0x00	; 0
    3cea:	11 f1       	breq	.+68     	; 0x3d30 <__vector_36+0x7a>
    3cec:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3cf0:	14 96       	adiw	r26, 0x04	; 4
    3cf2:	ed 91       	ld	r30, X+
    3cf4:	fc 91       	ld	r31, X
    3cf6:	15 97       	sbiw	r26, 0x05	; 5
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	25 81       	ldd	r18, Z+5	; 0x05
    3cfe:	98 1b       	sub	r25, r24
    3d00:	92 23       	and	r25, r18
    3d02:	84 81       	ldd	r24, Z+4	; 0x04
    3d04:	98 17       	cp	r25, r24
    3d06:	61 f0       	breq	.+24     	; 0x3d20 <__vector_36+0x6a>
    3d08:	83 81       	ldd	r24, Z+3	; 0x03
    3d0a:	26 95       	lsr	r18
    3d0c:	28 23       	and	r18, r24
    3d0e:	c0 81       	ld	r28, Z
    3d10:	d1 81       	ldd	r29, Z+1	; 0x01
    3d12:	c2 0f       	add	r28, r18
    3d14:	d1 1d       	adc	r29, r1
    3d16:	68 83       	st	Y, r22
    3d18:	8f 5f       	subi	r24, 0xFF	; 255
    3d1a:	95 81       	ldd	r25, Z+5	; 0x05
    3d1c:	89 23       	and	r24, r25
    3d1e:	83 83       	std	Z+3, r24	; 0x03
    3d20:	16 96       	adiw	r26, 0x06	; 6
    3d22:	ed 91       	ld	r30, X+
    3d24:	fc 91       	ld	r31, X
    3d26:	17 97       	sbiw	r26, 0x07	; 7
    3d28:	30 97       	sbiw	r30, 0x00	; 0
    3d2a:	11 f0       	breq	.+4      	; 0x3d30 <__vector_36+0x7a>
    3d2c:	cd 01       	movw	r24, r26
    3d2e:	19 95       	eicall
    3d30:	ff 91       	pop	r31
    3d32:	ef 91       	pop	r30
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	bf 91       	pop	r27
    3d3a:	af 91       	pop	r26
    3d3c:	9f 91       	pop	r25
    3d3e:	8f 91       	pop	r24
    3d40:	7f 91       	pop	r23
    3d42:	6f 91       	pop	r22
    3d44:	5f 91       	pop	r21
    3d46:	4f 91       	pop	r20
    3d48:	3f 91       	pop	r19
    3d4a:	2f 91       	pop	r18
    3d4c:	0f 90       	pop	r0
    3d4e:	0b be       	out	0x3b, r0	; 59
    3d50:	0f 90       	pop	r0
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	0f 90       	pop	r0
    3d56:	1f 90       	pop	r1
    3d58:	18 95       	reti

00003d5a <__vector_37>:
    3d5a:	1f 92       	push	r1
    3d5c:	0f 92       	push	r0
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	0f 92       	push	r0
    3d62:	11 24       	eor	r1, r1
    3d64:	0b b6       	in	r0, 0x3b	; 59
    3d66:	0f 92       	push	r0
    3d68:	2f 93       	push	r18
    3d6a:	8f 93       	push	r24
    3d6c:	9f 93       	push	r25
    3d6e:	af 93       	push	r26
    3d70:	bf 93       	push	r27
    3d72:	ef 93       	push	r30
    3d74:	ff 93       	push	r31
    3d76:	e0 91 7f 18 	lds	r30, 0x187F	; 0x80187f <_ser_handle+0x2>
    3d7a:	f0 91 80 18 	lds	r31, 0x1880	; 0x801880 <_ser_handle+0x3>
    3d7e:	30 97       	sbiw	r30, 0x00	; 0
    3d80:	b9 f0       	breq	.+46     	; 0x3db0 <__vector_37+0x56>
    3d82:	02 80       	ldd	r0, Z+2	; 0x02
    3d84:	f3 81       	ldd	r31, Z+3	; 0x03
    3d86:	e0 2d       	mov	r30, r0
    3d88:	93 81       	ldd	r25, Z+3	; 0x03
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	98 17       	cp	r25, r24
    3d8e:	b1 f0       	breq	.+44     	; 0x3dbc <__vector_37+0x62>
    3d90:	92 81       	ldd	r25, Z+2	; 0x02
    3d92:	85 81       	ldd	r24, Z+5	; 0x05
    3d94:	28 2f       	mov	r18, r24
    3d96:	26 95       	lsr	r18
    3d98:	29 23       	and	r18, r25
    3d9a:	a0 81       	ld	r26, Z
    3d9c:	b1 81       	ldd	r27, Z+1	; 0x01
    3d9e:	a2 0f       	add	r26, r18
    3da0:	b1 1d       	adc	r27, r1
    3da2:	2c 91       	ld	r18, X
    3da4:	9f 5f       	subi	r25, 0xFF	; 255
    3da6:	89 23       	and	r24, r25
    3da8:	82 83       	std	Z+2, r24	; 0x02
    3daa:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3dae:	0b c0       	rjmp	.+22     	; 0x3dc6 <__vector_37+0x6c>
    3db0:	e9 ec       	ldi	r30, 0xC9	; 201
    3db2:	f0 e0       	ldi	r31, 0x00	; 0
    3db4:	80 81       	ld	r24, Z
    3db6:	8f 7d       	andi	r24, 0xDF	; 223
    3db8:	80 83       	st	Z, r24
    3dba:	05 c0       	rjmp	.+10     	; 0x3dc6 <__vector_37+0x6c>
    3dbc:	e9 ec       	ldi	r30, 0xC9	; 201
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	80 81       	ld	r24, Z
    3dc2:	8f 7d       	andi	r24, 0xDF	; 223
    3dc4:	80 83       	st	Z, r24
    3dc6:	ff 91       	pop	r31
    3dc8:	ef 91       	pop	r30
    3dca:	bf 91       	pop	r27
    3dcc:	af 91       	pop	r26
    3dce:	9f 91       	pop	r25
    3dd0:	8f 91       	pop	r24
    3dd2:	2f 91       	pop	r18
    3dd4:	0f 90       	pop	r0
    3dd6:	0b be       	out	0x3b, r0	; 59
    3dd8:	0f 90       	pop	r0
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	0f 90       	pop	r0
    3dde:	1f 90       	pop	r1
    3de0:	18 95       	reti

00003de2 <__vector_51>:
    3de2:	1f 92       	push	r1
    3de4:	0f 92       	push	r0
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	0f 92       	push	r0
    3dea:	11 24       	eor	r1, r1
    3dec:	0b b6       	in	r0, 0x3b	; 59
    3dee:	0f 92       	push	r0
    3df0:	2f 93       	push	r18
    3df2:	3f 93       	push	r19
    3df4:	4f 93       	push	r20
    3df6:	5f 93       	push	r21
    3df8:	6f 93       	push	r22
    3dfa:	7f 93       	push	r23
    3dfc:	8f 93       	push	r24
    3dfe:	9f 93       	push	r25
    3e00:	af 93       	push	r26
    3e02:	bf 93       	push	r27
    3e04:	cf 93       	push	r28
    3e06:	df 93       	push	r29
    3e08:	ef 93       	push	r30
    3e0a:	ff 93       	push	r31
    3e0c:	a0 91 81 18 	lds	r26, 0x1881	; 0x801881 <_ser_handle+0x4>
    3e10:	b0 91 82 18 	lds	r27, 0x1882	; 0x801882 <_ser_handle+0x5>
    3e14:	10 97       	sbiw	r26, 0x00	; 0
    3e16:	11 f1       	breq	.+68     	; 0x3e5c <__vector_51+0x7a>
    3e18:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3e1c:	14 96       	adiw	r26, 0x04	; 4
    3e1e:	ed 91       	ld	r30, X+
    3e20:	fc 91       	ld	r31, X
    3e22:	15 97       	sbiw	r26, 0x05	; 5
    3e24:	93 81       	ldd	r25, Z+3	; 0x03
    3e26:	82 81       	ldd	r24, Z+2	; 0x02
    3e28:	25 81       	ldd	r18, Z+5	; 0x05
    3e2a:	98 1b       	sub	r25, r24
    3e2c:	92 23       	and	r25, r18
    3e2e:	84 81       	ldd	r24, Z+4	; 0x04
    3e30:	98 17       	cp	r25, r24
    3e32:	61 f0       	breq	.+24     	; 0x3e4c <__vector_51+0x6a>
    3e34:	83 81       	ldd	r24, Z+3	; 0x03
    3e36:	26 95       	lsr	r18
    3e38:	28 23       	and	r18, r24
    3e3a:	c0 81       	ld	r28, Z
    3e3c:	d1 81       	ldd	r29, Z+1	; 0x01
    3e3e:	c2 0f       	add	r28, r18
    3e40:	d1 1d       	adc	r29, r1
    3e42:	68 83       	st	Y, r22
    3e44:	8f 5f       	subi	r24, 0xFF	; 255
    3e46:	95 81       	ldd	r25, Z+5	; 0x05
    3e48:	89 23       	and	r24, r25
    3e4a:	83 83       	std	Z+3, r24	; 0x03
    3e4c:	16 96       	adiw	r26, 0x06	; 6
    3e4e:	ed 91       	ld	r30, X+
    3e50:	fc 91       	ld	r31, X
    3e52:	17 97       	sbiw	r26, 0x07	; 7
    3e54:	30 97       	sbiw	r30, 0x00	; 0
    3e56:	11 f0       	breq	.+4      	; 0x3e5c <__vector_51+0x7a>
    3e58:	cd 01       	movw	r24, r26
    3e5a:	19 95       	eicall
    3e5c:	ff 91       	pop	r31
    3e5e:	ef 91       	pop	r30
    3e60:	df 91       	pop	r29
    3e62:	cf 91       	pop	r28
    3e64:	bf 91       	pop	r27
    3e66:	af 91       	pop	r26
    3e68:	9f 91       	pop	r25
    3e6a:	8f 91       	pop	r24
    3e6c:	7f 91       	pop	r23
    3e6e:	6f 91       	pop	r22
    3e70:	5f 91       	pop	r21
    3e72:	4f 91       	pop	r20
    3e74:	3f 91       	pop	r19
    3e76:	2f 91       	pop	r18
    3e78:	0f 90       	pop	r0
    3e7a:	0b be       	out	0x3b, r0	; 59
    3e7c:	0f 90       	pop	r0
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	0f 90       	pop	r0
    3e82:	1f 90       	pop	r1
    3e84:	18 95       	reti

00003e86 <__vector_52>:
    3e86:	1f 92       	push	r1
    3e88:	0f 92       	push	r0
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	0f 92       	push	r0
    3e8e:	11 24       	eor	r1, r1
    3e90:	0b b6       	in	r0, 0x3b	; 59
    3e92:	0f 92       	push	r0
    3e94:	2f 93       	push	r18
    3e96:	8f 93       	push	r24
    3e98:	9f 93       	push	r25
    3e9a:	af 93       	push	r26
    3e9c:	bf 93       	push	r27
    3e9e:	ef 93       	push	r30
    3ea0:	ff 93       	push	r31
    3ea2:	e0 91 81 18 	lds	r30, 0x1881	; 0x801881 <_ser_handle+0x4>
    3ea6:	f0 91 82 18 	lds	r31, 0x1882	; 0x801882 <_ser_handle+0x5>
    3eaa:	30 97       	sbiw	r30, 0x00	; 0
    3eac:	b9 f0       	breq	.+46     	; 0x3edc <__vector_52+0x56>
    3eae:	02 80       	ldd	r0, Z+2	; 0x02
    3eb0:	f3 81       	ldd	r31, Z+3	; 0x03
    3eb2:	e0 2d       	mov	r30, r0
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	82 81       	ldd	r24, Z+2	; 0x02
    3eb8:	98 17       	cp	r25, r24
    3eba:	b1 f0       	breq	.+44     	; 0x3ee8 <__vector_52+0x62>
    3ebc:	92 81       	ldd	r25, Z+2	; 0x02
    3ebe:	85 81       	ldd	r24, Z+5	; 0x05
    3ec0:	28 2f       	mov	r18, r24
    3ec2:	26 95       	lsr	r18
    3ec4:	29 23       	and	r18, r25
    3ec6:	a0 81       	ld	r26, Z
    3ec8:	b1 81       	ldd	r27, Z+1	; 0x01
    3eca:	a2 0f       	add	r26, r18
    3ecc:	b1 1d       	adc	r27, r1
    3ece:	2c 91       	ld	r18, X
    3ed0:	9f 5f       	subi	r25, 0xFF	; 255
    3ed2:	89 23       	and	r24, r25
    3ed4:	82 83       	std	Z+2, r24	; 0x02
    3ed6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3eda:	0b c0       	rjmp	.+22     	; 0x3ef2 <__vector_52+0x6c>
    3edc:	e1 ed       	ldi	r30, 0xD1	; 209
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	80 81       	ld	r24, Z
    3ee2:	8f 7d       	andi	r24, 0xDF	; 223
    3ee4:	80 83       	st	Z, r24
    3ee6:	05 c0       	rjmp	.+10     	; 0x3ef2 <__vector_52+0x6c>
    3ee8:	e1 ed       	ldi	r30, 0xD1	; 209
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	80 81       	ld	r24, Z
    3eee:	8f 7d       	andi	r24, 0xDF	; 223
    3ef0:	80 83       	st	Z, r24
    3ef2:	ff 91       	pop	r31
    3ef4:	ef 91       	pop	r30
    3ef6:	bf 91       	pop	r27
    3ef8:	af 91       	pop	r26
    3efa:	9f 91       	pop	r25
    3efc:	8f 91       	pop	r24
    3efe:	2f 91       	pop	r18
    3f00:	0f 90       	pop	r0
    3f02:	0b be       	out	0x3b, r0	; 59
    3f04:	0f 90       	pop	r0
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	0f 90       	pop	r0
    3f0a:	1f 90       	pop	r1
    3f0c:	18 95       	reti

00003f0e <__vector_54>:
    3f0e:	1f 92       	push	r1
    3f10:	0f 92       	push	r0
    3f12:	0f b6       	in	r0, 0x3f	; 63
    3f14:	0f 92       	push	r0
    3f16:	11 24       	eor	r1, r1
    3f18:	0b b6       	in	r0, 0x3b	; 59
    3f1a:	0f 92       	push	r0
    3f1c:	2f 93       	push	r18
    3f1e:	3f 93       	push	r19
    3f20:	4f 93       	push	r20
    3f22:	5f 93       	push	r21
    3f24:	6f 93       	push	r22
    3f26:	7f 93       	push	r23
    3f28:	8f 93       	push	r24
    3f2a:	9f 93       	push	r25
    3f2c:	af 93       	push	r26
    3f2e:	bf 93       	push	r27
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	ef 93       	push	r30
    3f36:	ff 93       	push	r31
    3f38:	a0 91 83 18 	lds	r26, 0x1883	; 0x801883 <_ser_handle+0x6>
    3f3c:	b0 91 84 18 	lds	r27, 0x1884	; 0x801884 <_ser_handle+0x7>
    3f40:	10 97       	sbiw	r26, 0x00	; 0
    3f42:	11 f1       	breq	.+68     	; 0x3f88 <__vector_54+0x7a>
    3f44:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3f48:	14 96       	adiw	r26, 0x04	; 4
    3f4a:	ed 91       	ld	r30, X+
    3f4c:	fc 91       	ld	r31, X
    3f4e:	15 97       	sbiw	r26, 0x05	; 5
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	25 81       	ldd	r18, Z+5	; 0x05
    3f56:	98 1b       	sub	r25, r24
    3f58:	92 23       	and	r25, r18
    3f5a:	84 81       	ldd	r24, Z+4	; 0x04
    3f5c:	98 17       	cp	r25, r24
    3f5e:	61 f0       	breq	.+24     	; 0x3f78 <__vector_54+0x6a>
    3f60:	83 81       	ldd	r24, Z+3	; 0x03
    3f62:	26 95       	lsr	r18
    3f64:	28 23       	and	r18, r24
    3f66:	c0 81       	ld	r28, Z
    3f68:	d1 81       	ldd	r29, Z+1	; 0x01
    3f6a:	c2 0f       	add	r28, r18
    3f6c:	d1 1d       	adc	r29, r1
    3f6e:	68 83       	st	Y, r22
    3f70:	8f 5f       	subi	r24, 0xFF	; 255
    3f72:	95 81       	ldd	r25, Z+5	; 0x05
    3f74:	89 23       	and	r24, r25
    3f76:	83 83       	std	Z+3, r24	; 0x03
    3f78:	16 96       	adiw	r26, 0x06	; 6
    3f7a:	ed 91       	ld	r30, X+
    3f7c:	fc 91       	ld	r31, X
    3f7e:	17 97       	sbiw	r26, 0x07	; 7
    3f80:	30 97       	sbiw	r30, 0x00	; 0
    3f82:	11 f0       	breq	.+4      	; 0x3f88 <__vector_54+0x7a>
    3f84:	cd 01       	movw	r24, r26
    3f86:	19 95       	eicall
    3f88:	ff 91       	pop	r31
    3f8a:	ef 91       	pop	r30
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	bf 91       	pop	r27
    3f92:	af 91       	pop	r26
    3f94:	9f 91       	pop	r25
    3f96:	8f 91       	pop	r24
    3f98:	7f 91       	pop	r23
    3f9a:	6f 91       	pop	r22
    3f9c:	5f 91       	pop	r21
    3f9e:	4f 91       	pop	r20
    3fa0:	3f 91       	pop	r19
    3fa2:	2f 91       	pop	r18
    3fa4:	0f 90       	pop	r0
    3fa6:	0b be       	out	0x3b, r0	; 59
    3fa8:	0f 90       	pop	r0
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	0f 90       	pop	r0
    3fae:	1f 90       	pop	r1
    3fb0:	18 95       	reti

00003fb2 <__vector_55>:
    3fb2:	1f 92       	push	r1
    3fb4:	0f 92       	push	r0
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	0f 92       	push	r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	0b b6       	in	r0, 0x3b	; 59
    3fbe:	0f 92       	push	r0
    3fc0:	2f 93       	push	r18
    3fc2:	8f 93       	push	r24
    3fc4:	9f 93       	push	r25
    3fc6:	af 93       	push	r26
    3fc8:	bf 93       	push	r27
    3fca:	ef 93       	push	r30
    3fcc:	ff 93       	push	r31
    3fce:	e0 91 83 18 	lds	r30, 0x1883	; 0x801883 <_ser_handle+0x6>
    3fd2:	f0 91 84 18 	lds	r31, 0x1884	; 0x801884 <_ser_handle+0x7>
    3fd6:	30 97       	sbiw	r30, 0x00	; 0
    3fd8:	b9 f0       	breq	.+46     	; 0x4008 <__vector_55+0x56>
    3fda:	02 80       	ldd	r0, Z+2	; 0x02
    3fdc:	f3 81       	ldd	r31, Z+3	; 0x03
    3fde:	e0 2d       	mov	r30, r0
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	82 81       	ldd	r24, Z+2	; 0x02
    3fe4:	98 17       	cp	r25, r24
    3fe6:	b1 f0       	breq	.+44     	; 0x4014 <__vector_55+0x62>
    3fe8:	92 81       	ldd	r25, Z+2	; 0x02
    3fea:	85 81       	ldd	r24, Z+5	; 0x05
    3fec:	28 2f       	mov	r18, r24
    3fee:	26 95       	lsr	r18
    3ff0:	29 23       	and	r18, r25
    3ff2:	a0 81       	ld	r26, Z
    3ff4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ff6:	a2 0f       	add	r26, r18
    3ff8:	b1 1d       	adc	r27, r1
    3ffa:	2c 91       	ld	r18, X
    3ffc:	9f 5f       	subi	r25, 0xFF	; 255
    3ffe:	89 23       	and	r24, r25
    4000:	82 83       	std	Z+2, r24	; 0x02
    4002:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4006:	0b c0       	rjmp	.+22     	; 0x401e <__vector_55+0x6c>
    4008:	e1 e3       	ldi	r30, 0x31	; 49
    400a:	f1 e0       	ldi	r31, 0x01	; 1
    400c:	80 81       	ld	r24, Z
    400e:	8f 7d       	andi	r24, 0xDF	; 223
    4010:	80 83       	st	Z, r24
    4012:	05 c0       	rjmp	.+10     	; 0x401e <__vector_55+0x6c>
    4014:	e1 e3       	ldi	r30, 0x31	; 49
    4016:	f1 e0       	ldi	r31, 0x01	; 1
    4018:	80 81       	ld	r24, Z
    401a:	8f 7d       	andi	r24, 0xDF	; 223
    401c:	80 83       	st	Z, r24
    401e:	ff 91       	pop	r31
    4020:	ef 91       	pop	r30
    4022:	bf 91       	pop	r27
    4024:	af 91       	pop	r26
    4026:	9f 91       	pop	r25
    4028:	8f 91       	pop	r24
    402a:	2f 91       	pop	r18
    402c:	0f 90       	pop	r0
    402e:	0b be       	out	0x3b, r0	; 59
    4030:	0f 90       	pop	r0
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	0f 90       	pop	r0
    4036:	1f 90       	pop	r1
    4038:	18 95       	reti

0000403a <usart_getchar>:
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	1f 92       	push	r1
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
    4044:	be 01       	movw	r22, r28
    4046:	6f 5f       	subi	r22, 0xFF	; 255
    4048:	7f 4f       	sbci	r23, 0xFF	; 255
    404a:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <_com_serial_instance>
    404e:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <_com_serial_instance+0x1>
    4052:	7f dd       	rcall	.-1282   	; 0x3b52 <serial_get_byte>
    4054:	81 11       	cpse	r24, r1
    4056:	f6 cf       	rjmp	.-20     	; 0x4044 <usart_getchar+0xa>
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0f 90       	pop	r0
    405e:	df 91       	pop	r29
    4060:	cf 91       	pop	r28
    4062:	08 95       	ret

00004064 <usart_putchar>:
    4064:	68 2f       	mov	r22, r24
    4066:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <_com_serial_instance>
    406a:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <_com_serial_instance+0x1>
    406e:	fc dc       	rcall	.-1544   	; 0x3a68 <serial_send_byte>
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	08 95       	ret

00004076 <stdioCreate>:
    4076:	8f 92       	push	r8
    4078:	9f 92       	push	r9
    407a:	af 92       	push	r10
    407c:	cf 92       	push	r12
    407e:	ef 92       	push	r14
    4080:	0f 93       	push	r16
    4082:	81 2c       	mov	r8, r1
    4084:	91 2c       	mov	r9, r1
    4086:	68 94       	set
    4088:	aa 24       	eor	r10, r10
    408a:	a7 f8       	bld	r10, 7
    408c:	68 94       	set
    408e:	cc 24       	eor	r12, r12
    4090:	c7 f8       	bld	r12, 7
    4092:	e1 2c       	mov	r14, r1
    4094:	00 e0       	ldi	r16, 0x00	; 0
    4096:	23 e0       	ldi	r18, 0x03	; 3
    4098:	40 e0       	ldi	r20, 0x00	; 0
    409a:	51 ee       	ldi	r21, 0xE1	; 225
    409c:	60 e0       	ldi	r22, 0x00	; 0
    409e:	70 e0       	ldi	r23, 0x00	; 0
    40a0:	4d dc       	rcall	.-1894   	; 0x393c <serial_new_instance>
    40a2:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <_com_serial_instance+0x1>
    40a6:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <_com_serial_instance>
    40aa:	e3 ea       	ldi	r30, 0xA3	; 163
    40ac:	f8 e1       	ldi	r31, 0x18	; 24
    40ae:	8e e0       	ldi	r24, 0x0E	; 14
    40b0:	92 e0       	ldi	r25, 0x02	; 2
    40b2:	91 83       	std	Z+1, r25	; 0x01
    40b4:	80 83       	st	Z, r24
    40b6:	93 83       	std	Z+3, r25	; 0x03
    40b8:	82 83       	std	Z+2, r24	; 0x02
    40ba:	0f 91       	pop	r16
    40bc:	ef 90       	pop	r14
    40be:	cf 90       	pop	r12
    40c0:	af 90       	pop	r10
    40c2:	9f 90       	pop	r9
    40c4:	8f 90       	pop	r8
    40c6:	08 95       	ret

000040c8 <fifo_init>:
    40c8:	fc 01       	movw	r30, r24
    40ca:	41 11       	cpse	r20, r1
    40cc:	01 c0       	rjmp	.+2      	; 0x40d0 <fifo_init+0x8>
    40ce:	45 d3       	rcall	.+1674   	; 0x475a <abort>
    40d0:	84 2f       	mov	r24, r20
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	9c 01       	movw	r18, r24
    40d6:	21 50       	subi	r18, 0x01	; 1
    40d8:	31 09       	sbc	r19, r1
    40da:	82 23       	and	r24, r18
    40dc:	93 23       	and	r25, r19
    40de:	89 2b       	or	r24, r25
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <fifo_init+0x1c>
    40e2:	3b d3       	rcall	.+1654   	; 0x475a <abort>
    40e4:	41 38       	cpi	r20, 0x81	; 129
    40e6:	08 f0       	brcs	.+2      	; 0x40ea <fifo_init+0x22>
    40e8:	38 d3       	rcall	.+1648   	; 0x475a <abort>
    40ea:	12 82       	std	Z+2, r1	; 0x02
    40ec:	13 82       	std	Z+3, r1	; 0x03
    40ee:	44 83       	std	Z+4, r20	; 0x04
    40f0:	44 0f       	add	r20, r20
    40f2:	41 50       	subi	r20, 0x01	; 1
    40f4:	45 83       	std	Z+5, r20	; 0x05
    40f6:	71 83       	std	Z+1, r23	; 0x01
    40f8:	60 83       	st	Z, r22
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	08 95       	ret

00004100 <__subsf3>:
    4100:	50 58       	subi	r21, 0x80	; 128

00004102 <__addsf3>:
    4102:	bb 27       	eor	r27, r27
    4104:	aa 27       	eor	r26, r26
    4106:	0e d0       	rcall	.+28     	; 0x4124 <__addsf3x>
    4108:	48 c1       	rjmp	.+656    	; 0x439a <__fp_round>
    410a:	39 d1       	rcall	.+626    	; 0x437e <__fp_pscA>
    410c:	30 f0       	brcs	.+12     	; 0x411a <__addsf3+0x18>
    410e:	3e d1       	rcall	.+636    	; 0x438c <__fp_pscB>
    4110:	20 f0       	brcs	.+8      	; 0x411a <__addsf3+0x18>
    4112:	31 f4       	brne	.+12     	; 0x4120 <__addsf3+0x1e>
    4114:	9f 3f       	cpi	r25, 0xFF	; 255
    4116:	11 f4       	brne	.+4      	; 0x411c <__addsf3+0x1a>
    4118:	1e f4       	brtc	.+6      	; 0x4120 <__addsf3+0x1e>
    411a:	2e c1       	rjmp	.+604    	; 0x4378 <__fp_nan>
    411c:	0e f4       	brtc	.+2      	; 0x4120 <__addsf3+0x1e>
    411e:	e0 95       	com	r30
    4120:	e7 fb       	bst	r30, 7
    4122:	24 c1       	rjmp	.+584    	; 0x436c <__fp_inf>

00004124 <__addsf3x>:
    4124:	e9 2f       	mov	r30, r25
    4126:	4a d1       	rcall	.+660    	; 0x43bc <__fp_split3>
    4128:	80 f3       	brcs	.-32     	; 0x410a <__addsf3+0x8>
    412a:	ba 17       	cp	r27, r26
    412c:	62 07       	cpc	r22, r18
    412e:	73 07       	cpc	r23, r19
    4130:	84 07       	cpc	r24, r20
    4132:	95 07       	cpc	r25, r21
    4134:	18 f0       	brcs	.+6      	; 0x413c <__addsf3x+0x18>
    4136:	71 f4       	brne	.+28     	; 0x4154 <__addsf3x+0x30>
    4138:	9e f5       	brtc	.+102    	; 0x41a0 <__addsf3x+0x7c>
    413a:	62 c1       	rjmp	.+708    	; 0x4400 <__fp_zero>
    413c:	0e f4       	brtc	.+2      	; 0x4140 <__addsf3x+0x1c>
    413e:	e0 95       	com	r30
    4140:	0b 2e       	mov	r0, r27
    4142:	ba 2f       	mov	r27, r26
    4144:	a0 2d       	mov	r26, r0
    4146:	0b 01       	movw	r0, r22
    4148:	b9 01       	movw	r22, r18
    414a:	90 01       	movw	r18, r0
    414c:	0c 01       	movw	r0, r24
    414e:	ca 01       	movw	r24, r20
    4150:	a0 01       	movw	r20, r0
    4152:	11 24       	eor	r1, r1
    4154:	ff 27       	eor	r31, r31
    4156:	59 1b       	sub	r21, r25
    4158:	99 f0       	breq	.+38     	; 0x4180 <__addsf3x+0x5c>
    415a:	59 3f       	cpi	r21, 0xF9	; 249
    415c:	50 f4       	brcc	.+20     	; 0x4172 <__addsf3x+0x4e>
    415e:	50 3e       	cpi	r21, 0xE0	; 224
    4160:	68 f1       	brcs	.+90     	; 0x41bc <__addsf3x+0x98>
    4162:	1a 16       	cp	r1, r26
    4164:	f0 40       	sbci	r31, 0x00	; 0
    4166:	a2 2f       	mov	r26, r18
    4168:	23 2f       	mov	r18, r19
    416a:	34 2f       	mov	r19, r20
    416c:	44 27       	eor	r20, r20
    416e:	58 5f       	subi	r21, 0xF8	; 248
    4170:	f3 cf       	rjmp	.-26     	; 0x4158 <__addsf3x+0x34>
    4172:	46 95       	lsr	r20
    4174:	37 95       	ror	r19
    4176:	27 95       	ror	r18
    4178:	a7 95       	ror	r26
    417a:	f0 40       	sbci	r31, 0x00	; 0
    417c:	53 95       	inc	r21
    417e:	c9 f7       	brne	.-14     	; 0x4172 <__addsf3x+0x4e>
    4180:	7e f4       	brtc	.+30     	; 0x41a0 <__addsf3x+0x7c>
    4182:	1f 16       	cp	r1, r31
    4184:	ba 0b       	sbc	r27, r26
    4186:	62 0b       	sbc	r22, r18
    4188:	73 0b       	sbc	r23, r19
    418a:	84 0b       	sbc	r24, r20
    418c:	ba f0       	brmi	.+46     	; 0x41bc <__addsf3x+0x98>
    418e:	91 50       	subi	r25, 0x01	; 1
    4190:	a1 f0       	breq	.+40     	; 0x41ba <__addsf3x+0x96>
    4192:	ff 0f       	add	r31, r31
    4194:	bb 1f       	adc	r27, r27
    4196:	66 1f       	adc	r22, r22
    4198:	77 1f       	adc	r23, r23
    419a:	88 1f       	adc	r24, r24
    419c:	c2 f7       	brpl	.-16     	; 0x418e <__addsf3x+0x6a>
    419e:	0e c0       	rjmp	.+28     	; 0x41bc <__addsf3x+0x98>
    41a0:	ba 0f       	add	r27, r26
    41a2:	62 1f       	adc	r22, r18
    41a4:	73 1f       	adc	r23, r19
    41a6:	84 1f       	adc	r24, r20
    41a8:	48 f4       	brcc	.+18     	; 0x41bc <__addsf3x+0x98>
    41aa:	87 95       	ror	r24
    41ac:	77 95       	ror	r23
    41ae:	67 95       	ror	r22
    41b0:	b7 95       	ror	r27
    41b2:	f7 95       	ror	r31
    41b4:	9e 3f       	cpi	r25, 0xFE	; 254
    41b6:	08 f0       	brcs	.+2      	; 0x41ba <__addsf3x+0x96>
    41b8:	b3 cf       	rjmp	.-154    	; 0x4120 <__addsf3+0x1e>
    41ba:	93 95       	inc	r25
    41bc:	88 0f       	add	r24, r24
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <__addsf3x+0x9e>
    41c0:	99 27       	eor	r25, r25
    41c2:	ee 0f       	add	r30, r30
    41c4:	97 95       	ror	r25
    41c6:	87 95       	ror	r24
    41c8:	08 95       	ret

000041ca <__divsf3>:
    41ca:	0c d0       	rcall	.+24     	; 0x41e4 <__divsf3x>
    41cc:	e6 c0       	rjmp	.+460    	; 0x439a <__fp_round>
    41ce:	de d0       	rcall	.+444    	; 0x438c <__fp_pscB>
    41d0:	40 f0       	brcs	.+16     	; 0x41e2 <__divsf3+0x18>
    41d2:	d5 d0       	rcall	.+426    	; 0x437e <__fp_pscA>
    41d4:	30 f0       	brcs	.+12     	; 0x41e2 <__divsf3+0x18>
    41d6:	21 f4       	brne	.+8      	; 0x41e0 <__divsf3+0x16>
    41d8:	5f 3f       	cpi	r21, 0xFF	; 255
    41da:	19 f0       	breq	.+6      	; 0x41e2 <__divsf3+0x18>
    41dc:	c7 c0       	rjmp	.+398    	; 0x436c <__fp_inf>
    41de:	51 11       	cpse	r21, r1
    41e0:	10 c1       	rjmp	.+544    	; 0x4402 <__fp_szero>
    41e2:	ca c0       	rjmp	.+404    	; 0x4378 <__fp_nan>

000041e4 <__divsf3x>:
    41e4:	eb d0       	rcall	.+470    	; 0x43bc <__fp_split3>
    41e6:	98 f3       	brcs	.-26     	; 0x41ce <__divsf3+0x4>

000041e8 <__divsf3_pse>:
    41e8:	99 23       	and	r25, r25
    41ea:	c9 f3       	breq	.-14     	; 0x41de <__divsf3+0x14>
    41ec:	55 23       	and	r21, r21
    41ee:	b1 f3       	breq	.-20     	; 0x41dc <__divsf3+0x12>
    41f0:	95 1b       	sub	r25, r21
    41f2:	55 0b       	sbc	r21, r21
    41f4:	bb 27       	eor	r27, r27
    41f6:	aa 27       	eor	r26, r26
    41f8:	62 17       	cp	r22, r18
    41fa:	73 07       	cpc	r23, r19
    41fc:	84 07       	cpc	r24, r20
    41fe:	38 f0       	brcs	.+14     	; 0x420e <__divsf3_pse+0x26>
    4200:	9f 5f       	subi	r25, 0xFF	; 255
    4202:	5f 4f       	sbci	r21, 0xFF	; 255
    4204:	22 0f       	add	r18, r18
    4206:	33 1f       	adc	r19, r19
    4208:	44 1f       	adc	r20, r20
    420a:	aa 1f       	adc	r26, r26
    420c:	a9 f3       	breq	.-22     	; 0x41f8 <__divsf3_pse+0x10>
    420e:	33 d0       	rcall	.+102    	; 0x4276 <__divsf3_pse+0x8e>
    4210:	0e 2e       	mov	r0, r30
    4212:	3a f0       	brmi	.+14     	; 0x4222 <__divsf3_pse+0x3a>
    4214:	e0 e8       	ldi	r30, 0x80	; 128
    4216:	30 d0       	rcall	.+96     	; 0x4278 <__divsf3_pse+0x90>
    4218:	91 50       	subi	r25, 0x01	; 1
    421a:	50 40       	sbci	r21, 0x00	; 0
    421c:	e6 95       	lsr	r30
    421e:	00 1c       	adc	r0, r0
    4220:	ca f7       	brpl	.-14     	; 0x4214 <__divsf3_pse+0x2c>
    4222:	29 d0       	rcall	.+82     	; 0x4276 <__divsf3_pse+0x8e>
    4224:	fe 2f       	mov	r31, r30
    4226:	27 d0       	rcall	.+78     	; 0x4276 <__divsf3_pse+0x8e>
    4228:	66 0f       	add	r22, r22
    422a:	77 1f       	adc	r23, r23
    422c:	88 1f       	adc	r24, r24
    422e:	bb 1f       	adc	r27, r27
    4230:	26 17       	cp	r18, r22
    4232:	37 07       	cpc	r19, r23
    4234:	48 07       	cpc	r20, r24
    4236:	ab 07       	cpc	r26, r27
    4238:	b0 e8       	ldi	r27, 0x80	; 128
    423a:	09 f0       	breq	.+2      	; 0x423e <__divsf3_pse+0x56>
    423c:	bb 0b       	sbc	r27, r27
    423e:	80 2d       	mov	r24, r0
    4240:	bf 01       	movw	r22, r30
    4242:	ff 27       	eor	r31, r31
    4244:	93 58       	subi	r25, 0x83	; 131
    4246:	5f 4f       	sbci	r21, 0xFF	; 255
    4248:	2a f0       	brmi	.+10     	; 0x4254 <__divsf3_pse+0x6c>
    424a:	9e 3f       	cpi	r25, 0xFE	; 254
    424c:	51 05       	cpc	r21, r1
    424e:	68 f0       	brcs	.+26     	; 0x426a <__divsf3_pse+0x82>
    4250:	8d c0       	rjmp	.+282    	; 0x436c <__fp_inf>
    4252:	d7 c0       	rjmp	.+430    	; 0x4402 <__fp_szero>
    4254:	5f 3f       	cpi	r21, 0xFF	; 255
    4256:	ec f3       	brlt	.-6      	; 0x4252 <__divsf3_pse+0x6a>
    4258:	98 3e       	cpi	r25, 0xE8	; 232
    425a:	dc f3       	brlt	.-10     	; 0x4252 <__divsf3_pse+0x6a>
    425c:	86 95       	lsr	r24
    425e:	77 95       	ror	r23
    4260:	67 95       	ror	r22
    4262:	b7 95       	ror	r27
    4264:	f7 95       	ror	r31
    4266:	9f 5f       	subi	r25, 0xFF	; 255
    4268:	c9 f7       	brne	.-14     	; 0x425c <__divsf3_pse+0x74>
    426a:	88 0f       	add	r24, r24
    426c:	91 1d       	adc	r25, r1
    426e:	96 95       	lsr	r25
    4270:	87 95       	ror	r24
    4272:	97 f9       	bld	r25, 7
    4274:	08 95       	ret
    4276:	e1 e0       	ldi	r30, 0x01	; 1
    4278:	66 0f       	add	r22, r22
    427a:	77 1f       	adc	r23, r23
    427c:	88 1f       	adc	r24, r24
    427e:	bb 1f       	adc	r27, r27
    4280:	62 17       	cp	r22, r18
    4282:	73 07       	cpc	r23, r19
    4284:	84 07       	cpc	r24, r20
    4286:	ba 07       	cpc	r27, r26
    4288:	20 f0       	brcs	.+8      	; 0x4292 <__divsf3_pse+0xaa>
    428a:	62 1b       	sub	r22, r18
    428c:	73 0b       	sbc	r23, r19
    428e:	84 0b       	sbc	r24, r20
    4290:	ba 0b       	sbc	r27, r26
    4292:	ee 1f       	adc	r30, r30
    4294:	88 f7       	brcc	.-30     	; 0x4278 <__divsf3_pse+0x90>
    4296:	e0 95       	com	r30
    4298:	08 95       	ret

0000429a <__fixunssfsi>:
    429a:	98 d0       	rcall	.+304    	; 0x43cc <__fp_splitA>
    429c:	88 f0       	brcs	.+34     	; 0x42c0 <__fixunssfsi+0x26>
    429e:	9f 57       	subi	r25, 0x7F	; 127
    42a0:	90 f0       	brcs	.+36     	; 0x42c6 <__fixunssfsi+0x2c>
    42a2:	b9 2f       	mov	r27, r25
    42a4:	99 27       	eor	r25, r25
    42a6:	b7 51       	subi	r27, 0x17	; 23
    42a8:	a0 f0       	brcs	.+40     	; 0x42d2 <__fixunssfsi+0x38>
    42aa:	d1 f0       	breq	.+52     	; 0x42e0 <__fixunssfsi+0x46>
    42ac:	66 0f       	add	r22, r22
    42ae:	77 1f       	adc	r23, r23
    42b0:	88 1f       	adc	r24, r24
    42b2:	99 1f       	adc	r25, r25
    42b4:	1a f0       	brmi	.+6      	; 0x42bc <__fixunssfsi+0x22>
    42b6:	ba 95       	dec	r27
    42b8:	c9 f7       	brne	.-14     	; 0x42ac <__fixunssfsi+0x12>
    42ba:	12 c0       	rjmp	.+36     	; 0x42e0 <__fixunssfsi+0x46>
    42bc:	b1 30       	cpi	r27, 0x01	; 1
    42be:	81 f0       	breq	.+32     	; 0x42e0 <__fixunssfsi+0x46>
    42c0:	9f d0       	rcall	.+318    	; 0x4400 <__fp_zero>
    42c2:	b1 e0       	ldi	r27, 0x01	; 1
    42c4:	08 95       	ret
    42c6:	9c c0       	rjmp	.+312    	; 0x4400 <__fp_zero>
    42c8:	67 2f       	mov	r22, r23
    42ca:	78 2f       	mov	r23, r24
    42cc:	88 27       	eor	r24, r24
    42ce:	b8 5f       	subi	r27, 0xF8	; 248
    42d0:	39 f0       	breq	.+14     	; 0x42e0 <__fixunssfsi+0x46>
    42d2:	b9 3f       	cpi	r27, 0xF9	; 249
    42d4:	cc f3       	brlt	.-14     	; 0x42c8 <__fixunssfsi+0x2e>
    42d6:	86 95       	lsr	r24
    42d8:	77 95       	ror	r23
    42da:	67 95       	ror	r22
    42dc:	b3 95       	inc	r27
    42de:	d9 f7       	brne	.-10     	; 0x42d6 <__fixunssfsi+0x3c>
    42e0:	3e f4       	brtc	.+14     	; 0x42f0 <__fixunssfsi+0x56>
    42e2:	90 95       	com	r25
    42e4:	80 95       	com	r24
    42e6:	70 95       	com	r23
    42e8:	61 95       	neg	r22
    42ea:	7f 4f       	sbci	r23, 0xFF	; 255
    42ec:	8f 4f       	sbci	r24, 0xFF	; 255
    42ee:	9f 4f       	sbci	r25, 0xFF	; 255
    42f0:	08 95       	ret

000042f2 <__floatunsisf>:
    42f2:	e8 94       	clt
    42f4:	09 c0       	rjmp	.+18     	; 0x4308 <__floatsisf+0x12>

000042f6 <__floatsisf>:
    42f6:	97 fb       	bst	r25, 7
    42f8:	3e f4       	brtc	.+14     	; 0x4308 <__floatsisf+0x12>
    42fa:	90 95       	com	r25
    42fc:	80 95       	com	r24
    42fe:	70 95       	com	r23
    4300:	61 95       	neg	r22
    4302:	7f 4f       	sbci	r23, 0xFF	; 255
    4304:	8f 4f       	sbci	r24, 0xFF	; 255
    4306:	9f 4f       	sbci	r25, 0xFF	; 255
    4308:	99 23       	and	r25, r25
    430a:	a9 f0       	breq	.+42     	; 0x4336 <__floatsisf+0x40>
    430c:	f9 2f       	mov	r31, r25
    430e:	96 e9       	ldi	r25, 0x96	; 150
    4310:	bb 27       	eor	r27, r27
    4312:	93 95       	inc	r25
    4314:	f6 95       	lsr	r31
    4316:	87 95       	ror	r24
    4318:	77 95       	ror	r23
    431a:	67 95       	ror	r22
    431c:	b7 95       	ror	r27
    431e:	f1 11       	cpse	r31, r1
    4320:	f8 cf       	rjmp	.-16     	; 0x4312 <__floatsisf+0x1c>
    4322:	fa f4       	brpl	.+62     	; 0x4362 <__floatsisf+0x6c>
    4324:	bb 0f       	add	r27, r27
    4326:	11 f4       	brne	.+4      	; 0x432c <__floatsisf+0x36>
    4328:	60 ff       	sbrs	r22, 0
    432a:	1b c0       	rjmp	.+54     	; 0x4362 <__floatsisf+0x6c>
    432c:	6f 5f       	subi	r22, 0xFF	; 255
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	8f 4f       	sbci	r24, 0xFF	; 255
    4332:	9f 4f       	sbci	r25, 0xFF	; 255
    4334:	16 c0       	rjmp	.+44     	; 0x4362 <__floatsisf+0x6c>
    4336:	88 23       	and	r24, r24
    4338:	11 f0       	breq	.+4      	; 0x433e <__floatsisf+0x48>
    433a:	96 e9       	ldi	r25, 0x96	; 150
    433c:	11 c0       	rjmp	.+34     	; 0x4360 <__floatsisf+0x6a>
    433e:	77 23       	and	r23, r23
    4340:	21 f0       	breq	.+8      	; 0x434a <__floatsisf+0x54>
    4342:	9e e8       	ldi	r25, 0x8E	; 142
    4344:	87 2f       	mov	r24, r23
    4346:	76 2f       	mov	r23, r22
    4348:	05 c0       	rjmp	.+10     	; 0x4354 <__floatsisf+0x5e>
    434a:	66 23       	and	r22, r22
    434c:	71 f0       	breq	.+28     	; 0x436a <__floatsisf+0x74>
    434e:	96 e8       	ldi	r25, 0x86	; 134
    4350:	86 2f       	mov	r24, r22
    4352:	70 e0       	ldi	r23, 0x00	; 0
    4354:	60 e0       	ldi	r22, 0x00	; 0
    4356:	2a f0       	brmi	.+10     	; 0x4362 <__floatsisf+0x6c>
    4358:	9a 95       	dec	r25
    435a:	66 0f       	add	r22, r22
    435c:	77 1f       	adc	r23, r23
    435e:	88 1f       	adc	r24, r24
    4360:	da f7       	brpl	.-10     	; 0x4358 <__floatsisf+0x62>
    4362:	88 0f       	add	r24, r24
    4364:	96 95       	lsr	r25
    4366:	87 95       	ror	r24
    4368:	97 f9       	bld	r25, 7
    436a:	08 95       	ret

0000436c <__fp_inf>:
    436c:	97 f9       	bld	r25, 7
    436e:	9f 67       	ori	r25, 0x7F	; 127
    4370:	80 e8       	ldi	r24, 0x80	; 128
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	60 e0       	ldi	r22, 0x00	; 0
    4376:	08 95       	ret

00004378 <__fp_nan>:
    4378:	9f ef       	ldi	r25, 0xFF	; 255
    437a:	80 ec       	ldi	r24, 0xC0	; 192
    437c:	08 95       	ret

0000437e <__fp_pscA>:
    437e:	00 24       	eor	r0, r0
    4380:	0a 94       	dec	r0
    4382:	16 16       	cp	r1, r22
    4384:	17 06       	cpc	r1, r23
    4386:	18 06       	cpc	r1, r24
    4388:	09 06       	cpc	r0, r25
    438a:	08 95       	ret

0000438c <__fp_pscB>:
    438c:	00 24       	eor	r0, r0
    438e:	0a 94       	dec	r0
    4390:	12 16       	cp	r1, r18
    4392:	13 06       	cpc	r1, r19
    4394:	14 06       	cpc	r1, r20
    4396:	05 06       	cpc	r0, r21
    4398:	08 95       	ret

0000439a <__fp_round>:
    439a:	09 2e       	mov	r0, r25
    439c:	03 94       	inc	r0
    439e:	00 0c       	add	r0, r0
    43a0:	11 f4       	brne	.+4      	; 0x43a6 <__fp_round+0xc>
    43a2:	88 23       	and	r24, r24
    43a4:	52 f0       	brmi	.+20     	; 0x43ba <__fp_round+0x20>
    43a6:	bb 0f       	add	r27, r27
    43a8:	40 f4       	brcc	.+16     	; 0x43ba <__fp_round+0x20>
    43aa:	bf 2b       	or	r27, r31
    43ac:	11 f4       	brne	.+4      	; 0x43b2 <__fp_round+0x18>
    43ae:	60 ff       	sbrs	r22, 0
    43b0:	04 c0       	rjmp	.+8      	; 0x43ba <__fp_round+0x20>
    43b2:	6f 5f       	subi	r22, 0xFF	; 255
    43b4:	7f 4f       	sbci	r23, 0xFF	; 255
    43b6:	8f 4f       	sbci	r24, 0xFF	; 255
    43b8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ba:	08 95       	ret

000043bc <__fp_split3>:
    43bc:	57 fd       	sbrc	r21, 7
    43be:	90 58       	subi	r25, 0x80	; 128
    43c0:	44 0f       	add	r20, r20
    43c2:	55 1f       	adc	r21, r21
    43c4:	59 f0       	breq	.+22     	; 0x43dc <__fp_splitA+0x10>
    43c6:	5f 3f       	cpi	r21, 0xFF	; 255
    43c8:	71 f0       	breq	.+28     	; 0x43e6 <__fp_splitA+0x1a>
    43ca:	47 95       	ror	r20

000043cc <__fp_splitA>:
    43cc:	88 0f       	add	r24, r24
    43ce:	97 fb       	bst	r25, 7
    43d0:	99 1f       	adc	r25, r25
    43d2:	61 f0       	breq	.+24     	; 0x43ec <__fp_splitA+0x20>
    43d4:	9f 3f       	cpi	r25, 0xFF	; 255
    43d6:	79 f0       	breq	.+30     	; 0x43f6 <__fp_splitA+0x2a>
    43d8:	87 95       	ror	r24
    43da:	08 95       	ret
    43dc:	12 16       	cp	r1, r18
    43de:	13 06       	cpc	r1, r19
    43e0:	14 06       	cpc	r1, r20
    43e2:	55 1f       	adc	r21, r21
    43e4:	f2 cf       	rjmp	.-28     	; 0x43ca <__fp_split3+0xe>
    43e6:	46 95       	lsr	r20
    43e8:	f1 df       	rcall	.-30     	; 0x43cc <__fp_splitA>
    43ea:	08 c0       	rjmp	.+16     	; 0x43fc <__fp_splitA+0x30>
    43ec:	16 16       	cp	r1, r22
    43ee:	17 06       	cpc	r1, r23
    43f0:	18 06       	cpc	r1, r24
    43f2:	99 1f       	adc	r25, r25
    43f4:	f1 cf       	rjmp	.-30     	; 0x43d8 <__fp_splitA+0xc>
    43f6:	86 95       	lsr	r24
    43f8:	71 05       	cpc	r23, r1
    43fa:	61 05       	cpc	r22, r1
    43fc:	08 94       	sec
    43fe:	08 95       	ret

00004400 <__fp_zero>:
    4400:	e8 94       	clt

00004402 <__fp_szero>:
    4402:	bb 27       	eor	r27, r27
    4404:	66 27       	eor	r22, r22
    4406:	77 27       	eor	r23, r23
    4408:	cb 01       	movw	r24, r22
    440a:	97 f9       	bld	r25, 7
    440c:	08 95       	ret

0000440e <__mulsf3>:
    440e:	0b d0       	rcall	.+22     	; 0x4426 <__mulsf3x>
    4410:	c4 cf       	rjmp	.-120    	; 0x439a <__fp_round>
    4412:	b5 df       	rcall	.-150    	; 0x437e <__fp_pscA>
    4414:	28 f0       	brcs	.+10     	; 0x4420 <__mulsf3+0x12>
    4416:	ba df       	rcall	.-140    	; 0x438c <__fp_pscB>
    4418:	18 f0       	brcs	.+6      	; 0x4420 <__mulsf3+0x12>
    441a:	95 23       	and	r25, r21
    441c:	09 f0       	breq	.+2      	; 0x4420 <__mulsf3+0x12>
    441e:	a6 cf       	rjmp	.-180    	; 0x436c <__fp_inf>
    4420:	ab cf       	rjmp	.-170    	; 0x4378 <__fp_nan>
    4422:	11 24       	eor	r1, r1
    4424:	ee cf       	rjmp	.-36     	; 0x4402 <__fp_szero>

00004426 <__mulsf3x>:
    4426:	ca df       	rcall	.-108    	; 0x43bc <__fp_split3>
    4428:	a0 f3       	brcs	.-24     	; 0x4412 <__mulsf3+0x4>

0000442a <__mulsf3_pse>:
    442a:	95 9f       	mul	r25, r21
    442c:	d1 f3       	breq	.-12     	; 0x4422 <__mulsf3+0x14>
    442e:	95 0f       	add	r25, r21
    4430:	50 e0       	ldi	r21, 0x00	; 0
    4432:	55 1f       	adc	r21, r21
    4434:	62 9f       	mul	r22, r18
    4436:	f0 01       	movw	r30, r0
    4438:	72 9f       	mul	r23, r18
    443a:	bb 27       	eor	r27, r27
    443c:	f0 0d       	add	r31, r0
    443e:	b1 1d       	adc	r27, r1
    4440:	63 9f       	mul	r22, r19
    4442:	aa 27       	eor	r26, r26
    4444:	f0 0d       	add	r31, r0
    4446:	b1 1d       	adc	r27, r1
    4448:	aa 1f       	adc	r26, r26
    444a:	64 9f       	mul	r22, r20
    444c:	66 27       	eor	r22, r22
    444e:	b0 0d       	add	r27, r0
    4450:	a1 1d       	adc	r26, r1
    4452:	66 1f       	adc	r22, r22
    4454:	82 9f       	mul	r24, r18
    4456:	22 27       	eor	r18, r18
    4458:	b0 0d       	add	r27, r0
    445a:	a1 1d       	adc	r26, r1
    445c:	62 1f       	adc	r22, r18
    445e:	73 9f       	mul	r23, r19
    4460:	b0 0d       	add	r27, r0
    4462:	a1 1d       	adc	r26, r1
    4464:	62 1f       	adc	r22, r18
    4466:	83 9f       	mul	r24, r19
    4468:	a0 0d       	add	r26, r0
    446a:	61 1d       	adc	r22, r1
    446c:	22 1f       	adc	r18, r18
    446e:	74 9f       	mul	r23, r20
    4470:	33 27       	eor	r19, r19
    4472:	a0 0d       	add	r26, r0
    4474:	61 1d       	adc	r22, r1
    4476:	23 1f       	adc	r18, r19
    4478:	84 9f       	mul	r24, r20
    447a:	60 0d       	add	r22, r0
    447c:	21 1d       	adc	r18, r1
    447e:	82 2f       	mov	r24, r18
    4480:	76 2f       	mov	r23, r22
    4482:	6a 2f       	mov	r22, r26
    4484:	11 24       	eor	r1, r1
    4486:	9f 57       	subi	r25, 0x7F	; 127
    4488:	50 40       	sbci	r21, 0x00	; 0
    448a:	8a f0       	brmi	.+34     	; 0x44ae <__mulsf3_pse+0x84>
    448c:	e1 f0       	breq	.+56     	; 0x44c6 <__mulsf3_pse+0x9c>
    448e:	88 23       	and	r24, r24
    4490:	4a f0       	brmi	.+18     	; 0x44a4 <__mulsf3_pse+0x7a>
    4492:	ee 0f       	add	r30, r30
    4494:	ff 1f       	adc	r31, r31
    4496:	bb 1f       	adc	r27, r27
    4498:	66 1f       	adc	r22, r22
    449a:	77 1f       	adc	r23, r23
    449c:	88 1f       	adc	r24, r24
    449e:	91 50       	subi	r25, 0x01	; 1
    44a0:	50 40       	sbci	r21, 0x00	; 0
    44a2:	a9 f7       	brne	.-22     	; 0x448e <__mulsf3_pse+0x64>
    44a4:	9e 3f       	cpi	r25, 0xFE	; 254
    44a6:	51 05       	cpc	r21, r1
    44a8:	70 f0       	brcs	.+28     	; 0x44c6 <__mulsf3_pse+0x9c>
    44aa:	60 cf       	rjmp	.-320    	; 0x436c <__fp_inf>
    44ac:	aa cf       	rjmp	.-172    	; 0x4402 <__fp_szero>
    44ae:	5f 3f       	cpi	r21, 0xFF	; 255
    44b0:	ec f3       	brlt	.-6      	; 0x44ac <__mulsf3_pse+0x82>
    44b2:	98 3e       	cpi	r25, 0xE8	; 232
    44b4:	dc f3       	brlt	.-10     	; 0x44ac <__mulsf3_pse+0x82>
    44b6:	86 95       	lsr	r24
    44b8:	77 95       	ror	r23
    44ba:	67 95       	ror	r22
    44bc:	b7 95       	ror	r27
    44be:	f7 95       	ror	r31
    44c0:	e7 95       	ror	r30
    44c2:	9f 5f       	subi	r25, 0xFF	; 255
    44c4:	c1 f7       	brne	.-16     	; 0x44b6 <__mulsf3_pse+0x8c>
    44c6:	fe 2b       	or	r31, r30
    44c8:	88 0f       	add	r24, r24
    44ca:	91 1d       	adc	r25, r1
    44cc:	96 95       	lsr	r25
    44ce:	87 95       	ror	r24
    44d0:	97 f9       	bld	r25, 7
    44d2:	08 95       	ret

000044d4 <__tablejump2__>:
    44d4:	ee 0f       	add	r30, r30
    44d6:	ff 1f       	adc	r31, r31
    44d8:	88 1f       	adc	r24, r24
    44da:	8b bf       	out	0x3b, r24	; 59
    44dc:	07 90       	elpm	r0, Z+
    44de:	f6 91       	elpm	r31, Z
    44e0:	e0 2d       	mov	r30, r0
    44e2:	19 94       	eijmp

000044e4 <calloc>:
    44e4:	0f 93       	push	r16
    44e6:	1f 93       	push	r17
    44e8:	cf 93       	push	r28
    44ea:	df 93       	push	r29
    44ec:	86 9f       	mul	r24, r22
    44ee:	80 01       	movw	r16, r0
    44f0:	87 9f       	mul	r24, r23
    44f2:	10 0d       	add	r17, r0
    44f4:	96 9f       	mul	r25, r22
    44f6:	10 0d       	add	r17, r0
    44f8:	11 24       	eor	r1, r1
    44fa:	c8 01       	movw	r24, r16
    44fc:	0d d0       	rcall	.+26     	; 0x4518 <malloc>
    44fe:	ec 01       	movw	r28, r24
    4500:	00 97       	sbiw	r24, 0x00	; 0
    4502:	21 f0       	breq	.+8      	; 0x450c <calloc+0x28>
    4504:	a8 01       	movw	r20, r16
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	70 e0       	ldi	r23, 0x00	; 0
    450a:	34 d1       	rcall	.+616    	; 0x4774 <memset>
    450c:	ce 01       	movw	r24, r28
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	08 95       	ret

00004518 <malloc>:
    4518:	0f 93       	push	r16
    451a:	1f 93       	push	r17
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	82 30       	cpi	r24, 0x02	; 2
    4522:	91 05       	cpc	r25, r1
    4524:	10 f4       	brcc	.+4      	; 0x452a <malloc+0x12>
    4526:	82 e0       	ldi	r24, 0x02	; 2
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <__flp>
    452e:	f0 91 a2 18 	lds	r31, 0x18A2	; 0x8018a2 <__flp+0x1>
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	a0 e0       	ldi	r26, 0x00	; 0
    4538:	b0 e0       	ldi	r27, 0x00	; 0
    453a:	30 97       	sbiw	r30, 0x00	; 0
    453c:	19 f1       	breq	.+70     	; 0x4584 <malloc+0x6c>
    453e:	40 81       	ld	r20, Z
    4540:	51 81       	ldd	r21, Z+1	; 0x01
    4542:	02 81       	ldd	r16, Z+2	; 0x02
    4544:	13 81       	ldd	r17, Z+3	; 0x03
    4546:	48 17       	cp	r20, r24
    4548:	59 07       	cpc	r21, r25
    454a:	c8 f0       	brcs	.+50     	; 0x457e <malloc+0x66>
    454c:	84 17       	cp	r24, r20
    454e:	95 07       	cpc	r25, r21
    4550:	69 f4       	brne	.+26     	; 0x456c <malloc+0x54>
    4552:	10 97       	sbiw	r26, 0x00	; 0
    4554:	31 f0       	breq	.+12     	; 0x4562 <malloc+0x4a>
    4556:	12 96       	adiw	r26, 0x02	; 2
    4558:	0c 93       	st	X, r16
    455a:	12 97       	sbiw	r26, 0x02	; 2
    455c:	13 96       	adiw	r26, 0x03	; 3
    455e:	1c 93       	st	X, r17
    4560:	27 c0       	rjmp	.+78     	; 0x45b0 <malloc+0x98>
    4562:	00 93 a1 18 	sts	0x18A1, r16	; 0x8018a1 <__flp>
    4566:	10 93 a2 18 	sts	0x18A2, r17	; 0x8018a2 <__flp+0x1>
    456a:	22 c0       	rjmp	.+68     	; 0x45b0 <malloc+0x98>
    456c:	21 15       	cp	r18, r1
    456e:	31 05       	cpc	r19, r1
    4570:	19 f0       	breq	.+6      	; 0x4578 <malloc+0x60>
    4572:	42 17       	cp	r20, r18
    4574:	53 07       	cpc	r21, r19
    4576:	18 f4       	brcc	.+6      	; 0x457e <malloc+0x66>
    4578:	9a 01       	movw	r18, r20
    457a:	bd 01       	movw	r22, r26
    457c:	ef 01       	movw	r28, r30
    457e:	df 01       	movw	r26, r30
    4580:	f8 01       	movw	r30, r16
    4582:	db cf       	rjmp	.-74     	; 0x453a <malloc+0x22>
    4584:	21 15       	cp	r18, r1
    4586:	31 05       	cpc	r19, r1
    4588:	f9 f0       	breq	.+62     	; 0x45c8 <malloc+0xb0>
    458a:	28 1b       	sub	r18, r24
    458c:	39 0b       	sbc	r19, r25
    458e:	24 30       	cpi	r18, 0x04	; 4
    4590:	31 05       	cpc	r19, r1
    4592:	80 f4       	brcc	.+32     	; 0x45b4 <malloc+0x9c>
    4594:	8a 81       	ldd	r24, Y+2	; 0x02
    4596:	9b 81       	ldd	r25, Y+3	; 0x03
    4598:	61 15       	cp	r22, r1
    459a:	71 05       	cpc	r23, r1
    459c:	21 f0       	breq	.+8      	; 0x45a6 <malloc+0x8e>
    459e:	fb 01       	movw	r30, r22
    45a0:	93 83       	std	Z+3, r25	; 0x03
    45a2:	82 83       	std	Z+2, r24	; 0x02
    45a4:	04 c0       	rjmp	.+8      	; 0x45ae <malloc+0x96>
    45a6:	90 93 a2 18 	sts	0x18A2, r25	; 0x8018a2 <__flp+0x1>
    45aa:	80 93 a1 18 	sts	0x18A1, r24	; 0x8018a1 <__flp>
    45ae:	fe 01       	movw	r30, r28
    45b0:	32 96       	adiw	r30, 0x02	; 2
    45b2:	44 c0       	rjmp	.+136    	; 0x463c <malloc+0x124>
    45b4:	fe 01       	movw	r30, r28
    45b6:	e2 0f       	add	r30, r18
    45b8:	f3 1f       	adc	r31, r19
    45ba:	81 93       	st	Z+, r24
    45bc:	91 93       	st	Z+, r25
    45be:	22 50       	subi	r18, 0x02	; 2
    45c0:	31 09       	sbc	r19, r1
    45c2:	39 83       	std	Y+1, r19	; 0x01
    45c4:	28 83       	st	Y, r18
    45c6:	3a c0       	rjmp	.+116    	; 0x463c <malloc+0x124>
    45c8:	20 91 9f 18 	lds	r18, 0x189F	; 0x80189f <__brkval>
    45cc:	30 91 a0 18 	lds	r19, 0x18A0	; 0x8018a0 <__brkval+0x1>
    45d0:	23 2b       	or	r18, r19
    45d2:	41 f4       	brne	.+16     	; 0x45e4 <malloc+0xcc>
    45d4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    45d8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    45dc:	30 93 a0 18 	sts	0x18A0, r19	; 0x8018a0 <__brkval+0x1>
    45e0:	20 93 9f 18 	sts	0x189F, r18	; 0x80189f <__brkval>
    45e4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    45e8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    45ec:	21 15       	cp	r18, r1
    45ee:	31 05       	cpc	r19, r1
    45f0:	41 f4       	brne	.+16     	; 0x4602 <malloc+0xea>
    45f2:	2d b7       	in	r18, 0x3d	; 61
    45f4:	3e b7       	in	r19, 0x3e	; 62
    45f6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    45fa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    45fe:	24 1b       	sub	r18, r20
    4600:	35 0b       	sbc	r19, r21
    4602:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <__brkval>
    4606:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <__brkval+0x1>
    460a:	e2 17       	cp	r30, r18
    460c:	f3 07       	cpc	r31, r19
    460e:	a0 f4       	brcc	.+40     	; 0x4638 <malloc+0x120>
    4610:	2e 1b       	sub	r18, r30
    4612:	3f 0b       	sbc	r19, r31
    4614:	28 17       	cp	r18, r24
    4616:	39 07       	cpc	r19, r25
    4618:	78 f0       	brcs	.+30     	; 0x4638 <malloc+0x120>
    461a:	ac 01       	movw	r20, r24
    461c:	4e 5f       	subi	r20, 0xFE	; 254
    461e:	5f 4f       	sbci	r21, 0xFF	; 255
    4620:	24 17       	cp	r18, r20
    4622:	35 07       	cpc	r19, r21
    4624:	48 f0       	brcs	.+18     	; 0x4638 <malloc+0x120>
    4626:	4e 0f       	add	r20, r30
    4628:	5f 1f       	adc	r21, r31
    462a:	50 93 a0 18 	sts	0x18A0, r21	; 0x8018a0 <__brkval+0x1>
    462e:	40 93 9f 18 	sts	0x189F, r20	; 0x80189f <__brkval>
    4632:	81 93       	st	Z+, r24
    4634:	91 93       	st	Z+, r25
    4636:	02 c0       	rjmp	.+4      	; 0x463c <malloc+0x124>
    4638:	e0 e0       	ldi	r30, 0x00	; 0
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	cf 01       	movw	r24, r30
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	1f 91       	pop	r17
    4644:	0f 91       	pop	r16
    4646:	08 95       	ret

00004648 <free>:
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
    464c:	00 97       	sbiw	r24, 0x00	; 0
    464e:	09 f4       	brne	.+2      	; 0x4652 <free+0xa>
    4650:	81 c0       	rjmp	.+258    	; 0x4754 <free+0x10c>
    4652:	fc 01       	movw	r30, r24
    4654:	32 97       	sbiw	r30, 0x02	; 2
    4656:	13 82       	std	Z+3, r1	; 0x03
    4658:	12 82       	std	Z+2, r1	; 0x02
    465a:	a0 91 a1 18 	lds	r26, 0x18A1	; 0x8018a1 <__flp>
    465e:	b0 91 a2 18 	lds	r27, 0x18A2	; 0x8018a2 <__flp+0x1>
    4662:	10 97       	sbiw	r26, 0x00	; 0
    4664:	81 f4       	brne	.+32     	; 0x4686 <free+0x3e>
    4666:	20 81       	ld	r18, Z
    4668:	31 81       	ldd	r19, Z+1	; 0x01
    466a:	82 0f       	add	r24, r18
    466c:	93 1f       	adc	r25, r19
    466e:	20 91 9f 18 	lds	r18, 0x189F	; 0x80189f <__brkval>
    4672:	30 91 a0 18 	lds	r19, 0x18A0	; 0x8018a0 <__brkval+0x1>
    4676:	28 17       	cp	r18, r24
    4678:	39 07       	cpc	r19, r25
    467a:	51 f5       	brne	.+84     	; 0x46d0 <free+0x88>
    467c:	f0 93 a0 18 	sts	0x18A0, r31	; 0x8018a0 <__brkval+0x1>
    4680:	e0 93 9f 18 	sts	0x189F, r30	; 0x80189f <__brkval>
    4684:	67 c0       	rjmp	.+206    	; 0x4754 <free+0x10c>
    4686:	ed 01       	movw	r28, r26
    4688:	20 e0       	ldi	r18, 0x00	; 0
    468a:	30 e0       	ldi	r19, 0x00	; 0
    468c:	ce 17       	cp	r28, r30
    468e:	df 07       	cpc	r29, r31
    4690:	40 f4       	brcc	.+16     	; 0x46a2 <free+0x5a>
    4692:	4a 81       	ldd	r20, Y+2	; 0x02
    4694:	5b 81       	ldd	r21, Y+3	; 0x03
    4696:	9e 01       	movw	r18, r28
    4698:	41 15       	cp	r20, r1
    469a:	51 05       	cpc	r21, r1
    469c:	f1 f0       	breq	.+60     	; 0x46da <free+0x92>
    469e:	ea 01       	movw	r28, r20
    46a0:	f5 cf       	rjmp	.-22     	; 0x468c <free+0x44>
    46a2:	d3 83       	std	Z+3, r29	; 0x03
    46a4:	c2 83       	std	Z+2, r28	; 0x02
    46a6:	40 81       	ld	r20, Z
    46a8:	51 81       	ldd	r21, Z+1	; 0x01
    46aa:	84 0f       	add	r24, r20
    46ac:	95 1f       	adc	r25, r21
    46ae:	c8 17       	cp	r28, r24
    46b0:	d9 07       	cpc	r29, r25
    46b2:	59 f4       	brne	.+22     	; 0x46ca <free+0x82>
    46b4:	88 81       	ld	r24, Y
    46b6:	99 81       	ldd	r25, Y+1	; 0x01
    46b8:	84 0f       	add	r24, r20
    46ba:	95 1f       	adc	r25, r21
    46bc:	02 96       	adiw	r24, 0x02	; 2
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	80 83       	st	Z, r24
    46c2:	8a 81       	ldd	r24, Y+2	; 0x02
    46c4:	9b 81       	ldd	r25, Y+3	; 0x03
    46c6:	93 83       	std	Z+3, r25	; 0x03
    46c8:	82 83       	std	Z+2, r24	; 0x02
    46ca:	21 15       	cp	r18, r1
    46cc:	31 05       	cpc	r19, r1
    46ce:	29 f4       	brne	.+10     	; 0x46da <free+0x92>
    46d0:	f0 93 a2 18 	sts	0x18A2, r31	; 0x8018a2 <__flp+0x1>
    46d4:	e0 93 a1 18 	sts	0x18A1, r30	; 0x8018a1 <__flp>
    46d8:	3d c0       	rjmp	.+122    	; 0x4754 <free+0x10c>
    46da:	e9 01       	movw	r28, r18
    46dc:	fb 83       	std	Y+3, r31	; 0x03
    46de:	ea 83       	std	Y+2, r30	; 0x02
    46e0:	49 91       	ld	r20, Y+
    46e2:	59 91       	ld	r21, Y+
    46e4:	c4 0f       	add	r28, r20
    46e6:	d5 1f       	adc	r29, r21
    46e8:	ec 17       	cp	r30, r28
    46ea:	fd 07       	cpc	r31, r29
    46ec:	61 f4       	brne	.+24     	; 0x4706 <free+0xbe>
    46ee:	80 81       	ld	r24, Z
    46f0:	91 81       	ldd	r25, Z+1	; 0x01
    46f2:	84 0f       	add	r24, r20
    46f4:	95 1f       	adc	r25, r21
    46f6:	02 96       	adiw	r24, 0x02	; 2
    46f8:	e9 01       	movw	r28, r18
    46fa:	99 83       	std	Y+1, r25	; 0x01
    46fc:	88 83       	st	Y, r24
    46fe:	82 81       	ldd	r24, Z+2	; 0x02
    4700:	93 81       	ldd	r25, Z+3	; 0x03
    4702:	9b 83       	std	Y+3, r25	; 0x03
    4704:	8a 83       	std	Y+2, r24	; 0x02
    4706:	e0 e0       	ldi	r30, 0x00	; 0
    4708:	f0 e0       	ldi	r31, 0x00	; 0
    470a:	12 96       	adiw	r26, 0x02	; 2
    470c:	8d 91       	ld	r24, X+
    470e:	9c 91       	ld	r25, X
    4710:	13 97       	sbiw	r26, 0x03	; 3
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	19 f0       	breq	.+6      	; 0x471c <free+0xd4>
    4716:	fd 01       	movw	r30, r26
    4718:	dc 01       	movw	r26, r24
    471a:	f7 cf       	rjmp	.-18     	; 0x470a <free+0xc2>
    471c:	8d 91       	ld	r24, X+
    471e:	9c 91       	ld	r25, X
    4720:	11 97       	sbiw	r26, 0x01	; 1
    4722:	9d 01       	movw	r18, r26
    4724:	2e 5f       	subi	r18, 0xFE	; 254
    4726:	3f 4f       	sbci	r19, 0xFF	; 255
    4728:	82 0f       	add	r24, r18
    472a:	93 1f       	adc	r25, r19
    472c:	20 91 9f 18 	lds	r18, 0x189F	; 0x80189f <__brkval>
    4730:	30 91 a0 18 	lds	r19, 0x18A0	; 0x8018a0 <__brkval+0x1>
    4734:	28 17       	cp	r18, r24
    4736:	39 07       	cpc	r19, r25
    4738:	69 f4       	brne	.+26     	; 0x4754 <free+0x10c>
    473a:	30 97       	sbiw	r30, 0x00	; 0
    473c:	29 f4       	brne	.+10     	; 0x4748 <free+0x100>
    473e:	10 92 a2 18 	sts	0x18A2, r1	; 0x8018a2 <__flp+0x1>
    4742:	10 92 a1 18 	sts	0x18A1, r1	; 0x8018a1 <__flp>
    4746:	02 c0       	rjmp	.+4      	; 0x474c <free+0x104>
    4748:	13 82       	std	Z+3, r1	; 0x03
    474a:	12 82       	std	Z+2, r1	; 0x02
    474c:	b0 93 a0 18 	sts	0x18A0, r27	; 0x8018a0 <__brkval+0x1>
    4750:	a0 93 9f 18 	sts	0x189F, r26	; 0x80189f <__brkval>
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	08 95       	ret

0000475a <abort>:
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	f8 94       	cli
    4760:	7d c3       	rjmp	.+1786   	; 0x4e5c <_exit>

00004762 <memcpy>:
    4762:	fb 01       	movw	r30, r22
    4764:	dc 01       	movw	r26, r24
    4766:	02 c0       	rjmp	.+4      	; 0x476c <memcpy+0xa>
    4768:	01 90       	ld	r0, Z+
    476a:	0d 92       	st	X+, r0
    476c:	41 50       	subi	r20, 0x01	; 1
    476e:	50 40       	sbci	r21, 0x00	; 0
    4770:	d8 f7       	brcc	.-10     	; 0x4768 <memcpy+0x6>
    4772:	08 95       	ret

00004774 <memset>:
    4774:	dc 01       	movw	r26, r24
    4776:	01 c0       	rjmp	.+2      	; 0x477a <memset+0x6>
    4778:	6d 93       	st	X+, r22
    477a:	41 50       	subi	r20, 0x01	; 1
    477c:	50 40       	sbci	r21, 0x00	; 0
    477e:	e0 f7       	brcc	.-8      	; 0x4778 <memset+0x4>
    4780:	08 95       	ret

00004782 <strcasestr>:
    4782:	fb 01       	movw	r30, r22
    4784:	51 91       	ld	r21, Z+
    4786:	55 23       	and	r21, r21
    4788:	b1 f0       	breq	.+44     	; 0x47b6 <strcasestr+0x34>
    478a:	bf 01       	movw	r22, r30
    478c:	dc 01       	movw	r26, r24
    478e:	05 2e       	mov	r0, r21
    4790:	4d 91       	ld	r20, X+
    4792:	44 23       	and	r20, r20
    4794:	69 f0       	breq	.+26     	; 0x47b0 <strcasestr+0x2e>
    4796:	10 d0       	rcall	.+32     	; 0x47b8 <strcasestr+0x36>
    4798:	d9 f7       	brne	.-10     	; 0x4790 <strcasestr+0xe>
    479a:	cd 01       	movw	r24, r26
    479c:	01 90       	ld	r0, Z+
    479e:	00 20       	and	r0, r0
    47a0:	49 f0       	breq	.+18     	; 0x47b4 <strcasestr+0x32>
    47a2:	4d 91       	ld	r20, X+
    47a4:	41 11       	cpse	r20, r1
    47a6:	08 d0       	rcall	.+16     	; 0x47b8 <strcasestr+0x36>
    47a8:	c9 f3       	breq	.-14     	; 0x479c <strcasestr+0x1a>
    47aa:	fb 01       	movw	r30, r22
    47ac:	41 11       	cpse	r20, r1
    47ae:	ee cf       	rjmp	.-36     	; 0x478c <strcasestr+0xa>
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	01 97       	sbiw	r24, 0x01	; 1
    47b6:	08 95       	ret
    47b8:	40 25       	eor	r20, r0
    47ba:	39 f0       	breq	.+14     	; 0x47ca <strcasestr+0x48>
    47bc:	40 32       	cpi	r20, 0x20	; 32
    47be:	29 f4       	brne	.+10     	; 0x47ca <strcasestr+0x48>
    47c0:	40 29       	or	r20, r0
    47c2:	4b 57       	subi	r20, 0x7B	; 123
    47c4:	46 5e       	subi	r20, 0xE6	; 230
    47c6:	08 f0       	brcs	.+2      	; 0x47ca <strcasestr+0x48>
    47c8:	18 94       	sez
    47ca:	08 95       	ret

000047cc <strcat>:
    47cc:	fb 01       	movw	r30, r22
    47ce:	dc 01       	movw	r26, r24
    47d0:	0d 90       	ld	r0, X+
    47d2:	00 20       	and	r0, r0
    47d4:	e9 f7       	brne	.-6      	; 0x47d0 <strcat+0x4>
    47d6:	11 97       	sbiw	r26, 0x01	; 1
    47d8:	01 90       	ld	r0, Z+
    47da:	0d 92       	st	X+, r0
    47dc:	00 20       	and	r0, r0
    47de:	e1 f7       	brne	.-8      	; 0x47d8 <strcat+0xc>
    47e0:	08 95       	ret

000047e2 <strcpy>:
    47e2:	fb 01       	movw	r30, r22
    47e4:	dc 01       	movw	r26, r24
    47e6:	01 90       	ld	r0, Z+
    47e8:	0d 92       	st	X+, r0
    47ea:	00 20       	and	r0, r0
    47ec:	e1 f7       	brne	.-8      	; 0x47e6 <strcpy+0x4>
    47ee:	08 95       	ret

000047f0 <strncasecmp>:
    47f0:	fb 01       	movw	r30, r22
    47f2:	dc 01       	movw	r26, r24
    47f4:	41 50       	subi	r20, 0x01	; 1
    47f6:	50 40       	sbci	r21, 0x00	; 0
    47f8:	88 f0       	brcs	.+34     	; 0x481c <strncasecmp+0x2c>
    47fa:	8d 91       	ld	r24, X+
    47fc:	81 34       	cpi	r24, 0x41	; 65
    47fe:	1c f0       	brlt	.+6      	; 0x4806 <strncasecmp+0x16>
    4800:	8b 35       	cpi	r24, 0x5B	; 91
    4802:	0c f4       	brge	.+2      	; 0x4806 <strncasecmp+0x16>
    4804:	80 5e       	subi	r24, 0xE0	; 224
    4806:	61 91       	ld	r22, Z+
    4808:	61 34       	cpi	r22, 0x41	; 65
    480a:	1c f0       	brlt	.+6      	; 0x4812 <strncasecmp+0x22>
    480c:	6b 35       	cpi	r22, 0x5B	; 91
    480e:	0c f4       	brge	.+2      	; 0x4812 <strncasecmp+0x22>
    4810:	60 5e       	subi	r22, 0xE0	; 224
    4812:	86 1b       	sub	r24, r22
    4814:	61 11       	cpse	r22, r1
    4816:	71 f3       	breq	.-36     	; 0x47f4 <strncasecmp+0x4>
    4818:	99 0b       	sbc	r25, r25
    481a:	08 95       	ret
    481c:	88 1b       	sub	r24, r24
    481e:	fc cf       	rjmp	.-8      	; 0x4818 <strncasecmp+0x28>

00004820 <printf>:
    4820:	cf 93       	push	r28
    4822:	df 93       	push	r29
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
    4828:	ae 01       	movw	r20, r28
    482a:	4a 5f       	subi	r20, 0xFA	; 250
    482c:	5f 4f       	sbci	r21, 0xFF	; 255
    482e:	fa 01       	movw	r30, r20
    4830:	61 91       	ld	r22, Z+
    4832:	71 91       	ld	r23, Z+
    4834:	af 01       	movw	r20, r30
    4836:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <__iob+0x2>
    483a:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <__iob+0x3>
    483e:	61 d0       	rcall	.+194    	; 0x4902 <vfprintf>
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	08 95       	ret

00004846 <puts>:
    4846:	0f 93       	push	r16
    4848:	1f 93       	push	r17
    484a:	cf 93       	push	r28
    484c:	df 93       	push	r29
    484e:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <__iob+0x2>
    4852:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <__iob+0x3>
    4856:	23 81       	ldd	r18, Z+3	; 0x03
    4858:	21 ff       	sbrs	r18, 1
    485a:	1b c0       	rjmp	.+54     	; 0x4892 <puts+0x4c>
    485c:	8c 01       	movw	r16, r24
    485e:	d0 e0       	ldi	r29, 0x00	; 0
    4860:	c0 e0       	ldi	r28, 0x00	; 0
    4862:	f8 01       	movw	r30, r16
    4864:	81 91       	ld	r24, Z+
    4866:	8f 01       	movw	r16, r30
    4868:	60 91 a5 18 	lds	r22, 0x18A5	; 0x8018a5 <__iob+0x2>
    486c:	70 91 a6 18 	lds	r23, 0x18A6	; 0x8018a6 <__iob+0x3>
    4870:	db 01       	movw	r26, r22
    4872:	18 96       	adiw	r26, 0x08	; 8
    4874:	ed 91       	ld	r30, X+
    4876:	fc 91       	ld	r31, X
    4878:	19 97       	sbiw	r26, 0x09	; 9
    487a:	88 23       	and	r24, r24
    487c:	31 f0       	breq	.+12     	; 0x488a <puts+0x44>
    487e:	19 95       	eicall
    4880:	89 2b       	or	r24, r25
    4882:	79 f3       	breq	.-34     	; 0x4862 <puts+0x1c>
    4884:	df ef       	ldi	r29, 0xFF	; 255
    4886:	cf ef       	ldi	r28, 0xFF	; 255
    4888:	ec cf       	rjmp	.-40     	; 0x4862 <puts+0x1c>
    488a:	8a e0       	ldi	r24, 0x0A	; 10
    488c:	19 95       	eicall
    488e:	89 2b       	or	r24, r25
    4890:	19 f0       	breq	.+6      	; 0x4898 <puts+0x52>
    4892:	8f ef       	ldi	r24, 0xFF	; 255
    4894:	9f ef       	ldi	r25, 0xFF	; 255
    4896:	02 c0       	rjmp	.+4      	; 0x489c <puts+0x56>
    4898:	8d 2f       	mov	r24, r29
    489a:	9c 2f       	mov	r25, r28
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	1f 91       	pop	r17
    48a2:	0f 91       	pop	r16
    48a4:	08 95       	ret

000048a6 <sprintf>:
    48a6:	0f 93       	push	r16
    48a8:	1f 93       	push	r17
    48aa:	cf 93       	push	r28
    48ac:	df 93       	push	r29
    48ae:	cd b7       	in	r28, 0x3d	; 61
    48b0:	de b7       	in	r29, 0x3e	; 62
    48b2:	2e 97       	sbiw	r28, 0x0e	; 14
    48b4:	0f b6       	in	r0, 0x3f	; 63
    48b6:	f8 94       	cli
    48b8:	de bf       	out	0x3e, r29	; 62
    48ba:	0f be       	out	0x3f, r0	; 63
    48bc:	cd bf       	out	0x3d, r28	; 61
    48be:	0e 89       	ldd	r16, Y+22	; 0x16
    48c0:	1f 89       	ldd	r17, Y+23	; 0x17
    48c2:	86 e0       	ldi	r24, 0x06	; 6
    48c4:	8c 83       	std	Y+4, r24	; 0x04
    48c6:	1a 83       	std	Y+2, r17	; 0x02
    48c8:	09 83       	std	Y+1, r16	; 0x01
    48ca:	8f ef       	ldi	r24, 0xFF	; 255
    48cc:	9f e7       	ldi	r25, 0x7F	; 127
    48ce:	9e 83       	std	Y+6, r25	; 0x06
    48d0:	8d 83       	std	Y+5, r24	; 0x05
    48d2:	ae 01       	movw	r20, r28
    48d4:	46 5e       	subi	r20, 0xE6	; 230
    48d6:	5f 4f       	sbci	r21, 0xFF	; 255
    48d8:	68 8d       	ldd	r22, Y+24	; 0x18
    48da:	79 8d       	ldd	r23, Y+25	; 0x19
    48dc:	ce 01       	movw	r24, r28
    48de:	01 96       	adiw	r24, 0x01	; 1
    48e0:	10 d0       	rcall	.+32     	; 0x4902 <vfprintf>
    48e2:	ef 81       	ldd	r30, Y+7	; 0x07
    48e4:	f8 85       	ldd	r31, Y+8	; 0x08
    48e6:	e0 0f       	add	r30, r16
    48e8:	f1 1f       	adc	r31, r17
    48ea:	10 82       	st	Z, r1
    48ec:	2e 96       	adiw	r28, 0x0e	; 14
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	08 95       	ret

00004902 <vfprintf>:
    4902:	2f 92       	push	r2
    4904:	3f 92       	push	r3
    4906:	4f 92       	push	r4
    4908:	5f 92       	push	r5
    490a:	6f 92       	push	r6
    490c:	7f 92       	push	r7
    490e:	8f 92       	push	r8
    4910:	9f 92       	push	r9
    4912:	af 92       	push	r10
    4914:	bf 92       	push	r11
    4916:	cf 92       	push	r12
    4918:	df 92       	push	r13
    491a:	ef 92       	push	r14
    491c:	ff 92       	push	r15
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	2b 97       	sbiw	r28, 0x0b	; 11
    492c:	0f b6       	in	r0, 0x3f	; 63
    492e:	f8 94       	cli
    4930:	de bf       	out	0x3e, r29	; 62
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	cd bf       	out	0x3d, r28	; 61
    4936:	6c 01       	movw	r12, r24
    4938:	7b 01       	movw	r14, r22
    493a:	8a 01       	movw	r16, r20
    493c:	fc 01       	movw	r30, r24
    493e:	17 82       	std	Z+7, r1	; 0x07
    4940:	16 82       	std	Z+6, r1	; 0x06
    4942:	83 81       	ldd	r24, Z+3	; 0x03
    4944:	81 ff       	sbrs	r24, 1
    4946:	bf c1       	rjmp	.+894    	; 0x4cc6 <vfprintf+0x3c4>
    4948:	ce 01       	movw	r24, r28
    494a:	01 96       	adiw	r24, 0x01	; 1
    494c:	3c 01       	movw	r6, r24
    494e:	f6 01       	movw	r30, r12
    4950:	93 81       	ldd	r25, Z+3	; 0x03
    4952:	f7 01       	movw	r30, r14
    4954:	93 fd       	sbrc	r25, 3
    4956:	85 91       	lpm	r24, Z+
    4958:	93 ff       	sbrs	r25, 3
    495a:	81 91       	ld	r24, Z+
    495c:	7f 01       	movw	r14, r30
    495e:	88 23       	and	r24, r24
    4960:	09 f4       	brne	.+2      	; 0x4964 <vfprintf+0x62>
    4962:	ad c1       	rjmp	.+858    	; 0x4cbe <vfprintf+0x3bc>
    4964:	85 32       	cpi	r24, 0x25	; 37
    4966:	39 f4       	brne	.+14     	; 0x4976 <vfprintf+0x74>
    4968:	93 fd       	sbrc	r25, 3
    496a:	85 91       	lpm	r24, Z+
    496c:	93 ff       	sbrs	r25, 3
    496e:	81 91       	ld	r24, Z+
    4970:	7f 01       	movw	r14, r30
    4972:	85 32       	cpi	r24, 0x25	; 37
    4974:	21 f4       	brne	.+8      	; 0x497e <vfprintf+0x7c>
    4976:	b6 01       	movw	r22, r12
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	d6 d1       	rcall	.+940    	; 0x4d28 <fputc>
    497c:	e8 cf       	rjmp	.-48     	; 0x494e <vfprintf+0x4c>
    497e:	91 2c       	mov	r9, r1
    4980:	21 2c       	mov	r2, r1
    4982:	31 2c       	mov	r3, r1
    4984:	ff e1       	ldi	r31, 0x1F	; 31
    4986:	f3 15       	cp	r31, r3
    4988:	d8 f0       	brcs	.+54     	; 0x49c0 <vfprintf+0xbe>
    498a:	8b 32       	cpi	r24, 0x2B	; 43
    498c:	79 f0       	breq	.+30     	; 0x49ac <vfprintf+0xaa>
    498e:	38 f4       	brcc	.+14     	; 0x499e <vfprintf+0x9c>
    4990:	80 32       	cpi	r24, 0x20	; 32
    4992:	79 f0       	breq	.+30     	; 0x49b2 <vfprintf+0xb0>
    4994:	83 32       	cpi	r24, 0x23	; 35
    4996:	a1 f4       	brne	.+40     	; 0x49c0 <vfprintf+0xbe>
    4998:	23 2d       	mov	r18, r3
    499a:	20 61       	ori	r18, 0x10	; 16
    499c:	1d c0       	rjmp	.+58     	; 0x49d8 <vfprintf+0xd6>
    499e:	8d 32       	cpi	r24, 0x2D	; 45
    49a0:	61 f0       	breq	.+24     	; 0x49ba <vfprintf+0xb8>
    49a2:	80 33       	cpi	r24, 0x30	; 48
    49a4:	69 f4       	brne	.+26     	; 0x49c0 <vfprintf+0xbe>
    49a6:	23 2d       	mov	r18, r3
    49a8:	21 60       	ori	r18, 0x01	; 1
    49aa:	16 c0       	rjmp	.+44     	; 0x49d8 <vfprintf+0xd6>
    49ac:	83 2d       	mov	r24, r3
    49ae:	82 60       	ori	r24, 0x02	; 2
    49b0:	38 2e       	mov	r3, r24
    49b2:	e3 2d       	mov	r30, r3
    49b4:	e4 60       	ori	r30, 0x04	; 4
    49b6:	3e 2e       	mov	r3, r30
    49b8:	2a c0       	rjmp	.+84     	; 0x4a0e <vfprintf+0x10c>
    49ba:	f3 2d       	mov	r31, r3
    49bc:	f8 60       	ori	r31, 0x08	; 8
    49be:	1d c0       	rjmp	.+58     	; 0x49fa <vfprintf+0xf8>
    49c0:	37 fc       	sbrc	r3, 7
    49c2:	2d c0       	rjmp	.+90     	; 0x4a1e <vfprintf+0x11c>
    49c4:	20 ed       	ldi	r18, 0xD0	; 208
    49c6:	28 0f       	add	r18, r24
    49c8:	2a 30       	cpi	r18, 0x0A	; 10
    49ca:	40 f0       	brcs	.+16     	; 0x49dc <vfprintf+0xda>
    49cc:	8e 32       	cpi	r24, 0x2E	; 46
    49ce:	b9 f4       	brne	.+46     	; 0x49fe <vfprintf+0xfc>
    49d0:	36 fc       	sbrc	r3, 6
    49d2:	75 c1       	rjmp	.+746    	; 0x4cbe <vfprintf+0x3bc>
    49d4:	23 2d       	mov	r18, r3
    49d6:	20 64       	ori	r18, 0x40	; 64
    49d8:	32 2e       	mov	r3, r18
    49da:	19 c0       	rjmp	.+50     	; 0x4a0e <vfprintf+0x10c>
    49dc:	36 fe       	sbrs	r3, 6
    49de:	06 c0       	rjmp	.+12     	; 0x49ec <vfprintf+0xea>
    49e0:	8a e0       	ldi	r24, 0x0A	; 10
    49e2:	98 9e       	mul	r9, r24
    49e4:	20 0d       	add	r18, r0
    49e6:	11 24       	eor	r1, r1
    49e8:	92 2e       	mov	r9, r18
    49ea:	11 c0       	rjmp	.+34     	; 0x4a0e <vfprintf+0x10c>
    49ec:	ea e0       	ldi	r30, 0x0A	; 10
    49ee:	2e 9e       	mul	r2, r30
    49f0:	20 0d       	add	r18, r0
    49f2:	11 24       	eor	r1, r1
    49f4:	22 2e       	mov	r2, r18
    49f6:	f3 2d       	mov	r31, r3
    49f8:	f0 62       	ori	r31, 0x20	; 32
    49fa:	3f 2e       	mov	r3, r31
    49fc:	08 c0       	rjmp	.+16     	; 0x4a0e <vfprintf+0x10c>
    49fe:	8c 36       	cpi	r24, 0x6C	; 108
    4a00:	21 f4       	brne	.+8      	; 0x4a0a <vfprintf+0x108>
    4a02:	83 2d       	mov	r24, r3
    4a04:	80 68       	ori	r24, 0x80	; 128
    4a06:	38 2e       	mov	r3, r24
    4a08:	02 c0       	rjmp	.+4      	; 0x4a0e <vfprintf+0x10c>
    4a0a:	88 36       	cpi	r24, 0x68	; 104
    4a0c:	41 f4       	brne	.+16     	; 0x4a1e <vfprintf+0x11c>
    4a0e:	f7 01       	movw	r30, r14
    4a10:	93 fd       	sbrc	r25, 3
    4a12:	85 91       	lpm	r24, Z+
    4a14:	93 ff       	sbrs	r25, 3
    4a16:	81 91       	ld	r24, Z+
    4a18:	7f 01       	movw	r14, r30
    4a1a:	81 11       	cpse	r24, r1
    4a1c:	b3 cf       	rjmp	.-154    	; 0x4984 <vfprintf+0x82>
    4a1e:	98 2f       	mov	r25, r24
    4a20:	9f 7d       	andi	r25, 0xDF	; 223
    4a22:	95 54       	subi	r25, 0x45	; 69
    4a24:	93 30       	cpi	r25, 0x03	; 3
    4a26:	28 f4       	brcc	.+10     	; 0x4a32 <vfprintf+0x130>
    4a28:	0c 5f       	subi	r16, 0xFC	; 252
    4a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2c:	9f e3       	ldi	r25, 0x3F	; 63
    4a2e:	99 83       	std	Y+1, r25	; 0x01
    4a30:	0d c0       	rjmp	.+26     	; 0x4a4c <vfprintf+0x14a>
    4a32:	83 36       	cpi	r24, 0x63	; 99
    4a34:	31 f0       	breq	.+12     	; 0x4a42 <vfprintf+0x140>
    4a36:	83 37       	cpi	r24, 0x73	; 115
    4a38:	71 f0       	breq	.+28     	; 0x4a56 <vfprintf+0x154>
    4a3a:	83 35       	cpi	r24, 0x53	; 83
    4a3c:	09 f0       	breq	.+2      	; 0x4a40 <vfprintf+0x13e>
    4a3e:	55 c0       	rjmp	.+170    	; 0x4aea <vfprintf+0x1e8>
    4a40:	20 c0       	rjmp	.+64     	; 0x4a82 <vfprintf+0x180>
    4a42:	f8 01       	movw	r30, r16
    4a44:	80 81       	ld	r24, Z
    4a46:	89 83       	std	Y+1, r24	; 0x01
    4a48:	0e 5f       	subi	r16, 0xFE	; 254
    4a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a4c:	88 24       	eor	r8, r8
    4a4e:	83 94       	inc	r8
    4a50:	91 2c       	mov	r9, r1
    4a52:	53 01       	movw	r10, r6
    4a54:	12 c0       	rjmp	.+36     	; 0x4a7a <vfprintf+0x178>
    4a56:	28 01       	movw	r4, r16
    4a58:	f2 e0       	ldi	r31, 0x02	; 2
    4a5a:	4f 0e       	add	r4, r31
    4a5c:	51 1c       	adc	r5, r1
    4a5e:	f8 01       	movw	r30, r16
    4a60:	a0 80       	ld	r10, Z
    4a62:	b1 80       	ldd	r11, Z+1	; 0x01
    4a64:	36 fe       	sbrs	r3, 6
    4a66:	03 c0       	rjmp	.+6      	; 0x4a6e <vfprintf+0x16c>
    4a68:	69 2d       	mov	r22, r9
    4a6a:	70 e0       	ldi	r23, 0x00	; 0
    4a6c:	02 c0       	rjmp	.+4      	; 0x4a72 <vfprintf+0x170>
    4a6e:	6f ef       	ldi	r22, 0xFF	; 255
    4a70:	7f ef       	ldi	r23, 0xFF	; 255
    4a72:	c5 01       	movw	r24, r10
    4a74:	4e d1       	rcall	.+668    	; 0x4d12 <strnlen>
    4a76:	4c 01       	movw	r8, r24
    4a78:	82 01       	movw	r16, r4
    4a7a:	f3 2d       	mov	r31, r3
    4a7c:	ff 77       	andi	r31, 0x7F	; 127
    4a7e:	3f 2e       	mov	r3, r31
    4a80:	15 c0       	rjmp	.+42     	; 0x4aac <vfprintf+0x1aa>
    4a82:	28 01       	movw	r4, r16
    4a84:	22 e0       	ldi	r18, 0x02	; 2
    4a86:	42 0e       	add	r4, r18
    4a88:	51 1c       	adc	r5, r1
    4a8a:	f8 01       	movw	r30, r16
    4a8c:	a0 80       	ld	r10, Z
    4a8e:	b1 80       	ldd	r11, Z+1	; 0x01
    4a90:	36 fe       	sbrs	r3, 6
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <vfprintf+0x198>
    4a94:	69 2d       	mov	r22, r9
    4a96:	70 e0       	ldi	r23, 0x00	; 0
    4a98:	02 c0       	rjmp	.+4      	; 0x4a9e <vfprintf+0x19c>
    4a9a:	6f ef       	ldi	r22, 0xFF	; 255
    4a9c:	7f ef       	ldi	r23, 0xFF	; 255
    4a9e:	c5 01       	movw	r24, r10
    4aa0:	2d d1       	rcall	.+602    	; 0x4cfc <strnlen_P>
    4aa2:	4c 01       	movw	r8, r24
    4aa4:	f3 2d       	mov	r31, r3
    4aa6:	f0 68       	ori	r31, 0x80	; 128
    4aa8:	3f 2e       	mov	r3, r31
    4aaa:	82 01       	movw	r16, r4
    4aac:	33 fc       	sbrc	r3, 3
    4aae:	19 c0       	rjmp	.+50     	; 0x4ae2 <vfprintf+0x1e0>
    4ab0:	82 2d       	mov	r24, r2
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	88 16       	cp	r8, r24
    4ab6:	99 06       	cpc	r9, r25
    4ab8:	a0 f4       	brcc	.+40     	; 0x4ae2 <vfprintf+0x1e0>
    4aba:	b6 01       	movw	r22, r12
    4abc:	80 e2       	ldi	r24, 0x20	; 32
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	33 d1       	rcall	.+614    	; 0x4d28 <fputc>
    4ac2:	2a 94       	dec	r2
    4ac4:	f5 cf       	rjmp	.-22     	; 0x4ab0 <vfprintf+0x1ae>
    4ac6:	f5 01       	movw	r30, r10
    4ac8:	37 fc       	sbrc	r3, 7
    4aca:	85 91       	lpm	r24, Z+
    4acc:	37 fe       	sbrs	r3, 7
    4ace:	81 91       	ld	r24, Z+
    4ad0:	5f 01       	movw	r10, r30
    4ad2:	b6 01       	movw	r22, r12
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	28 d1       	rcall	.+592    	; 0x4d28 <fputc>
    4ad8:	21 10       	cpse	r2, r1
    4ada:	2a 94       	dec	r2
    4adc:	21 e0       	ldi	r18, 0x01	; 1
    4ade:	82 1a       	sub	r8, r18
    4ae0:	91 08       	sbc	r9, r1
    4ae2:	81 14       	cp	r8, r1
    4ae4:	91 04       	cpc	r9, r1
    4ae6:	79 f7       	brne	.-34     	; 0x4ac6 <vfprintf+0x1c4>
    4ae8:	e1 c0       	rjmp	.+450    	; 0x4cac <vfprintf+0x3aa>
    4aea:	84 36       	cpi	r24, 0x64	; 100
    4aec:	11 f0       	breq	.+4      	; 0x4af2 <vfprintf+0x1f0>
    4aee:	89 36       	cpi	r24, 0x69	; 105
    4af0:	39 f5       	brne	.+78     	; 0x4b40 <vfprintf+0x23e>
    4af2:	f8 01       	movw	r30, r16
    4af4:	37 fe       	sbrs	r3, 7
    4af6:	07 c0       	rjmp	.+14     	; 0x4b06 <vfprintf+0x204>
    4af8:	60 81       	ld	r22, Z
    4afa:	71 81       	ldd	r23, Z+1	; 0x01
    4afc:	82 81       	ldd	r24, Z+2	; 0x02
    4afe:	93 81       	ldd	r25, Z+3	; 0x03
    4b00:	0c 5f       	subi	r16, 0xFC	; 252
    4b02:	1f 4f       	sbci	r17, 0xFF	; 255
    4b04:	08 c0       	rjmp	.+16     	; 0x4b16 <vfprintf+0x214>
    4b06:	60 81       	ld	r22, Z
    4b08:	71 81       	ldd	r23, Z+1	; 0x01
    4b0a:	07 2e       	mov	r0, r23
    4b0c:	00 0c       	add	r0, r0
    4b0e:	88 0b       	sbc	r24, r24
    4b10:	99 0b       	sbc	r25, r25
    4b12:	0e 5f       	subi	r16, 0xFE	; 254
    4b14:	1f 4f       	sbci	r17, 0xFF	; 255
    4b16:	f3 2d       	mov	r31, r3
    4b18:	ff 76       	andi	r31, 0x6F	; 111
    4b1a:	3f 2e       	mov	r3, r31
    4b1c:	97 ff       	sbrs	r25, 7
    4b1e:	09 c0       	rjmp	.+18     	; 0x4b32 <vfprintf+0x230>
    4b20:	90 95       	com	r25
    4b22:	80 95       	com	r24
    4b24:	70 95       	com	r23
    4b26:	61 95       	neg	r22
    4b28:	7f 4f       	sbci	r23, 0xFF	; 255
    4b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b2e:	f0 68       	ori	r31, 0x80	; 128
    4b30:	3f 2e       	mov	r3, r31
    4b32:	2a e0       	ldi	r18, 0x0A	; 10
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	a3 01       	movw	r20, r6
    4b38:	33 d1       	rcall	.+614    	; 0x4da0 <__ultoa_invert>
    4b3a:	88 2e       	mov	r8, r24
    4b3c:	86 18       	sub	r8, r6
    4b3e:	44 c0       	rjmp	.+136    	; 0x4bc8 <vfprintf+0x2c6>
    4b40:	85 37       	cpi	r24, 0x75	; 117
    4b42:	31 f4       	brne	.+12     	; 0x4b50 <vfprintf+0x24e>
    4b44:	23 2d       	mov	r18, r3
    4b46:	2f 7e       	andi	r18, 0xEF	; 239
    4b48:	b2 2e       	mov	r11, r18
    4b4a:	2a e0       	ldi	r18, 0x0A	; 10
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	25 c0       	rjmp	.+74     	; 0x4b9a <vfprintf+0x298>
    4b50:	93 2d       	mov	r25, r3
    4b52:	99 7f       	andi	r25, 0xF9	; 249
    4b54:	b9 2e       	mov	r11, r25
    4b56:	8f 36       	cpi	r24, 0x6F	; 111
    4b58:	c1 f0       	breq	.+48     	; 0x4b8a <vfprintf+0x288>
    4b5a:	18 f4       	brcc	.+6      	; 0x4b62 <vfprintf+0x260>
    4b5c:	88 35       	cpi	r24, 0x58	; 88
    4b5e:	79 f0       	breq	.+30     	; 0x4b7e <vfprintf+0x27c>
    4b60:	ae c0       	rjmp	.+348    	; 0x4cbe <vfprintf+0x3bc>
    4b62:	80 37       	cpi	r24, 0x70	; 112
    4b64:	19 f0       	breq	.+6      	; 0x4b6c <vfprintf+0x26a>
    4b66:	88 37       	cpi	r24, 0x78	; 120
    4b68:	21 f0       	breq	.+8      	; 0x4b72 <vfprintf+0x270>
    4b6a:	a9 c0       	rjmp	.+338    	; 0x4cbe <vfprintf+0x3bc>
    4b6c:	e9 2f       	mov	r30, r25
    4b6e:	e0 61       	ori	r30, 0x10	; 16
    4b70:	be 2e       	mov	r11, r30
    4b72:	b4 fe       	sbrs	r11, 4
    4b74:	0d c0       	rjmp	.+26     	; 0x4b90 <vfprintf+0x28e>
    4b76:	fb 2d       	mov	r31, r11
    4b78:	f4 60       	ori	r31, 0x04	; 4
    4b7a:	bf 2e       	mov	r11, r31
    4b7c:	09 c0       	rjmp	.+18     	; 0x4b90 <vfprintf+0x28e>
    4b7e:	34 fe       	sbrs	r3, 4
    4b80:	0a c0       	rjmp	.+20     	; 0x4b96 <vfprintf+0x294>
    4b82:	29 2f       	mov	r18, r25
    4b84:	26 60       	ori	r18, 0x06	; 6
    4b86:	b2 2e       	mov	r11, r18
    4b88:	06 c0       	rjmp	.+12     	; 0x4b96 <vfprintf+0x294>
    4b8a:	28 e0       	ldi	r18, 0x08	; 8
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	05 c0       	rjmp	.+10     	; 0x4b9a <vfprintf+0x298>
    4b90:	20 e1       	ldi	r18, 0x10	; 16
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	02 c0       	rjmp	.+4      	; 0x4b9a <vfprintf+0x298>
    4b96:	20 e1       	ldi	r18, 0x10	; 16
    4b98:	32 e0       	ldi	r19, 0x02	; 2
    4b9a:	f8 01       	movw	r30, r16
    4b9c:	b7 fe       	sbrs	r11, 7
    4b9e:	07 c0       	rjmp	.+14     	; 0x4bae <vfprintf+0x2ac>
    4ba0:	60 81       	ld	r22, Z
    4ba2:	71 81       	ldd	r23, Z+1	; 0x01
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	93 81       	ldd	r25, Z+3	; 0x03
    4ba8:	0c 5f       	subi	r16, 0xFC	; 252
    4baa:	1f 4f       	sbci	r17, 0xFF	; 255
    4bac:	06 c0       	rjmp	.+12     	; 0x4bba <vfprintf+0x2b8>
    4bae:	60 81       	ld	r22, Z
    4bb0:	71 81       	ldd	r23, Z+1	; 0x01
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	0e 5f       	subi	r16, 0xFE	; 254
    4bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4bba:	a3 01       	movw	r20, r6
    4bbc:	f1 d0       	rcall	.+482    	; 0x4da0 <__ultoa_invert>
    4bbe:	88 2e       	mov	r8, r24
    4bc0:	86 18       	sub	r8, r6
    4bc2:	fb 2d       	mov	r31, r11
    4bc4:	ff 77       	andi	r31, 0x7F	; 127
    4bc6:	3f 2e       	mov	r3, r31
    4bc8:	36 fe       	sbrs	r3, 6
    4bca:	0d c0       	rjmp	.+26     	; 0x4be6 <vfprintf+0x2e4>
    4bcc:	23 2d       	mov	r18, r3
    4bce:	2e 7f       	andi	r18, 0xFE	; 254
    4bd0:	a2 2e       	mov	r10, r18
    4bd2:	89 14       	cp	r8, r9
    4bd4:	58 f4       	brcc	.+22     	; 0x4bec <vfprintf+0x2ea>
    4bd6:	34 fe       	sbrs	r3, 4
    4bd8:	0b c0       	rjmp	.+22     	; 0x4bf0 <vfprintf+0x2ee>
    4bda:	32 fc       	sbrc	r3, 2
    4bdc:	09 c0       	rjmp	.+18     	; 0x4bf0 <vfprintf+0x2ee>
    4bde:	83 2d       	mov	r24, r3
    4be0:	8e 7e       	andi	r24, 0xEE	; 238
    4be2:	a8 2e       	mov	r10, r24
    4be4:	05 c0       	rjmp	.+10     	; 0x4bf0 <vfprintf+0x2ee>
    4be6:	b8 2c       	mov	r11, r8
    4be8:	a3 2c       	mov	r10, r3
    4bea:	03 c0       	rjmp	.+6      	; 0x4bf2 <vfprintf+0x2f0>
    4bec:	b8 2c       	mov	r11, r8
    4bee:	01 c0       	rjmp	.+2      	; 0x4bf2 <vfprintf+0x2f0>
    4bf0:	b9 2c       	mov	r11, r9
    4bf2:	a4 fe       	sbrs	r10, 4
    4bf4:	0f c0       	rjmp	.+30     	; 0x4c14 <vfprintf+0x312>
    4bf6:	fe 01       	movw	r30, r28
    4bf8:	e8 0d       	add	r30, r8
    4bfa:	f1 1d       	adc	r31, r1
    4bfc:	80 81       	ld	r24, Z
    4bfe:	80 33       	cpi	r24, 0x30	; 48
    4c00:	21 f4       	brne	.+8      	; 0x4c0a <vfprintf+0x308>
    4c02:	9a 2d       	mov	r25, r10
    4c04:	99 7e       	andi	r25, 0xE9	; 233
    4c06:	a9 2e       	mov	r10, r25
    4c08:	09 c0       	rjmp	.+18     	; 0x4c1c <vfprintf+0x31a>
    4c0a:	a2 fe       	sbrs	r10, 2
    4c0c:	06 c0       	rjmp	.+12     	; 0x4c1a <vfprintf+0x318>
    4c0e:	b3 94       	inc	r11
    4c10:	b3 94       	inc	r11
    4c12:	04 c0       	rjmp	.+8      	; 0x4c1c <vfprintf+0x31a>
    4c14:	8a 2d       	mov	r24, r10
    4c16:	86 78       	andi	r24, 0x86	; 134
    4c18:	09 f0       	breq	.+2      	; 0x4c1c <vfprintf+0x31a>
    4c1a:	b3 94       	inc	r11
    4c1c:	a3 fc       	sbrc	r10, 3
    4c1e:	10 c0       	rjmp	.+32     	; 0x4c40 <vfprintf+0x33e>
    4c20:	a0 fe       	sbrs	r10, 0
    4c22:	06 c0       	rjmp	.+12     	; 0x4c30 <vfprintf+0x32e>
    4c24:	b2 14       	cp	r11, r2
    4c26:	80 f4       	brcc	.+32     	; 0x4c48 <vfprintf+0x346>
    4c28:	28 0c       	add	r2, r8
    4c2a:	92 2c       	mov	r9, r2
    4c2c:	9b 18       	sub	r9, r11
    4c2e:	0d c0       	rjmp	.+26     	; 0x4c4a <vfprintf+0x348>
    4c30:	b2 14       	cp	r11, r2
    4c32:	58 f4       	brcc	.+22     	; 0x4c4a <vfprintf+0x348>
    4c34:	b6 01       	movw	r22, r12
    4c36:	80 e2       	ldi	r24, 0x20	; 32
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	76 d0       	rcall	.+236    	; 0x4d28 <fputc>
    4c3c:	b3 94       	inc	r11
    4c3e:	f8 cf       	rjmp	.-16     	; 0x4c30 <vfprintf+0x32e>
    4c40:	b2 14       	cp	r11, r2
    4c42:	18 f4       	brcc	.+6      	; 0x4c4a <vfprintf+0x348>
    4c44:	2b 18       	sub	r2, r11
    4c46:	02 c0       	rjmp	.+4      	; 0x4c4c <vfprintf+0x34a>
    4c48:	98 2c       	mov	r9, r8
    4c4a:	21 2c       	mov	r2, r1
    4c4c:	a4 fe       	sbrs	r10, 4
    4c4e:	0f c0       	rjmp	.+30     	; 0x4c6e <vfprintf+0x36c>
    4c50:	b6 01       	movw	r22, r12
    4c52:	80 e3       	ldi	r24, 0x30	; 48
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	68 d0       	rcall	.+208    	; 0x4d28 <fputc>
    4c58:	a2 fe       	sbrs	r10, 2
    4c5a:	16 c0       	rjmp	.+44     	; 0x4c88 <vfprintf+0x386>
    4c5c:	a1 fc       	sbrc	r10, 1
    4c5e:	03 c0       	rjmp	.+6      	; 0x4c66 <vfprintf+0x364>
    4c60:	88 e7       	ldi	r24, 0x78	; 120
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	02 c0       	rjmp	.+4      	; 0x4c6a <vfprintf+0x368>
    4c66:	88 e5       	ldi	r24, 0x58	; 88
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	b6 01       	movw	r22, r12
    4c6c:	0c c0       	rjmp	.+24     	; 0x4c86 <vfprintf+0x384>
    4c6e:	8a 2d       	mov	r24, r10
    4c70:	86 78       	andi	r24, 0x86	; 134
    4c72:	51 f0       	breq	.+20     	; 0x4c88 <vfprintf+0x386>
    4c74:	a1 fe       	sbrs	r10, 1
    4c76:	02 c0       	rjmp	.+4      	; 0x4c7c <vfprintf+0x37a>
    4c78:	8b e2       	ldi	r24, 0x2B	; 43
    4c7a:	01 c0       	rjmp	.+2      	; 0x4c7e <vfprintf+0x37c>
    4c7c:	80 e2       	ldi	r24, 0x20	; 32
    4c7e:	a7 fc       	sbrc	r10, 7
    4c80:	8d e2       	ldi	r24, 0x2D	; 45
    4c82:	b6 01       	movw	r22, r12
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	50 d0       	rcall	.+160    	; 0x4d28 <fputc>
    4c88:	89 14       	cp	r8, r9
    4c8a:	30 f4       	brcc	.+12     	; 0x4c98 <vfprintf+0x396>
    4c8c:	b6 01       	movw	r22, r12
    4c8e:	80 e3       	ldi	r24, 0x30	; 48
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	4a d0       	rcall	.+148    	; 0x4d28 <fputc>
    4c94:	9a 94       	dec	r9
    4c96:	f8 cf       	rjmp	.-16     	; 0x4c88 <vfprintf+0x386>
    4c98:	8a 94       	dec	r8
    4c9a:	f3 01       	movw	r30, r6
    4c9c:	e8 0d       	add	r30, r8
    4c9e:	f1 1d       	adc	r31, r1
    4ca0:	80 81       	ld	r24, Z
    4ca2:	b6 01       	movw	r22, r12
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	40 d0       	rcall	.+128    	; 0x4d28 <fputc>
    4ca8:	81 10       	cpse	r8, r1
    4caa:	f6 cf       	rjmp	.-20     	; 0x4c98 <vfprintf+0x396>
    4cac:	22 20       	and	r2, r2
    4cae:	09 f4       	brne	.+2      	; 0x4cb2 <vfprintf+0x3b0>
    4cb0:	4e ce       	rjmp	.-868    	; 0x494e <vfprintf+0x4c>
    4cb2:	b6 01       	movw	r22, r12
    4cb4:	80 e2       	ldi	r24, 0x20	; 32
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	37 d0       	rcall	.+110    	; 0x4d28 <fputc>
    4cba:	2a 94       	dec	r2
    4cbc:	f7 cf       	rjmp	.-18     	; 0x4cac <vfprintf+0x3aa>
    4cbe:	f6 01       	movw	r30, r12
    4cc0:	86 81       	ldd	r24, Z+6	; 0x06
    4cc2:	97 81       	ldd	r25, Z+7	; 0x07
    4cc4:	02 c0       	rjmp	.+4      	; 0x4cca <vfprintf+0x3c8>
    4cc6:	8f ef       	ldi	r24, 0xFF	; 255
    4cc8:	9f ef       	ldi	r25, 0xFF	; 255
    4cca:	2b 96       	adiw	r28, 0x0b	; 11
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	f8 94       	cli
    4cd0:	de bf       	out	0x3e, r29	; 62
    4cd2:	0f be       	out	0x3f, r0	; 63
    4cd4:	cd bf       	out	0x3d, r28	; 61
    4cd6:	df 91       	pop	r29
    4cd8:	cf 91       	pop	r28
    4cda:	1f 91       	pop	r17
    4cdc:	0f 91       	pop	r16
    4cde:	ff 90       	pop	r15
    4ce0:	ef 90       	pop	r14
    4ce2:	df 90       	pop	r13
    4ce4:	cf 90       	pop	r12
    4ce6:	bf 90       	pop	r11
    4ce8:	af 90       	pop	r10
    4cea:	9f 90       	pop	r9
    4cec:	8f 90       	pop	r8
    4cee:	7f 90       	pop	r7
    4cf0:	6f 90       	pop	r6
    4cf2:	5f 90       	pop	r5
    4cf4:	4f 90       	pop	r4
    4cf6:	3f 90       	pop	r3
    4cf8:	2f 90       	pop	r2
    4cfa:	08 95       	ret

00004cfc <strnlen_P>:
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	05 90       	lpm	r0, Z+
    4d00:	61 50       	subi	r22, 0x01	; 1
    4d02:	70 40       	sbci	r23, 0x00	; 0
    4d04:	01 10       	cpse	r0, r1
    4d06:	d8 f7       	brcc	.-10     	; 0x4cfe <strnlen_P+0x2>
    4d08:	80 95       	com	r24
    4d0a:	90 95       	com	r25
    4d0c:	8e 0f       	add	r24, r30
    4d0e:	9f 1f       	adc	r25, r31
    4d10:	08 95       	ret

00004d12 <strnlen>:
    4d12:	fc 01       	movw	r30, r24
    4d14:	61 50       	subi	r22, 0x01	; 1
    4d16:	70 40       	sbci	r23, 0x00	; 0
    4d18:	01 90       	ld	r0, Z+
    4d1a:	01 10       	cpse	r0, r1
    4d1c:	d8 f7       	brcc	.-10     	; 0x4d14 <strnlen+0x2>
    4d1e:	80 95       	com	r24
    4d20:	90 95       	com	r25
    4d22:	8e 0f       	add	r24, r30
    4d24:	9f 1f       	adc	r25, r31
    4d26:	08 95       	ret

00004d28 <fputc>:
    4d28:	0f 93       	push	r16
    4d2a:	1f 93       	push	r17
    4d2c:	cf 93       	push	r28
    4d2e:	df 93       	push	r29
    4d30:	fb 01       	movw	r30, r22
    4d32:	23 81       	ldd	r18, Z+3	; 0x03
    4d34:	21 fd       	sbrc	r18, 1
    4d36:	03 c0       	rjmp	.+6      	; 0x4d3e <fputc+0x16>
    4d38:	8f ef       	ldi	r24, 0xFF	; 255
    4d3a:	9f ef       	ldi	r25, 0xFF	; 255
    4d3c:	2c c0       	rjmp	.+88     	; 0x4d96 <fputc+0x6e>
    4d3e:	22 ff       	sbrs	r18, 2
    4d40:	16 c0       	rjmp	.+44     	; 0x4d6e <fputc+0x46>
    4d42:	46 81       	ldd	r20, Z+6	; 0x06
    4d44:	57 81       	ldd	r21, Z+7	; 0x07
    4d46:	24 81       	ldd	r18, Z+4	; 0x04
    4d48:	35 81       	ldd	r19, Z+5	; 0x05
    4d4a:	42 17       	cp	r20, r18
    4d4c:	53 07       	cpc	r21, r19
    4d4e:	44 f4       	brge	.+16     	; 0x4d60 <fputc+0x38>
    4d50:	a0 81       	ld	r26, Z
    4d52:	b1 81       	ldd	r27, Z+1	; 0x01
    4d54:	9d 01       	movw	r18, r26
    4d56:	2f 5f       	subi	r18, 0xFF	; 255
    4d58:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5a:	31 83       	std	Z+1, r19	; 0x01
    4d5c:	20 83       	st	Z, r18
    4d5e:	8c 93       	st	X, r24
    4d60:	26 81       	ldd	r18, Z+6	; 0x06
    4d62:	37 81       	ldd	r19, Z+7	; 0x07
    4d64:	2f 5f       	subi	r18, 0xFF	; 255
    4d66:	3f 4f       	sbci	r19, 0xFF	; 255
    4d68:	37 83       	std	Z+7, r19	; 0x07
    4d6a:	26 83       	std	Z+6, r18	; 0x06
    4d6c:	14 c0       	rjmp	.+40     	; 0x4d96 <fputc+0x6e>
    4d6e:	8b 01       	movw	r16, r22
    4d70:	ec 01       	movw	r28, r24
    4d72:	fb 01       	movw	r30, r22
    4d74:	00 84       	ldd	r0, Z+8	; 0x08
    4d76:	f1 85       	ldd	r31, Z+9	; 0x09
    4d78:	e0 2d       	mov	r30, r0
    4d7a:	19 95       	eicall
    4d7c:	89 2b       	or	r24, r25
    4d7e:	e1 f6       	brne	.-72     	; 0x4d38 <fputc+0x10>
    4d80:	d8 01       	movw	r26, r16
    4d82:	16 96       	adiw	r26, 0x06	; 6
    4d84:	8d 91       	ld	r24, X+
    4d86:	9c 91       	ld	r25, X
    4d88:	17 97       	sbiw	r26, 0x07	; 7
    4d8a:	01 96       	adiw	r24, 0x01	; 1
    4d8c:	17 96       	adiw	r26, 0x07	; 7
    4d8e:	9c 93       	st	X, r25
    4d90:	8e 93       	st	-X, r24
    4d92:	16 97       	sbiw	r26, 0x06	; 6
    4d94:	ce 01       	movw	r24, r28
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	1f 91       	pop	r17
    4d9c:	0f 91       	pop	r16
    4d9e:	08 95       	ret

00004da0 <__ultoa_invert>:
    4da0:	fa 01       	movw	r30, r20
    4da2:	aa 27       	eor	r26, r26
    4da4:	28 30       	cpi	r18, 0x08	; 8
    4da6:	51 f1       	breq	.+84     	; 0x4dfc <__ultoa_invert+0x5c>
    4da8:	20 31       	cpi	r18, 0x10	; 16
    4daa:	81 f1       	breq	.+96     	; 0x4e0c <__ultoa_invert+0x6c>
    4dac:	e8 94       	clt
    4dae:	6f 93       	push	r22
    4db0:	6e 7f       	andi	r22, 0xFE	; 254
    4db2:	6e 5f       	subi	r22, 0xFE	; 254
    4db4:	7f 4f       	sbci	r23, 0xFF	; 255
    4db6:	8f 4f       	sbci	r24, 0xFF	; 255
    4db8:	9f 4f       	sbci	r25, 0xFF	; 255
    4dba:	af 4f       	sbci	r26, 0xFF	; 255
    4dbc:	b1 e0       	ldi	r27, 0x01	; 1
    4dbe:	3e d0       	rcall	.+124    	; 0x4e3c <__ultoa_invert+0x9c>
    4dc0:	b4 e0       	ldi	r27, 0x04	; 4
    4dc2:	3c d0       	rcall	.+120    	; 0x4e3c <__ultoa_invert+0x9c>
    4dc4:	67 0f       	add	r22, r23
    4dc6:	78 1f       	adc	r23, r24
    4dc8:	89 1f       	adc	r24, r25
    4dca:	9a 1f       	adc	r25, r26
    4dcc:	a1 1d       	adc	r26, r1
    4dce:	68 0f       	add	r22, r24
    4dd0:	79 1f       	adc	r23, r25
    4dd2:	8a 1f       	adc	r24, r26
    4dd4:	91 1d       	adc	r25, r1
    4dd6:	a1 1d       	adc	r26, r1
    4dd8:	6a 0f       	add	r22, r26
    4dda:	71 1d       	adc	r23, r1
    4ddc:	81 1d       	adc	r24, r1
    4dde:	91 1d       	adc	r25, r1
    4de0:	a1 1d       	adc	r26, r1
    4de2:	20 d0       	rcall	.+64     	; 0x4e24 <__ultoa_invert+0x84>
    4de4:	09 f4       	brne	.+2      	; 0x4de8 <__ultoa_invert+0x48>
    4de6:	68 94       	set
    4de8:	3f 91       	pop	r19
    4dea:	2a e0       	ldi	r18, 0x0A	; 10
    4dec:	26 9f       	mul	r18, r22
    4dee:	11 24       	eor	r1, r1
    4df0:	30 19       	sub	r19, r0
    4df2:	30 5d       	subi	r19, 0xD0	; 208
    4df4:	31 93       	st	Z+, r19
    4df6:	de f6       	brtc	.-74     	; 0x4dae <__ultoa_invert+0xe>
    4df8:	cf 01       	movw	r24, r30
    4dfa:	08 95       	ret
    4dfc:	46 2f       	mov	r20, r22
    4dfe:	47 70       	andi	r20, 0x07	; 7
    4e00:	40 5d       	subi	r20, 0xD0	; 208
    4e02:	41 93       	st	Z+, r20
    4e04:	b3 e0       	ldi	r27, 0x03	; 3
    4e06:	0f d0       	rcall	.+30     	; 0x4e26 <__ultoa_invert+0x86>
    4e08:	c9 f7       	brne	.-14     	; 0x4dfc <__ultoa_invert+0x5c>
    4e0a:	f6 cf       	rjmp	.-20     	; 0x4df8 <__ultoa_invert+0x58>
    4e0c:	46 2f       	mov	r20, r22
    4e0e:	4f 70       	andi	r20, 0x0F	; 15
    4e10:	40 5d       	subi	r20, 0xD0	; 208
    4e12:	4a 33       	cpi	r20, 0x3A	; 58
    4e14:	18 f0       	brcs	.+6      	; 0x4e1c <__ultoa_invert+0x7c>
    4e16:	49 5d       	subi	r20, 0xD9	; 217
    4e18:	31 fd       	sbrc	r19, 1
    4e1a:	40 52       	subi	r20, 0x20	; 32
    4e1c:	41 93       	st	Z+, r20
    4e1e:	02 d0       	rcall	.+4      	; 0x4e24 <__ultoa_invert+0x84>
    4e20:	a9 f7       	brne	.-22     	; 0x4e0c <__ultoa_invert+0x6c>
    4e22:	ea cf       	rjmp	.-44     	; 0x4df8 <__ultoa_invert+0x58>
    4e24:	b4 e0       	ldi	r27, 0x04	; 4
    4e26:	a6 95       	lsr	r26
    4e28:	97 95       	ror	r25
    4e2a:	87 95       	ror	r24
    4e2c:	77 95       	ror	r23
    4e2e:	67 95       	ror	r22
    4e30:	ba 95       	dec	r27
    4e32:	c9 f7       	brne	.-14     	; 0x4e26 <__ultoa_invert+0x86>
    4e34:	00 97       	sbiw	r24, 0x00	; 0
    4e36:	61 05       	cpc	r22, r1
    4e38:	71 05       	cpc	r23, r1
    4e3a:	08 95       	ret
    4e3c:	9b 01       	movw	r18, r22
    4e3e:	ac 01       	movw	r20, r24
    4e40:	0a 2e       	mov	r0, r26
    4e42:	06 94       	lsr	r0
    4e44:	57 95       	ror	r21
    4e46:	47 95       	ror	r20
    4e48:	37 95       	ror	r19
    4e4a:	27 95       	ror	r18
    4e4c:	ba 95       	dec	r27
    4e4e:	c9 f7       	brne	.-14     	; 0x4e42 <__ultoa_invert+0xa2>
    4e50:	62 0f       	add	r22, r18
    4e52:	73 1f       	adc	r23, r19
    4e54:	84 1f       	adc	r24, r20
    4e56:	95 1f       	adc	r25, r21
    4e58:	a0 1d       	adc	r26, r0
    4e5a:	08 95       	ret

00004e5c <_exit>:
    4e5c:	f8 94       	cli

00004e5e <__stop_program>:
    4e5e:	ff cf       	rjmp	.-2      	; 0x4e5e <__stop_program>

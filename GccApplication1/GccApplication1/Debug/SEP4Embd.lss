
SEP4Embd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000053a  00800200  00005a2a  00005abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001242  0080073a  0080073a  00005ff8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005ff8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a60  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d794  00000000  00000000  00006af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036a1  00000000  00000000  00014288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006371  00000000  00000000  00017929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022dc  00000000  00000000  0001dc9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ff2  00000000  00000000  0001ff78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bae0  00000000  00000000  00023f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa0  00000000  00000000  0002fa4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	47 c2       	rjmp	.+1166   	; 0x490 <__ctors_end>
       2:	00 00       	nop
       4:	66 c2       	rjmp	.+1228   	; 0x4d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c2       	rjmp	.+1224   	; 0x4d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c2       	rjmp	.+1220   	; 0x4d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c2       	rjmp	.+1216   	; 0x4d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c2       	rjmp	.+1212   	; 0x4d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c2       	rjmp	.+1208   	; 0x4d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c2       	rjmp	.+1204   	; 0x4d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c2       	rjmp	.+1200   	; 0x4d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c2       	rjmp	.+1196   	; 0x4d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c2       	rjmp	.+1192   	; 0x4d2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c2       	rjmp	.+1188   	; 0x4d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c7       	rjmp	.+3890   	; 0xf64 <__vector_12>
      32:	00 00       	nop
      34:	4e c2       	rjmp	.+1180   	; 0x4d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c2       	rjmp	.+1176   	; 0x4d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c2       	rjmp	.+1172   	; 0x4d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c2       	rjmp	.+1168   	; 0x4d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	46 c2       	rjmp	.+1164   	; 0x4d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c2       	rjmp	.+1160   	; 0x4d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c2       	rjmp	.+1156   	; 0x4d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	40 c2       	rjmp	.+1152   	; 0x4d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	3e c2       	rjmp	.+1148   	; 0x4d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c2       	rjmp	.+1144   	; 0x4d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c2       	rjmp	.+1140   	; 0x4d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c2       	rjmp	.+1136   	; 0x4d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 37 22 	jmp	0x446e	; 0x446e <__vector_25>
      68:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__vector_26>
      6c:	32 c2       	rjmp	.+1124   	; 0x4d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c2       	rjmp	.+1120   	; 0x4d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c2       	rjmp	.+1116   	; 0x4d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c2       	rjmp	.+1112   	; 0x4d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c2       	rjmp	.+1108   	; 0x4d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c2       	rjmp	.+1104   	; 0x4d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c2       	rjmp	.+1100   	; 0x4d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c2       	rjmp	.+1096   	; 0x4d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c2       	rjmp	.+1092   	; 0x4d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__vector_36>
      94:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__vector_37>
      98:	1c c2       	rjmp	.+1080   	; 0x4d2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__vector_39>
      a0:	18 c2       	rjmp	.+1072   	; 0x4d2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	16 c2       	rjmp	.+1068   	; 0x4d2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	14 c2       	rjmp	.+1064   	; 0x4d2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	12 c2       	rjmp	.+1060   	; 0x4d2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	10 c2       	rjmp	.+1056   	; 0x4d2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0e c2       	rjmp	.+1052   	; 0x4d2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c c2       	rjmp	.+1048   	; 0x4d2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0a c2       	rjmp	.+1044   	; 0x4d2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	08 c2       	rjmp	.+1040   	; 0x4d2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	06 c2       	rjmp	.+1036   	; 0x4d2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	04 c2       	rjmp	.+1032   	; 0x4d2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__vector_51>
      d0:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__vector_52>
      d4:	fe c1       	rjmp	.+1020   	; 0x4d2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f9 23 	jmp	0x47f2	; 0x47f2 <__vector_54>
      dc:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <__vector_55>
      e0:	f8 c1       	rjmp	.+1008   	; 0x4d2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 01       	movw	r22, r30
      e6:	bf 01       	movw	r22, r30
      e8:	bf 01       	movw	r22, r30
      ea:	f9 01       	movw	r30, r18
      ec:	01 02       	muls	r16, r17
      ee:	17 02       	muls	r17, r23
      f0:	bf 01       	movw	r22, r30
      f2:	bf 01       	movw	r22, r30
      f4:	f9 01       	movw	r30, r18
      f6:	01 02       	muls	r16, r17
      f8:	d9 25       	eor	r29, r9
      fa:	49 26       	eor	r4, r25
      fc:	49 26       	eor	r4, r25
      fe:	49 26       	eor	r4, r25
     100:	49 26       	eor	r4, r25
     102:	49 26       	eor	r4, r25
     104:	49 26       	eor	r4, r25
     106:	49 26       	eor	r4, r25
     108:	d9 25       	eor	r29, r9
     10a:	49 26       	eor	r4, r25
     10c:	49 26       	eor	r4, r25
     10e:	49 26       	eor	r4, r25
     110:	49 26       	eor	r4, r25
     112:	49 26       	eor	r4, r25
     114:	49 26       	eor	r4, r25
     116:	49 26       	eor	r4, r25
     118:	db 25       	eor	r29, r11
     11a:	49 26       	eor	r4, r25
     11c:	49 26       	eor	r4, r25
     11e:	49 26       	eor	r4, r25
     120:	49 26       	eor	r4, r25
     122:	49 26       	eor	r4, r25
     124:	49 26       	eor	r4, r25
     126:	49 26       	eor	r4, r25
     128:	49 26       	eor	r4, r25
     12a:	49 26       	eor	r4, r25
     12c:	49 26       	eor	r4, r25
     12e:	49 26       	eor	r4, r25
     130:	49 26       	eor	r4, r25
     132:	49 26       	eor	r4, r25
     134:	49 26       	eor	r4, r25
     136:	49 26       	eor	r4, r25
     138:	db 25       	eor	r29, r11
     13a:	49 26       	eor	r4, r25
     13c:	49 26       	eor	r4, r25
     13e:	49 26       	eor	r4, r25
     140:	49 26       	eor	r4, r25
     142:	49 26       	eor	r4, r25
     144:	49 26       	eor	r4, r25
     146:	49 26       	eor	r4, r25
     148:	49 26       	eor	r4, r25
     14a:	49 26       	eor	r4, r25
     14c:	49 26       	eor	r4, r25
     14e:	49 26       	eor	r4, r25
     150:	49 26       	eor	r4, r25
     152:	49 26       	eor	r4, r25
     154:	49 26       	eor	r4, r25
     156:	49 26       	eor	r4, r25
     158:	45 26       	eor	r4, r21
     15a:	49 26       	eor	r4, r25
     15c:	49 26       	eor	r4, r25
     15e:	49 26       	eor	r4, r25
     160:	49 26       	eor	r4, r25
     162:	49 26       	eor	r4, r25
     164:	49 26       	eor	r4, r25
     166:	49 26       	eor	r4, r25
     168:	10 26       	eor	r1, r16
     16a:	49 26       	eor	r4, r25
     16c:	49 26       	eor	r4, r25
     16e:	49 26       	eor	r4, r25
     170:	49 26       	eor	r4, r25
     172:	49 26       	eor	r4, r25
     174:	49 26       	eor	r4, r25
     176:	49 26       	eor	r4, r25
     178:	49 26       	eor	r4, r25
     17a:	49 26       	eor	r4, r25
     17c:	49 26       	eor	r4, r25
     17e:	49 26       	eor	r4, r25
     180:	49 26       	eor	r4, r25
     182:	49 26       	eor	r4, r25
     184:	49 26       	eor	r4, r25
     186:	49 26       	eor	r4, r25
     188:	04 26       	eor	r0, r20
     18a:	49 26       	eor	r4, r25
     18c:	49 26       	eor	r4, r25
     18e:	49 26       	eor	r4, r25
     190:	49 26       	eor	r4, r25
     192:	49 26       	eor	r4, r25
     194:	49 26       	eor	r4, r25
     196:	49 26       	eor	r4, r25
     198:	28 26       	eor	r2, r24

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e e7       	ldi	r16, 0x7E	; 126
     19c:	17 e1       	ldi	r17, 0x17	; 23
     19e:	0f 2e       	mov	r0, r31
     1a0:	fe ea       	ldi	r31, 0xAE	; 174
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e1       	ldi	r31, 0x17	; 23
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	31 d5       	rcall	.+2658   	; 0xc2e <uxListRemove>
     1cc:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 71 17 	sts	0x1771, r24	; 0x801771 <uxCurrentNumberOfTasks>
     1d6:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 7d 17 	sts	0x177D, r24	; 0x80177d <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	7e d4       	rcall	.+2300   	; 0xae6 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	7c d4       	rcall	.+2296   	; 0xae6 <vPortFree>
     1ee:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	ec d5       	rcall	.+3032   	; 0xdd8 <vPortYield>
     200:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 e6 17 	lds	r30, 0x17E6	; 0x8017e6 <pxCurrentTimerList>
     232:	f0 91 e7 17 	lds	r31, 0x17E7	; 0x8017e7 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0f c1       	rjmp	.+542    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 5d 17 	call	0x2eba	; 0x2eba <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	65 c0       	rjmp	.+202    	; 0x330 <prvTimerTask+0x12a>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 34 11 	call	0x2268	; 0x2268 <xTaskResumeAll>
     27e:	e0 91 e6 17 	lds	r30, 0x17E6	; 0x8017e6 <pxCurrentTimerList>
     282:	f0 91 e7 17 	lds	r31, 0x17E7	; 0x8017e7 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	ca d4       	rcall	.+2452   	; 0xc2e <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	87 89       	ldd	r24, Z+23	; 0x17
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	57 96       	adiw	r26, 0x17	; 23
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9f c0       	rjmp	.+318    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xTimerQueue>
     31c:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xTimerQueue+0x1>
     320:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <vQueueWaitForMessageRestricted>
     324:	0e 94 34 11 	call	0x2268	; 0x2268 <xTaskResumeAll>
     328:	81 11       	cpse	r24, r1
     32a:	8a c0       	rjmp	.+276    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     32c:	55 d5       	rcall	.+2730   	; 0xdd8 <vPortYield>
     32e:	88 c0       	rjmp	.+272    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     330:	0e 94 34 11 	call	0x2268	; 0x2268 <xTaskResumeAll>
     334:	85 c0       	rjmp	.+266    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 23       	and	r24, r24
     33a:	0c f4       	brge	.+2      	; 0x33e <prvTimerTask+0x138>
     33c:	81 c0       	rjmp	.+258    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     33e:	4e 80       	ldd	r4, Y+6	; 0x06
     340:	5f 80       	ldd	r5, Y+7	; 0x07
     342:	d2 01       	movw	r26, r4
     344:	1c 96       	adiw	r26, 0x0c	; 12
     346:	8d 91       	ld	r24, X+
     348:	9c 91       	ld	r25, X
     34a:	1d 97       	sbiw	r26, 0x0d	; 13
     34c:	89 2b       	or	r24, r25
     34e:	19 f0       	breq	.+6      	; 0x356 <prvTimerTask+0x150>
     350:	c2 01       	movw	r24, r4
     352:	02 96       	adiw	r24, 0x02	; 2
     354:	6c d4       	rcall	.+2264   	; 0xc2e <uxListRemove>
     356:	ce 01       	movw	r24, r28
     358:	08 96       	adiw	r24, 0x08	; 8
     35a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <prvSampleTimeNow>
     35e:	8b 01       	movw	r16, r22
     360:	9c 01       	movw	r18, r24
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	0e 2e       	mov	r0, r30
     366:	00 0c       	add	r0, r0
     368:	ff 0b       	sbc	r31, r31
     36a:	ea 30       	cpi	r30, 0x0A	; 10
     36c:	f1 05       	cpc	r31, r1
     36e:	08 f0       	brcs	.+2      	; 0x372 <prvTimerTask+0x16c>
     370:	67 c0       	rjmp	.+206    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     372:	88 27       	eor	r24, r24
     374:	ee 58       	subi	r30, 0x8E	; 142
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	8f 4f       	sbci	r24, 0xFF	; 255
     37a:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__tablejump2__>
     37e:	f2 01       	movw	r30, r4
     380:	87 89       	ldd	r24, Z+23	; 0x17
     382:	81 60       	ori	r24, 0x01	; 1
     384:	87 8b       	std	Z+23, r24	; 0x17
     386:	ca 80       	ldd	r12, Y+2	; 0x02
     388:	db 80       	ldd	r13, Y+3	; 0x03
     38a:	ec 80       	ldd	r14, Y+4	; 0x04
     38c:	fd 80       	ldd	r15, Y+5	; 0x05
     38e:	46 85       	ldd	r20, Z+14	; 0x0e
     390:	57 85       	ldd	r21, Z+15	; 0x0f
     392:	60 89       	ldd	r22, Z+16	; 0x10
     394:	71 89       	ldd	r23, Z+17	; 0x11
     396:	4c 0d       	add	r20, r12
     398:	5d 1d       	adc	r21, r13
     39a:	6e 1d       	adc	r22, r14
     39c:	7f 1d       	adc	r23, r15
     39e:	c2 01       	movw	r24, r4
     3a0:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <prvInsertTimerInActiveList>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <prvTimerTask+0x1a4>
     3a8:	4b c0       	rjmp	.+150    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3aa:	d2 01       	movw	r26, r4
     3ac:	54 96       	adiw	r26, 0x14	; 20
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	55 97       	sbiw	r26, 0x15	; 21
     3b4:	c2 01       	movw	r24, r4
     3b6:	19 95       	eicall
     3b8:	f2 01       	movw	r30, r4
     3ba:	87 89       	ldd	r24, Z+23	; 0x17
     3bc:	82 ff       	sbrs	r24, 2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3c0:	4a 81       	ldd	r20, Y+2	; 0x02
     3c2:	5b 81       	ldd	r21, Y+3	; 0x03
     3c4:	6c 81       	ldd	r22, Y+4	; 0x04
     3c6:	7d 81       	ldd	r23, Y+5	; 0x05
     3c8:	86 85       	ldd	r24, Z+14	; 0x0e
     3ca:	97 85       	ldd	r25, Z+15	; 0x0f
     3cc:	a0 89       	ldd	r26, Z+16	; 0x10
     3ce:	b1 89       	ldd	r27, Z+17	; 0x11
     3d0:	9a 01       	movw	r18, r20
     3d2:	ab 01       	movw	r20, r22
     3d4:	28 0f       	add	r18, r24
     3d6:	39 1f       	adc	r19, r25
     3d8:	4a 1f       	adc	r20, r26
     3da:	5b 1f       	adc	r21, r27
     3dc:	c8 2c       	mov	r12, r8
     3de:	d9 2c       	mov	r13, r9
     3e0:	ea 2c       	mov	r14, r10
     3e2:	fb 2c       	mov	r15, r11
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	c2 01       	movw	r24, r4
     3ec:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <xTimerGenericCommand>
     3f0:	27 c0       	rjmp	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3f2:	d2 01       	movw	r26, r4
     3f4:	57 96       	adiw	r26, 0x17	; 23
     3f6:	8c 91       	ld	r24, X
     3f8:	57 97       	sbiw	r26, 0x17	; 23
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 93       	st	X, r24
     400:	1f c0       	rjmp	.+62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     402:	f2 01       	movw	r30, r4
     404:	87 89       	ldd	r24, Z+23	; 0x17
     406:	81 60       	ori	r24, 0x01	; 1
     408:	87 8b       	std	Z+23, r24	; 0x17
     40a:	4a 81       	ldd	r20, Y+2	; 0x02
     40c:	5b 81       	ldd	r21, Y+3	; 0x03
     40e:	6c 81       	ldd	r22, Y+4	; 0x04
     410:	7d 81       	ldd	r23, Y+5	; 0x05
     412:	46 87       	std	Z+14, r20	; 0x0e
     414:	57 87       	std	Z+15, r21	; 0x0f
     416:	60 8b       	std	Z+16, r22	; 0x10
     418:	71 8b       	std	Z+17, r23	; 0x11
     41a:	40 0f       	add	r20, r16
     41c:	51 1f       	adc	r21, r17
     41e:	62 1f       	adc	r22, r18
     420:	73 1f       	adc	r23, r19
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	c2 01       	movw	r24, r4
     428:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <prvInsertTimerInActiveList>
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	f2 01       	movw	r30, r4
     430:	87 89       	ldd	r24, Z+23	; 0x17
     432:	81 fd       	sbrc	r24, 1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	c2 01       	movw	r24, r4
     438:	56 d3       	rcall	.+1708   	; 0xae6 <vPortFree>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	87 8b       	std	Z+23, r24	; 0x17
     440:	28 2d       	mov	r18, r8
     442:	39 2d       	mov	r19, r9
     444:	4a 2d       	mov	r20, r10
     446:	5b 2d       	mov	r21, r11
     448:	66 2d       	mov	r22, r6
     44a:	77 2d       	mov	r23, r7
     44c:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xTimerQueue>
     450:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xTimerQueue+0x1>
     454:	bf d7       	rcall	.+3966   	; 0x13d4 <xQueueReceive>
     456:	81 11       	cpse	r24, r1
     458:	6e cf       	rjmp	.-292    	; 0x336 <prvTimerTask+0x130>
     45a:	e9 ce       	rjmp	.-558    	; 0x22e <prvTimerTask+0x28>
     45c:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskSuspendAll>
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 5d 17 	call	0x2eba	; 0x2eba <prvSampleTimeNow>
     468:	6b 87       	std	Y+11, r22	; 0x0b
     46a:	7c 87       	std	Y+12, r23	; 0x0c
     46c:	8d 87       	std	Y+13, r24	; 0x0d
     46e:	9e 87       	std	Y+14, r25	; 0x0e
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	81 11       	cpse	r24, r1
     474:	5d cf       	rjmp	.-326    	; 0x330 <prvTimerTask+0x12a>
     476:	e0 91 e4 17 	lds	r30, 0x17E4	; 0x8017e4 <pxOverflowTimerList>
     47a:	f0 91 e5 17 	lds	r31, 0x17E5	; 0x8017e5 <pxOverflowTimerList+0x1>
     47e:	80 81       	ld	r24, Z
     480:	21 e0       	ldi	r18, 0x01	; 1
     482:	81 11       	cpse	r24, r1
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	28 2c       	mov	r2, r8
     488:	39 2c       	mov	r3, r9
     48a:	4a 2c       	mov	r4, r10
     48c:	5b 2c       	mov	r5, r11
     48e:	3a cf       	rjmp	.-396    	; 0x304 <prvTimerTask+0xfe>

00000490 <__ctors_end>:
     490:	11 24       	eor	r1, r1
     492:	1f be       	out	0x3f, r1	; 63
     494:	cf ef       	ldi	r28, 0xFF	; 255
     496:	d1 e2       	ldi	r29, 0x21	; 33
     498:	de bf       	out	0x3e, r29	; 62
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	0c bf       	out	0x3c, r16	; 60

000004a0 <__do_copy_data>:
     4a0:	17 e0       	ldi	r17, 0x07	; 7
     4a2:	a0 e0       	ldi	r26, 0x00	; 0
     4a4:	b2 e0       	ldi	r27, 0x02	; 2
     4a6:	ea e2       	ldi	r30, 0x2A	; 42
     4a8:	fa e5       	ldi	r31, 0x5A	; 90
     4aa:	00 e0       	ldi	r16, 0x00	; 0
     4ac:	0b bf       	out	0x3b, r16	; 59
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__do_copy_data+0x14>
     4b0:	07 90       	elpm	r0, Z+
     4b2:	0d 92       	st	X+, r0
     4b4:	aa 33       	cpi	r26, 0x3A	; 58
     4b6:	b1 07       	cpc	r27, r17
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__do_copy_data+0x10>

000004ba <__do_clear_bss>:
     4ba:	29 e1       	ldi	r18, 0x19	; 25
     4bc:	aa e3       	ldi	r26, 0x3A	; 58
     4be:	b7 e0       	ldi	r27, 0x07	; 7
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <.do_clear_bss_start>

000004c2 <.do_clear_bss_loop>:
     4c2:	1d 92       	st	X+, r1

000004c4 <.do_clear_bss_start>:
     4c4:	ac 37       	cpi	r26, 0x7C	; 124
     4c6:	b2 07       	cpc	r27, r18
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <.do_clear_bss_loop>
     4ca:	0e 94 b4 18 	call	0x3168	; 0x3168 <main>
     4ce:	0c 94 13 2d 	jmp	0x5a26	; 0x5a26 <_exit>

000004d2 <__bad_interrupt>:
     4d2:	96 cd       	rjmp	.-1236   	; 0x0 <__vectors>

000004d4 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lora_handler_task+0x6>
     4da:	1f 92       	push	r1
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     4e6:	62 e0       	ldi	r22, 0x02	; 2
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
	lora_driver_reset_rn2483(0);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     4f8:	66 e9       	ldi	r22, 0x96	; 150
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     504:	0e 94 ae 1c 	call	0x395c	; 0x395c <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 06 1b 	call	0x360c	; 0x360c <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     50e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_rn2483_factory_reset>
     512:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	8e e6       	ldi	r24, 0x6E	; 110
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     526:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <lora_driver_configure_to_eu868>
     52a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	81 e8       	ldi	r24, 0x81	; 129
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     53e:	80 e5       	ldi	r24, 0x50	; 80
     540:	97 e0       	ldi	r25, 0x07	; 7
     542:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     546:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     54a:	00 e5       	ldi	r16, 0x50	; 80
     54c:	17 e0       	ldi	r17, 0x07	; 7
     54e:	1f 93       	push	r17
     550:	0f 93       	push	r16
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	8a e9       	ldi	r24, 0x9A	; 154
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     562:	c8 01       	movw	r24, r16
     564:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_set_device_identifier>
     568:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	1f 93       	push	r17
     572:	0f 93       	push	r16
     574:	8e ea       	ldi	r24, 0xAE	; 174
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     580:	a8 01       	movw	r20, r16
     582:	63 ec       	ldi	r22, 0xC3	; 195
     584:	72 e0       	ldi	r23, 0x02	; 2
     586:	84 ee       	ldi	r24, 0xE4	; 228
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <lora_driver_set_otaa_identity>
     58e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	83 ec       	ldi	r24, 0xC3	; 195
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	9f 93       	push	r25
     5a0:	8f 93       	push	r24
     5a2:	84 ee       	ldi	r24, 0xE4	; 228
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	85 ef       	ldi	r24, 0xF5	; 245
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     5b6:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <lora_driver_save_mac>
     5ba:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	8b e2       	ldi	r24, 0x2B	; 43
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 67 1e 	call	0x3cce	; 0x3cce <lora_driver_set_adaptive_data_rate>
     5de:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	8a e3       	ldi	r24, 0x3A	; 58
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     5f2:	84 ef       	ldi	r24, 0xF4	; 244
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <lora_driver_set_receive_delay>
     5fa:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8f 93       	push	r24
     606:	84 ef       	ldi	r24, 0xF4	; 244
     608:	8f 93       	push	r24
     60a:	8b e5       	ldi	r24, 0x5B	; 91
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	0a e0       	ldi	r16, 0x0A	; 10
     622:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     624:	0f 2e       	mov	r0, r31
     626:	fb e7       	ldi	r31, 0x7B	; 123
     628:	ef 2e       	mov	r14, r31
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	ff 2e       	mov	r15, r31
     62e:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <lora_driver_join>
     636:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     638:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	1f 93       	push	r17
     642:	0f 93       	push	r16
     644:	ff 92       	push	r15
     646:	ef 92       	push	r14
     648:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>

		if ( rc != LoRa_ACCEPTED)
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	f8 e0       	ldi	r31, 0x08	; 8
     65a:	df 16       	cp	r13, r31
     65c:	d9 f1       	breq	.+118    	; 0x6d4 <lora_handler_task+0x200>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     664:	66 e3       	ldi	r22, 0x36	; 54
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
     670:	01 50       	subi	r16, 0x01	; 1
     672:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     674:	e9 f6       	brne	.-70     	; 0x630 <lora_handler_task+0x15c>
     676:	27 c0       	rjmp	.+78     	; 0x6c6 <lora_handler_task+0x1f2>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     678:	af d3       	rcall	.+1886   	; 0xdd8 <vPortYield>
     67a:	fe cf       	rjmp	.-4      	; 0x678 <lora_handler_task+0x1a4>
	 const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     67c:	4c e6       	ldi	r20, 0x6C	; 108
     67e:	52 e0       	ldi	r21, 0x02	; 2
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 b0 11 	call	0x2360	; 0x2360 <vTaskDelayUntil>
		int16_t noise = 4550; // Dummy CO2

		//uint16_t ppm;
		//mh_z19_return_code_t rc;
		
		_uplink_payload.bytes[0] = hum >> 8;
     68c:	f8 01       	movw	r30, r16
     68e:	c2 82       	std	Z+2, r12	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     690:	83 82       	std	Z+3, r8	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     692:	d4 82       	std	Z+4, r13	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     694:	95 82       	std	Z+5, r9	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     696:	c6 82       	std	Z+6, r12	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     698:	a7 82       	std	Z+7, r10	; 0x07
		_uplink_payload.bytes[6] = noise >> 8;
     69a:	d0 86       	std	Z+8, r13	; 0x08
		_uplink_payload.bytes[7] = noise & 0xFF;
     69c:	b1 86       	std	Z+9, r11	; 0x09

		led_short_puls(led_ST4);  // OPTIONAL
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	0e 94 84 1b 	call	0x3708	; 0x3708 <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     6a4:	b8 01       	movw	r22, r16
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <lora_driver_sent_upload_message>
     6ac:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <lora_driver_map_return_code_to_text>
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	ff 92       	push	r15
     6b6:	ef 92       	push	r14
     6b8:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	db cf       	rjmp	.-74     	; 0x67c <lora_handler_task+0x1a8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 2d 1b 	call	0x365a	; 0x365a <led_fast_blink>
     6d2:	d2 cf       	rjmp	.-92     	; 0x678 <lora_handler_task+0x1a4>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 8;
     6da:	ea e3       	ldi	r30, 0x3A	; 58
     6dc:	f7 e0       	ldi	r31, 0x07	; 7
     6de:	88 e0       	ldi	r24, 0x08	; 8
     6e0:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     6e6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <xTaskGetTickCount>
     6ea:	69 83       	std	Y+1, r22	; 0x01
     6ec:	7a 83       	std	Y+2, r23	; 0x02
     6ee:	8b 83       	std	Y+3, r24	; 0x03
     6f0:	9c 83       	std	Y+4, r25	; 0x04
		int16_t noise = 4550; // Dummy CO2

		//uint16_t ppm;
		//mh_z19_return_code_t rc;
		
		_uplink_payload.bytes[0] = hum >> 8;
     6f2:	0a e3       	ldi	r16, 0x3A	; 58
     6f4:	17 e0       	ldi	r17, 0x07	; 7
     6f6:	0f 2e       	mov	r0, r31
     6f8:	ff e0       	ldi	r31, 0x0F	; 15
     6fa:	cf 2e       	mov	r12, r31
     6fc:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
     6fe:	0f 2e       	mov	r0, r31
     700:	f0 ea       	ldi	r31, 0xA0	; 160
     702:	8f 2e       	mov	r8, r31
     704:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
     706:	0f 2e       	mov	r0, r31
     708:	f1 e1       	ldi	r31, 0x11	; 17
     70a:	df 2e       	mov	r13, r31
     70c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[3] = temp & 0xFF;
     70e:	0f 2e       	mov	r0, r31
     710:	f8 ef       	ldi	r31, 0xF8	; 248
     712:	9f 2e       	mov	r9, r31
     714:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     716:	0f 2e       	mov	r0, r31
     718:	f2 ed       	ldi	r31, 0xD2	; 210
     71a:	af 2e       	mov	r10, r31
     71c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[6] = noise >> 8;
		_uplink_payload.bytes[7] = noise & 0xFF;
     71e:	0f 2e       	mov	r0, r31
     720:	f6 ec       	ldi	r31, 0xC6	; 198
     722:	bf 2e       	mov	r11, r31
     724:	f0 2d       	mov	r31, r0

		led_short_puls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     726:	0f 2e       	mov	r0, r31
     728:	fb e9       	ldi	r31, 0x9B	; 155
     72a:	ef 2e       	mov	r14, r31
     72c:	f3 e0       	ldi	r31, 0x03	; 3
     72e:	ff 2e       	mov	r15, r31
     730:	f0 2d       	mov	r31, r0
     732:	a4 cf       	rjmp	.-184    	; 0x67c <lora_handler_task+0x1a8>

00000734 <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
	xTaskCreate(
     73a:	e1 2c       	mov	r14, r1
     73c:	f1 2c       	mov	r15, r1
     73e:	08 2f       	mov	r16, r24
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	48 e8       	ldi	r20, 0x88	; 136
     746:	51 e0       	ldi	r21, 0x01	; 1
     748:	60 eb       	ldi	r22, 0xB0	; 176
     74a:	73 e0       	ldi	r23, 0x03	; 3
     74c:	8a e6       	ldi	r24, 0x6A	; 106
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	08 95       	ret

0000075c <CO2Sensor>:
#include "mh_z19.h"

SemaphoreHandle_t xTestSemaphore;

void CO2Sensor(void *pvParameters){
	xTestSemaphore = pvParameters;
     75c:	90 93 5b 19 	sts	0x195B, r25	; 0x80195b <xTestSemaphore+0x1>
     760:	80 93 5a 19 	sts	0x195A, r24	; 0x80195a <xTestSemaphore>
	while(1){
		vTaskDelay(1000);
		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK)
		{
			printf("CO2 sensor: %d", r);
     764:	c7 eb       	ldi	r28, 0xB7	; 183
     766:	d3 e0       	ldi	r29, 0x03	; 3
SemaphoreHandle_t xTestSemaphore;

void CO2Sensor(void *pvParameters){
	xTestSemaphore = pvParameters;
	while(1){
		vTaskDelay(1000);
     768:	68 ee       	ldi	r22, 0xE8	; 232
     76a:	73 e0       	ldi	r23, 0x03	; 3
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
		int r = mh_z19_take_meassuring();
     774:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <mh_z19_take_meassuring>
		if(r != MHZ19_OK)
     778:	88 23       	and	r24, r24
     77a:	51 f0       	breq	.+20     	; 0x790 <CO2Sensor+0x34>
		{
			printf("CO2 sensor: %d", r);
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	df 93       	push	r29
     782:	cf 93       	push	r28
     784:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
		}
		vTaskDelay(9000);
     790:	68 e2       	ldi	r22, 0x28	; 40
     792:	73 e2       	ldi	r23, 0x23	; 35
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
	}
     79c:	e5 cf       	rjmp	.-54     	; 0x768 <CO2Sensor+0xc>

0000079e <my_co2_call_back>:
}

void my_co2_call_back(uint16_t ppm){
     79e:	0f 93       	push	r16
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	c8 2f       	mov	r28, r24
     7a6:	d9 2f       	mov	r29, r25
	xSemaphoreTake (xTestSemaphore, portMAX_DELAY);
     7a8:	4f ef       	ldi	r20, 0xFF	; 255
     7aa:	5f ef       	ldi	r21, 0xFF	; 255
     7ac:	ba 01       	movw	r22, r20
     7ae:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <xTestSemaphore>
     7b2:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <xTestSemaphore+0x1>
     7b6:	a7 d6       	rcall	.+3406   	; 0x1506 <xQueueSemaphoreTake>
	printf("CO2 measured: %u \n", ppm);
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	86 ec       	ldi	r24, 0xC6	; 198
     7be:	93 e0       	ldi	r25, 0x03	; 3
     7c0:	9f 93       	push	r25
     7c2:	8f 93       	push	r24
     7c4:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>
	xSemaphoreGive(xTestSemaphore);
     7c8:	00 e0       	ldi	r16, 0x00	; 0
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	a9 01       	movw	r20, r18
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <xTestSemaphore>
     7d8:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <xTestSemaphore+0x1>
     7dc:	07 d5       	rcall	.+2574   	; 0x11ec <xQueueGenericSend>
}
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <T_HSensor>:
#include <semphr.h>

SemaphoreHandle_t xTestSemaphore;

void T_HSensor(void *pvParameters){
	xTestSemaphore = pvParameters;
     7ee:	90 93 5b 19 	sts	0x195B, r25	; 0x80195b <xTestSemaphore+0x1>
     7f2:	80 93 5a 19 	sts	0x195A, r24	; 0x80195a <xTestSemaphore>

		}
		vTaskDelay(100);
		///////////////////semaphore:
		xSemaphoreTake(xTestSemaphore, portMAX_DELAY);
		printf("Hum: %d  Temp: %d\n", (int)hih8120GetHumidity(), (int)hih8120GetTemperature());
     7f6:	cc ef       	ldi	r28, 0xFC	; 252
     7f8:	d3 e0       	ldi	r29, 0x03	; 3

void T_HSensor(void *pvParameters){
	xTestSemaphore = pvParameters;
	while(1)
	{
		vTaskDelay(1000);
     7fa:	68 ee       	ldi	r22, 0xE8	; 232
     7fc:	73 e0       	ldi	r23, 0x03	; 3
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
		int r = hih8120Wakeup();
     806:	0e 94 8d 19 	call	0x331a	; 0x331a <hih8120Wakeup>
     80a:	90 e0       	ldi	r25, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     80c:	00 97       	sbiw	r24, 0x00	; 0
     80e:	31 f0       	breq	.+12     	; 0x81c <T_HSensor+0x2e>
     810:	03 97       	sbiw	r24, 0x03	; 3
     812:	21 f0       	breq	.+8      	; 0x81c <T_HSensor+0x2e>
			puts("temp-wake error:");
     814:	89 ed       	ldi	r24, 0xD9	; 217
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	0e 94 08 2a 	call	0x5410	; 0x5410 <puts>
		}
		vTaskDelay(100);
     81c:	64 e6       	ldi	r22, 0x64	; 100
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
		r = hih8120Meassure();
     828:	0e 94 a2 19 	call	0x3344	; 0x3344 <hih8120Meassure>
     82c:	90 e0       	ldi	r25, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	31 f0       	breq	.+12     	; 0x83e <T_HSensor+0x50>
     832:	03 97       	sbiw	r24, 0x03	; 3
     834:	21 f0       	breq	.+8      	; 0x83e <T_HSensor+0x50>
			puts("Temp-read error: ");
     836:	8a ee       	ldi	r24, 0xEA	; 234
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	0e 94 08 2a 	call	0x5410	; 0x5410 <puts>

		}
		vTaskDelay(100);
     83e:	64 e6       	ldi	r22, 0x64	; 100
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
		///////////////////semaphore:
		xSemaphoreTake(xTestSemaphore, portMAX_DELAY);
     84a:	4f ef       	ldi	r20, 0xFF	; 255
     84c:	5f ef       	ldi	r21, 0xFF	; 255
     84e:	ba 01       	movw	r22, r20
     850:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <xTestSemaphore>
     854:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <xTestSemaphore+0x1>
     858:	56 d6       	rcall	.+3244   	; 0x1506 <xQueueSemaphoreTake>
		printf("Hum: %d  Temp: %d\n", (int)hih8120GetHumidity(), (int)hih8120GetTemperature());
     85a:	0e 94 c8 19 	call	0x3390	; 0x3390 <hih8120GetTemperature>
     85e:	4b 01       	movw	r8, r22
     860:	5c 01       	movw	r10, r24
     862:	0e 94 b3 19 	call	0x3366	; 0x3366 <hih8120GetHumidity>
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
     86a:	c5 01       	movw	r24, r10
     86c:	b4 01       	movw	r22, r8
     86e:	0e 94 bc 18 	call	0x3178	; 0x3178 <__fixsfsi>
     872:	7f 93       	push	r23
     874:	6f 93       	push	r22
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	0e 94 bc 18 	call	0x3178	; 0x3178 <__fixsfsi>
     87e:	7f 93       	push	r23
     880:	6f 93       	push	r22
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	0e 94 f5 29 	call	0x53ea	; 0x53ea <printf>
		xSemaphoreGive(xTestSemaphore);
     88a:	00 e0       	ldi	r16, 0x00	; 0
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	a9 01       	movw	r20, r18
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <xTestSemaphore>
     89a:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <xTestSemaphore+0x1>
     89e:	a6 d4       	rcall	.+2380   	; 0x11ec <xQueueGenericSend>
	}
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	a6 cf       	rjmp	.-180    	; 0x7fa <T_HSensor+0xc>

000008ae <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     8ae:	e7 e0       	ldi	r30, 0x07	; 7
     8b0:	f1 e0       	ldi	r31, 0x01	; 1
     8b2:	80 81       	ld	r24, Z
     8b4:	8f 60       	ori	r24, 0x0F	; 15
     8b6:	80 83       	st	Z, r24
     8b8:	08 95       	ret

000008ba <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     8ba:	e8 e0       	ldi	r30, 0x08	; 8
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	90 81       	ld	r25, Z
     8c0:	90 7f       	andi	r25, 0xF0	; 240
     8c2:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     8c4:	90 81       	ld	r25, Z
     8c6:	8f 70       	andi	r24, 0x0F	; 15
     8c8:	98 2b       	or	r25, r24
     8ca:	90 83       	st	Z, r25
     8cc:	08 95       	ret

000008ce <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     8ce:	e8 e0       	ldi	r30, 0x08	; 8
     8d0:	f1 e0       	ldi	r31, 0x01	; 1
     8d2:	80 81       	ld	r24, Z
     8d4:	80 7f       	andi	r24, 0xF0	; 240
     8d6:	80 83       	st	Z, r24
     8d8:	08 95       	ret

000008da <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     8e0:	ec eb       	ldi	r30, 0xBC	; 188
     8e2:	f7 e0       	ldi	r31, 0x07	; 7
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <prvInsertBlockIntoFreeList+0xe>
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	31 81       	ldd	r19, Z+1	; 0x01
     8ec:	2a 17       	cp	r18, r26
     8ee:	3b 07       	cpc	r19, r27
     8f0:	d0 f3       	brcs	.-12     	; 0x8e6 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     8f2:	82 81       	ldd	r24, Z+2	; 0x02
     8f4:	93 81       	ldd	r25, Z+3	; 0x03
     8f6:	af 01       	movw	r20, r30
     8f8:	48 0f       	add	r20, r24
     8fa:	59 1f       	adc	r21, r25
     8fc:	a4 17       	cp	r26, r20
     8fe:	b5 07       	cpc	r27, r21
     900:	49 f4       	brne	.+18     	; 0x914 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     902:	12 96       	adiw	r26, 0x02	; 2
     904:	4d 91       	ld	r20, X+
     906:	5c 91       	ld	r21, X
     908:	13 97       	sbiw	r26, 0x03	; 3
     90a:	84 0f       	add	r24, r20
     90c:	95 1f       	adc	r25, r21
     90e:	93 83       	std	Z+3, r25	; 0x03
     910:	82 83       	std	Z+2, r24	; 0x02
     912:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     914:	12 96       	adiw	r26, 0x02	; 2
     916:	8d 91       	ld	r24, X+
     918:	9c 91       	ld	r25, X
     91a:	13 97       	sbiw	r26, 0x03	; 3
     91c:	ed 01       	movw	r28, r26
     91e:	c8 0f       	add	r28, r24
     920:	d9 1f       	adc	r29, r25
     922:	2c 17       	cp	r18, r28
     924:	3d 07       	cpc	r19, r29
     926:	d9 f4       	brne	.+54     	; 0x95e <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     928:	20 91 ba 07 	lds	r18, 0x07BA	; 0x8007ba <pxEnd>
     92c:	30 91 bb 07 	lds	r19, 0x07BB	; 0x8007bb <pxEnd+0x1>
     930:	c2 17       	cp	r28, r18
     932:	d3 07       	cpc	r29, r19
     934:	81 f0       	breq	.+32     	; 0x956 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     936:	2a 81       	ldd	r18, Y+2	; 0x02
     938:	3b 81       	ldd	r19, Y+3	; 0x03
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
     93e:	13 96       	adiw	r26, 0x03	; 3
     940:	9c 93       	st	X, r25
     942:	8e 93       	st	-X, r24
     944:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     946:	c0 81       	ld	r28, Z
     948:	d1 81       	ldd	r29, Z+1	; 0x01
     94a:	88 81       	ld	r24, Y
     94c:	99 81       	ldd	r25, Y+1	; 0x01
     94e:	11 96       	adiw	r26, 0x01	; 1
     950:	9c 93       	st	X, r25
     952:	8e 93       	st	-X, r24
     954:	07 c0       	rjmp	.+14     	; 0x964 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     956:	11 96       	adiw	r26, 0x01	; 1
     958:	dc 93       	st	X, r29
     95a:	ce 93       	st	-X, r28
     95c:	03 c0       	rjmp	.+6      	; 0x964 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     95e:	11 96       	adiw	r26, 0x01	; 1
     960:	3c 93       	st	X, r19
     962:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     964:	ae 17       	cp	r26, r30
     966:	bf 07       	cpc	r27, r31
     968:	11 f0       	breq	.+4      	; 0x96e <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     96a:	b1 83       	std	Z+1, r27	; 0x01
     96c:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     986:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     98a:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <pxEnd>
     98e:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <pxEnd+0x1>
     992:	89 2b       	or	r24, r25
     994:	41 f5       	brne	.+80     	; 0x9e6 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     996:	ec eb       	ldi	r30, 0xBC	; 188
     998:	f7 e0       	ldi	r31, 0x07	; 7
     99a:	a0 ec       	ldi	r26, 0xC0	; 192
     99c:	b7 e0       	ldi	r27, 0x07	; 7
     99e:	b1 83       	std	Z+1, r27	; 0x01
     9a0:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     9a2:	13 82       	std	Z+3, r1	; 0x03
     9a4:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     9a6:	ec e5       	ldi	r30, 0x5C	; 92
     9a8:	f7 e1       	ldi	r31, 0x17	; 23
     9aa:	f0 93 bb 07 	sts	0x07BB, r31	; 0x8007bb <pxEnd+0x1>
     9ae:	e0 93 ba 07 	sts	0x07BA, r30	; 0x8007ba <pxEnd>
	pxEnd->xBlockSize = 0;
     9b2:	13 82       	std	Z+3, r1	; 0x03
     9b4:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     9b6:	11 82       	std	Z+1, r1	; 0x01
     9b8:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     9ba:	8c e9       	ldi	r24, 0x9C	; 156
     9bc:	9f e0       	ldi	r25, 0x0F	; 15
     9be:	13 96       	adiw	r26, 0x03	; 3
     9c0:	9c 93       	st	X, r25
     9c2:	8e 93       	st	-X, r24
     9c4:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     9c6:	ed 93       	st	X+, r30
     9c8:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9ca:	90 93 b7 07 	sts	0x07B7, r25	; 0x8007b7 <xMinimumEverFreeBytesRemaining+0x1>
     9ce:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9d2:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <xFreeBytesRemaining+0x1>
     9d6:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e8       	ldi	r25, 0x80	; 128
     9de:	90 93 b5 07 	sts	0x07B5, r25	; 0x8007b5 <xBlockAllocatedBit+0x1>
     9e2:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9e6:	e0 90 b4 07 	lds	r14, 0x07B4	; 0x8007b4 <xBlockAllocatedBit>
     9ea:	f0 90 b5 07 	lds	r15, 0x07B5	; 0x8007b5 <xBlockAllocatedBit+0x1>
     9ee:	c7 01       	movw	r24, r14
     9f0:	8c 23       	and	r24, r28
     9f2:	9d 23       	and	r25, r29
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f0       	breq	.+2      	; 0x9fa <pvPortMalloc+0x86>
     9f8:	66 c0       	rjmp	.+204    	; 0xac6 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     9fa:	20 97       	sbiw	r28, 0x00	; 0
     9fc:	09 f4       	brne	.+2      	; 0xa00 <pvPortMalloc+0x8c>
     9fe:	66 c0       	rjmp	.+204    	; 0xacc <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     a00:	ae 01       	movw	r20, r28
     a02:	4c 5f       	subi	r20, 0xFC	; 252
     a04:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a06:	09 f4       	brne	.+2      	; 0xa0a <pvPortMalloc+0x96>
     a08:	5e c0       	rjmp	.+188    	; 0xac6 <pvPortMalloc+0x152>
     a0a:	00 91 b8 07 	lds	r16, 0x07B8	; 0x8007b8 <xFreeBytesRemaining>
     a0e:	10 91 b9 07 	lds	r17, 0x07B9	; 0x8007b9 <xFreeBytesRemaining+0x1>
     a12:	04 17       	cp	r16, r20
     a14:	15 07       	cpc	r17, r21
     a16:	08 f4       	brcc	.+2      	; 0xa1a <pvPortMalloc+0xa6>
     a18:	56 c0       	rjmp	.+172    	; 0xac6 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     a1a:	c0 91 bc 07 	lds	r28, 0x07BC	; 0x8007bc <xStart>
     a1e:	d0 91 bd 07 	lds	r29, 0x07BD	; 0x8007bd <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     a22:	ec eb       	ldi	r30, 0xBC	; 188
     a24:	f7 e0       	ldi	r31, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <pvPortMalloc+0xb8>
     a28:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     a2a:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a2c:	2a 81       	ldd	r18, Y+2	; 0x02
     a2e:	3b 81       	ldd	r19, Y+3	; 0x03
     a30:	24 17       	cp	r18, r20
     a32:	35 07       	cpc	r19, r21
     a34:	28 f4       	brcc	.+10     	; 0xa40 <pvPortMalloc+0xcc>
     a36:	28 81       	ld	r18, Y
     a38:	39 81       	ldd	r19, Y+1	; 0x01
     a3a:	21 15       	cp	r18, r1
     a3c:	31 05       	cpc	r19, r1
     a3e:	a1 f7       	brne	.-24     	; 0xa28 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     a40:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <pxEnd>
     a44:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <pxEnd+0x1>
     a48:	c8 17       	cp	r28, r24
     a4a:	d9 07       	cpc	r29, r25
     a4c:	e1 f1       	breq	.+120    	; 0xac6 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a4e:	c0 80       	ld	r12, Z
     a50:	d1 80       	ldd	r13, Z+1	; 0x01
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	c8 0e       	add	r12, r24
     a56:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a58:	88 81       	ld	r24, Y
     a5a:	99 81       	ldd	r25, Y+1	; 0x01
     a5c:	91 83       	std	Z+1, r25	; 0x01
     a5e:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a60:	2a 81       	ldd	r18, Y+2	; 0x02
     a62:	3b 81       	ldd	r19, Y+3	; 0x03
     a64:	24 1b       	sub	r18, r20
     a66:	35 0b       	sbc	r19, r21
     a68:	29 30       	cpi	r18, 0x09	; 9
     a6a:	31 05       	cpc	r19, r1
     a6c:	48 f0       	brcs	.+18     	; 0xa80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a6e:	ce 01       	movw	r24, r28
     a70:	84 0f       	add	r24, r20
     a72:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a74:	fc 01       	movw	r30, r24
     a76:	33 83       	std	Z+3, r19	; 0x03
     a78:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     a7a:	5b 83       	std	Y+3, r21	; 0x03
     a7c:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     a7e:	2d df       	rcall	.-422    	; 0x8da <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	9b 81       	ldd	r25, Y+3	; 0x03
     a84:	08 1b       	sub	r16, r24
     a86:	19 0b       	sbc	r17, r25
     a88:	10 93 b9 07 	sts	0x07B9, r17	; 0x8007b9 <xFreeBytesRemaining+0x1>
     a8c:	00 93 b8 07 	sts	0x07B8, r16	; 0x8007b8 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     a90:	20 91 b6 07 	lds	r18, 0x07B6	; 0x8007b6 <xMinimumEverFreeBytesRemaining>
     a94:	30 91 b7 07 	lds	r19, 0x07B7	; 0x8007b7 <xMinimumEverFreeBytesRemaining+0x1>
     a98:	02 17       	cp	r16, r18
     a9a:	13 07       	cpc	r17, r19
     a9c:	20 f4       	brcc	.+8      	; 0xaa6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     a9e:	10 93 b7 07 	sts	0x07B7, r17	; 0x8007b7 <xMinimumEverFreeBytesRemaining+0x1>
     aa2:	00 93 b6 07 	sts	0x07B6, r16	; 0x8007b6 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	fb 82       	std	Y+3, r15	; 0x03
     aac:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     aae:	19 82       	std	Y+1, r1	; 0x01
     ab0:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     ab2:	0e 94 34 11 	call	0x2268	; 0x2268 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     ab6:	c1 14       	cp	r12, r1
     ab8:	d1 04       	cpc	r13, r1
     aba:	59 f4       	brne	.+22     	; 0xad2 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     abc:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <vApplicationMallocFailedHook>
     ac0:	c1 2c       	mov	r12, r1
     ac2:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     ac4:	06 c0       	rjmp	.+12     	; 0xad2 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     ac6:	0e 94 34 11 	call	0x2268	; 0x2268 <xTaskResumeAll>
     aca:	f8 cf       	rjmp	.-16     	; 0xabc <pvPortMalloc+0x148>
     acc:	0e 94 34 11 	call	0x2268	; 0x2268 <xTaskResumeAll>
     ad0:	f5 cf       	rjmp	.-22     	; 0xabc <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     ad2:	c6 01       	movw	r24, r12
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	08 95       	ret

00000ae6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	51 f1       	breq	.+84     	; 0xb42 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     aee:	fc 01       	movw	r30, r24
     af0:	34 97       	sbiw	r30, 0x04	; 4
     af2:	22 81       	ldd	r18, Z+2	; 0x02
     af4:	33 81       	ldd	r19, Z+3	; 0x03
     af6:	40 91 b4 07 	lds	r20, 0x07B4	; 0x8007b4 <xBlockAllocatedBit>
     afa:	50 91 b5 07 	lds	r21, 0x07B5	; 0x8007b5 <xBlockAllocatedBit+0x1>
     afe:	b9 01       	movw	r22, r18
     b00:	64 23       	and	r22, r20
     b02:	75 23       	and	r23, r21
     b04:	67 2b       	or	r22, r23
     b06:	e9 f0       	breq	.+58     	; 0xb42 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     b08:	60 81       	ld	r22, Z
     b0a:	71 81       	ldd	r23, Z+1	; 0x01
     b0c:	67 2b       	or	r22, r23
     b0e:	c9 f4       	brne	.+50     	; 0xb42 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b10:	ef 01       	movw	r28, r30
     b12:	40 95       	com	r20
     b14:	50 95       	com	r21
     b16:	24 23       	and	r18, r20
     b18:	35 23       	and	r19, r21
     b1a:	33 83       	std	Z+3, r19	; 0x03
     b1c:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     b1e:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     b22:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <xFreeBytesRemaining>
     b26:	30 91 b9 07 	lds	r19, 0x07B9	; 0x8007b9 <xFreeBytesRemaining+0x1>
     b2a:	8a 81       	ldd	r24, Y+2	; 0x02
     b2c:	9b 81       	ldd	r25, Y+3	; 0x03
     b2e:	82 0f       	add	r24, r18
     b30:	93 1f       	adc	r25, r19
     b32:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <xFreeBytesRemaining+0x1>
     b36:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b3a:	ce 01       	movw	r24, r28
     b3c:	ce de       	rcall	.-612    	; 0x8da <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     b3e:	0e 94 34 11 	call	0x2268	; 0x2268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b48:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b4a:	03 96       	adiw	r24, 0x03	; 3
     b4c:	92 83       	std	Z+2, r25	; 0x02
     b4e:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     b50:	4f ef       	ldi	r20, 0xFF	; 255
     b52:	5f ef       	ldi	r21, 0xFF	; 255
     b54:	ba 01       	movw	r22, r20
     b56:	43 83       	std	Z+3, r20	; 0x03
     b58:	54 83       	std	Z+4, r21	; 0x04
     b5a:	65 83       	std	Z+5, r22	; 0x05
     b5c:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b5e:	90 87       	std	Z+8, r25	; 0x08
     b60:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b62:	92 87       	std	Z+10, r25	; 0x0a
     b64:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b66:	10 82       	st	Z, r1
     b68:	08 95       	ret

00000b6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     b6a:	fc 01       	movw	r30, r24
     b6c:	13 86       	std	Z+11, r1	; 0x0b
     b6e:	12 86       	std	Z+10, r1	; 0x0a
     b70:	08 95       	ret

00000b72 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	9c 01       	movw	r18, r24
     b78:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     b7a:	dc 01       	movw	r26, r24
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	cd 91       	ld	r28, X+
     b80:	dc 91       	ld	r29, X
     b82:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     b84:	d5 83       	std	Z+5, r29	; 0x05
     b86:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     b88:	8e 81       	ldd	r24, Y+6	; 0x06
     b8a:	9f 81       	ldd	r25, Y+7	; 0x07
     b8c:	97 83       	std	Z+7, r25	; 0x07
     b8e:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     b90:	8e 81       	ldd	r24, Y+6	; 0x06
     b92:	9f 81       	ldd	r25, Y+7	; 0x07
     b94:	dc 01       	movw	r26, r24
     b96:	15 96       	adiw	r26, 0x05	; 5
     b98:	7c 93       	st	X, r23
     b9a:	6e 93       	st	-X, r22
     b9c:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     b9e:	7f 83       	std	Y+7, r23	; 0x07
     ba0:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     ba2:	33 87       	std	Z+11, r19	; 0x0b
     ba4:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ba6:	f9 01       	movw	r30, r18
     ba8:	80 81       	ld	r24, Z
     baa:	8f 5f       	subi	r24, 0xFF	; 255
     bac:	80 83       	st	Z, r24
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bbe:	08 81       	ld	r16, Y
     bc0:	19 81       	ldd	r17, Y+1	; 0x01
     bc2:	2a 81       	ldd	r18, Y+2	; 0x02
     bc4:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bc6:	0f 3f       	cpi	r16, 0xFF	; 255
     bc8:	4f ef       	ldi	r20, 0xFF	; 255
     bca:	14 07       	cpc	r17, r20
     bcc:	24 07       	cpc	r18, r20
     bce:	34 07       	cpc	r19, r20
     bd0:	21 f4       	brne	.+8      	; 0xbda <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bd2:	fc 01       	movw	r30, r24
     bd4:	a1 85       	ldd	r26, Z+9	; 0x09
     bd6:	b2 85       	ldd	r27, Z+10	; 0x0a
     bd8:	11 c0       	rjmp	.+34     	; 0xbfc <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bda:	dc 01       	movw	r26, r24
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <vListInsert+0x2e>
     be0:	df 01       	movw	r26, r30
     be2:	14 96       	adiw	r26, 0x04	; 4
     be4:	ed 91       	ld	r30, X+
     be6:	fc 91       	ld	r31, X
     be8:	15 97       	sbiw	r26, 0x05	; 5
     bea:	40 81       	ld	r20, Z
     bec:	51 81       	ldd	r21, Z+1	; 0x01
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	04 17       	cp	r16, r20
     bf4:	15 07       	cpc	r17, r21
     bf6:	26 07       	cpc	r18, r22
     bf8:	37 07       	cpc	r19, r23
     bfa:	90 f7       	brcc	.-28     	; 0xbe0 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bfc:	14 96       	adiw	r26, 0x04	; 4
     bfe:	ed 91       	ld	r30, X+
     c00:	fc 91       	ld	r31, X
     c02:	15 97       	sbiw	r26, 0x05	; 5
     c04:	fd 83       	std	Y+5, r31	; 0x05
     c06:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c08:	d7 83       	std	Z+7, r29	; 0x07
     c0a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c0c:	bf 83       	std	Y+7, r27	; 0x07
     c0e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c10:	15 96       	adiw	r26, 0x05	; 5
     c12:	dc 93       	st	X, r29
     c14:	ce 93       	st	-X, r28
     c16:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     c18:	9b 87       	std	Y+11, r25	; 0x0b
     c1a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c1c:	fc 01       	movw	r30, r24
     c1e:	20 81       	ld	r18, Z
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	20 83       	st	Z, r18
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	08 95       	ret

00000c2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     c34:	a2 85       	ldd	r26, Z+10	; 0x0a
     c36:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c38:	c4 81       	ldd	r28, Z+4	; 0x04
     c3a:	d5 81       	ldd	r29, Z+5	; 0x05
     c3c:	86 81       	ldd	r24, Z+6	; 0x06
     c3e:	97 81       	ldd	r25, Z+7	; 0x07
     c40:	9f 83       	std	Y+7, r25	; 0x07
     c42:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c44:	c6 81       	ldd	r28, Z+6	; 0x06
     c46:	d7 81       	ldd	r29, Z+7	; 0x07
     c48:	84 81       	ldd	r24, Z+4	; 0x04
     c4a:	95 81       	ldd	r25, Z+5	; 0x05
     c4c:	9d 83       	std	Y+5, r25	; 0x05
     c4e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c50:	11 96       	adiw	r26, 0x01	; 1
     c52:	8d 91       	ld	r24, X+
     c54:	9c 91       	ld	r25, X
     c56:	12 97       	sbiw	r26, 0x02	; 2
     c58:	e8 17       	cp	r30, r24
     c5a:	f9 07       	cpc	r31, r25
     c5c:	31 f4       	brne	.+12     	; 0xc6a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c5e:	86 81       	ldd	r24, Z+6	; 0x06
     c60:	97 81       	ldd	r25, Z+7	; 0x07
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	9c 93       	st	X, r25
     c66:	8e 93       	st	-X, r24
     c68:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c6a:	13 86       	std	Z+11, r1	; 0x0b
     c6c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c6e:	8c 91       	ld	r24, X
     c70:	81 50       	subi	r24, 0x01	; 1
     c72:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c74:	8c 91       	ld	r24, X
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c7c:	31 e1       	ldi	r19, 0x11	; 17
     c7e:	fc 01       	movw	r30, r24
     c80:	30 83       	st	Z, r19
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	22 e2       	ldi	r18, 0x22	; 34
     c86:	20 83       	st	Z, r18
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	a3 e3       	ldi	r26, 0x33	; 51
     c8c:	a0 83       	st	Z, r26
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	60 83       	st	Z, r22
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	70 83       	st	Z, r23
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	10 82       	st	Z, r1
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	10 82       	st	Z, r1
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	60 e8       	ldi	r22, 0x80	; 128
     ca2:	60 83       	st	Z, r22
     ca4:	31 97       	sbiw	r30, 0x01	; 1
     ca6:	10 82       	st	Z, r1
     ca8:	31 97       	sbiw	r30, 0x01	; 1
     caa:	10 82       	st	Z, r1
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	10 82       	st	Z, r1
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	60 83       	st	Z, r22
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	63 e0       	ldi	r22, 0x03	; 3
     cba:	60 83       	st	Z, r22
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	64 e0       	ldi	r22, 0x04	; 4
     cc0:	60 83       	st	Z, r22
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	65 e0       	ldi	r22, 0x05	; 5
     cc6:	60 83       	st	Z, r22
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	66 e0       	ldi	r22, 0x06	; 6
     ccc:	60 83       	st	Z, r22
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	67 e0       	ldi	r22, 0x07	; 7
     cd2:	60 83       	st	Z, r22
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	68 e0       	ldi	r22, 0x08	; 8
     cd8:	60 83       	st	Z, r22
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	69 e0       	ldi	r22, 0x09	; 9
     cde:	60 83       	st	Z, r22
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	60 e1       	ldi	r22, 0x10	; 16
     ce4:	60 83       	st	Z, r22
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	30 83       	st	Z, r19
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	32 e1       	ldi	r19, 0x12	; 18
     cee:	30 83       	st	Z, r19
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	33 e1       	ldi	r19, 0x13	; 19
     cf4:	30 83       	st	Z, r19
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	34 e1       	ldi	r19, 0x14	; 20
     cfa:	30 83       	st	Z, r19
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	35 e1       	ldi	r19, 0x15	; 21
     d00:	30 83       	st	Z, r19
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	36 e1       	ldi	r19, 0x16	; 22
     d06:	30 83       	st	Z, r19
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	37 e1       	ldi	r19, 0x17	; 23
     d0c:	30 83       	st	Z, r19
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	38 e1       	ldi	r19, 0x18	; 24
     d12:	30 83       	st	Z, r19
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	39 e1       	ldi	r19, 0x19	; 25
     d18:	30 83       	st	Z, r19
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	30 e2       	ldi	r19, 0x20	; 32
     d1e:	30 83       	st	Z, r19
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	31 e2       	ldi	r19, 0x21	; 33
     d24:	30 83       	st	Z, r19
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	20 83       	st	Z, r18
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	23 e2       	ldi	r18, 0x23	; 35
     d2e:	20 83       	st	Z, r18
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	40 83       	st	Z, r20
     d34:	31 97       	sbiw	r30, 0x01	; 1
     d36:	50 83       	st	Z, r21
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	26 e2       	ldi	r18, 0x26	; 38
     d3c:	20 83       	st	Z, r18
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	27 e2       	ldi	r18, 0x27	; 39
     d42:	20 83       	st	Z, r18
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	28 e2       	ldi	r18, 0x28	; 40
     d48:	20 83       	st	Z, r18
     d4a:	31 97       	sbiw	r30, 0x01	; 1
     d4c:	29 e2       	ldi	r18, 0x29	; 41
     d4e:	20 83       	st	Z, r18
     d50:	31 97       	sbiw	r30, 0x01	; 1
     d52:	20 e3       	ldi	r18, 0x30	; 48
     d54:	20 83       	st	Z, r18
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	21 e3       	ldi	r18, 0x31	; 49
     d5a:	20 83       	st	Z, r18
     d5c:	89 97       	sbiw	r24, 0x29	; 41
     d5e:	08 95       	ret

00000d60 <xPortStartScheduler>:
     d60:	a8 95       	wdr
     d62:	90 ec       	ldi	r25, 0xC0	; 192
     d64:	88 e1       	ldi	r24, 0x18	; 24
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	a8 95       	wdr
     d6c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     d76:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
     d7a:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
     d7e:	cd 91       	ld	r28, X+
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	dd 91       	ld	r29, X+
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	ff 91       	pop	r31
     d88:	ef 91       	pop	r30
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	7f 90       	pop	r7
     db8:	6f 90       	pop	r6
     dba:	5f 90       	pop	r5
     dbc:	4f 90       	pop	r4
     dbe:	3f 90       	pop	r3
     dc0:	2f 90       	pop	r2
     dc2:	1f 90       	pop	r1
     dc4:	0f 90       	pop	r0
     dc6:	0c be       	out	0x3c, r0	; 60
     dc8:	0f 90       	pop	r0
     dca:	0b be       	out	0x3b, r0	; 59
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	08 95       	ret
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	08 95       	ret

00000dd8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	0f 92       	push	r0
     de0:	0b b6       	in	r0, 0x3b	; 59
     de2:	0f 92       	push	r0
     de4:	0c b6       	in	r0, 0x3c	; 60
     de6:	0f 92       	push	r0
     de8:	1f 92       	push	r1
     dea:	11 24       	eor	r1, r1
     dec:	2f 92       	push	r2
     dee:	3f 92       	push	r3
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
     e28:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
     e2c:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
     e30:	0d b6       	in	r0, 0x3d	; 61
     e32:	0d 92       	st	X+, r0
     e34:	0e b6       	in	r0, 0x3e	; 62
     e36:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     e38:	0e 94 36 12 	call	0x246c	; 0x246c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     e3c:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
     e40:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
     e44:	cd 91       	ld	r28, X+
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	dd 91       	ld	r29, X+
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	ff 91       	pop	r31
     e4e:	ef 91       	pop	r30
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	3f 90       	pop	r3
     e86:	2f 90       	pop	r2
     e88:	1f 90       	pop	r1
     e8a:	0f 90       	pop	r0
     e8c:	0c be       	out	0x3c, r0	; 60
     e8e:	0f 90       	pop	r0
     e90:	0b be       	out	0x3b, r0	; 59
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e98:	08 95       	ret

00000e9a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	0f 92       	push	r0
     ea2:	0b b6       	in	r0, 0x3b	; 59
     ea4:	0f 92       	push	r0
     ea6:	0c b6       	in	r0, 0x3c	; 60
     ea8:	0f 92       	push	r0
     eaa:	1f 92       	push	r1
     eac:	11 24       	eor	r1, r1
     eae:	2f 92       	push	r2
     eb0:	3f 92       	push	r3
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	6f 92       	push	r6
     eb8:	7f 92       	push	r7
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
     eee:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
     ef2:	0d b6       	in	r0, 0x3d	; 61
     ef4:	0d 92       	st	X+, r0
     ef6:	0e b6       	in	r0, 0x3e	; 62
     ef8:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     efa:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     efc:	0e 94 5f 10 	call	0x20be	; 0x20be <xTaskIncrementTick>
     f00:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f02:	0e 94 36 12 	call	0x246c	; 0x246c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     f06:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
     f0a:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
     f0e:	cd 91       	ld	r28, X+
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	dd 91       	ld	r29, X+
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	9f 90       	pop	r9
     f44:	8f 90       	pop	r8
     f46:	7f 90       	pop	r7
     f48:	6f 90       	pop	r6
     f4a:	5f 90       	pop	r5
     f4c:	4f 90       	pop	r4
     f4e:	3f 90       	pop	r3
     f50:	2f 90       	pop	r2
     f52:	1f 90       	pop	r1
     f54:	0f 90       	pop	r0
     f56:	0c be       	out	0x3c, r0	; 60
     f58:	0f 90       	pop	r0
     f5a:	0b be       	out	0x3b, r0	; 59
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f62:	08 95       	ret

00000f64 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f64:	9a df       	rcall	.-204    	; 0xe9a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f66:	18 95       	reti

00000f68 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	0f 92       	push	r0
     f6e:	fc 01       	movw	r30, r24
     f70:	96 8d       	ldd	r25, Z+30	; 0x1e
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	91 11       	cpse	r25, r1
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret

00000f7e <prvCopyDataToQueue>:
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ec 01       	movw	r28, r24
     f88:	04 2f       	mov	r16, r20
     f8a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f8c:	48 a1       	ldd	r20, Y+32	; 0x20
     f8e:	41 11       	cpse	r20, r1
     f90:	0c c0       	rjmp	.+24     	; 0xfaa <prvCopyDataToQueue+0x2c>
     f92:	88 81       	ld	r24, Y
     f94:	99 81       	ldd	r25, Y+1	; 0x01
     f96:	89 2b       	or	r24, r25
     f98:	09 f0       	breq	.+2      	; 0xf9c <prvCopyDataToQueue+0x1e>
     f9a:	42 c0       	rjmp	.+132    	; 0x1020 <prvCopyDataToQueue+0xa2>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	0e 94 2f 14 	call	0x285e	; 0x285e <xTaskPriorityDisinherit>
     fa4:	1d 82       	std	Y+5, r1	; 0x05
     fa6:	1c 82       	std	Y+4, r1	; 0x04
     fa8:	42 c0       	rjmp	.+132    	; 0x102e <prvCopyDataToQueue+0xb0>
     faa:	01 11       	cpse	r16, r1
     fac:	17 c0       	rjmp	.+46     	; 0xfdc <prvCopyDataToQueue+0x5e>
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	0e 94 96 29 	call	0x532c	; 0x532c <memcpy>
     fb8:	28 a1       	ldd	r18, Y+32	; 0x20
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	82 0f       	add	r24, r18
     fc0:	91 1d       	adc	r25, r1
     fc2:	9b 83       	std	Y+3, r25	; 0x03
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	82 17       	cp	r24, r18
     fcc:	93 07       	cpc	r25, r19
     fce:	50 f1       	brcs	.+84     	; 0x1024 <prvCopyDataToQueue+0xa6>
     fd0:	88 81       	ld	r24, Y
     fd2:	99 81       	ldd	r25, Y+1	; 0x01
     fd4:	9b 83       	std	Y+3, r25	; 0x03
     fd6:	8a 83       	std	Y+2, r24	; 0x02
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	29 c0       	rjmp	.+82     	; 0x102e <prvCopyDataToQueue+0xb0>
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	9f 81       	ldd	r25, Y+7	; 0x07
     fe2:	0e 94 96 29 	call	0x532c	; 0x532c <memcpy>
     fe6:	88 a1       	ldd	r24, Y+32	; 0x20
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	91 95       	neg	r25
     fec:	81 95       	neg	r24
     fee:	91 09       	sbc	r25, r1
     ff0:	2e 81       	ldd	r18, Y+6	; 0x06
     ff2:	3f 81       	ldd	r19, Y+7	; 0x07
     ff4:	28 0f       	add	r18, r24
     ff6:	39 1f       	adc	r19, r25
     ff8:	3f 83       	std	Y+7, r19	; 0x07
     ffa:	2e 83       	std	Y+6, r18	; 0x06
     ffc:	48 81       	ld	r20, Y
     ffe:	59 81       	ldd	r21, Y+1	; 0x01
    1000:	24 17       	cp	r18, r20
    1002:	35 07       	cpc	r19, r21
    1004:	30 f4       	brcc	.+12     	; 0x1012 <prvCopyDataToQueue+0x94>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	9f 83       	std	Y+7, r25	; 0x07
    1010:	8e 83       	std	Y+6, r24	; 0x06
    1012:	02 30       	cpi	r16, 0x02	; 2
    1014:	49 f4       	brne	.+18     	; 0x1028 <prvCopyDataToQueue+0xaa>
    1016:	11 23       	and	r17, r17
    1018:	49 f0       	breq	.+18     	; 0x102c <prvCopyDataToQueue+0xae>
    101a:	11 50       	subi	r17, 0x01	; 1
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	07 c0       	rjmp	.+14     	; 0x102e <prvCopyDataToQueue+0xb0>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	05 c0       	rjmp	.+10     	; 0x102e <prvCopyDataToQueue+0xb0>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	03 c0       	rjmp	.+6      	; 0x102e <prvCopyDataToQueue+0xb0>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	01 c0       	rjmp	.+2      	; 0x102e <prvCopyDataToQueue+0xb0>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	1f 5f       	subi	r17, 0xFF	; 255
    1030:	1e 8f       	std	Y+30, r17	; 0x1e
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	08 95       	ret

0000103c <prvCopyDataFromQueue>:
    103c:	fc 01       	movw	r30, r24
    103e:	40 a1       	ldd	r20, Z+32	; 0x20
    1040:	44 23       	and	r20, r20
    1042:	a9 f0       	breq	.+42     	; 0x106e <prvCopyDataFromQueue+0x32>
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	26 81       	ldd	r18, Z+6	; 0x06
    1048:	37 81       	ldd	r19, Z+7	; 0x07
    104a:	24 0f       	add	r18, r20
    104c:	35 1f       	adc	r19, r21
    104e:	37 83       	std	Z+7, r19	; 0x07
    1050:	26 83       	std	Z+6, r18	; 0x06
    1052:	84 81       	ldd	r24, Z+4	; 0x04
    1054:	95 81       	ldd	r25, Z+5	; 0x05
    1056:	28 17       	cp	r18, r24
    1058:	39 07       	cpc	r19, r25
    105a:	20 f0       	brcs	.+8      	; 0x1064 <prvCopyDataFromQueue+0x28>
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	97 83       	std	Z+7, r25	; 0x07
    1062:	86 83       	std	Z+6, r24	; 0x06
    1064:	cb 01       	movw	r24, r22
    1066:	66 81       	ldd	r22, Z+6	; 0x06
    1068:	77 81       	ldd	r23, Z+7	; 0x07
    106a:	0c 94 96 29 	jmp	0x532c	; 0x532c <memcpy>
    106e:	08 95       	ret

00001070 <prvUnlockQueue>:
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	8c 01       	movw	r16, r24
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	0f 92       	push	r0
    1082:	fc 01       	movw	r30, r24
    1084:	c2 a1       	ldd	r28, Z+34	; 0x22
    1086:	1c 16       	cp	r1, r28
    1088:	ac f4       	brge	.+42     	; 0x10b4 <prvUnlockQueue+0x44>
    108a:	83 89       	ldd	r24, Z+19	; 0x13
    108c:	81 11       	cpse	r24, r1
    108e:	06 c0       	rjmp	.+12     	; 0x109c <prvUnlockQueue+0x2c>
    1090:	11 c0       	rjmp	.+34     	; 0x10b4 <prvUnlockQueue+0x44>
    1092:	f8 01       	movw	r30, r16
    1094:	83 89       	ldd	r24, Z+19	; 0x13
    1096:	81 11       	cpse	r24, r1
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <prvUnlockQueue+0x34>
    109a:	0c c0       	rjmp	.+24     	; 0x10b4 <prvUnlockQueue+0x44>
    109c:	78 01       	movw	r14, r16
    109e:	f3 e1       	ldi	r31, 0x13	; 19
    10a0:	ef 0e       	add	r14, r31
    10a2:	f1 1c       	adc	r15, r1
    10a4:	c7 01       	movw	r24, r14
    10a6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <xTaskRemoveFromEventList>
    10aa:	81 11       	cpse	r24, r1
    10ac:	0e 94 aa 13 	call	0x2754	; 0x2754 <vTaskMissedYield>
    10b0:	c1 50       	subi	r28, 0x01	; 1
    10b2:	79 f7       	brne	.-34     	; 0x1092 <prvUnlockQueue+0x22>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	f8 01       	movw	r30, r16
    10b8:	82 a3       	std	Z+34, r24	; 0x22
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	0f 92       	push	r0
    10c4:	c1 a1       	ldd	r28, Z+33	; 0x21
    10c6:	1c 16       	cp	r1, r28
    10c8:	ac f4       	brge	.+42     	; 0x10f4 <prvUnlockQueue+0x84>
    10ca:	80 85       	ldd	r24, Z+8	; 0x08
    10cc:	81 11       	cpse	r24, r1
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <prvUnlockQueue+0x6c>
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <prvUnlockQueue+0x84>
    10d2:	f8 01       	movw	r30, r16
    10d4:	80 85       	ldd	r24, Z+8	; 0x08
    10d6:	81 11       	cpse	r24, r1
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <prvUnlockQueue+0x74>
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <prvUnlockQueue+0x84>
    10dc:	78 01       	movw	r14, r16
    10de:	f8 e0       	ldi	r31, 0x08	; 8
    10e0:	ef 0e       	add	r14, r31
    10e2:	f1 1c       	adc	r15, r1
    10e4:	c7 01       	movw	r24, r14
    10e6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <xTaskRemoveFromEventList>
    10ea:	81 11       	cpse	r24, r1
    10ec:	0e 94 aa 13 	call	0x2754	; 0x2754 <vTaskMissedYield>
    10f0:	c1 50       	subi	r28, 0x01	; 1
    10f2:	79 f7       	brne	.-34     	; 0x10d2 <prvUnlockQueue+0x62>
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	f8 01       	movw	r30, r16
    10f8:	81 a3       	std	Z+33, r24	; 0x21
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	08 95       	ret

0000110a <xQueueGenericReset>:
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	ec 01       	movw	r28, r24
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	0f 92       	push	r0
    1116:	e8 81       	ld	r30, Y
    1118:	f9 81       	ldd	r31, Y+1	; 0x01
    111a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111c:	28 a1       	ldd	r18, Y+32	; 0x20
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	82 9f       	mul	r24, r18
    1124:	a0 01       	movw	r20, r0
    1126:	83 9f       	mul	r24, r19
    1128:	50 0d       	add	r21, r0
    112a:	92 9f       	mul	r25, r18
    112c:	50 0d       	add	r21, r0
    112e:	11 24       	eor	r1, r1
    1130:	4e 0f       	add	r20, r30
    1132:	5f 1f       	adc	r21, r31
    1134:	5d 83       	std	Y+5, r21	; 0x05
    1136:	4c 83       	std	Y+4, r20	; 0x04
    1138:	1e 8e       	std	Y+30, r1	; 0x1e
    113a:	fb 83       	std	Y+3, r31	; 0x03
    113c:	ea 83       	std	Y+2, r30	; 0x02
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	82 9f       	mul	r24, r18
    1142:	a0 01       	movw	r20, r0
    1144:	83 9f       	mul	r24, r19
    1146:	50 0d       	add	r21, r0
    1148:	92 9f       	mul	r25, r18
    114a:	50 0d       	add	r21, r0
    114c:	11 24       	eor	r1, r1
    114e:	cf 01       	movw	r24, r30
    1150:	84 0f       	add	r24, r20
    1152:	95 1f       	adc	r25, r21
    1154:	9f 83       	std	Y+7, r25	; 0x07
    1156:	8e 83       	std	Y+6, r24	; 0x06
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	89 a3       	std	Y+33, r24	; 0x21
    115c:	8a a3       	std	Y+34, r24	; 0x22
    115e:	61 11       	cpse	r22, r1
    1160:	0b c0       	rjmp	.+22     	; 0x1178 <xQueueGenericReset+0x6e>
    1162:	88 85       	ldd	r24, Y+8	; 0x08
    1164:	88 23       	and	r24, r24
    1166:	71 f0       	breq	.+28     	; 0x1184 <xQueueGenericReset+0x7a>
    1168:	ce 01       	movw	r24, r28
    116a:	08 96       	adiw	r24, 0x08	; 8
    116c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <xTaskRemoveFromEventList>
    1170:	88 23       	and	r24, r24
    1172:	41 f0       	breq	.+16     	; 0x1184 <xQueueGenericReset+0x7a>
    1174:	31 de       	rcall	.-926    	; 0xdd8 <vPortYield>
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <xQueueGenericReset+0x7a>
    1178:	ce 01       	movw	r24, r28
    117a:	08 96       	adiw	r24, 0x08	; 8
    117c:	e5 dc       	rcall	.-1590   	; 0xb48 <vListInitialise>
    117e:	ce 01       	movw	r24, r28
    1180:	43 96       	adiw	r24, 0x13	; 19
    1182:	e2 dc       	rcall	.-1596   	; 0xb48 <vListInitialise>
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <xQueueGenericCreate>:
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	08 2f       	mov	r16, r24
    119c:	16 2f       	mov	r17, r22
    119e:	f4 2e       	mov	r15, r20
    11a0:	66 23       	and	r22, r22
    11a2:	b9 f0       	breq	.+46     	; 0x11d2 <xQueueGenericCreate+0x42>
    11a4:	86 9f       	mul	r24, r22
    11a6:	c0 01       	movw	r24, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	85 96       	adiw	r24, 0x25	; 37
    11ac:	e3 db       	rcall	.-2106   	; 0x974 <pvPortMalloc>
    11ae:	ec 01       	movw	r28, r24
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	41 f4       	brne	.+16     	; 0x11c4 <xQueueGenericCreate+0x34>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <xQueueGenericCreate+0x4e>
    11b6:	0f 8f       	std	Y+31, r16	; 0x1f
    11b8:	18 a3       	std	Y+32, r17	; 0x20
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	ce 01       	movw	r24, r28
    11be:	a5 df       	rcall	.-182    	; 0x110a <xQueueGenericReset>
    11c0:	fc a2       	std	Y+36, r15	; 0x24
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <xQueueGenericCreate+0x4e>
    11c4:	85 96       	adiw	r24, 0x25	; 37
    11c6:	99 83       	std	Y+1, r25	; 0x01
    11c8:	88 83       	st	Y, r24
    11ca:	f5 cf       	rjmp	.-22     	; 0x11b6 <xQueueGenericCreate+0x26>
    11cc:	d9 83       	std	Y+1, r29	; 0x01
    11ce:	c8 83       	st	Y, r28
    11d0:	f2 cf       	rjmp	.-28     	; 0x11b6 <xQueueGenericCreate+0x26>
    11d2:	85 e2       	ldi	r24, 0x25	; 37
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	ce db       	rcall	.-2148   	; 0x974 <pvPortMalloc>
    11d8:	ec 01       	movw	r28, r24
    11da:	89 2b       	or	r24, r25
    11dc:	b9 f7       	brne	.-18     	; 0x11cc <xQueueGenericCreate+0x3c>
    11de:	ce 01       	movw	r24, r28
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	08 95       	ret

000011ec <xQueueGenericSend>:
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	29 97       	sbiw	r28, 0x09	; 9
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	7c 01       	movw	r14, r24
    1214:	5b 01       	movw	r10, r22
    1216:	2e 83       	std	Y+6, r18	; 0x06
    1218:	3f 83       	std	Y+7, r19	; 0x07
    121a:	48 87       	std	Y+8, r20	; 0x08
    121c:	59 87       	std	Y+9, r21	; 0x09
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	99 24       	eor	r9, r9
    1222:	93 94       	inc	r9
    1224:	6c 01       	movw	r12, r24
    1226:	88 e0       	ldi	r24, 0x08	; 8
    1228:	c8 0e       	add	r12, r24
    122a:	d1 1c       	adc	r13, r1
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	0f 92       	push	r0
    1232:	f7 01       	movw	r30, r14
    1234:	96 8d       	ldd	r25, Z+30	; 0x1e
    1236:	87 8d       	ldd	r24, Z+31	; 0x1f
    1238:	98 17       	cp	r25, r24
    123a:	10 f0       	brcs	.+4      	; 0x1240 <xQueueGenericSend+0x54>
    123c:	02 30       	cpi	r16, 0x02	; 2
    123e:	b1 f4       	brne	.+44     	; 0x126c <xQueueGenericSend+0x80>
    1240:	40 2f       	mov	r20, r16
    1242:	b5 01       	movw	r22, r10
    1244:	c7 01       	movw	r24, r14
    1246:	9b de       	rcall	.-714    	; 0xf7e <prvCopyDataToQueue>
    1248:	f7 01       	movw	r30, r14
    124a:	93 89       	ldd	r25, Z+19	; 0x13
    124c:	99 23       	and	r25, r25
    124e:	41 f0       	breq	.+16     	; 0x1260 <xQueueGenericSend+0x74>
    1250:	c7 01       	movw	r24, r14
    1252:	43 96       	adiw	r24, 0x13	; 19
    1254:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <xTaskRemoveFromEventList>
    1258:	88 23       	and	r24, r24
    125a:	21 f0       	breq	.+8      	; 0x1264 <xQueueGenericSend+0x78>
    125c:	bd dd       	rcall	.-1158   	; 0xdd8 <vPortYield>
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <xQueueGenericSend+0x78>
    1260:	81 11       	cpse	r24, r1
    1262:	ba dd       	rcall	.-1164   	; 0xdd8 <vPortYield>
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	4e c0       	rjmp	.+156    	; 0x1308 <xQueueGenericSend+0x11c>
    126c:	8e 81       	ldd	r24, Y+6	; 0x06
    126e:	9f 81       	ldd	r25, Y+7	; 0x07
    1270:	a8 85       	ldd	r26, Y+8	; 0x08
    1272:	b9 85       	ldd	r27, Y+9	; 0x09
    1274:	89 2b       	or	r24, r25
    1276:	8a 2b       	or	r24, r26
    1278:	8b 2b       	or	r24, r27
    127a:	21 f4       	brne	.+8      	; 0x1284 <xQueueGenericSend+0x98>
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	42 c0       	rjmp	.+132    	; 0x1308 <xQueueGenericSend+0x11c>
    1284:	11 11       	cpse	r17, r1
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <xQueueGenericSend+0xa6>
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	0e 94 44 13 	call	0x2688	; 0x2688 <vTaskInternalSetTimeOutState>
    1290:	19 2d       	mov	r17, r9
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	ff d6       	rcall	.+3582   	; 0x2096 <vTaskSuspendAll>
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	0f 92       	push	r0
    129e:	f7 01       	movw	r30, r14
    12a0:	81 a1       	ldd	r24, Z+33	; 0x21
    12a2:	8f 3f       	cpi	r24, 0xFF	; 255
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <xQueueGenericSend+0xbc>
    12a6:	11 a2       	std	Z+33, r1	; 0x21
    12a8:	f7 01       	movw	r30, r14
    12aa:	82 a1       	ldd	r24, Z+34	; 0x22
    12ac:	8f 3f       	cpi	r24, 0xFF	; 255
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <xQueueGenericSend+0xc6>
    12b0:	12 a2       	std	Z+34, r1	; 0x22
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	be 01       	movw	r22, r28
    12b8:	6a 5f       	subi	r22, 0xFA	; 250
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	ce 01       	movw	r24, r28
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	0e 94 55 13 	call	0x26aa	; 0x26aa <xTaskCheckForTimeOut>
    12c4:	81 11       	cpse	r24, r1
    12c6:	1c c0       	rjmp	.+56     	; 0x1300 <xQueueGenericSend+0x114>
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	0f 92       	push	r0
    12ce:	f7 01       	movw	r30, r14
    12d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    12d2:	87 8d       	ldd	r24, Z+31	; 0x1f
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	98 13       	cpse	r25, r24
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <xQueueGenericSend+0x10c>
    12dc:	4e 81       	ldd	r20, Y+6	; 0x06
    12de:	5f 81       	ldd	r21, Y+7	; 0x07
    12e0:	68 85       	ldd	r22, Y+8	; 0x08
    12e2:	79 85       	ldd	r23, Y+9	; 0x09
    12e4:	c6 01       	movw	r24, r12
    12e6:	0e 94 b5 12 	call	0x256a	; 0x256a <vTaskPlaceOnEventList>
    12ea:	c7 01       	movw	r24, r14
    12ec:	c1 de       	rcall	.-638    	; 0x1070 <prvUnlockQueue>
    12ee:	bc d7       	rcall	.+3960   	; 0x2268 <xTaskResumeAll>
    12f0:	81 11       	cpse	r24, r1
    12f2:	9c cf       	rjmp	.-200    	; 0x122c <xQueueGenericSend+0x40>
    12f4:	71 dd       	rcall	.-1310   	; 0xdd8 <vPortYield>
    12f6:	9a cf       	rjmp	.-204    	; 0x122c <xQueueGenericSend+0x40>
    12f8:	c7 01       	movw	r24, r14
    12fa:	ba de       	rcall	.-652    	; 0x1070 <prvUnlockQueue>
    12fc:	b5 d7       	rcall	.+3946   	; 0x2268 <xTaskResumeAll>
    12fe:	96 cf       	rjmp	.-212    	; 0x122c <xQueueGenericSend+0x40>
    1300:	c7 01       	movw	r24, r14
    1302:	b6 de       	rcall	.-660    	; 0x1070 <prvUnlockQueue>
    1304:	b1 d7       	rcall	.+3938   	; 0x2268 <xTaskResumeAll>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	29 96       	adiw	r28, 0x09	; 9
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	9f 90       	pop	r9
    132a:	08 95       	ret

0000132c <xQueueCreateMutex>:
    132c:	0f 93       	push	r16
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	48 2f       	mov	r20, r24
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	2b df       	rcall	.-426    	; 0x1190 <xQueueGenericCreate>
    133a:	ec 01       	movw	r28, r24
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	61 f0       	breq	.+24     	; 0x1358 <xQueueCreateMutex+0x2c>
    1340:	1d 82       	std	Y+5, r1	; 0x05
    1342:	1c 82       	std	Y+4, r1	; 0x04
    1344:	19 82       	std	Y+1, r1	; 0x01
    1346:	18 82       	st	Y, r1
    1348:	1e 82       	std	Y+6, r1	; 0x06
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	4a df       	rcall	.-364    	; 0x11ec <xQueueGenericSend>
    1358:	ce 01       	movw	r24, r28
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <xQueueGenericSendFromISR>:
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	8a 01       	movw	r16, r20
    1370:	fc 01       	movw	r30, r24
    1372:	56 8d       	ldd	r21, Z+30	; 0x1e
    1374:	37 8d       	ldd	r19, Z+31	; 0x1f
    1376:	53 17       	cp	r21, r19
    1378:	10 f0       	brcs	.+4      	; 0x137e <xQueueGenericSendFromISR+0x1c>
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	e9 f4       	brne	.+58     	; 0x13b8 <xQueueGenericSendFromISR+0x56>
    137e:	42 2f       	mov	r20, r18
    1380:	78 01       	movw	r14, r16
    1382:	ec 01       	movw	r28, r24
    1384:	1a a1       	ldd	r17, Y+34	; 0x22
    1386:	fb dd       	rcall	.-1034   	; 0xf7e <prvCopyDataToQueue>
    1388:	1f 3f       	cpi	r17, 0xFF	; 255
    138a:	81 f4       	brne	.+32     	; 0x13ac <xQueueGenericSendFromISR+0x4a>
    138c:	8b 89       	ldd	r24, Y+19	; 0x13
    138e:	88 23       	and	r24, r24
    1390:	a9 f0       	breq	.+42     	; 0x13bc <xQueueGenericSendFromISR+0x5a>
    1392:	ce 01       	movw	r24, r28
    1394:	43 96       	adiw	r24, 0x13	; 19
    1396:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <xTaskRemoveFromEventList>
    139a:	88 23       	and	r24, r24
    139c:	89 f0       	breq	.+34     	; 0x13c0 <xQueueGenericSendFromISR+0x5e>
    139e:	e1 14       	cp	r14, r1
    13a0:	f1 04       	cpc	r15, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <xQueueGenericSendFromISR+0x62>
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	f7 01       	movw	r30, r14
    13a8:	80 83       	st	Z, r24
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <xQueueGenericSendFromISR+0x64>
    13ac:	ff 24       	eor	r15, r15
    13ae:	f3 94       	inc	r15
    13b0:	f1 0e       	add	r15, r17
    13b2:	fa a2       	std	Y+34, r15	; 0x22
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	07 c0       	rjmp	.+14     	; 0x13c6 <xQueueGenericSendFromISR+0x64>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <xQueueGenericSendFromISR+0x64>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <xQueueGenericSendFromISR+0x64>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <xQueueGenericSendFromISR+0x64>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	08 95       	ret

000013d4 <xQueueReceive>:
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	29 97       	sbiw	r28, 0x09	; 9
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	8c 01       	movw	r16, r24
    13fc:	5b 01       	movw	r10, r22
    13fe:	2e 83       	std	Y+6, r18	; 0x06
    1400:	3f 83       	std	Y+7, r19	; 0x07
    1402:	48 87       	std	Y+8, r20	; 0x08
    1404:	59 87       	std	Y+9, r21	; 0x09
    1406:	e1 2c       	mov	r14, r1
    1408:	99 24       	eor	r9, r9
    140a:	93 94       	inc	r9
    140c:	6c 01       	movw	r12, r24
    140e:	83 e1       	ldi	r24, 0x13	; 19
    1410:	c8 0e       	add	r12, r24
    1412:	d1 1c       	adc	r13, r1
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	0f 92       	push	r0
    141a:	f8 01       	movw	r30, r16
    141c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    141e:	ff 20       	and	r15, r15
    1420:	99 f0       	breq	.+38     	; 0x1448 <xQueueReceive+0x74>
    1422:	b5 01       	movw	r22, r10
    1424:	c8 01       	movw	r24, r16
    1426:	0a de       	rcall	.-1004   	; 0x103c <prvCopyDataFromQueue>
    1428:	fa 94       	dec	r15
    142a:	f8 01       	movw	r30, r16
    142c:	f6 8e       	std	Z+30, r15	; 0x1e
    142e:	80 85       	ldd	r24, Z+8	; 0x08
    1430:	88 23       	and	r24, r24
    1432:	31 f0       	breq	.+12     	; 0x1440 <xQueueReceive+0x6c>
    1434:	c8 01       	movw	r24, r16
    1436:	08 96       	adiw	r24, 0x08	; 8
    1438:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <xTaskRemoveFromEventList>
    143c:	81 11       	cpse	r24, r1
    143e:	cc dc       	rcall	.-1640   	; 0xdd8 <vPortYield>
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	4d c0       	rjmp	.+154    	; 0x14e2 <xQueueReceive+0x10e>
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	a8 85       	ldd	r26, Y+8	; 0x08
    144e:	b9 85       	ldd	r27, Y+9	; 0x09
    1450:	89 2b       	or	r24, r25
    1452:	8a 2b       	or	r24, r26
    1454:	8b 2b       	or	r24, r27
    1456:	21 f4       	brne	.+8      	; 0x1460 <xQueueReceive+0x8c>
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	41 c0       	rjmp	.+130    	; 0x14e2 <xQueueReceive+0x10e>
    1460:	e1 10       	cpse	r14, r1
    1462:	05 c0       	rjmp	.+10     	; 0x146e <xQueueReceive+0x9a>
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	0e 94 44 13 	call	0x2688	; 0x2688 <vTaskInternalSetTimeOutState>
    146c:	e9 2c       	mov	r14, r9
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	11 d6       	rcall	.+3106   	; 0x2096 <vTaskSuspendAll>
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	0f 92       	push	r0
    147a:	f8 01       	movw	r30, r16
    147c:	81 a1       	ldd	r24, Z+33	; 0x21
    147e:	8f 3f       	cpi	r24, 0xFF	; 255
    1480:	09 f4       	brne	.+2      	; 0x1484 <xQueueReceive+0xb0>
    1482:	11 a2       	std	Z+33, r1	; 0x21
    1484:	f8 01       	movw	r30, r16
    1486:	82 a1       	ldd	r24, Z+34	; 0x22
    1488:	8f 3f       	cpi	r24, 0xFF	; 255
    148a:	09 f4       	brne	.+2      	; 0x148e <xQueueReceive+0xba>
    148c:	12 a2       	std	Z+34, r1	; 0x22
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	be 01       	movw	r22, r28
    1494:	6a 5f       	subi	r22, 0xFA	; 250
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	0e 94 55 13 	call	0x26aa	; 0x26aa <xTaskCheckForTimeOut>
    14a0:	81 11       	cpse	r24, r1
    14a2:	16 c0       	rjmp	.+44     	; 0x14d0 <xQueueReceive+0xfc>
    14a4:	c8 01       	movw	r24, r16
    14a6:	60 dd       	rcall	.-1344   	; 0xf68 <prvIsQueueEmpty>
    14a8:	88 23       	and	r24, r24
    14aa:	71 f0       	breq	.+28     	; 0x14c8 <xQueueReceive+0xf4>
    14ac:	4e 81       	ldd	r20, Y+6	; 0x06
    14ae:	5f 81       	ldd	r21, Y+7	; 0x07
    14b0:	68 85       	ldd	r22, Y+8	; 0x08
    14b2:	79 85       	ldd	r23, Y+9	; 0x09
    14b4:	c6 01       	movw	r24, r12
    14b6:	0e 94 b5 12 	call	0x256a	; 0x256a <vTaskPlaceOnEventList>
    14ba:	c8 01       	movw	r24, r16
    14bc:	d9 dd       	rcall	.-1102   	; 0x1070 <prvUnlockQueue>
    14be:	d4 d6       	rcall	.+3496   	; 0x2268 <xTaskResumeAll>
    14c0:	81 11       	cpse	r24, r1
    14c2:	a8 cf       	rjmp	.-176    	; 0x1414 <xQueueReceive+0x40>
    14c4:	89 dc       	rcall	.-1774   	; 0xdd8 <vPortYield>
    14c6:	a6 cf       	rjmp	.-180    	; 0x1414 <xQueueReceive+0x40>
    14c8:	c8 01       	movw	r24, r16
    14ca:	d2 dd       	rcall	.-1116   	; 0x1070 <prvUnlockQueue>
    14cc:	cd d6       	rcall	.+3482   	; 0x2268 <xTaskResumeAll>
    14ce:	a2 cf       	rjmp	.-188    	; 0x1414 <xQueueReceive+0x40>
    14d0:	c8 01       	movw	r24, r16
    14d2:	ce dd       	rcall	.-1124   	; 0x1070 <prvUnlockQueue>
    14d4:	c9 d6       	rcall	.+3474   	; 0x2268 <xTaskResumeAll>
    14d6:	c8 01       	movw	r24, r16
    14d8:	47 dd       	rcall	.-1394   	; 0xf68 <prvIsQueueEmpty>
    14da:	88 23       	and	r24, r24
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <xQueueReceive+0x10c>
    14de:	9a cf       	rjmp	.-204    	; 0x1414 <xQueueReceive+0x40>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	29 96       	adiw	r28, 0x09	; 9
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	08 95       	ret

00001506 <xQueueSemaphoreTake>:
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	29 97       	sbiw	r28, 0x09	; 9
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	8c 01       	movw	r16, r24
    152a:	4e 83       	std	Y+6, r20	; 0x06
    152c:	5f 83       	std	Y+7, r21	; 0x07
    152e:	68 87       	std	Y+8, r22	; 0x08
    1530:	79 87       	std	Y+9, r23	; 0x09
    1532:	b1 2c       	mov	r11, r1
    1534:	d1 2c       	mov	r13, r1
    1536:	cc 24       	eor	r12, r12
    1538:	c3 94       	inc	r12
    153a:	7c 01       	movw	r14, r24
    153c:	83 e1       	ldi	r24, 0x13	; 19
    153e:	e8 0e       	add	r14, r24
    1540:	f1 1c       	adc	r15, r1
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	0f 92       	push	r0
    1548:	d8 01       	movw	r26, r16
    154a:	5e 96       	adiw	r26, 0x1e	; 30
    154c:	8c 91       	ld	r24, X
    154e:	5e 97       	sbiw	r26, 0x1e	; 30
    1550:	88 23       	and	r24, r24
    1552:	e1 f0       	breq	.+56     	; 0x158c <xQueueSemaphoreTake+0x86>
    1554:	81 50       	subi	r24, 0x01	; 1
    1556:	5e 96       	adiw	r26, 0x1e	; 30
    1558:	8c 93       	st	X, r24
    155a:	5e 97       	sbiw	r26, 0x1e	; 30
    155c:	8d 91       	ld	r24, X+
    155e:	9c 91       	ld	r25, X
    1560:	89 2b       	or	r24, r25
    1562:	29 f4       	brne	.+10     	; 0x156e <xQueueSemaphoreTake+0x68>
    1564:	0e 94 bb 14 	call	0x2976	; 0x2976 <pvTaskIncrementMutexHeldCount>
    1568:	f8 01       	movw	r30, r16
    156a:	95 83       	std	Z+5, r25	; 0x05
    156c:	84 83       	std	Z+4, r24	; 0x04
    156e:	d8 01       	movw	r26, r16
    1570:	18 96       	adiw	r26, 0x08	; 8
    1572:	8c 91       	ld	r24, X
    1574:	88 23       	and	r24, r24
    1576:	31 f0       	breq	.+12     	; 0x1584 <xQueueSemaphoreTake+0x7e>
    1578:	c8 01       	movw	r24, r16
    157a:	08 96       	adiw	r24, 0x08	; 8
    157c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <xTaskRemoveFromEventList>
    1580:	81 11       	cpse	r24, r1
    1582:	2a dc       	rcall	.-1964   	; 0xdd8 <vPortYield>
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	7a c0       	rjmp	.+244    	; 0x1680 <xQueueSemaphoreTake+0x17a>
    158c:	8e 81       	ldd	r24, Y+6	; 0x06
    158e:	9f 81       	ldd	r25, Y+7	; 0x07
    1590:	a8 85       	ldd	r26, Y+8	; 0x08
    1592:	b9 85       	ldd	r27, Y+9	; 0x09
    1594:	89 2b       	or	r24, r25
    1596:	8a 2b       	or	r24, r26
    1598:	8b 2b       	or	r24, r27
    159a:	21 f4       	brne	.+8      	; 0x15a4 <xQueueSemaphoreTake+0x9e>
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	6e c0       	rjmp	.+220    	; 0x1680 <xQueueSemaphoreTake+0x17a>
    15a4:	d1 10       	cpse	r13, r1
    15a6:	05 c0       	rjmp	.+10     	; 0x15b2 <xQueueSemaphoreTake+0xac>
    15a8:	ce 01       	movw	r24, r28
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	0e 94 44 13 	call	0x2688	; 0x2688 <vTaskInternalSetTimeOutState>
    15b0:	dc 2c       	mov	r13, r12
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	6f d5       	rcall	.+2782   	; 0x2096 <vTaskSuspendAll>
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	0f 92       	push	r0
    15be:	f8 01       	movw	r30, r16
    15c0:	81 a1       	ldd	r24, Z+33	; 0x21
    15c2:	8f 3f       	cpi	r24, 0xFF	; 255
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <xQueueSemaphoreTake+0xc2>
    15c6:	11 a2       	std	Z+33, r1	; 0x21
    15c8:	d8 01       	movw	r26, r16
    15ca:	92 96       	adiw	r26, 0x22	; 34
    15cc:	8c 91       	ld	r24, X
    15ce:	92 97       	sbiw	r26, 0x22	; 34
    15d0:	8f 3f       	cpi	r24, 0xFF	; 255
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <xQueueSemaphoreTake+0xd2>
    15d4:	92 96       	adiw	r26, 0x22	; 34
    15d6:	1c 92       	st	X, r1
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	be 01       	movw	r22, r28
    15de:	6a 5f       	subi	r22, 0xFA	; 250
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	ce 01       	movw	r24, r28
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	0e 94 55 13 	call	0x26aa	; 0x26aa <xTaskCheckForTimeOut>
    15ea:	81 11       	cpse	r24, r1
    15ec:	24 c0       	rjmp	.+72     	; 0x1636 <xQueueSemaphoreTake+0x130>
    15ee:	c8 01       	movw	r24, r16
    15f0:	bb dc       	rcall	.-1674   	; 0xf68 <prvIsQueueEmpty>
    15f2:	88 23       	and	r24, r24
    15f4:	e1 f0       	breq	.+56     	; 0x162e <xQueueSemaphoreTake+0x128>
    15f6:	f8 01       	movw	r30, r16
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	89 2b       	or	r24, r25
    15fe:	51 f4       	brne	.+20     	; 0x1614 <xQueueSemaphoreTake+0x10e>
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	0f 92       	push	r0
    1606:	84 81       	ldd	r24, Z+4	; 0x04
    1608:	95 81       	ldd	r25, Z+5	; 0x05
    160a:	0e 94 c1 13 	call	0x2782	; 0x2782 <xTaskPriorityInherit>
    160e:	b8 2e       	mov	r11, r24
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	4e 81       	ldd	r20, Y+6	; 0x06
    1616:	5f 81       	ldd	r21, Y+7	; 0x07
    1618:	68 85       	ldd	r22, Y+8	; 0x08
    161a:	79 85       	ldd	r23, Y+9	; 0x09
    161c:	c7 01       	movw	r24, r14
    161e:	a5 d7       	rcall	.+3914   	; 0x256a <vTaskPlaceOnEventList>
    1620:	c8 01       	movw	r24, r16
    1622:	26 dd       	rcall	.-1460   	; 0x1070 <prvUnlockQueue>
    1624:	21 d6       	rcall	.+3138   	; 0x2268 <xTaskResumeAll>
    1626:	81 11       	cpse	r24, r1
    1628:	8c cf       	rjmp	.-232    	; 0x1542 <xQueueSemaphoreTake+0x3c>
    162a:	d6 db       	rcall	.-2132   	; 0xdd8 <vPortYield>
    162c:	8a cf       	rjmp	.-236    	; 0x1542 <xQueueSemaphoreTake+0x3c>
    162e:	c8 01       	movw	r24, r16
    1630:	1f dd       	rcall	.-1474   	; 0x1070 <prvUnlockQueue>
    1632:	1a d6       	rcall	.+3124   	; 0x2268 <xTaskResumeAll>
    1634:	86 cf       	rjmp	.-244    	; 0x1542 <xQueueSemaphoreTake+0x3c>
    1636:	c8 01       	movw	r24, r16
    1638:	1b dd       	rcall	.-1482   	; 0x1070 <prvUnlockQueue>
    163a:	16 d6       	rcall	.+3116   	; 0x2268 <xTaskResumeAll>
    163c:	c8 01       	movw	r24, r16
    163e:	94 dc       	rcall	.-1752   	; 0xf68 <prvIsQueueEmpty>
    1640:	88 23       	and	r24, r24
    1642:	09 f4       	brne	.+2      	; 0x1646 <xQueueSemaphoreTake+0x140>
    1644:	7e cf       	rjmp	.-260    	; 0x1542 <xQueueSemaphoreTake+0x3c>
    1646:	bb 20       	and	r11, r11
    1648:	d1 f0       	breq	.+52     	; 0x167e <xQueueSemaphoreTake+0x178>
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	0f 92       	push	r0
    1650:	f8 01       	movw	r30, r16
    1652:	83 89       	ldd	r24, Z+19	; 0x13
    1654:	88 23       	and	r24, r24
    1656:	39 f0       	breq	.+14     	; 0x1666 <xQueueSemaphoreTake+0x160>
    1658:	02 8c       	ldd	r0, Z+26	; 0x1a
    165a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    165c:	e0 2d       	mov	r30, r0
    165e:	80 81       	ld	r24, Z
    1660:	64 e0       	ldi	r22, 0x04	; 4
    1662:	68 1b       	sub	r22, r24
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <xQueueSemaphoreTake+0x162>
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	d8 01       	movw	r26, r16
    166a:	14 96       	adiw	r26, 0x04	; 4
    166c:	8d 91       	ld	r24, X+
    166e:	9c 91       	ld	r25, X
    1670:	15 97       	sbiw	r26, 0x05	; 5
    1672:	0e 94 6f 14 	call	0x28de	; 0x28de <vTaskPriorityDisinheritAfterTimeout>
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	01 c0       	rjmp	.+2      	; 0x1680 <xQueueSemaphoreTake+0x17a>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	29 96       	adiw	r28, 0x09	; 9
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	bf 90       	pop	r11
    169e:	08 95       	ret

000016a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	0f 92       	push	r0
    16ac:	89 a1       	ldd	r24, Y+33	; 0x21
    16ae:	8f 3f       	cpi	r24, 0xFF	; 255
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <vQueueWaitForMessageRestricted+0x14>
    16b2:	19 a2       	std	Y+33, r1	; 0x21
    16b4:	8a a1       	ldd	r24, Y+34	; 0x22
    16b6:	8f 3f       	cpi	r24, 0xFF	; 255
    16b8:	09 f4       	brne	.+2      	; 0x16bc <vQueueWaitForMessageRestricted+0x1c>
    16ba:	1a a2       	std	Y+34, r1	; 0x22
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16c2:	81 11       	cpse	r24, r1
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16c6:	ce 01       	movw	r24, r28
    16c8:	43 96       	adiw	r24, 0x13	; 19
    16ca:	66 d7       	rcall	.+3788   	; 0x2598 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    16cc:	ce 01       	movw	r24, r28
    16ce:	d0 dc       	rcall	.-1632   	; 0x1070 <prvUnlockQueue>
    }
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    16d6:	fc 01       	movw	r30, r24
    16d8:	44 81       	ldd	r20, Z+4	; 0x04
    16da:	55 81       	ldd	r21, Z+5	; 0x05
    16dc:	22 81       	ldd	r18, Z+2	; 0x02
    16de:	33 81       	ldd	r19, Z+3	; 0x03
    16e0:	24 0f       	add	r18, r20
    16e2:	35 1f       	adc	r19, r21
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	b9 01       	movw	r22, r18
    16ea:	68 1b       	sub	r22, r24
    16ec:	79 0b       	sbc	r23, r25
    16ee:	cb 01       	movw	r24, r22
    16f0:	64 17       	cp	r22, r20
    16f2:	75 07       	cpc	r23, r21
    16f4:	10 f0       	brcs	.+4      	; 0x16fa <prvBytesInBuffer+0x24>
    16f6:	84 1b       	sub	r24, r20
    16f8:	95 0b       	sbc	r25, r21
    16fa:	08 95       	ret

000016fc <prvWriteBytesToBuffer>:
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	cf 92       	push	r12
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	6c 01       	movw	r12, r24
    1712:	5b 01       	movw	r10, r22
    1714:	7a 01       	movw	r14, r20
    1716:	fc 01       	movw	r30, r24
    1718:	c2 81       	ldd	r28, Z+2	; 0x02
    171a:	d3 81       	ldd	r29, Z+3	; 0x03
    171c:	04 81       	ldd	r16, Z+4	; 0x04
    171e:	15 81       	ldd	r17, Z+5	; 0x05
    1720:	0c 1b       	sub	r16, r28
    1722:	1d 0b       	sbc	r17, r29
    1724:	40 17       	cp	r20, r16
    1726:	51 07       	cpc	r21, r17
    1728:	08 f4       	brcc	.+2      	; 0x172c <prvWriteBytesToBuffer+0x30>
    172a:	8a 01       	movw	r16, r20
    172c:	f6 01       	movw	r30, r12
    172e:	84 85       	ldd	r24, Z+12	; 0x0c
    1730:	95 85       	ldd	r25, Z+13	; 0x0d
    1732:	a8 01       	movw	r20, r16
    1734:	b5 01       	movw	r22, r10
    1736:	8c 0f       	add	r24, r28
    1738:	9d 1f       	adc	r25, r29
    173a:	0e 94 96 29 	call	0x532c	; 0x532c <memcpy>
    173e:	0e 15       	cp	r16, r14
    1740:	1f 05       	cpc	r17, r15
    1742:	58 f4       	brcc	.+22     	; 0x175a <prvWriteBytesToBuffer+0x5e>
    1744:	a7 01       	movw	r20, r14
    1746:	40 1b       	sub	r20, r16
    1748:	51 0b       	sbc	r21, r17
    174a:	b5 01       	movw	r22, r10
    174c:	60 0f       	add	r22, r16
    174e:	71 1f       	adc	r23, r17
    1750:	f6 01       	movw	r30, r12
    1752:	84 85       	ldd	r24, Z+12	; 0x0c
    1754:	95 85       	ldd	r25, Z+13	; 0x0d
    1756:	0e 94 96 29 	call	0x532c	; 0x532c <memcpy>
    175a:	ce 01       	movw	r24, r28
    175c:	8e 0d       	add	r24, r14
    175e:	9f 1d       	adc	r25, r15
    1760:	f6 01       	movw	r30, r12
    1762:	24 81       	ldd	r18, Z+4	; 0x04
    1764:	35 81       	ldd	r19, Z+5	; 0x05
    1766:	82 17       	cp	r24, r18
    1768:	93 07       	cpc	r25, r19
    176a:	10 f0       	brcs	.+4      	; 0x1770 <prvWriteBytesToBuffer+0x74>
    176c:	82 1b       	sub	r24, r18
    176e:	93 0b       	sbc	r25, r19
    1770:	f6 01       	movw	r30, r12
    1772:	93 83       	std	Z+3, r25	; 0x03
    1774:	82 83       	std	Z+2, r24	; 0x02
    1776:	c7 01       	movw	r24, r14
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	bf 90       	pop	r11
    178a:	af 90       	pop	r10
    178c:	08 95       	ret

0000178e <prvWriteMessageToBuffer>:
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	1f 92       	push	r1
    17a0:	1f 92       	push	r1
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	5a 83       	std	Y+2, r21	; 0x02
    17a8:	49 83       	std	Y+1, r20	; 0x01
    17aa:	21 15       	cp	r18, r1
    17ac:	31 05       	cpc	r19, r1
    17ae:	c9 f0       	breq	.+50     	; 0x17e2 <prvWriteMessageToBuffer+0x54>
    17b0:	6b 01       	movw	r12, r22
    17b2:	7c 01       	movw	r14, r24
    17b4:	fc 01       	movw	r30, r24
    17b6:	86 85       	ldd	r24, Z+14	; 0x0e
    17b8:	80 fd       	sbrc	r24, 0
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <prvWriteMessageToBuffer+0x3e>
    17bc:	ca 01       	movw	r24, r20
    17be:	24 17       	cp	r18, r20
    17c0:	35 07       	cpc	r19, r21
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <prvWriteMessageToBuffer+0x38>
    17c4:	c9 01       	movw	r24, r18
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	11 c0       	rjmp	.+34     	; 0x17ee <prvWriteMessageToBuffer+0x60>
    17cc:	20 17       	cp	r18, r16
    17ce:	31 07       	cpc	r19, r17
    17d0:	58 f0       	brcs	.+22     	; 0x17e8 <prvWriteMessageToBuffer+0x5a>
    17d2:	42 e0       	ldi	r20, 0x02	; 2
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	be 01       	movw	r22, r28
    17d8:	6f 5f       	subi	r22, 0xFF	; 255
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	c7 01       	movw	r24, r14
    17de:	8e df       	rcall	.-228    	; 0x16fc <prvWriteBytesToBuffer>
    17e0:	06 c0       	rjmp	.+12     	; 0x17ee <prvWriteMessageToBuffer+0x60>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <prvWriteMessageToBuffer+0x6a>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	05 c0       	rjmp	.+10     	; 0x17f8 <prvWriteMessageToBuffer+0x6a>
    17ee:	49 81       	ldd	r20, Y+1	; 0x01
    17f0:	5a 81       	ldd	r21, Y+2	; 0x02
    17f2:	b6 01       	movw	r22, r12
    17f4:	c7 01       	movw	r24, r14
    17f6:	82 df       	rcall	.-252    	; 0x16fc <prvWriteBytesToBuffer>
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	08 95       	ret

0000180e <prvReadBytesFromBuffer>:
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	7c 01       	movw	r14, r24
    1824:	5b 01       	movw	r10, r22
    1826:	e9 01       	movw	r28, r18
    1828:	42 17       	cp	r20, r18
    182a:	53 07       	cpc	r21, r19
    182c:	08 f4       	brcc	.+2      	; 0x1830 <prvReadBytesFromBuffer+0x22>
    182e:	ea 01       	movw	r28, r20
    1830:	20 97       	sbiw	r28, 0x00	; 0
    1832:	79 f1       	breq	.+94     	; 0x1892 <prvReadBytesFromBuffer+0x84>
    1834:	f7 01       	movw	r30, r14
    1836:	00 81       	ld	r16, Z
    1838:	11 81       	ldd	r17, Z+1	; 0x01
    183a:	c4 80       	ldd	r12, Z+4	; 0x04
    183c:	d5 80       	ldd	r13, Z+5	; 0x05
    183e:	c0 1a       	sub	r12, r16
    1840:	d1 0a       	sbc	r13, r17
    1842:	cc 15       	cp	r28, r12
    1844:	dd 05       	cpc	r29, r13
    1846:	08 f4       	brcc	.+2      	; 0x184a <prvReadBytesFromBuffer+0x3c>
    1848:	6e 01       	movw	r12, r28
    184a:	f7 01       	movw	r30, r14
    184c:	64 85       	ldd	r22, Z+12	; 0x0c
    184e:	75 85       	ldd	r23, Z+13	; 0x0d
    1850:	60 0f       	add	r22, r16
    1852:	71 1f       	adc	r23, r17
    1854:	a6 01       	movw	r20, r12
    1856:	c5 01       	movw	r24, r10
    1858:	0e 94 96 29 	call	0x532c	; 0x532c <memcpy>
    185c:	cc 16       	cp	r12, r28
    185e:	dd 06       	cpc	r13, r29
    1860:	58 f4       	brcc	.+22     	; 0x1878 <prvReadBytesFromBuffer+0x6a>
    1862:	ae 01       	movw	r20, r28
    1864:	4c 19       	sub	r20, r12
    1866:	5d 09       	sbc	r21, r13
    1868:	f7 01       	movw	r30, r14
    186a:	64 85       	ldd	r22, Z+12	; 0x0c
    186c:	75 85       	ldd	r23, Z+13	; 0x0d
    186e:	c5 01       	movw	r24, r10
    1870:	8c 0d       	add	r24, r12
    1872:	9d 1d       	adc	r25, r13
    1874:	0e 94 96 29 	call	0x532c	; 0x532c <memcpy>
    1878:	0c 0f       	add	r16, r28
    187a:	1d 1f       	adc	r17, r29
    187c:	f7 01       	movw	r30, r14
    187e:	84 81       	ldd	r24, Z+4	; 0x04
    1880:	95 81       	ldd	r25, Z+5	; 0x05
    1882:	08 17       	cp	r16, r24
    1884:	19 07       	cpc	r17, r25
    1886:	10 f0       	brcs	.+4      	; 0x188c <prvReadBytesFromBuffer+0x7e>
    1888:	08 1b       	sub	r16, r24
    188a:	19 0b       	sbc	r17, r25
    188c:	f7 01       	movw	r30, r14
    188e:	11 83       	std	Z+1, r17	; 0x01
    1890:	00 83       	st	Z, r16
    1892:	ce 01       	movw	r24, r28
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	bf 90       	pop	r11
    18a6:	af 90       	pop	r10
    18a8:	08 95       	ret

000018aa <xStreamBufferGenericCreate>:
    18aa:	ef 92       	push	r14
    18ac:	ff 92       	push	r15
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	eb 01       	movw	r28, r22
    18b6:	11 e0       	ldi	r17, 0x01	; 1
    18b8:	41 30       	cpi	r20, 0x01	; 1
    18ba:	09 f0       	breq	.+2      	; 0x18be <xStreamBufferGenericCreate+0x14>
    18bc:	10 e0       	ldi	r17, 0x00	; 0
    18be:	20 97       	sbiw	r28, 0x00	; 0
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <xStreamBufferGenericCreate+0x1c>
    18c2:	c1 e0       	ldi	r28, 0x01	; 1
    18c4:	d0 e0       	ldi	r29, 0x00	; 0
    18c6:	7c 01       	movw	r14, r24
    18c8:	2f ef       	ldi	r18, 0xFF	; 255
    18ca:	e2 1a       	sub	r14, r18
    18cc:	f2 0a       	sbc	r15, r18
    18ce:	41 96       	adiw	r24, 0x11	; 17
    18d0:	51 d8       	rcall	.-3934   	; 0x974 <pvPortMalloc>
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <xStreamBufferGenericCreate+0x4c>
    18d6:	20 e1       	ldi	r18, 0x10	; 16
    18d8:	fc 01       	movw	r30, r24
    18da:	11 92       	st	Z+, r1
    18dc:	2a 95       	dec	r18
    18de:	e9 f7       	brne	.-6      	; 0x18da <xStreamBufferGenericCreate+0x30>
    18e0:	9c 01       	movw	r18, r24
    18e2:	20 5f       	subi	r18, 0xF0	; 240
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	fc 01       	movw	r30, r24
    18e8:	35 87       	std	Z+13, r19	; 0x0d
    18ea:	24 87       	std	Z+12, r18	; 0x0c
    18ec:	f5 82       	std	Z+5, r15	; 0x05
    18ee:	e4 82       	std	Z+4, r14	; 0x04
    18f0:	d7 83       	std	Z+7, r29	; 0x07
    18f2:	c6 83       	std	Z+6, r28	; 0x06
    18f4:	16 87       	std	Z+14, r17	; 0x0e
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	08 95       	ret

00001902 <xStreamBufferReset>:
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	fc 01       	movw	r30, r24
    1908:	27 85       	ldd	r18, Z+15	; 0x0f
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	0f 92       	push	r0
    1910:	80 85       	ldd	r24, Z+8	; 0x08
    1912:	91 85       	ldd	r25, Z+9	; 0x09
    1914:	89 2b       	or	r24, r25
    1916:	d1 f4       	brne	.+52     	; 0x194c <xStreamBufferReset+0x4a>
    1918:	82 85       	ldd	r24, Z+10	; 0x0a
    191a:	93 85       	ldd	r25, Z+11	; 0x0b
    191c:	89 2b       	or	r24, r25
    191e:	c1 f4       	brne	.+48     	; 0x1950 <xStreamBufferReset+0x4e>
    1920:	86 85       	ldd	r24, Z+14	; 0x0e
    1922:	46 81       	ldd	r20, Z+6	; 0x06
    1924:	57 81       	ldd	r21, Z+7	; 0x07
    1926:	64 81       	ldd	r22, Z+4	; 0x04
    1928:	75 81       	ldd	r23, Z+5	; 0x05
    192a:	a4 85       	ldd	r26, Z+12	; 0x0c
    192c:	b5 85       	ldd	r27, Z+13	; 0x0d
    192e:	90 e1       	ldi	r25, 0x10	; 16
    1930:	ef 01       	movw	r28, r30
    1932:	19 92       	st	Y+, r1
    1934:	9a 95       	dec	r25
    1936:	e9 f7       	brne	.-6      	; 0x1932 <xStreamBufferReset+0x30>
    1938:	b5 87       	std	Z+13, r27	; 0x0d
    193a:	a4 87       	std	Z+12, r26	; 0x0c
    193c:	75 83       	std	Z+5, r23	; 0x05
    193e:	64 83       	std	Z+4, r22	; 0x04
    1940:	57 83       	std	Z+7, r21	; 0x07
    1942:	46 83       	std	Z+6, r20	; 0x06
    1944:	86 87       	std	Z+14, r24	; 0x0e
    1946:	27 87       	std	Z+15, r18	; 0x0f
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <xStreamBufferReset+0x50>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <xStreamBufferReset+0x50>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	0f 90       	pop	r0
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <xStreamBufferSpacesAvailable>:
    195c:	fc 01       	movw	r30, r24
    195e:	24 81       	ldd	r18, Z+4	; 0x04
    1960:	35 81       	ldd	r19, Z+5	; 0x05
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	42 81       	ldd	r20, Z+2	; 0x02
    1968:	53 81       	ldd	r21, Z+3	; 0x03
    196a:	82 0f       	add	r24, r18
    196c:	93 1f       	adc	r25, r19
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	84 1b       	sub	r24, r20
    1972:	95 0b       	sbc	r25, r21
    1974:	82 17       	cp	r24, r18
    1976:	93 07       	cpc	r25, r19
    1978:	10 f0       	brcs	.+4      	; 0x197e <xStreamBufferSpacesAvailable+0x22>
    197a:	82 1b       	sub	r24, r18
    197c:	93 0b       	sbc	r25, r19
    197e:	08 95       	ret

00001980 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1980:	2f 92       	push	r2
    1982:	3f 92       	push	r3
    1984:	4f 92       	push	r4
    1986:	5f 92       	push	r5
    1988:	6f 92       	push	r6
    198a:	7f 92       	push	r7
    198c:	8f 92       	push	r8
    198e:	9f 92       	push	r9
    1990:	af 92       	push	r10
    1992:	bf 92       	push	r11
    1994:	cf 92       	push	r12
    1996:	df 92       	push	r13
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	29 97       	sbiw	r28, 0x09	; 9
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	5c 01       	movw	r10, r24
    19b6:	1b 01       	movw	r2, r22
    19b8:	2a 01       	movw	r4, r20
    19ba:	0e 83       	std	Y+6, r16	; 0x06
    19bc:	1f 83       	std	Y+7, r17	; 0x07
    19be:	28 87       	std	Y+8, r18	; 0x08
    19c0:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19c2:	fc 01       	movw	r30, r24
    19c4:	86 85       	ldd	r24, Z+14	; 0x0e
    19c6:	80 ff       	sbrs	r24, 0
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19ca:	3a 01       	movw	r6, r20
    19cc:	f2 e0       	ldi	r31, 0x02	; 2
    19ce:	6f 0e       	add	r6, r31
    19d0:	71 1c       	adc	r7, r1
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    19d4:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19d6:	8e 81       	ldd	r24, Y+6	; 0x06
    19d8:	9f 81       	ldd	r25, Y+7	; 0x07
    19da:	a8 85       	ldd	r26, Y+8	; 0x08
    19dc:	b9 85       	ldd	r27, Y+9	; 0x09
    19de:	89 2b       	or	r24, r25
    19e0:	8a 2b       	or	r24, r26
    19e2:	8b 2b       	or	r24, r27
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <xStreamBufferSend+0x68>
    19e6:	34 c0       	rjmp	.+104    	; 0x1a50 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    19e8:	ce 01       	movw	r24, r28
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	37 d6       	rcall	.+3182   	; 0x265c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19f4:	c5 01       	movw	r24, r10
    19f6:	b2 df       	rcall	.-156    	; 0x195c <xStreamBufferSpacesAvailable>
    19f8:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    19fa:	86 15       	cp	r24, r6
    19fc:	97 05       	cpc	r25, r7
    19fe:	18 f5       	brcc	.+70     	; 0x1a46 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1a08:	a9 d6       	rcall	.+3410   	; 0x275c <xTaskGetCurrentTaskHandle>
    1a0a:	f5 01       	movw	r30, r10
    1a0c:	93 87       	std	Z+11, r25	; 0x0b
    1a0e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a14:	ce 80       	ldd	r12, Y+6	; 0x06
    1a16:	df 80       	ldd	r13, Y+7	; 0x07
    1a18:	e8 84       	ldd	r14, Y+8	; 0x08
    1a1a:	f9 84       	ldd	r15, Y+9	; 0x09
    1a1c:	00 e0       	ldi	r16, 0x00	; 0
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	a9 01       	movw	r20, r18
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	b6 d7       	rcall	.+3948   	; 0x299a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a2e:	f5 01       	movw	r30, r10
    1a30:	13 86       	std	Z+11, r1	; 0x0b
    1a32:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a34:	be 01       	movw	r22, r28
    1a36:	6a 5f       	subi	r22, 0xFA	; 250
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	35 d6       	rcall	.+3178   	; 0x26aa <xTaskCheckForTimeOut>
    1a40:	88 23       	and	r24, r24
    1a42:	a9 f2       	breq	.-86     	; 0x19ee <xStreamBufferSend+0x6e>
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a46:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	81 14       	cp	r8, r1
    1a4c:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <xStreamBufferSend+0xd6>
    1a50:	c5 01       	movw	r24, r10
    1a52:	84 df       	rcall	.-248    	; 0x195c <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a54:	4c 01       	movw	r8, r24
    1a56:	83 01       	movw	r16, r6
    1a58:	94 01       	movw	r18, r8
    1a5a:	a2 01       	movw	r20, r4
    1a5c:	b1 01       	movw	r22, r2
    1a5e:	c5 01       	movw	r24, r10
    1a60:	96 de       	rcall	.-724    	; 0x178e <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1a62:	7c 01       	movw	r14, r24
    1a64:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a66:	e1 f0       	breq	.+56     	; 0x1aa0 <xStreamBufferSend+0x120>
    1a68:	c5 01       	movw	r24, r10
    1a6a:	35 de       	rcall	.-918    	; 0x16d6 <prvBytesInBuffer>
    1a6c:	f5 01       	movw	r30, r10
    1a6e:	26 81       	ldd	r18, Z+6	; 0x06
    1a70:	37 81       	ldd	r19, Z+7	; 0x07
    1a72:	82 17       	cp	r24, r18
    1a74:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1a76:	a0 f0       	brcs	.+40     	; 0x1aa0 <xStreamBufferSend+0x120>
    1a78:	0e d3       	rcall	.+1564   	; 0x2096 <vTaskSuspendAll>
    1a7a:	f5 01       	movw	r30, r10
    1a7c:	80 85       	ldd	r24, Z+8	; 0x08
    1a7e:	91 85       	ldd	r25, Z+9	; 0x09
    1a80:	89 2b       	or	r24, r25
    1a82:	69 f0       	breq	.+26     	; 0x1a9e <xStreamBufferSend+0x11e>
    1a84:	80 85       	ldd	r24, Z+8	; 0x08
    1a86:	91 85       	ldd	r25, Z+9	; 0x09
    1a88:	00 e0       	ldi	r16, 0x00	; 0
    1a8a:	10 e0       	ldi	r17, 0x00	; 0
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	ba 01       	movw	r22, r20
    1a94:	0e 94 57 15 	call	0x2aae	; 0x2aae <xTaskGenericNotify>
    1a98:	f5 01       	movw	r30, r10
    1a9a:	11 86       	std	Z+9, r1	; 0x09
    1a9c:	10 86       	std	Z+8, r1	; 0x08
    1a9e:	e4 d3       	rcall	.+1992   	; 0x2268 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	29 96       	adiw	r28, 0x09	; 9
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	9f 90       	pop	r9
    1ac4:	8f 90       	pop	r8
    1ac6:	7f 90       	pop	r7
    1ac8:	6f 90       	pop	r6
    1aca:	5f 90       	pop	r5
    1acc:	4f 90       	pop	r4
    1ace:	3f 90       	pop	r3
    1ad0:	2f 90       	pop	r2
    1ad2:	08 95       	ret

00001ad4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1ad4:	af 92       	push	r10
    1ad6:	bf 92       	push	r11
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	ec 01       	movw	r28, r24
    1aea:	5b 01       	movw	r10, r22
    1aec:	6a 01       	movw	r12, r20
    1aee:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1af2:	80 ff       	sbrs	r24, 0
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1af6:	8a 01       	movw	r16, r20
    1af8:	0e 5f       	subi	r16, 0xFE	; 254
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1afe:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b00:	ce 01       	movw	r24, r28
    1b02:	2c df       	rcall	.-424    	; 0x195c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b04:	9c 01       	movw	r18, r24
    1b06:	a6 01       	movw	r20, r12
    1b08:	b5 01       	movw	r22, r10
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	40 de       	rcall	.-896    	; 0x178e <prvWriteMessageToBuffer>
    1b0e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1b10:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b12:	b9 f0       	breq	.+46     	; 0x1b42 <xStreamBufferSendFromISR+0x6e>
    1b14:	ce 01       	movw	r24, r28
    1b16:	df dd       	rcall	.-1090   	; 0x16d6 <prvBytesInBuffer>
    1b18:	2e 81       	ldd	r18, Y+6	; 0x06
    1b1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1c:	82 17       	cp	r24, r18
    1b1e:	93 07       	cpc	r25, r19
    1b20:	80 f0       	brcs	.+32     	; 0x1b42 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b22:	88 85       	ldd	r24, Y+8	; 0x08
    1b24:	99 85       	ldd	r25, Y+9	; 0x09
    1b26:	89 2b       	or	r24, r25
    1b28:	61 f0       	breq	.+24     	; 0x1b42 <xStreamBufferSendFromISR+0x6e>
    1b2a:	88 85       	ldd	r24, Y+8	; 0x08
    1b2c:	99 85       	ldd	r25, Y+9	; 0x09
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	10 e0       	ldi	r17, 0x00	; 0
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	ba 01       	movw	r22, r20
    1b3a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <xTaskGenericNotifyFromISR>
    1b3e:	19 86       	std	Y+9, r1	; 0x09
    1b40:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b42:	c6 01       	movw	r24, r12
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	08 95       	ret

00001b5a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1b5a:	4f 92       	push	r4
    1b5c:	5f 92       	push	r5
    1b5e:	6f 92       	push	r6
    1b60:	7f 92       	push	r7
    1b62:	8f 92       	push	r8
    1b64:	9f 92       	push	r9
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	1f 92       	push	r1
    1b7c:	1f 92       	push	r1
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	5c 01       	movw	r10, r24
    1b84:	2b 01       	movw	r4, r22
    1b86:	3a 01       	movw	r6, r20
    1b88:	68 01       	movw	r12, r16
    1b8a:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	86 85       	ldd	r24, Z+14	; 0x0e
    1b90:	80 fd       	sbrc	r24, 0
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1b94:	81 2c       	mov	r8, r1
    1b96:	91 2c       	mov	r9, r1
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b9a:	68 94       	set
    1b9c:	88 24       	eor	r8, r8
    1b9e:	81 f8       	bld	r8, 1
    1ba0:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1ba2:	c1 14       	cp	r12, r1
    1ba4:	d1 04       	cpc	r13, r1
    1ba6:	e1 04       	cpc	r14, r1
    1ba8:	f1 04       	cpc	r15, r1
    1baa:	31 f1       	breq	.+76     	; 0x1bf8 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bb2:	c5 01       	movw	r24, r10
    1bb4:	90 dd       	rcall	.-1248   	; 0x16d6 <prvBytesInBuffer>
    1bb6:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bb8:	88 16       	cp	r8, r24
    1bba:	99 06       	cpc	r9, r25
    1bbc:	40 f0       	brcs	.+16     	; 0x1bce <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1bc6:	ca d5       	rcall	.+2964   	; 0x275c <xTaskGetCurrentTaskHandle>
    1bc8:	f5 01       	movw	r30, r10
    1bca:	91 87       	std	Z+9, r25	; 0x09
    1bcc:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bd2:	80 16       	cp	r8, r16
    1bd4:	91 06       	cpc	r9, r17
    1bd6:	b0 f0       	brcs	.+44     	; 0x1c04 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1bd8:	00 e0       	ldi	r16, 0x00	; 0
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	cb 01       	movw	r24, r22
    1be8:	d8 d6       	rcall	.+3504   	; 0x299a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1bea:	f5 01       	movw	r30, r10
    1bec:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bee:	10 86       	std	Z+8, r1	; 0x08
    1bf0:	c5 01       	movw	r24, r10
    1bf2:	71 dd       	rcall	.-1310   	; 0x16d6 <prvBytesInBuffer>
    1bf4:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <xStreamBufferReceive+0xa4>
    1bf8:	c5 01       	movw	r24, r10
    1bfa:	6d dd       	rcall	.-1318   	; 0x16d6 <prvBytesInBuffer>
    1bfc:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1bfe:	80 16       	cp	r8, r16
    1c00:	91 06       	cpc	r9, r17
    1c02:	b8 f5       	brcc	.+110    	; 0x1c72 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1c04:	81 14       	cp	r8, r1
    1c06:	91 04       	cpc	r9, r1
    1c08:	c1 f0       	breq	.+48     	; 0x1c3a <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1c0a:	f5 01       	movw	r30, r10
    1c0c:	e0 80       	ld	r14, Z
    1c0e:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1c10:	98 01       	movw	r18, r16
    1c12:	a4 01       	movw	r20, r8
    1c14:	be 01       	movw	r22, r28
    1c16:	6f 5f       	subi	r22, 0xFF	; 255
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	c5 01       	movw	r24, r10
    1c1c:	f8 dd       	rcall	.-1040   	; 0x180e <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1c22:	08 19       	sub	r16, r8
    1c24:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1c26:	68 16       	cp	r6, r24
    1c28:	79 06       	cpc	r7, r25
    1c2a:	30 f4       	brcc	.+12     	; 0x1c38 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1c2c:	f5 01       	movw	r30, r10
    1c2e:	f1 82       	std	Z+1, r15	; 0x01
    1c30:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1c32:	61 2c       	mov	r6, r1
    1c34:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1c38:	3c 01       	movw	r6, r24
    1c3a:	98 01       	movw	r18, r16
    1c3c:	a3 01       	movw	r20, r6
    1c3e:	b2 01       	movw	r22, r4
    1c40:	c5 01       	movw	r24, r10
    1c42:	e5 dd       	rcall	.-1078   	; 0x180e <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c44:	7c 01       	movw	r14, r24
    1c46:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c48:	b1 f0       	breq	.+44     	; 0x1c76 <xStreamBufferReceive+0x11c>
    1c4a:	25 d2       	rcall	.+1098   	; 0x2096 <vTaskSuspendAll>
    1c4c:	f5 01       	movw	r30, r10
    1c4e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c50:	93 85       	ldd	r25, Z+11	; 0x0b
    1c52:	89 2b       	or	r24, r25
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <xStreamBufferReceive+0x114>
    1c56:	82 85       	ldd	r24, Z+10	; 0x0a
    1c58:	93 85       	ldd	r25, Z+11	; 0x0b
    1c5a:	00 e0       	ldi	r16, 0x00	; 0
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	ba 01       	movw	r22, r20
    1c66:	23 d7       	rcall	.+3654   	; 0x2aae <xTaskGenericNotify>
    1c68:	f5 01       	movw	r30, r10
    1c6a:	13 86       	std	Z+11, r1	; 0x0b
    1c6c:	12 86       	std	Z+10, r1	; 0x0a
    1c6e:	fc d2       	rcall	.+1528   	; 0x2268 <xTaskResumeAll>
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c72:	e1 2c       	mov	r14, r1
    1c74:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c76:	c7 01       	movw	r24, r14
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	bf 90       	pop	r11
    1c8e:	af 90       	pop	r10
    1c90:	9f 90       	pop	r9
    1c92:	8f 90       	pop	r8
    1c94:	7f 90       	pop	r7
    1c96:	6f 90       	pop	r6
    1c98:	5f 90       	pop	r5
    1c9a:	4f 90       	pop	r4
    1c9c:	08 95       	ret

00001c9e <prvResetNextTaskUnblockTime>:
    1c9e:	e0 91 96 17 	lds	r30, 0x1796	; 0x801796 <pxDelayedTaskList>
    1ca2:	f0 91 97 17 	lds	r31, 0x1797	; 0x801797 <pxDelayedTaskList+0x1>
    1ca6:	80 81       	ld	r24, Z
    1ca8:	81 11       	cpse	r24, r1
    1caa:	0c c0       	rjmp	.+24     	; 0x1cc4 <prvResetNextTaskUnblockTime+0x26>
    1cac:	8f ef       	ldi	r24, 0xFF	; 255
    1cae:	9f ef       	ldi	r25, 0xFF	; 255
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <xNextTaskUnblockTime>
    1cb6:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <xNextTaskUnblockTime+0x1>
    1cba:	a0 93 65 17 	sts	0x1765, r26	; 0x801765 <xNextTaskUnblockTime+0x2>
    1cbe:	b0 93 66 17 	sts	0x1766, r27	; 0x801766 <xNextTaskUnblockTime+0x3>
    1cc2:	08 95       	ret
    1cc4:	e0 91 96 17 	lds	r30, 0x1796	; 0x801796 <pxDelayedTaskList>
    1cc8:	f0 91 97 17 	lds	r31, 0x1797	; 0x801797 <pxDelayedTaskList+0x1>
    1ccc:	07 80       	ldd	r0, Z+7	; 0x07
    1cce:	f0 85       	ldd	r31, Z+8	; 0x08
    1cd0:	e0 2d       	mov	r30, r0
    1cd2:	00 84       	ldd	r0, Z+8	; 0x08
    1cd4:	f1 85       	ldd	r31, Z+9	; 0x09
    1cd6:	e0 2d       	mov	r30, r0
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	a4 81       	ldd	r26, Z+4	; 0x04
    1cde:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce0:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <xNextTaskUnblockTime>
    1ce4:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <xNextTaskUnblockTime+0x1>
    1ce8:	a0 93 65 17 	sts	0x1765, r26	; 0x801765 <xNextTaskUnblockTime+0x2>
    1cec:	b0 93 66 17 	sts	0x1766, r27	; 0x801766 <xNextTaskUnblockTime+0x3>
    1cf0:	08 95       	ret

00001cf2 <prvAddCurrentTaskToDelayedList>:
    1cf2:	8f 92       	push	r8
    1cf4:	9f 92       	push	r9
    1cf6:	af 92       	push	r10
    1cf8:	bf 92       	push	r11
    1cfa:	cf 92       	push	r12
    1cfc:	df 92       	push	r13
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	cf 93       	push	r28
    1d04:	6b 01       	movw	r12, r22
    1d06:	7c 01       	movw	r14, r24
    1d08:	c4 2f       	mov	r28, r20
    1d0a:	80 90 6d 17 	lds	r8, 0x176D	; 0x80176d <xTickCount>
    1d0e:	90 90 6e 17 	lds	r9, 0x176E	; 0x80176e <xTickCount+0x1>
    1d12:	a0 90 6f 17 	lds	r10, 0x176F	; 0x80176f <xTickCount+0x2>
    1d16:	b0 90 70 17 	lds	r11, 0x1770	; 0x801770 <xTickCount+0x3>
    1d1a:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    1d1e:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1d22:	02 96       	adiw	r24, 0x02	; 2
    1d24:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	c8 16       	cp	r12, r24
    1d2c:	d8 06       	cpc	r13, r24
    1d2e:	e8 06       	cpc	r14, r24
    1d30:	f8 06       	cpc	r15, r24
    1d32:	69 f4       	brne	.+26     	; 0x1d4e <prvAddCurrentTaskToDelayedList+0x5c>
    1d34:	cc 23       	and	r28, r28
    1d36:	59 f0       	breq	.+22     	; 0x1d4e <prvAddCurrentTaskToDelayedList+0x5c>
    1d38:	60 91 da 17 	lds	r22, 0x17DA	; 0x8017da <pxCurrentTCB>
    1d3c:	70 91 db 17 	lds	r23, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1d40:	6e 5f       	subi	r22, 0xFE	; 254
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	82 e7       	ldi	r24, 0x72	; 114
    1d46:	97 e1       	ldi	r25, 0x17	; 23
    1d48:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <prvAddCurrentTaskToDelayedList+0xda>
    1d4e:	c8 0c       	add	r12, r8
    1d50:	d9 1c       	adc	r13, r9
    1d52:	ea 1c       	adc	r14, r10
    1d54:	fb 1c       	adc	r15, r11
    1d56:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    1d5a:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1d5e:	c2 82       	std	Z+2, r12	; 0x02
    1d60:	d3 82       	std	Z+3, r13	; 0x03
    1d62:	e4 82       	std	Z+4, r14	; 0x04
    1d64:	f5 82       	std	Z+5, r15	; 0x05
    1d66:	c8 14       	cp	r12, r8
    1d68:	d9 04       	cpc	r13, r9
    1d6a:	ea 04       	cpc	r14, r10
    1d6c:	fb 04       	cpc	r15, r11
    1d6e:	68 f4       	brcc	.+26     	; 0x1d8a <prvAddCurrentTaskToDelayedList+0x98>
    1d70:	60 91 da 17 	lds	r22, 0x17DA	; 0x8017da <pxCurrentTCB>
    1d74:	70 91 db 17 	lds	r23, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1d78:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <pxOverflowDelayedTaskList>
    1d7c:	90 91 95 17 	lds	r25, 0x1795	; 0x801795 <pxOverflowDelayedTaskList+0x1>
    1d80:	6e 5f       	subi	r22, 0xFE	; 254
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsert>
    1d88:	21 c0       	rjmp	.+66     	; 0x1dcc <prvAddCurrentTaskToDelayedList+0xda>
    1d8a:	60 91 da 17 	lds	r22, 0x17DA	; 0x8017da <pxCurrentTCB>
    1d8e:	70 91 db 17 	lds	r23, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1d92:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <pxDelayedTaskList>
    1d96:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <pxDelayedTaskList+0x1>
    1d9a:	6e 5f       	subi	r22, 0xFE	; 254
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsert>
    1da2:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <xNextTaskUnblockTime>
    1da6:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <xNextTaskUnblockTime+0x1>
    1daa:	a0 91 65 17 	lds	r26, 0x1765	; 0x801765 <xNextTaskUnblockTime+0x2>
    1dae:	b0 91 66 17 	lds	r27, 0x1766	; 0x801766 <xNextTaskUnblockTime+0x3>
    1db2:	c8 16       	cp	r12, r24
    1db4:	d9 06       	cpc	r13, r25
    1db6:	ea 06       	cpc	r14, r26
    1db8:	fb 06       	cpc	r15, r27
    1dba:	40 f4       	brcc	.+16     	; 0x1dcc <prvAddCurrentTaskToDelayedList+0xda>
    1dbc:	c0 92 63 17 	sts	0x1763, r12	; 0x801763 <xNextTaskUnblockTime>
    1dc0:	d0 92 64 17 	sts	0x1764, r13	; 0x801764 <xNextTaskUnblockTime+0x1>
    1dc4:	e0 92 65 17 	sts	0x1765, r14	; 0x801765 <xNextTaskUnblockTime+0x2>
    1dc8:	f0 92 66 17 	sts	0x1766, r15	; 0x801766 <xNextTaskUnblockTime+0x3>
    1dcc:	cf 91       	pop	r28
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	bf 90       	pop	r11
    1dd8:	af 90       	pop	r10
    1dda:	9f 90       	pop	r9
    1ddc:	8f 90       	pop	r8
    1dde:	08 95       	ret

00001de0 <xTaskCreate>:
    1de0:	4f 92       	push	r4
    1de2:	5f 92       	push	r5
    1de4:	6f 92       	push	r6
    1de6:	7f 92       	push	r7
    1de8:	8f 92       	push	r8
    1dea:	9f 92       	push	r9
    1dec:	af 92       	push	r10
    1dee:	bf 92       	push	r11
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	4c 01       	movw	r8, r24
    1e00:	6b 01       	movw	r12, r22
    1e02:	5a 01       	movw	r10, r20
    1e04:	29 01       	movw	r4, r18
    1e06:	ca 01       	movw	r24, r20
    1e08:	0e 94 ba 04 	call	0x974	; 0x974 <pvPortMalloc>
    1e0c:	3c 01       	movw	r6, r24
    1e0e:	89 2b       	or	r24, r25
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <xTaskCreate+0x34>
    1e12:	f4 c0       	rjmp	.+488    	; 0x1ffc <xTaskCreate+0x21c>
    1e14:	80 e3       	ldi	r24, 0x30	; 48
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 ba 04 	call	0x974	; 0x974 <pvPortMalloc>
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	89 2b       	or	r24, r25
    1e20:	99 f0       	breq	.+38     	; 0x1e48 <xTaskCreate+0x68>
    1e22:	7c 8e       	std	Y+28, r7	; 0x1c
    1e24:	6b 8e       	std	Y+27, r6	; 0x1b
    1e26:	a5 01       	movw	r20, r10
    1e28:	65 ea       	ldi	r22, 0xA5	; 165
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	c3 01       	movw	r24, r6
    1e2e:	0e 94 9f 29 	call	0x533e	; 0x533e <memset>
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	a2 1a       	sub	r10, r18
    1e36:	b1 08       	sbc	r11, r1
    1e38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3c:	a8 0e       	add	r10, r24
    1e3e:	b9 1e       	adc	r11, r25
    1e40:	c1 14       	cp	r12, r1
    1e42:	d1 04       	cpc	r13, r1
    1e44:	29 f4       	brne	.+10     	; 0x1e50 <xTaskCreate+0x70>
    1e46:	20 c0       	rjmp	.+64     	; 0x1e88 <xTaskCreate+0xa8>
    1e48:	c3 01       	movw	r24, r6
    1e4a:	0e 94 73 05 	call	0xae6	; 0xae6 <vPortFree>
    1e4e:	d6 c0       	rjmp	.+428    	; 0x1ffc <xTaskCreate+0x21c>
    1e50:	d6 01       	movw	r26, r12
    1e52:	8c 91       	ld	r24, X
    1e54:	8d 8f       	std	Y+29, r24	; 0x1d
    1e56:	8c 91       	ld	r24, X
    1e58:	88 23       	and	r24, r24
    1e5a:	a1 f0       	breq	.+40     	; 0x1e84 <xTaskCreate+0xa4>
    1e5c:	ae 01       	movw	r20, r28
    1e5e:	42 5e       	subi	r20, 0xE2	; 226
    1e60:	5f 4f       	sbci	r21, 0xFF	; 255
    1e62:	f6 01       	movw	r30, r12
    1e64:	31 96       	adiw	r30, 0x01	; 1
    1e66:	b8 e0       	ldi	r27, 0x08	; 8
    1e68:	cb 0e       	add	r12, r27
    1e6a:	d1 1c       	adc	r13, r1
    1e6c:	cf 01       	movw	r24, r30
    1e6e:	21 91       	ld	r18, Z+
    1e70:	da 01       	movw	r26, r20
    1e72:	2d 93       	st	X+, r18
    1e74:	ad 01       	movw	r20, r26
    1e76:	dc 01       	movw	r26, r24
    1e78:	8c 91       	ld	r24, X
    1e7a:	88 23       	and	r24, r24
    1e7c:	19 f0       	breq	.+6      	; 0x1e84 <xTaskCreate+0xa4>
    1e7e:	ec 15       	cp	r30, r12
    1e80:	fd 05       	cpc	r31, r13
    1e82:	a1 f7       	brne	.-24     	; 0x1e6c <xTaskCreate+0x8c>
    1e84:	1c a2       	std	Y+36, r1	; 0x24
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <xTaskCreate+0xaa>
    1e88:	1d 8e       	std	Y+29, r1	; 0x1d
    1e8a:	04 30       	cpi	r16, 0x04	; 4
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <xTaskCreate+0xb0>
    1e8e:	03 e0       	ldi	r16, 0x03	; 3
    1e90:	0a 8f       	std	Y+26, r16	; 0x1a
    1e92:	0f a3       	std	Y+39, r16	; 0x27
    1e94:	18 a6       	std	Y+40, r1	; 0x28
    1e96:	6e 01       	movw	r12, r28
    1e98:	b2 e0       	ldi	r27, 0x02	; 2
    1e9a:	cb 0e       	add	r12, r27
    1e9c:	d1 1c       	adc	r13, r1
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <vListInitialiseItem>
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	0e 96       	adiw	r24, 0x0e	; 14
    1ea8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <vListInitialiseItem>
    1eac:	db 87       	std	Y+11, r29	; 0x0b
    1eae:	ca 87       	std	Y+10, r28	; 0x0a
    1eb0:	84 e0       	ldi	r24, 0x04	; 4
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	80 1b       	sub	r24, r16
    1eba:	91 09       	sbc	r25, r1
    1ebc:	a1 09       	sbc	r26, r1
    1ebe:	b1 09       	sbc	r27, r1
    1ec0:	8e 87       	std	Y+14, r24	; 0x0e
    1ec2:	9f 87       	std	Y+15, r25	; 0x0f
    1ec4:	a8 8b       	std	Y+16, r26	; 0x10
    1ec6:	b9 8b       	std	Y+17, r27	; 0x11
    1ec8:	df 8b       	std	Y+23, r29	; 0x17
    1eca:	ce 8b       	std	Y+22, r28	; 0x16
    1ecc:	1a a6       	std	Y+42, r1	; 0x2a
    1ece:	19 a6       	std	Y+41, r1	; 0x29
    1ed0:	1b a6       	std	Y+43, r1	; 0x2b
    1ed2:	1c a6       	std	Y+44, r1	; 0x2c
    1ed4:	1d a6       	std	Y+45, r1	; 0x2d
    1ed6:	1e a6       	std	Y+46, r1	; 0x2e
    1ed8:	1f a6       	std	Y+47, r1	; 0x2f
    1eda:	a2 01       	movw	r20, r4
    1edc:	b4 01       	movw	r22, r8
    1ede:	c5 01       	movw	r24, r10
    1ee0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <pxPortInitialiseStack>
    1ee4:	99 83       	std	Y+1, r25	; 0x01
    1ee6:	88 83       	st	Y, r24
    1ee8:	e1 14       	cp	r14, r1
    1eea:	f1 04       	cpc	r15, r1
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <xTaskCreate+0x114>
    1eee:	f7 01       	movw	r30, r14
    1ef0:	d1 83       	std	Z+1, r29	; 0x01
    1ef2:	c0 83       	st	Z, r28
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	0f 92       	push	r0
    1efa:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <uxCurrentNumberOfTasks>
    1efe:	8f 5f       	subi	r24, 0xFF	; 255
    1f00:	80 93 71 17 	sts	0x1771, r24	; 0x801771 <uxCurrentNumberOfTasks>
    1f04:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    1f08:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1f0c:	89 2b       	or	r24, r25
    1f0e:	d1 f5       	brne	.+116    	; 0x1f84 <xTaskCreate+0x1a4>
    1f10:	d0 93 db 17 	sts	0x17DB, r29	; 0x8017db <pxCurrentTCB+0x1>
    1f14:	c0 93 da 17 	sts	0x17DA, r28	; 0x8017da <pxCurrentTCB>
    1f18:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <uxCurrentNumberOfTasks>
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <xTaskCreate+0x142>
    1f20:	41 c0       	rjmp	.+130    	; 0x1fa4 <xTaskCreate+0x1c4>
    1f22:	8e ea       	ldi	r24, 0xAE	; 174
    1f24:	97 e1       	ldi	r25, 0x17	; 23
    1f26:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f2a:	89 eb       	ldi	r24, 0xB9	; 185
    1f2c:	97 e1       	ldi	r25, 0x17	; 23
    1f2e:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f32:	84 ec       	ldi	r24, 0xC4	; 196
    1f34:	97 e1       	ldi	r25, 0x17	; 23
    1f36:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f3a:	8f ec       	ldi	r24, 0xCF	; 207
    1f3c:	97 e1       	ldi	r25, 0x17	; 23
    1f3e:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f42:	83 ea       	ldi	r24, 0xA3	; 163
    1f44:	97 e1       	ldi	r25, 0x17	; 23
    1f46:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f4a:	88 e9       	ldi	r24, 0x98	; 152
    1f4c:	97 e1       	ldi	r25, 0x17	; 23
    1f4e:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f52:	89 e8       	ldi	r24, 0x89	; 137
    1f54:	97 e1       	ldi	r25, 0x17	; 23
    1f56:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f5a:	8e e7       	ldi	r24, 0x7E	; 126
    1f5c:	97 e1       	ldi	r25, 0x17	; 23
    1f5e:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f62:	82 e7       	ldi	r24, 0x72	; 114
    1f64:	97 e1       	ldi	r25, 0x17	; 23
    1f66:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    1f6a:	83 ea       	ldi	r24, 0xA3	; 163
    1f6c:	97 e1       	ldi	r25, 0x17	; 23
    1f6e:	90 93 97 17 	sts	0x1797, r25	; 0x801797 <pxDelayedTaskList+0x1>
    1f72:	80 93 96 17 	sts	0x1796, r24	; 0x801796 <pxDelayedTaskList>
    1f76:	88 e9       	ldi	r24, 0x98	; 152
    1f78:	97 e1       	ldi	r25, 0x17	; 23
    1f7a:	90 93 95 17 	sts	0x1795, r25	; 0x801795 <pxOverflowDelayedTaskList+0x1>
    1f7e:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <pxOverflowDelayedTaskList>
    1f82:	10 c0       	rjmp	.+32     	; 0x1fa4 <xTaskCreate+0x1c4>
    1f84:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <xSchedulerRunning>
    1f88:	81 11       	cpse	r24, r1
    1f8a:	0c c0       	rjmp	.+24     	; 0x1fa4 <xTaskCreate+0x1c4>
    1f8c:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    1f90:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1f94:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f98:	89 17       	cp	r24, r25
    1f9a:	20 f0       	brcs	.+8      	; 0x1fa4 <xTaskCreate+0x1c4>
    1f9c:	d0 93 db 17 	sts	0x17DB, r29	; 0x8017db <pxCurrentTCB+0x1>
    1fa0:	c0 93 da 17 	sts	0x17DA, r28	; 0x8017da <pxCurrentTCB>
    1fa4:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <uxTaskNumber>
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	80 93 67 17 	sts	0x1767, r24	; 0x801767 <uxTaskNumber>
    1fae:	8d a3       	std	Y+37, r24	; 0x25
    1fb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fb2:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    1fb6:	98 17       	cp	r25, r24
    1fb8:	10 f4       	brcc	.+4      	; 0x1fbe <xTaskCreate+0x1de>
    1fba:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    1fbe:	fb e0       	ldi	r31, 0x0B	; 11
    1fc0:	8f 9f       	mul	r24, r31
    1fc2:	c0 01       	movw	r24, r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	b6 01       	movw	r22, r12
    1fc8:	82 55       	subi	r24, 0x52	; 82
    1fca:	98 4e       	sbci	r25, 0xE8	; 232
    1fcc:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <xSchedulerRunning>
    1fd8:	88 23       	and	r24, r24
    1fda:	61 f0       	breq	.+24     	; 0x1ff4 <xTaskCreate+0x214>
    1fdc:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    1fe0:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    1fe4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fe6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe8:	98 17       	cp	r25, r24
    1fea:	30 f4       	brcc	.+12     	; 0x1ff8 <xTaskCreate+0x218>
    1fec:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vPortYield>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	05 c0       	rjmp	.+10     	; 0x1ffe <xTaskCreate+0x21e>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <xTaskCreate+0x21e>
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <xTaskCreate+0x21e>
    1ffc:	8f ef       	ldi	r24, 0xFF	; 255
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	0f 91       	pop	r16
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	df 90       	pop	r13
    200a:	cf 90       	pop	r12
    200c:	bf 90       	pop	r11
    200e:	af 90       	pop	r10
    2010:	9f 90       	pop	r9
    2012:	8f 90       	pop	r8
    2014:	7f 90       	pop	r7
    2016:	6f 90       	pop	r6
    2018:	5f 90       	pop	r5
    201a:	4f 90       	pop	r4
    201c:	08 95       	ret

0000201e <vTaskStartScheduler>:
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	0f 2e       	mov	r0, r31
    2026:	f1 e6       	ldi	r31, 0x61	; 97
    2028:	ef 2e       	mov	r14, r31
    202a:	f7 e1       	ldi	r31, 0x17	; 23
    202c:	ff 2e       	mov	r15, r31
    202e:	f0 2d       	mov	r31, r0
    2030:	00 e0       	ldi	r16, 0x00	; 0
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 ec       	ldi	r20, 0xC0	; 192
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	6f e0       	ldi	r22, 0x0F	; 15
    203c:	74 e0       	ldi	r23, 0x04	; 4
    203e:	8d ec       	ldi	r24, 0xCD	; 205
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	ce de       	rcall	.-612    	; 0x1de0 <xTaskCreate>
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	19 f5       	brne	.+70     	; 0x208e <vTaskStartScheduler+0x70>
    2048:	b9 d6       	rcall	.+3442   	; 0x2dbc <xTimerCreateTimerTask>
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	01 f5       	brne	.+64     	; 0x208e <vTaskStartScheduler+0x70>
    204e:	f8 94       	cli
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	9f ef       	ldi	r25, 0xFF	; 255
    2054:	dc 01       	movw	r26, r24
    2056:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <xNextTaskUnblockTime>
    205a:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <xNextTaskUnblockTime+0x1>
    205e:	a0 93 65 17 	sts	0x1765, r26	; 0x801765 <xNextTaskUnblockTime+0x2>
    2062:	b0 93 66 17 	sts	0x1766, r27	; 0x801766 <xNextTaskUnblockTime+0x3>
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	80 93 6b 17 	sts	0x176B, r24	; 0x80176b <xSchedulerRunning>
    206c:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <xTickCount>
    2070:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <xTickCount+0x1>
    2074:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <xTickCount+0x2>
    2078:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <xTickCount+0x3>
    207c:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2080:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2084:	81 a5       	ldd	r24, Z+41	; 0x29
    2086:	0e 94 5d 04 	call	0x8ba	; 0x8ba <task_switch_in>
    208a:	0e 94 b0 06 	call	0xd60	; 0xd60 <xPortStartScheduler>
    208e:	0f 91       	pop	r16
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	08 95       	ret

00002096 <vTaskSuspendAll>:
    2096:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <uxSchedulerSuspended>
    20a0:	08 95       	ret

000020a2 <xTaskGetTickCount>:
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	0f 92       	push	r0
    20a8:	60 91 6d 17 	lds	r22, 0x176D	; 0x80176d <xTickCount>
    20ac:	70 91 6e 17 	lds	r23, 0x176E	; 0x80176e <xTickCount+0x1>
    20b0:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <xTickCount+0x2>
    20b4:	90 91 70 17 	lds	r25, 0x1770	; 0x801770 <xTickCount+0x3>
    20b8:	0f 90       	pop	r0
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	08 95       	ret

000020be <xTaskIncrementTick>:
    20be:	9f 92       	push	r9
    20c0:	af 92       	push	r10
    20c2:	bf 92       	push	r11
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    20d8:	81 11       	cpse	r24, r1
    20da:	ad c0       	rjmp	.+346    	; 0x2236 <__stack+0x37>
    20dc:	c0 90 6d 17 	lds	r12, 0x176D	; 0x80176d <xTickCount>
    20e0:	d0 90 6e 17 	lds	r13, 0x176E	; 0x80176e <xTickCount+0x1>
    20e4:	e0 90 6f 17 	lds	r14, 0x176F	; 0x80176f <xTickCount+0x2>
    20e8:	f0 90 70 17 	lds	r15, 0x1770	; 0x801770 <xTickCount+0x3>
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	c8 1a       	sub	r12, r24
    20f0:	d8 0a       	sbc	r13, r24
    20f2:	e8 0a       	sbc	r14, r24
    20f4:	f8 0a       	sbc	r15, r24
    20f6:	c0 92 6d 17 	sts	0x176D, r12	; 0x80176d <xTickCount>
    20fa:	d0 92 6e 17 	sts	0x176E, r13	; 0x80176e <xTickCount+0x1>
    20fe:	e0 92 6f 17 	sts	0x176F, r14	; 0x80176f <xTickCount+0x2>
    2102:	f0 92 70 17 	sts	0x1770, r15	; 0x801770 <xTickCount+0x3>
    2106:	c1 14       	cp	r12, r1
    2108:	d1 04       	cpc	r13, r1
    210a:	e1 04       	cpc	r14, r1
    210c:	f1 04       	cpc	r15, r1
    210e:	b1 f4       	brne	.+44     	; 0x213c <xTaskIncrementTick+0x7e>
    2110:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <pxDelayedTaskList>
    2114:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <pxDelayedTaskList+0x1>
    2118:	20 91 94 17 	lds	r18, 0x1794	; 0x801794 <pxOverflowDelayedTaskList>
    211c:	30 91 95 17 	lds	r19, 0x1795	; 0x801795 <pxOverflowDelayedTaskList+0x1>
    2120:	30 93 97 17 	sts	0x1797, r19	; 0x801797 <pxDelayedTaskList+0x1>
    2124:	20 93 96 17 	sts	0x1796, r18	; 0x801796 <pxDelayedTaskList>
    2128:	90 93 95 17 	sts	0x1795, r25	; 0x801795 <pxOverflowDelayedTaskList+0x1>
    212c:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <pxOverflowDelayedTaskList>
    2130:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <xNumOfOverflows>
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	80 93 68 17 	sts	0x1768, r24	; 0x801768 <xNumOfOverflows>
    213a:	b1 dd       	rcall	.-1182   	; 0x1c9e <prvResetNextTaskUnblockTime>
    213c:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <xNextTaskUnblockTime>
    2140:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <xNextTaskUnblockTime+0x1>
    2144:	a0 91 65 17 	lds	r26, 0x1765	; 0x801765 <xNextTaskUnblockTime+0x2>
    2148:	b0 91 66 17 	lds	r27, 0x1766	; 0x801766 <xNextTaskUnblockTime+0x3>
    214c:	c8 16       	cp	r12, r24
    214e:	d9 06       	cpc	r13, r25
    2150:	ea 06       	cpc	r14, r26
    2152:	fb 06       	cpc	r15, r27
    2154:	10 f4       	brcc	.+4      	; 0x215a <xTaskIncrementTick+0x9c>
    2156:	b1 2c       	mov	r11, r1
    2158:	5d c0       	rjmp	.+186    	; 0x2214 <__stack+0x15>
    215a:	b1 2c       	mov	r11, r1
    215c:	0f 2e       	mov	r0, r31
    215e:	fb e0       	ldi	r31, 0x0B	; 11
    2160:	af 2e       	mov	r10, r31
    2162:	f0 2d       	mov	r31, r0
    2164:	99 24       	eor	r9, r9
    2166:	93 94       	inc	r9
    2168:	e0 91 96 17 	lds	r30, 0x1796	; 0x801796 <pxDelayedTaskList>
    216c:	f0 91 97 17 	lds	r31, 0x1797	; 0x801797 <pxDelayedTaskList+0x1>
    2170:	80 81       	ld	r24, Z
    2172:	81 11       	cpse	r24, r1
    2174:	0c c0       	rjmp	.+24     	; 0x218e <xTaskIncrementTick+0xd0>
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	9f ef       	ldi	r25, 0xFF	; 255
    217a:	dc 01       	movw	r26, r24
    217c:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <xNextTaskUnblockTime>
    2180:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <xNextTaskUnblockTime+0x1>
    2184:	a0 93 65 17 	sts	0x1765, r26	; 0x801765 <xNextTaskUnblockTime+0x2>
    2188:	b0 93 66 17 	sts	0x1766, r27	; 0x801766 <xNextTaskUnblockTime+0x3>
    218c:	43 c0       	rjmp	.+134    	; 0x2214 <__stack+0x15>
    218e:	e0 91 96 17 	lds	r30, 0x1796	; 0x801796 <pxDelayedTaskList>
    2192:	f0 91 97 17 	lds	r31, 0x1797	; 0x801797 <pxDelayedTaskList+0x1>
    2196:	07 80       	ldd	r0, Z+7	; 0x07
    2198:	f0 85       	ldd	r31, Z+8	; 0x08
    219a:	e0 2d       	mov	r30, r0
    219c:	c0 85       	ldd	r28, Z+8	; 0x08
    219e:	d1 85       	ldd	r29, Z+9	; 0x09
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	ac 81       	ldd	r26, Y+4	; 0x04
    21a6:	bd 81       	ldd	r27, Y+5	; 0x05
    21a8:	c8 16       	cp	r12, r24
    21aa:	d9 06       	cpc	r13, r25
    21ac:	ea 06       	cpc	r14, r26
    21ae:	fb 06       	cpc	r15, r27
    21b0:	48 f4       	brcc	.+18     	; 0x21c4 <xTaskIncrementTick+0x106>
    21b2:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <xNextTaskUnblockTime>
    21b6:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <xNextTaskUnblockTime+0x1>
    21ba:	a0 93 65 17 	sts	0x1765, r26	; 0x801765 <xNextTaskUnblockTime+0x2>
    21be:	b0 93 66 17 	sts	0x1766, r27	; 0x801766 <xNextTaskUnblockTime+0x3>
    21c2:	28 c0       	rjmp	.+80     	; 0x2214 <__stack+0x15>
    21c4:	8e 01       	movw	r16, r28
    21c6:	0e 5f       	subi	r16, 0xFE	; 254
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ca:	c8 01       	movw	r24, r16
    21cc:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    21d0:	88 8d       	ldd	r24, Y+24	; 0x18
    21d2:	99 8d       	ldd	r25, Y+25	; 0x19
    21d4:	89 2b       	or	r24, r25
    21d6:	21 f0       	breq	.+8      	; 0x21e0 <xTaskIncrementTick+0x122>
    21d8:	ce 01       	movw	r24, r28
    21da:	0e 96       	adiw	r24, 0x0e	; 14
    21dc:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    21e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e2:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    21e6:	98 17       	cp	r25, r24
    21e8:	10 f4       	brcc	.+4      	; 0x21ee <xTaskIncrementTick+0x130>
    21ea:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    21ee:	a8 9e       	mul	r10, r24
    21f0:	c0 01       	movw	r24, r0
    21f2:	11 24       	eor	r1, r1
    21f4:	b8 01       	movw	r22, r16
    21f6:	82 55       	subi	r24, 0x52	; 82
    21f8:	98 4e       	sbci	r25, 0xE8	; 232
    21fa:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    21fe:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2202:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2206:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2208:	82 8d       	ldd	r24, Z+26	; 0x1a
    220a:	98 17       	cp	r25, r24
    220c:	08 f4       	brcc	.+2      	; 0x2210 <__stack+0x11>
    220e:	ac cf       	rjmp	.-168    	; 0x2168 <xTaskIncrementTick+0xaa>
    2210:	b9 2c       	mov	r11, r9
    2212:	aa cf       	rjmp	.-172    	; 0x2168 <xTaskIncrementTick+0xaa>
    2214:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2218:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    221c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    221e:	8b e0       	ldi	r24, 0x0B	; 11
    2220:	e8 9f       	mul	r30, r24
    2222:	f0 01       	movw	r30, r0
    2224:	11 24       	eor	r1, r1
    2226:	e2 55       	subi	r30, 0x52	; 82
    2228:	f8 4e       	sbci	r31, 0xE8	; 232
    222a:	80 81       	ld	r24, Z
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	48 f0       	brcs	.+18     	; 0x2242 <__stack+0x43>
    2230:	bb 24       	eor	r11, r11
    2232:	b3 94       	inc	r11
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <__stack+0x43>
    2236:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <uxPendedTicks>
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <uxPendedTicks>
    2240:	b1 2c       	mov	r11, r1
    2242:	80 91 69 17 	lds	r24, 0x1769	; 0x801769 <xYieldPending>
    2246:	88 23       	and	r24, r24
    2248:	11 f0       	breq	.+4      	; 0x224e <__stack+0x4f>
    224a:	bb 24       	eor	r11, r11
    224c:	b3 94       	inc	r11
    224e:	8b 2d       	mov	r24, r11
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	bf 90       	pop	r11
    2262:	af 90       	pop	r10
    2264:	9f 90       	pop	r9
    2266:	08 95       	ret

00002268 <xTaskResumeAll>:
    2268:	cf 92       	push	r12
    226a:	df 92       	push	r13
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	0f 92       	push	r0
    227e:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    2282:	81 50       	subi	r24, 0x01	; 1
    2284:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <uxSchedulerSuspended>
    2288:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    228c:	81 11       	cpse	r24, r1
    228e:	5a c0       	rjmp	.+180    	; 0x2344 <xTaskResumeAll+0xdc>
    2290:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <uxCurrentNumberOfTasks>
    2294:	81 11       	cpse	r24, r1
    2296:	2c c0       	rjmp	.+88     	; 0x22f0 <xTaskResumeAll+0x88>
    2298:	58 c0       	rjmp	.+176    	; 0x234a <xTaskResumeAll+0xe2>
    229a:	d7 01       	movw	r26, r14
    229c:	17 96       	adiw	r26, 0x07	; 7
    229e:	ed 91       	ld	r30, X+
    22a0:	fc 91       	ld	r31, X
    22a2:	18 97       	sbiw	r26, 0x08	; 8
    22a4:	c0 85       	ldd	r28, Z+8	; 0x08
    22a6:	d1 85       	ldd	r29, Z+9	; 0x09
    22a8:	ce 01       	movw	r24, r28
    22aa:	0e 96       	adiw	r24, 0x0e	; 14
    22ac:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    22b0:	8e 01       	movw	r16, r28
    22b2:	0e 5f       	subi	r16, 0xFE	; 254
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	c8 01       	movw	r24, r16
    22b8:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    22bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22be:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    22c2:	98 17       	cp	r25, r24
    22c4:	10 f4       	brcc	.+4      	; 0x22ca <xTaskResumeAll+0x62>
    22c6:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    22ca:	d8 9e       	mul	r13, r24
    22cc:	c0 01       	movw	r24, r0
    22ce:	11 24       	eor	r1, r1
    22d0:	b8 01       	movw	r22, r16
    22d2:	82 55       	subi	r24, 0x52	; 82
    22d4:	98 4e       	sbci	r25, 0xE8	; 232
    22d6:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    22da:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    22de:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    22e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e6:	98 17       	cp	r25, r24
    22e8:	88 f0       	brcs	.+34     	; 0x230c <xTaskResumeAll+0xa4>
    22ea:	c0 92 69 17 	sts	0x1769, r12	; 0x801769 <xYieldPending>
    22ee:	0e c0       	rjmp	.+28     	; 0x230c <xTaskResumeAll+0xa4>
    22f0:	c0 e0       	ldi	r28, 0x00	; 0
    22f2:	d0 e0       	ldi	r29, 0x00	; 0
    22f4:	0f 2e       	mov	r0, r31
    22f6:	f9 e8       	ldi	r31, 0x89	; 137
    22f8:	ef 2e       	mov	r14, r31
    22fa:	f7 e1       	ldi	r31, 0x17	; 23
    22fc:	ff 2e       	mov	r15, r31
    22fe:	f0 2d       	mov	r31, r0
    2300:	0f 2e       	mov	r0, r31
    2302:	fb e0       	ldi	r31, 0x0B	; 11
    2304:	df 2e       	mov	r13, r31
    2306:	f0 2d       	mov	r31, r0
    2308:	cc 24       	eor	r12, r12
    230a:	c3 94       	inc	r12
    230c:	f7 01       	movw	r30, r14
    230e:	80 81       	ld	r24, Z
    2310:	81 11       	cpse	r24, r1
    2312:	c3 cf       	rjmp	.-122    	; 0x229a <xTaskResumeAll+0x32>
    2314:	cd 2b       	or	r28, r29
    2316:	09 f0       	breq	.+2      	; 0x231a <xTaskResumeAll+0xb2>
    2318:	c2 dc       	rcall	.-1660   	; 0x1c9e <prvResetNextTaskUnblockTime>
    231a:	c0 91 6a 17 	lds	r28, 0x176A	; 0x80176a <uxPendedTicks>
    231e:	cc 23       	and	r28, r28
    2320:	49 f0       	breq	.+18     	; 0x2334 <xTaskResumeAll+0xcc>
    2322:	d1 e0       	ldi	r29, 0x01	; 1
    2324:	cc de       	rcall	.-616    	; 0x20be <xTaskIncrementTick>
    2326:	81 11       	cpse	r24, r1
    2328:	d0 93 69 17 	sts	0x1769, r29	; 0x801769 <xYieldPending>
    232c:	c1 50       	subi	r28, 0x01	; 1
    232e:	d1 f7       	brne	.-12     	; 0x2324 <xTaskResumeAll+0xbc>
    2330:	10 92 6a 17 	sts	0x176A, r1	; 0x80176a <uxPendedTicks>
    2334:	80 91 69 17 	lds	r24, 0x1769	; 0x801769 <xYieldPending>
    2338:	88 23       	and	r24, r24
    233a:	31 f0       	breq	.+12     	; 0x2348 <xTaskResumeAll+0xe0>
    233c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vPortYield>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	03 c0       	rjmp	.+6      	; 0x234a <xTaskResumeAll+0xe2>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	01 c0       	rjmp	.+2      	; 0x234a <xTaskResumeAll+0xe2>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	08 95       	ret

00002360 <vTaskDelayUntil>:
    2360:	cf 92       	push	r12
    2362:	df 92       	push	r13
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	ec 01       	movw	r28, r24
    2372:	6a 01       	movw	r12, r20
    2374:	7b 01       	movw	r14, r22
    2376:	8f de       	rcall	.-738    	; 0x2096 <vTaskSuspendAll>
    2378:	00 91 6d 17 	lds	r16, 0x176D	; 0x80176d <xTickCount>
    237c:	10 91 6e 17 	lds	r17, 0x176E	; 0x80176e <xTickCount+0x1>
    2380:	20 91 6f 17 	lds	r18, 0x176F	; 0x80176f <xTickCount+0x2>
    2384:	30 91 70 17 	lds	r19, 0x1770	; 0x801770 <xTickCount+0x3>
    2388:	88 81       	ld	r24, Y
    238a:	99 81       	ldd	r25, Y+1	; 0x01
    238c:	aa 81       	ldd	r26, Y+2	; 0x02
    238e:	bb 81       	ldd	r27, Y+3	; 0x03
    2390:	ac 01       	movw	r20, r24
    2392:	bd 01       	movw	r22, r26
    2394:	4c 0d       	add	r20, r12
    2396:	5d 1d       	adc	r21, r13
    2398:	6e 1d       	adc	r22, r14
    239a:	7f 1d       	adc	r23, r15
    239c:	08 17       	cp	r16, r24
    239e:	19 07       	cpc	r17, r25
    23a0:	2a 07       	cpc	r18, r26
    23a2:	3b 07       	cpc	r19, r27
    23a4:	78 f4       	brcc	.+30     	; 0x23c4 <vTaskDelayUntil+0x64>
    23a6:	48 17       	cp	r20, r24
    23a8:	59 07       	cpc	r21, r25
    23aa:	6a 07       	cpc	r22, r26
    23ac:	7b 07       	cpc	r23, r27
    23ae:	40 f5       	brcc	.+80     	; 0x2400 <vTaskDelayUntil+0xa0>
    23b0:	48 83       	st	Y, r20
    23b2:	59 83       	std	Y+1, r21	; 0x01
    23b4:	6a 83       	std	Y+2, r22	; 0x02
    23b6:	7b 83       	std	Y+3, r23	; 0x03
    23b8:	04 17       	cp	r16, r20
    23ba:	15 07       	cpc	r17, r21
    23bc:	26 07       	cpc	r18, r22
    23be:	37 07       	cpc	r19, r23
    23c0:	a0 f4       	brcc	.+40     	; 0x23ea <vTaskDelayUntil+0x8a>
    23c2:	0b c0       	rjmp	.+22     	; 0x23da <vTaskDelayUntil+0x7a>
    23c4:	48 17       	cp	r20, r24
    23c6:	59 07       	cpc	r21, r25
    23c8:	6a 07       	cpc	r22, r26
    23ca:	7b 07       	cpc	r23, r27
    23cc:	a0 f0       	brcs	.+40     	; 0x23f6 <vTaskDelayUntil+0x96>
    23ce:	04 17       	cp	r16, r20
    23d0:	15 07       	cpc	r17, r21
    23d2:	26 07       	cpc	r18, r22
    23d4:	37 07       	cpc	r19, r23
    23d6:	78 f0       	brcs	.+30     	; 0x23f6 <vTaskDelayUntil+0x96>
    23d8:	13 c0       	rjmp	.+38     	; 0x2400 <vTaskDelayUntil+0xa0>
    23da:	cb 01       	movw	r24, r22
    23dc:	ba 01       	movw	r22, r20
    23de:	60 1b       	sub	r22, r16
    23e0:	71 0b       	sbc	r23, r17
    23e2:	82 0b       	sbc	r24, r18
    23e4:	93 0b       	sbc	r25, r19
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	84 dc       	rcall	.-1784   	; 0x1cf2 <prvAddCurrentTaskToDelayedList>
    23ea:	3e df       	rcall	.-388    	; 0x2268 <xTaskResumeAll>
    23ec:	81 11       	cpse	r24, r1
    23ee:	0d c0       	rjmp	.+26     	; 0x240a <vTaskDelayUntil+0xaa>
    23f0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vPortYield>
    23f4:	0a c0       	rjmp	.+20     	; 0x240a <vTaskDelayUntil+0xaa>
    23f6:	48 83       	st	Y, r20
    23f8:	59 83       	std	Y+1, r21	; 0x01
    23fa:	6a 83       	std	Y+2, r22	; 0x02
    23fc:	7b 83       	std	Y+3, r23	; 0x03
    23fe:	ed cf       	rjmp	.-38     	; 0x23da <vTaskDelayUntil+0x7a>
    2400:	48 83       	st	Y, r20
    2402:	59 83       	std	Y+1, r21	; 0x01
    2404:	6a 83       	std	Y+2, r22	; 0x02
    2406:	7b 83       	std	Y+3, r23	; 0x03
    2408:	f0 cf       	rjmp	.-32     	; 0x23ea <vTaskDelayUntil+0x8a>
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	ef 90       	pop	r14
    2416:	df 90       	pop	r13
    2418:	cf 90       	pop	r12
    241a:	08 95       	ret

0000241c <vTaskDelay>:
    241c:	cf 92       	push	r12
    241e:	df 92       	push	r13
    2420:	ef 92       	push	r14
    2422:	ff 92       	push	r15
    2424:	6b 01       	movw	r12, r22
    2426:	7c 01       	movw	r14, r24
    2428:	67 2b       	or	r22, r23
    242a:	68 2b       	or	r22, r24
    242c:	69 2b       	or	r22, r25
    242e:	41 f0       	breq	.+16     	; 0x2440 <vTaskDelay+0x24>
    2430:	32 de       	rcall	.-924    	; 0x2096 <vTaskSuspendAll>
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	c7 01       	movw	r24, r14
    2436:	b6 01       	movw	r22, r12
    2438:	5c dc       	rcall	.-1864   	; 0x1cf2 <prvAddCurrentTaskToDelayedList>
    243a:	16 df       	rcall	.-468    	; 0x2268 <xTaskResumeAll>
    243c:	81 11       	cpse	r24, r1
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <vTaskDelay+0x28>
    2440:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vPortYield>
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	08 95       	ret

0000244e <vTaskSetApplicationTaskTag>:
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	21 f4       	brne	.+8      	; 0x245a <vTaskSetApplicationTaskTag+0xc>
    2452:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    2456:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	0f 92       	push	r0
    2460:	fc 01       	movw	r30, r24
    2462:	72 a7       	std	Z+42, r23	; 0x2a
    2464:	61 a7       	std	Z+41, r22	; 0x29
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	08 95       	ret

0000246c <vTaskSwitchContext>:
    246c:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    2470:	88 23       	and	r24, r24
    2472:	21 f0       	breq	.+8      	; 0x247c <vTaskSwitchContext+0x10>
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 69 17 	sts	0x1769, r24	; 0x801769 <xYieldPending>
    247a:	08 95       	ret
    247c:	10 92 69 17 	sts	0x1769, r1	; 0x801769 <xYieldPending>
    2480:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2484:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2488:	81 a5       	ldd	r24, Z+41	; 0x29
    248a:	0e 94 67 04 	call	0x8ce	; 0x8ce <task_switch_out>
    248e:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
    2492:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2496:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    249a:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    249e:	2d 91       	ld	r18, X+
    24a0:	3c 91       	ld	r19, X
    24a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    24a4:	94 8d       	ldd	r25, Z+28	; 0x1c
    24a6:	82 17       	cp	r24, r18
    24a8:	93 07       	cpc	r25, r19
    24aa:	58 f0       	brcs	.+22     	; 0x24c2 <vTaskSwitchContext+0x56>
    24ac:	60 91 da 17 	lds	r22, 0x17DA	; 0x8017da <pxCurrentTCB>
    24b0:	70 91 db 17 	lds	r23, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    24b4:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    24b8:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    24bc:	63 5e       	subi	r22, 0xE3	; 227
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	a0 d5       	rcall	.+2880   	; 0x3002 <vApplicationStackOverflowHook>
    24c2:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <uxTopReadyPriority>
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	9b e0       	ldi	r25, 0x0B	; 11
    24cc:	89 9f       	mul	r24, r25
    24ce:	f0 01       	movw	r30, r0
    24d0:	11 24       	eor	r1, r1
    24d2:	e2 55       	subi	r30, 0x52	; 82
    24d4:	f8 4e       	sbci	r31, 0xE8	; 232
    24d6:	90 81       	ld	r25, Z
    24d8:	91 11       	cpse	r25, r1
    24da:	0e c0       	rjmp	.+28     	; 0x24f8 <vTaskSwitchContext+0x8c>
    24dc:	4b e0       	ldi	r20, 0x0B	; 11
    24de:	81 50       	subi	r24, 0x01	; 1
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	42 9f       	mul	r20, r18
    24e6:	f0 01       	movw	r30, r0
    24e8:	43 9f       	mul	r20, r19
    24ea:	f0 0d       	add	r31, r0
    24ec:	11 24       	eor	r1, r1
    24ee:	e2 55       	subi	r30, 0x52	; 82
    24f0:	f8 4e       	sbci	r31, 0xE8	; 232
    24f2:	90 81       	ld	r25, Z
    24f4:	99 23       	and	r25, r25
    24f6:	99 f3       	breq	.-26     	; 0x24de <vTaskSwitchContext+0x72>
    24f8:	9b e0       	ldi	r25, 0x0B	; 11
    24fa:	92 9f       	mul	r25, r18
    24fc:	a0 01       	movw	r20, r0
    24fe:	93 9f       	mul	r25, r19
    2500:	50 0d       	add	r21, r0
    2502:	11 24       	eor	r1, r1
    2504:	da 01       	movw	r26, r20
    2506:	a2 55       	subi	r26, 0x52	; 82
    2508:	b8 4e       	sbci	r27, 0xE8	; 232
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	ed 91       	ld	r30, X+
    250e:	fc 91       	ld	r31, X
    2510:	12 97       	sbiw	r26, 0x02	; 2
    2512:	04 80       	ldd	r0, Z+4	; 0x04
    2514:	f5 81       	ldd	r31, Z+5	; 0x05
    2516:	e0 2d       	mov	r30, r0
    2518:	12 96       	adiw	r26, 0x02	; 2
    251a:	fc 93       	st	X, r31
    251c:	ee 93       	st	-X, r30
    251e:	11 97       	sbiw	r26, 0x01	; 1
    2520:	4f 54       	subi	r20, 0x4F	; 79
    2522:	58 4e       	sbci	r21, 0xE8	; 232
    2524:	e4 17       	cp	r30, r20
    2526:	f5 07       	cpc	r31, r21
    2528:	29 f4       	brne	.+10     	; 0x2534 <vTaskSwitchContext+0xc8>
    252a:	44 81       	ldd	r20, Z+4	; 0x04
    252c:	55 81       	ldd	r21, Z+5	; 0x05
    252e:	fd 01       	movw	r30, r26
    2530:	52 83       	std	Z+2, r21	; 0x02
    2532:	41 83       	std	Z+1, r20	; 0x01
    2534:	9b e0       	ldi	r25, 0x0B	; 11
    2536:	92 9f       	mul	r25, r18
    2538:	f0 01       	movw	r30, r0
    253a:	93 9f       	mul	r25, r19
    253c:	f0 0d       	add	r31, r0
    253e:	11 24       	eor	r1, r1
    2540:	e2 55       	subi	r30, 0x52	; 82
    2542:	f8 4e       	sbci	r31, 0xE8	; 232
    2544:	01 80       	ldd	r0, Z+1	; 0x01
    2546:	f2 81       	ldd	r31, Z+2	; 0x02
    2548:	e0 2d       	mov	r30, r0
    254a:	20 85       	ldd	r18, Z+8	; 0x08
    254c:	31 85       	ldd	r19, Z+9	; 0x09
    254e:	30 93 db 17 	sts	0x17DB, r19	; 0x8017db <pxCurrentTCB+0x1>
    2552:	20 93 da 17 	sts	0x17DA, r18	; 0x8017da <pxCurrentTCB>
    2556:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    255a:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    255e:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2562:	81 a5       	ldd	r24, Z+41	; 0x29
    2564:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <task_switch_in>
    2568:	08 95       	ret

0000256a <vTaskPlaceOnEventList>:
    256a:	cf 92       	push	r12
    256c:	df 92       	push	r13
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	6a 01       	movw	r12, r20
    2574:	7b 01       	movw	r14, r22
    2576:	60 91 da 17 	lds	r22, 0x17DA	; 0x8017da <pxCurrentTCB>
    257a:	70 91 db 17 	lds	r23, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    257e:	62 5f       	subi	r22, 0xF2	; 242
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsert>
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	c7 01       	movw	r24, r14
    258a:	b6 01       	movw	r22, r12
    258c:	b2 db       	rcall	.-2204   	; 0x1cf2 <prvAddCurrentTaskToDelayedList>
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	df 90       	pop	r13
    2594:	cf 90       	pop	r12
    2596:	08 95       	ret

00002598 <vTaskPlaceOnEventListRestricted>:
    2598:	cf 92       	push	r12
    259a:	df 92       	push	r13
    259c:	ef 92       	push	r14
    259e:	ff 92       	push	r15
    25a0:	cf 93       	push	r28
    25a2:	6a 01       	movw	r12, r20
    25a4:	7b 01       	movw	r14, r22
    25a6:	c2 2f       	mov	r28, r18
    25a8:	60 91 da 17 	lds	r22, 0x17DA	; 0x8017da <pxCurrentTCB>
    25ac:	70 91 db 17 	lds	r23, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    25b0:	62 5f       	subi	r22, 0xF2	; 242
    25b2:	7f 4f       	sbci	r23, 0xFF	; 255
    25b4:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    25b8:	cc 23       	and	r28, r28
    25ba:	21 f0       	breq	.+8      	; 0x25c4 <vTaskPlaceOnEventListRestricted+0x2c>
    25bc:	cc 24       	eor	r12, r12
    25be:	ca 94       	dec	r12
    25c0:	dc 2c       	mov	r13, r12
    25c2:	76 01       	movw	r14, r12
    25c4:	4c 2f       	mov	r20, r28
    25c6:	c7 01       	movw	r24, r14
    25c8:	b6 01       	movw	r22, r12
    25ca:	93 db       	rcall	.-2266   	; 0x1cf2 <prvAddCurrentTaskToDelayedList>
    25cc:	cf 91       	pop	r28
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	08 95       	ret

000025d8 <xTaskRemoveFromEventList>:
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	dc 01       	movw	r26, r24
    25e2:	17 96       	adiw	r26, 0x07	; 7
    25e4:	ed 91       	ld	r30, X+
    25e6:	fc 91       	ld	r31, X
    25e8:	18 97       	sbiw	r26, 0x08	; 8
    25ea:	c0 85       	ldd	r28, Z+8	; 0x08
    25ec:	d1 85       	ldd	r29, Z+9	; 0x09
    25ee:	8e 01       	movw	r16, r28
    25f0:	02 5f       	subi	r16, 0xF2	; 242
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	c8 01       	movw	r24, r16
    25f6:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    25fa:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    25fe:	81 11       	cpse	r24, r1
    2600:	16 c0       	rjmp	.+44     	; 0x262e <xTaskRemoveFromEventList+0x56>
    2602:	0c 50       	subi	r16, 0x0C	; 12
    2604:	11 09       	sbc	r17, r1
    2606:	c8 01       	movw	r24, r16
    2608:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    260c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    260e:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    2612:	98 17       	cp	r25, r24
    2614:	10 f4       	brcc	.+4      	; 0x261a <xTaskRemoveFromEventList+0x42>
    2616:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    261a:	bb e0       	ldi	r27, 0x0B	; 11
    261c:	8b 9f       	mul	r24, r27
    261e:	c0 01       	movw	r24, r0
    2620:	11 24       	eor	r1, r1
    2622:	b8 01       	movw	r22, r16
    2624:	82 55       	subi	r24, 0x52	; 82
    2626:	98 4e       	sbci	r25, 0xE8	; 232
    2628:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <xTaskRemoveFromEventList+0x60>
    262e:	b8 01       	movw	r22, r16
    2630:	89 e8       	ldi	r24, 0x89	; 137
    2632:	97 e1       	ldi	r25, 0x17	; 23
    2634:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    2638:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    263c:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2640:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2642:	82 8d       	ldd	r24, Z+26	; 0x1a
    2644:	89 17       	cp	r24, r25
    2646:	20 f4       	brcc	.+8      	; 0x2650 <xTaskRemoveFromEventList+0x78>
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	80 93 69 17 	sts	0x1769, r24	; 0x801769 <xYieldPending>
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <xTaskRemoveFromEventList+0x7a>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	08 95       	ret

0000265c <vTaskSetTimeOutState>:
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	0f 92       	push	r0
    2662:	20 91 68 17 	lds	r18, 0x1768	; 0x801768 <xNumOfOverflows>
    2666:	fc 01       	movw	r30, r24
    2668:	20 83       	st	Z, r18
    266a:	40 91 6d 17 	lds	r20, 0x176D	; 0x80176d <xTickCount>
    266e:	50 91 6e 17 	lds	r21, 0x176E	; 0x80176e <xTickCount+0x1>
    2672:	60 91 6f 17 	lds	r22, 0x176F	; 0x80176f <xTickCount+0x2>
    2676:	70 91 70 17 	lds	r23, 0x1770	; 0x801770 <xTickCount+0x3>
    267a:	41 83       	std	Z+1, r20	; 0x01
    267c:	52 83       	std	Z+2, r21	; 0x02
    267e:	63 83       	std	Z+3, r22	; 0x03
    2680:	74 83       	std	Z+4, r23	; 0x04
    2682:	0f 90       	pop	r0
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	08 95       	ret

00002688 <vTaskInternalSetTimeOutState>:
    2688:	20 91 68 17 	lds	r18, 0x1768	; 0x801768 <xNumOfOverflows>
    268c:	fc 01       	movw	r30, r24
    268e:	20 83       	st	Z, r18
    2690:	40 91 6d 17 	lds	r20, 0x176D	; 0x80176d <xTickCount>
    2694:	50 91 6e 17 	lds	r21, 0x176E	; 0x80176e <xTickCount+0x1>
    2698:	60 91 6f 17 	lds	r22, 0x176F	; 0x80176f <xTickCount+0x2>
    269c:	70 91 70 17 	lds	r23, 0x1770	; 0x801770 <xTickCount+0x3>
    26a0:	41 83       	std	Z+1, r20	; 0x01
    26a2:	52 83       	std	Z+2, r21	; 0x02
    26a4:	63 83       	std	Z+3, r22	; 0x03
    26a6:	74 83       	std	Z+4, r23	; 0x04
    26a8:	08 95       	ret

000026aa <xTaskCheckForTimeOut>:
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	fb 01       	movw	r30, r22
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	0f 92       	push	r0
    26c2:	40 91 6d 17 	lds	r20, 0x176D	; 0x80176d <xTickCount>
    26c6:	50 91 6e 17 	lds	r21, 0x176E	; 0x80176e <xTickCount+0x1>
    26ca:	60 91 6f 17 	lds	r22, 0x176F	; 0x80176f <xTickCount+0x2>
    26ce:	70 91 70 17 	lds	r23, 0x1770	; 0x801770 <xTickCount+0x3>
    26d2:	00 81       	ld	r16, Z
    26d4:	11 81       	ldd	r17, Z+1	; 0x01
    26d6:	22 81       	ldd	r18, Z+2	; 0x02
    26d8:	33 81       	ldd	r19, Z+3	; 0x03
    26da:	0f 3f       	cpi	r16, 0xFF	; 255
    26dc:	af ef       	ldi	r26, 0xFF	; 255
    26de:	1a 07       	cpc	r17, r26
    26e0:	2a 07       	cpc	r18, r26
    26e2:	3a 07       	cpc	r19, r26
    26e4:	49 f1       	breq	.+82     	; 0x2738 <xTaskCheckForTimeOut+0x8e>
    26e6:	ec 01       	movw	r28, r24
    26e8:	c9 80       	ldd	r12, Y+1	; 0x01
    26ea:	da 80       	ldd	r13, Y+2	; 0x02
    26ec:	eb 80       	ldd	r14, Y+3	; 0x03
    26ee:	fc 80       	ldd	r15, Y+4	; 0x04
    26f0:	a0 91 68 17 	lds	r26, 0x1768	; 0x801768 <xNumOfOverflows>
    26f4:	b8 81       	ld	r27, Y
    26f6:	ba 17       	cp	r27, r26
    26f8:	29 f0       	breq	.+10     	; 0x2704 <xTaskCheckForTimeOut+0x5a>
    26fa:	4c 15       	cp	r20, r12
    26fc:	5d 05       	cpc	r21, r13
    26fe:	6e 05       	cpc	r22, r14
    2700:	7f 05       	cpc	r23, r15
    2702:	e0 f4       	brcc	.+56     	; 0x273c <xTaskCheckForTimeOut+0x92>
    2704:	4c 19       	sub	r20, r12
    2706:	5d 09       	sbc	r21, r13
    2708:	6e 09       	sbc	r22, r14
    270a:	7f 09       	sbc	r23, r15
    270c:	40 17       	cp	r20, r16
    270e:	51 07       	cpc	r21, r17
    2710:	62 07       	cpc	r22, r18
    2712:	73 07       	cpc	r23, r19
    2714:	58 f4       	brcc	.+22     	; 0x272c <xTaskCheckForTimeOut+0x82>
    2716:	04 1b       	sub	r16, r20
    2718:	15 0b       	sbc	r17, r21
    271a:	26 0b       	sbc	r18, r22
    271c:	37 0b       	sbc	r19, r23
    271e:	00 83       	st	Z, r16
    2720:	11 83       	std	Z+1, r17	; 0x01
    2722:	22 83       	std	Z+2, r18	; 0x02
    2724:	33 83       	std	Z+3, r19	; 0x03
    2726:	b0 df       	rcall	.-160    	; 0x2688 <vTaskInternalSetTimeOutState>
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	09 c0       	rjmp	.+18     	; 0x273e <xTaskCheckForTimeOut+0x94>
    272c:	10 82       	st	Z, r1
    272e:	11 82       	std	Z+1, r1	; 0x01
    2730:	12 82       	std	Z+2, r1	; 0x02
    2732:	13 82       	std	Z+3, r1	; 0x03
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	03 c0       	rjmp	.+6      	; 0x273e <xTaskCheckForTimeOut+0x94>
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	01 c0       	rjmp	.+2      	; 0x273e <xTaskCheckForTimeOut+0x94>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	0f 90       	pop	r0
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	08 95       	ret

00002754 <vTaskMissedYield>:
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	80 93 69 17 	sts	0x1769, r24	; 0x801769 <xYieldPending>
    275a:	08 95       	ret

0000275c <xTaskGetCurrentTaskHandle>:
    275c:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    2760:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2764:	08 95       	ret

00002766 <xTaskGetSchedulerState>:
    2766:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <xSchedulerRunning>
    276a:	88 23       	and	r24, r24
    276c:	31 f0       	breq	.+12     	; 0x277a <xTaskGetSchedulerState+0x14>
    276e:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    2772:	88 23       	and	r24, r24
    2774:	21 f0       	breq	.+8      	; 0x277e <xTaskGetSchedulerState+0x18>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	08 95       	ret
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	08 95       	ret
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	08 95       	ret

00002782 <xTaskPriorityInherit>:
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	fc 01       	movw	r30, r24
    278c:	89 2b       	or	r24, r25
    278e:	09 f4       	brne	.+2      	; 0x2792 <xTaskPriorityInherit+0x10>
    2790:	60 c0       	rjmp	.+192    	; 0x2852 <xTaskPriorityInherit+0xd0>
    2792:	82 8d       	ldd	r24, Z+26	; 0x1a
    2794:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
    2798:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    279c:	5a 96       	adiw	r26, 0x1a	; 26
    279e:	9c 91       	ld	r25, X
    27a0:	89 17       	cp	r24, r25
    27a2:	08 f0       	brcs	.+2      	; 0x27a6 <xTaskPriorityInherit+0x24>
    27a4:	4a c0       	rjmp	.+148    	; 0x283a <xTaskPriorityInherit+0xb8>
    27a6:	46 85       	ldd	r20, Z+14	; 0x0e
    27a8:	57 85       	ldd	r21, Z+15	; 0x0f
    27aa:	60 89       	ldd	r22, Z+16	; 0x10
    27ac:	71 89       	ldd	r23, Z+17	; 0x11
    27ae:	77 23       	and	r23, r23
    27b0:	94 f0       	brlt	.+36     	; 0x27d6 <xTaskPriorityInherit+0x54>
    27b2:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
    27b6:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    27ba:	5a 96       	adiw	r26, 0x1a	; 26
    27bc:	9c 91       	ld	r25, X
    27be:	44 e0       	ldi	r20, 0x04	; 4
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	49 1b       	sub	r20, r25
    27c8:	51 09       	sbc	r21, r1
    27ca:	61 09       	sbc	r22, r1
    27cc:	71 09       	sbc	r23, r1
    27ce:	46 87       	std	Z+14, r20	; 0x0e
    27d0:	57 87       	std	Z+15, r21	; 0x0f
    27d2:	60 8b       	std	Z+16, r22	; 0x10
    27d4:	71 8b       	std	Z+17, r23	; 0x11
    27d6:	2b e0       	ldi	r18, 0x0B	; 11
    27d8:	82 9f       	mul	r24, r18
    27da:	c0 01       	movw	r24, r0
    27dc:	11 24       	eor	r1, r1
    27de:	82 55       	subi	r24, 0x52	; 82
    27e0:	98 4e       	sbci	r25, 0xE8	; 232
    27e2:	24 85       	ldd	r18, Z+12	; 0x0c
    27e4:	35 85       	ldd	r19, Z+13	; 0x0d
    27e6:	28 17       	cp	r18, r24
    27e8:	39 07       	cpc	r19, r25
    27ea:	f1 f4       	brne	.+60     	; 0x2828 <xTaskPriorityInherit+0xa6>
    27ec:	8f 01       	movw	r16, r30
    27ee:	ef 01       	movw	r28, r30
    27f0:	22 96       	adiw	r28, 0x02	; 2
    27f2:	ce 01       	movw	r24, r28
    27f4:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    27f8:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    27fc:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2800:	82 8d       	ldd	r24, Z+26	; 0x1a
    2802:	f8 01       	movw	r30, r16
    2804:	82 8f       	std	Z+26, r24	; 0x1a
    2806:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    280a:	98 17       	cp	r25, r24
    280c:	10 f4       	brcc	.+4      	; 0x2812 <xTaskPriorityInherit+0x90>
    280e:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    2812:	fb e0       	ldi	r31, 0x0B	; 11
    2814:	8f 9f       	mul	r24, r31
    2816:	c0 01       	movw	r24, r0
    2818:	11 24       	eor	r1, r1
    281a:	be 01       	movw	r22, r28
    281c:	82 55       	subi	r24, 0x52	; 82
    281e:	98 4e       	sbci	r25, 0xE8	; 232
    2820:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	16 c0       	rjmp	.+44     	; 0x2854 <xTaskPriorityInherit+0xd2>
    2828:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
    282c:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2830:	5a 96       	adiw	r26, 0x1a	; 26
    2832:	8c 91       	ld	r24, X
    2834:	82 8f       	std	Z+26, r24	; 0x1a
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	0d c0       	rjmp	.+26     	; 0x2854 <xTaskPriorityInherit+0xd2>
    283a:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <pxCurrentTCB>
    283e:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	27 a1       	ldd	r18, Z+39	; 0x27
    2846:	5a 96       	adiw	r26, 0x1a	; 26
    2848:	9c 91       	ld	r25, X
    284a:	29 17       	cp	r18, r25
    284c:	18 f0       	brcs	.+6      	; 0x2854 <xTaskPriorityInherit+0xd2>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <xTaskPriorityInherit+0xd2>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	08 95       	ret

0000285e <xTaskPriorityDisinherit>:
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	fc 01       	movw	r30, r24
    2868:	89 2b       	or	r24, r25
    286a:	79 f1       	breq	.+94     	; 0x28ca <xTaskPriorityDisinherit+0x6c>
    286c:	80 a5       	ldd	r24, Z+40	; 0x28
    286e:	81 50       	subi	r24, 0x01	; 1
    2870:	80 a7       	std	Z+40, r24	; 0x28
    2872:	22 8d       	ldd	r18, Z+26	; 0x1a
    2874:	97 a1       	ldd	r25, Z+39	; 0x27
    2876:	29 17       	cp	r18, r25
    2878:	51 f1       	breq	.+84     	; 0x28ce <xTaskPriorityDisinherit+0x70>
    287a:	81 11       	cpse	r24, r1
    287c:	2a c0       	rjmp	.+84     	; 0x28d2 <xTaskPriorityDisinherit+0x74>
    287e:	ef 01       	movw	r28, r30
    2880:	8f 01       	movw	r16, r30
    2882:	0e 5f       	subi	r16, 0xFE	; 254
    2884:	1f 4f       	sbci	r17, 0xFF	; 255
    2886:	c8 01       	movw	r24, r16
    2888:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    288c:	8f a1       	ldd	r24, Y+39	; 0x27
    288e:	8a 8f       	std	Y+26, r24	; 0x1a
    2890:	44 e0       	ldi	r20, 0x04	; 4
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	48 1b       	sub	r20, r24
    289a:	51 09       	sbc	r21, r1
    289c:	61 09       	sbc	r22, r1
    289e:	71 09       	sbc	r23, r1
    28a0:	4e 87       	std	Y+14, r20	; 0x0e
    28a2:	5f 87       	std	Y+15, r21	; 0x0f
    28a4:	68 8b       	std	Y+16, r22	; 0x10
    28a6:	79 8b       	std	Y+17, r23	; 0x11
    28a8:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    28ac:	98 17       	cp	r25, r24
    28ae:	10 f4       	brcc	.+4      	; 0x28b4 <xTaskPriorityDisinherit+0x56>
    28b0:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    28b4:	2b e0       	ldi	r18, 0x0B	; 11
    28b6:	82 9f       	mul	r24, r18
    28b8:	c0 01       	movw	r24, r0
    28ba:	11 24       	eor	r1, r1
    28bc:	b8 01       	movw	r22, r16
    28be:	82 55       	subi	r24, 0x52	; 82
    28c0:	98 4e       	sbci	r25, 0xE8	; 232
    28c2:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	05 c0       	rjmp	.+10     	; 0x28d4 <xTaskPriorityDisinherit+0x76>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <xTaskPriorityDisinherit+0x76>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <xTaskPriorityDisinherit+0x76>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	08 95       	ret

000028de <vTaskPriorityDisinheritAfterTimeout>:
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	fc 01       	movw	r30, r24
    28e8:	89 2b       	or	r24, r25
    28ea:	09 f4       	brne	.+2      	; 0x28ee <vTaskPriorityDisinheritAfterTimeout+0x10>
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    28ee:	87 a1       	ldd	r24, Z+39	; 0x27
    28f0:	86 17       	cp	r24, r22
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    28f4:	86 2f       	mov	r24, r22
    28f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    28f8:	98 17       	cp	r25, r24
    28fa:	c1 f1       	breq	.+112    	; 0x296c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    28fc:	20 a5       	ldd	r18, Z+40	; 0x28
    28fe:	21 30       	cpi	r18, 0x01	; 1
    2900:	a9 f5       	brne	.+106    	; 0x296c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2902:	82 8f       	std	Z+26, r24	; 0x1a
    2904:	46 85       	ldd	r20, Z+14	; 0x0e
    2906:	57 85       	ldd	r21, Z+15	; 0x0f
    2908:	60 89       	ldd	r22, Z+16	; 0x10
    290a:	71 89       	ldd	r23, Z+17	; 0x11
    290c:	77 23       	and	r23, r23
    290e:	64 f0       	brlt	.+24     	; 0x2928 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2910:	44 e0       	ldi	r20, 0x04	; 4
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	48 1b       	sub	r20, r24
    291a:	51 09       	sbc	r21, r1
    291c:	61 09       	sbc	r22, r1
    291e:	71 09       	sbc	r23, r1
    2920:	46 87       	std	Z+14, r20	; 0x0e
    2922:	57 87       	std	Z+15, r21	; 0x0f
    2924:	60 8b       	std	Z+16, r22	; 0x10
    2926:	71 8b       	std	Z+17, r23	; 0x11
    2928:	2b e0       	ldi	r18, 0x0B	; 11
    292a:	92 9f       	mul	r25, r18
    292c:	c0 01       	movw	r24, r0
    292e:	11 24       	eor	r1, r1
    2930:	82 55       	subi	r24, 0x52	; 82
    2932:	98 4e       	sbci	r25, 0xE8	; 232
    2934:	24 85       	ldd	r18, Z+12	; 0x0c
    2936:	35 85       	ldd	r19, Z+13	; 0x0d
    2938:	28 17       	cp	r18, r24
    293a:	39 07       	cpc	r19, r25
    293c:	b9 f4       	brne	.+46     	; 0x296c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    293e:	ef 01       	movw	r28, r30
    2940:	8f 01       	movw	r16, r30
    2942:	0e 5f       	subi	r16, 0xFE	; 254
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
    2946:	c8 01       	movw	r24, r16
    2948:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    294c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    294e:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    2952:	98 17       	cp	r25, r24
    2954:	10 f4       	brcc	.+4      	; 0x295a <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2956:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    295a:	2b e0       	ldi	r18, 0x0B	; 11
    295c:	82 9f       	mul	r24, r18
    295e:	c0 01       	movw	r24, r0
    2960:	11 24       	eor	r1, r1
    2962:	b8 01       	movw	r22, r16
    2964:	82 55       	subi	r24, 0x52	; 82
    2966:	98 4e       	sbci	r25, 0xE8	; 232
    2968:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	08 95       	ret

00002976 <pvTaskIncrementMutexHeldCount>:
    2976:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    297a:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    297e:	89 2b       	or	r24, r25
    2980:	39 f0       	breq	.+14     	; 0x2990 <pvTaskIncrementMutexHeldCount+0x1a>
    2982:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2986:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    298a:	80 a5       	ldd	r24, Z+40	; 0x28
    298c:	8f 5f       	subi	r24, 0xFF	; 255
    298e:	80 a7       	std	Z+40, r24	; 0x28
    2990:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    2994:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2998:	08 95       	ret

0000299a <xTaskNotifyWait>:
    299a:	4f 92       	push	r4
    299c:	5f 92       	push	r5
    299e:	6f 92       	push	r6
    29a0:	7f 92       	push	r7
    29a2:	8f 92       	push	r8
    29a4:	9f 92       	push	r9
    29a6:	af 92       	push	r10
    29a8:	bf 92       	push	r11
    29aa:	cf 92       	push	r12
    29ac:	df 92       	push	r13
    29ae:	ef 92       	push	r14
    29b0:	ff 92       	push	r15
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	49 01       	movw	r8, r18
    29b8:	5a 01       	movw	r10, r20
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	0f 92       	push	r0
    29c0:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    29c4:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    29c8:	27 a5       	ldd	r18, Z+47	; 0x2f
    29ca:	22 30       	cpi	r18, 0x02	; 2
    29cc:	39 f1       	breq	.+78     	; 0x2a1c <xTaskNotifyWait+0x82>
    29ce:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    29d2:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    29d6:	43 a4       	ldd	r4, Z+43	; 0x2b
    29d8:	54 a4       	ldd	r5, Z+44	; 0x2c
    29da:	65 a4       	ldd	r6, Z+45	; 0x2d
    29dc:	76 a4       	ldd	r7, Z+46	; 0x2e
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	80 95       	com	r24
    29e4:	90 95       	com	r25
    29e6:	a0 95       	com	r26
    29e8:	b0 95       	com	r27
    29ea:	84 21       	and	r24, r4
    29ec:	95 21       	and	r25, r5
    29ee:	a6 21       	and	r26, r6
    29f0:	b7 21       	and	r27, r7
    29f2:	83 a7       	std	Z+43, r24	; 0x2b
    29f4:	94 a7       	std	Z+44, r25	; 0x2c
    29f6:	a5 a7       	std	Z+45, r26	; 0x2d
    29f8:	b6 a7       	std	Z+46, r27	; 0x2e
    29fa:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    29fe:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	87 a7       	std	Z+47, r24	; 0x2f
    2a06:	c1 14       	cp	r12, r1
    2a08:	d1 04       	cpc	r13, r1
    2a0a:	e1 04       	cpc	r14, r1
    2a0c:	f1 04       	cpc	r15, r1
    2a0e:	31 f0       	breq	.+12     	; 0x2a1c <xTaskNotifyWait+0x82>
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	c7 01       	movw	r24, r14
    2a14:	b6 01       	movw	r22, r12
    2a16:	6d d9       	rcall	.-3366   	; 0x1cf2 <prvAddCurrentTaskToDelayedList>
    2a18:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vPortYield>
    2a1c:	0f 90       	pop	r0
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	0f 92       	push	r0
    2a26:	01 15       	cp	r16, r1
    2a28:	11 05       	cpc	r17, r1
    2a2a:	69 f0       	breq	.+26     	; 0x2a46 <xTaskNotifyWait+0xac>
    2a2c:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2a30:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2a34:	83 a5       	ldd	r24, Z+43	; 0x2b
    2a36:	94 a5       	ldd	r25, Z+44	; 0x2c
    2a38:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2a3a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	80 83       	st	Z, r24
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	a2 83       	std	Z+2, r26	; 0x02
    2a44:	b3 83       	std	Z+3, r27	; 0x03
    2a46:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2a4a:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2a4e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a50:	82 30       	cpi	r24, 0x02	; 2
    2a52:	b1 f4       	brne	.+44     	; 0x2a80 <xTaskNotifyWait+0xe6>
    2a54:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2a58:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2a5c:	83 a5       	ldd	r24, Z+43	; 0x2b
    2a5e:	94 a5       	ldd	r25, Z+44	; 0x2c
    2a60:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2a62:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2a64:	80 94       	com	r8
    2a66:	90 94       	com	r9
    2a68:	a0 94       	com	r10
    2a6a:	b0 94       	com	r11
    2a6c:	88 22       	and	r8, r24
    2a6e:	99 22       	and	r9, r25
    2a70:	aa 22       	and	r10, r26
    2a72:	bb 22       	and	r11, r27
    2a74:	83 a6       	std	Z+43, r8	; 0x2b
    2a76:	94 a6       	std	Z+44, r9	; 0x2c
    2a78:	a5 a6       	std	Z+45, r10	; 0x2d
    2a7a:	b6 a6       	std	Z+46, r11	; 0x2e
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	01 c0       	rjmp	.+2      	; 0x2a82 <xTaskNotifyWait+0xe8>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2a86:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2a8a:	17 a6       	std	Z+47, r1	; 0x2f
    2a8c:	0f 90       	pop	r0
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	bf 90       	pop	r11
    2a9e:	af 90       	pop	r10
    2aa0:	9f 90       	pop	r9
    2aa2:	8f 90       	pop	r8
    2aa4:	7f 90       	pop	r7
    2aa6:	6f 90       	pop	r6
    2aa8:	5f 90       	pop	r5
    2aaa:	4f 90       	pop	r4
    2aac:	08 95       	ret

00002aae <xTaskGenericNotify>:
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	0f 92       	push	r0
    2abe:	01 15       	cp	r16, r1
    2ac0:	11 05       	cpc	r17, r1
    2ac2:	49 f0       	breq	.+18     	; 0x2ad6 <xTaskGenericNotify+0x28>
    2ac4:	83 a5       	ldd	r24, Z+43	; 0x2b
    2ac6:	94 a5       	ldd	r25, Z+44	; 0x2c
    2ac8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2aca:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2acc:	e8 01       	movw	r28, r16
    2ace:	88 83       	st	Y, r24
    2ad0:	99 83       	std	Y+1, r25	; 0x01
    2ad2:	aa 83       	std	Y+2, r26	; 0x02
    2ad4:	bb 83       	std	Y+3, r27	; 0x03
    2ad6:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ad8:	92 e0       	ldi	r25, 0x02	; 2
    2ada:	97 a7       	std	Z+47, r25	; 0x2f
    2adc:	22 30       	cpi	r18, 0x02	; 2
    2ade:	b1 f0       	breq	.+44     	; 0x2b0c <xTaskGenericNotify+0x5e>
    2ae0:	18 f4       	brcc	.+6      	; 0x2ae8 <xTaskGenericNotify+0x3a>
    2ae2:	21 30       	cpi	r18, 0x01	; 1
    2ae4:	31 f0       	breq	.+12     	; 0x2af2 <xTaskGenericNotify+0x44>
    2ae6:	2a c0       	rjmp	.+84     	; 0x2b3c <xTaskGenericNotify+0x8e>
    2ae8:	23 30       	cpi	r18, 0x03	; 3
    2aea:	e9 f0       	breq	.+58     	; 0x2b26 <xTaskGenericNotify+0x78>
    2aec:	24 30       	cpi	r18, 0x04	; 4
    2aee:	01 f1       	breq	.+64     	; 0x2b30 <xTaskGenericNotify+0x82>
    2af0:	25 c0       	rjmp	.+74     	; 0x2b3c <xTaskGenericNotify+0x8e>
    2af2:	03 a5       	ldd	r16, Z+43	; 0x2b
    2af4:	14 a5       	ldd	r17, Z+44	; 0x2c
    2af6:	25 a5       	ldd	r18, Z+45	; 0x2d
    2af8:	36 a5       	ldd	r19, Z+46	; 0x2e
    2afa:	40 2b       	or	r20, r16
    2afc:	51 2b       	or	r21, r17
    2afe:	62 2b       	or	r22, r18
    2b00:	73 2b       	or	r23, r19
    2b02:	43 a7       	std	Z+43, r20	; 0x2b
    2b04:	54 a7       	std	Z+44, r21	; 0x2c
    2b06:	65 a7       	std	Z+45, r22	; 0x2d
    2b08:	76 a7       	std	Z+46, r23	; 0x2e
    2b0a:	18 c0       	rjmp	.+48     	; 0x2b3c <xTaskGenericNotify+0x8e>
    2b0c:	43 a5       	ldd	r20, Z+43	; 0x2b
    2b0e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2b10:	65 a5       	ldd	r22, Z+45	; 0x2d
    2b12:	76 a5       	ldd	r23, Z+46	; 0x2e
    2b14:	4f 5f       	subi	r20, 0xFF	; 255
    2b16:	5f 4f       	sbci	r21, 0xFF	; 255
    2b18:	6f 4f       	sbci	r22, 0xFF	; 255
    2b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1c:	43 a7       	std	Z+43, r20	; 0x2b
    2b1e:	54 a7       	std	Z+44, r21	; 0x2c
    2b20:	65 a7       	std	Z+45, r22	; 0x2d
    2b22:	76 a7       	std	Z+46, r23	; 0x2e
    2b24:	0b c0       	rjmp	.+22     	; 0x2b3c <xTaskGenericNotify+0x8e>
    2b26:	43 a7       	std	Z+43, r20	; 0x2b
    2b28:	54 a7       	std	Z+44, r21	; 0x2c
    2b2a:	65 a7       	std	Z+45, r22	; 0x2d
    2b2c:	76 a7       	std	Z+46, r23	; 0x2e
    2b2e:	06 c0       	rjmp	.+12     	; 0x2b3c <xTaskGenericNotify+0x8e>
    2b30:	82 30       	cpi	r24, 0x02	; 2
    2b32:	49 f1       	breq	.+82     	; 0x2b86 <xTaskGenericNotify+0xd8>
    2b34:	43 a7       	std	Z+43, r20	; 0x2b
    2b36:	54 a7       	std	Z+44, r21	; 0x2c
    2b38:	65 a7       	std	Z+45, r22	; 0x2d
    2b3a:	76 a7       	std	Z+46, r23	; 0x2e
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	29 f5       	brne	.+74     	; 0x2b8a <xTaskGenericNotify+0xdc>
    2b40:	ef 01       	movw	r28, r30
    2b42:	8f 01       	movw	r16, r30
    2b44:	0e 5f       	subi	r16, 0xFE	; 254
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	c8 01       	movw	r24, r16
    2b4a:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    2b4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b50:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    2b54:	98 17       	cp	r25, r24
    2b56:	10 f4       	brcc	.+4      	; 0x2b5c <xTaskGenericNotify+0xae>
    2b58:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    2b5c:	2b e0       	ldi	r18, 0x0B	; 11
    2b5e:	82 9f       	mul	r24, r18
    2b60:	c0 01       	movw	r24, r0
    2b62:	11 24       	eor	r1, r1
    2b64:	b8 01       	movw	r22, r16
    2b66:	82 55       	subi	r24, 0x52	; 82
    2b68:	98 4e       	sbci	r25, 0xE8	; 232
    2b6a:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    2b6e:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2b72:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2b76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b78:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b7a:	89 17       	cp	r24, r25
    2b7c:	40 f4       	brcc	.+16     	; 0x2b8e <xTaskGenericNotify+0xe0>
    2b7e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vPortYield>
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	05 c0       	rjmp	.+10     	; 0x2b90 <xTaskGenericNotify+0xe2>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	03 c0       	rjmp	.+6      	; 0x2b90 <xTaskGenericNotify+0xe2>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <xTaskGenericNotify+0xe2>
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	0f 90       	pop	r0
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	08 95       	ret

00002b9e <xTaskGenericNotifyFromISR>:
    2b9e:	ef 92       	push	r14
    2ba0:	ff 92       	push	r15
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	fc 01       	movw	r30, r24
    2bac:	01 15       	cp	r16, r1
    2bae:	11 05       	cpc	r17, r1
    2bb0:	49 f0       	breq	.+18     	; 0x2bc4 <xTaskGenericNotifyFromISR+0x26>
    2bb2:	83 a5       	ldd	r24, Z+43	; 0x2b
    2bb4:	94 a5       	ldd	r25, Z+44	; 0x2c
    2bb6:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2bb8:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2bba:	e8 01       	movw	r28, r16
    2bbc:	88 83       	st	Y, r24
    2bbe:	99 83       	std	Y+1, r25	; 0x01
    2bc0:	aa 83       	std	Y+2, r26	; 0x02
    2bc2:	bb 83       	std	Y+3, r27	; 0x03
    2bc4:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bc6:	92 e0       	ldi	r25, 0x02	; 2
    2bc8:	97 a7       	std	Z+47, r25	; 0x2f
    2bca:	22 30       	cpi	r18, 0x02	; 2
    2bcc:	b1 f0       	breq	.+44     	; 0x2bfa <xTaskGenericNotifyFromISR+0x5c>
    2bce:	18 f4       	brcc	.+6      	; 0x2bd6 <xTaskGenericNotifyFromISR+0x38>
    2bd0:	21 30       	cpi	r18, 0x01	; 1
    2bd2:	31 f0       	breq	.+12     	; 0x2be0 <xTaskGenericNotifyFromISR+0x42>
    2bd4:	2a c0       	rjmp	.+84     	; 0x2c2a <xTaskGenericNotifyFromISR+0x8c>
    2bd6:	23 30       	cpi	r18, 0x03	; 3
    2bd8:	e9 f0       	breq	.+58     	; 0x2c14 <xTaskGenericNotifyFromISR+0x76>
    2bda:	24 30       	cpi	r18, 0x04	; 4
    2bdc:	01 f1       	breq	.+64     	; 0x2c1e <xTaskGenericNotifyFromISR+0x80>
    2bde:	25 c0       	rjmp	.+74     	; 0x2c2a <xTaskGenericNotifyFromISR+0x8c>
    2be0:	03 a5       	ldd	r16, Z+43	; 0x2b
    2be2:	14 a5       	ldd	r17, Z+44	; 0x2c
    2be4:	25 a5       	ldd	r18, Z+45	; 0x2d
    2be6:	36 a5       	ldd	r19, Z+46	; 0x2e
    2be8:	40 2b       	or	r20, r16
    2bea:	51 2b       	or	r21, r17
    2bec:	62 2b       	or	r22, r18
    2bee:	73 2b       	or	r23, r19
    2bf0:	43 a7       	std	Z+43, r20	; 0x2b
    2bf2:	54 a7       	std	Z+44, r21	; 0x2c
    2bf4:	65 a7       	std	Z+45, r22	; 0x2d
    2bf6:	76 a7       	std	Z+46, r23	; 0x2e
    2bf8:	18 c0       	rjmp	.+48     	; 0x2c2a <xTaskGenericNotifyFromISR+0x8c>
    2bfa:	43 a5       	ldd	r20, Z+43	; 0x2b
    2bfc:	54 a5       	ldd	r21, Z+44	; 0x2c
    2bfe:	65 a5       	ldd	r22, Z+45	; 0x2d
    2c00:	76 a5       	ldd	r23, Z+46	; 0x2e
    2c02:	4f 5f       	subi	r20, 0xFF	; 255
    2c04:	5f 4f       	sbci	r21, 0xFF	; 255
    2c06:	6f 4f       	sbci	r22, 0xFF	; 255
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0a:	43 a7       	std	Z+43, r20	; 0x2b
    2c0c:	54 a7       	std	Z+44, r21	; 0x2c
    2c0e:	65 a7       	std	Z+45, r22	; 0x2d
    2c10:	76 a7       	std	Z+46, r23	; 0x2e
    2c12:	0b c0       	rjmp	.+22     	; 0x2c2a <xTaskGenericNotifyFromISR+0x8c>
    2c14:	43 a7       	std	Z+43, r20	; 0x2b
    2c16:	54 a7       	std	Z+44, r21	; 0x2c
    2c18:	65 a7       	std	Z+45, r22	; 0x2d
    2c1a:	76 a7       	std	Z+46, r23	; 0x2e
    2c1c:	06 c0       	rjmp	.+12     	; 0x2c2a <xTaskGenericNotifyFromISR+0x8c>
    2c1e:	82 30       	cpi	r24, 0x02	; 2
    2c20:	d9 f1       	breq	.+118    	; 0x2c98 <xTaskGenericNotifyFromISR+0xfa>
    2c22:	43 a7       	std	Z+43, r20	; 0x2b
    2c24:	54 a7       	std	Z+44, r21	; 0x2c
    2c26:	65 a7       	std	Z+45, r22	; 0x2d
    2c28:	76 a7       	std	Z+46, r23	; 0x2e
    2c2a:	81 30       	cpi	r24, 0x01	; 1
    2c2c:	b9 f5       	brne	.+110    	; 0x2c9c <xTaskGenericNotifyFromISR+0xfe>
    2c2e:	ef 01       	movw	r28, r30
    2c30:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <uxSchedulerSuspended>
    2c34:	81 11       	cpse	r24, r1
    2c36:	17 c0       	rjmp	.+46     	; 0x2c66 <xTaskGenericNotifyFromISR+0xc8>
    2c38:	8f 01       	movw	r16, r30
    2c3a:	0e 5f       	subi	r16, 0xFE	; 254
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	c8 01       	movw	r24, r16
    2c40:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
    2c44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c46:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <uxTopReadyPriority>
    2c4a:	98 17       	cp	r25, r24
    2c4c:	10 f4       	brcc	.+4      	; 0x2c52 <xTaskGenericNotifyFromISR+0xb4>
    2c4e:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <uxTopReadyPriority>
    2c52:	eb e0       	ldi	r30, 0x0B	; 11
    2c54:	8e 9f       	mul	r24, r30
    2c56:	c0 01       	movw	r24, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	b8 01       	movw	r22, r16
    2c5c:	82 55       	subi	r24, 0x52	; 82
    2c5e:	98 4e       	sbci	r25, 0xE8	; 232
    2c60:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    2c64:	07 c0       	rjmp	.+14     	; 0x2c74 <xTaskGenericNotifyFromISR+0xd6>
    2c66:	bf 01       	movw	r22, r30
    2c68:	62 5f       	subi	r22, 0xF2	; 242
    2c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6c:	89 e8       	ldi	r24, 0x89	; 137
    2c6e:	97 e1       	ldi	r25, 0x17	; 23
    2c70:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInsertEnd>
    2c74:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <pxCurrentTCB>
    2c78:	f0 91 db 17 	lds	r31, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>
    2c7c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c80:	89 17       	cp	r24, r25
    2c82:	70 f4       	brcc	.+28     	; 0x2ca0 <xTaskGenericNotifyFromISR+0x102>
    2c84:	e1 14       	cp	r14, r1
    2c86:	f1 04       	cpc	r15, r1
    2c88:	19 f0       	breq	.+6      	; 0x2c90 <xTaskGenericNotifyFromISR+0xf2>
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	e7 01       	movw	r28, r14
    2c8e:	88 83       	st	Y, r24
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	80 93 69 17 	sts	0x1769, r24	; 0x801769 <xYieldPending>
    2c96:	05 c0       	rjmp	.+10     	; 0x2ca2 <xTaskGenericNotifyFromISR+0x104>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <xTaskGenericNotifyFromISR+0x104>
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <xTaskGenericNotifyFromISR+0x104>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	08 95       	ret

00002cb0 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	21 f4       	brne	.+8      	; 0x2cbc <xTaskNotifyStateClear+0xc>
    2cb4:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <pxCurrentTCB>
    2cb8:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	27 a5       	ldd	r18, Z+47	; 0x2f
    2cc6:	22 30       	cpi	r18, 0x02	; 2
    2cc8:	19 f4       	brne	.+6      	; 0x2cd0 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2cca:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	01 c0       	rjmp	.+2      	; 0x2cd2 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2cd2:	0f 90       	pop	r0
    2cd4:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2cd6:	08 95       	ret

00002cd8 <prvInsertTimerInActiveList>:
    2cd8:	cf 92       	push	r12
    2cda:	df 92       	push	r13
    2cdc:	ef 92       	push	r14
    2cde:	ff 92       	push	r15
    2ce0:	0f 93       	push	r16
    2ce2:	1f 93       	push	r17
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	42 83       	std	Z+2, r20	; 0x02
    2ce8:	53 83       	std	Z+3, r21	; 0x03
    2cea:	64 83       	std	Z+4, r22	; 0x04
    2cec:	75 83       	std	Z+5, r23	; 0x05
    2cee:	93 87       	std	Z+11, r25	; 0x0b
    2cf0:	82 87       	std	Z+10, r24	; 0x0a
    2cf2:	04 17       	cp	r16, r20
    2cf4:	15 07       	cpc	r17, r21
    2cf6:	26 07       	cpc	r18, r22
    2cf8:	37 07       	cpc	r19, r23
    2cfa:	c0 f0       	brcs	.+48     	; 0x2d2c <prvInsertTimerInActiveList+0x54>
    2cfc:	0c 19       	sub	r16, r12
    2cfe:	1d 09       	sbc	r17, r13
    2d00:	2e 09       	sbc	r18, r14
    2d02:	3f 09       	sbc	r19, r15
    2d04:	86 85       	ldd	r24, Z+14	; 0x0e
    2d06:	97 85       	ldd	r25, Z+15	; 0x0f
    2d08:	a0 89       	ldd	r26, Z+16	; 0x10
    2d0a:	b1 89       	ldd	r27, Z+17	; 0x11
    2d0c:	08 17       	cp	r16, r24
    2d0e:	19 07       	cpc	r17, r25
    2d10:	2a 07       	cpc	r18, r26
    2d12:	3b 07       	cpc	r19, r27
    2d14:	00 f5       	brcc	.+64     	; 0x2d56 <prvInsertTimerInActiveList+0x7e>
    2d16:	bf 01       	movw	r22, r30
    2d18:	6e 5f       	subi	r22, 0xFE	; 254
    2d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1c:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <pxOverflowTimerList>
    2d20:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <pxOverflowTimerList+0x1>
    2d24:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsert>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	18 c0       	rjmp	.+48     	; 0x2d5c <prvInsertTimerInActiveList+0x84>
    2d2c:	0c 15       	cp	r16, r12
    2d2e:	1d 05       	cpc	r17, r13
    2d30:	2e 05       	cpc	r18, r14
    2d32:	3f 05       	cpc	r19, r15
    2d34:	28 f4       	brcc	.+10     	; 0x2d40 <prvInsertTimerInActiveList+0x68>
    2d36:	4c 15       	cp	r20, r12
    2d38:	5d 05       	cpc	r21, r13
    2d3a:	6e 05       	cpc	r22, r14
    2d3c:	7f 05       	cpc	r23, r15
    2d3e:	68 f4       	brcc	.+26     	; 0x2d5a <prvInsertTimerInActiveList+0x82>
    2d40:	bf 01       	movw	r22, r30
    2d42:	6e 5f       	subi	r22, 0xFE	; 254
    2d44:	7f 4f       	sbci	r23, 0xFF	; 255
    2d46:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <pxCurrentTimerList>
    2d4a:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <pxCurrentTimerList+0x1>
    2d4e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsert>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	03 c0       	rjmp	.+6      	; 0x2d5c <prvInsertTimerInActiveList+0x84>
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <prvInsertTimerInActiveList+0x84>
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	1f 91       	pop	r17
    2d5e:	0f 91       	pop	r16
    2d60:	ff 90       	pop	r15
    2d62:	ef 90       	pop	r14
    2d64:	df 90       	pop	r13
    2d66:	cf 90       	pop	r12
    2d68:	08 95       	ret

00002d6a <prvCheckForValidListAndQueue>:
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	0f 92       	push	r0
    2d70:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xTimerQueue>
    2d74:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xTimerQueue+0x1>
    2d78:	89 2b       	or	r24, r25
    2d7a:	e9 f4       	brne	.+58     	; 0x2db6 <prvCheckForValidListAndQueue+0x4c>
    2d7c:	83 ef       	ldi	r24, 0xF3	; 243
    2d7e:	97 e1       	ldi	r25, 0x17	; 23
    2d80:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    2d84:	88 ee       	ldi	r24, 0xE8	; 232
    2d86:	97 e1       	ldi	r25, 0x17	; 23
    2d88:	0e 94 a4 05 	call	0xb48	; 0xb48 <vListInitialise>
    2d8c:	83 ef       	ldi	r24, 0xF3	; 243
    2d8e:	97 e1       	ldi	r25, 0x17	; 23
    2d90:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <pxCurrentTimerList+0x1>
    2d94:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <pxCurrentTimerList>
    2d98:	88 ee       	ldi	r24, 0xE8	; 232
    2d9a:	97 e1       	ldi	r25, 0x17	; 23
    2d9c:	90 93 e5 17 	sts	0x17E5, r25	; 0x8017e5 <pxOverflowTimerList+0x1>
    2da0:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <pxOverflowTimerList>
    2da4:	40 e0       	ldi	r20, 0x00	; 0
    2da6:	67 e0       	ldi	r22, 0x07	; 7
    2da8:	8a e0       	ldi	r24, 0x0A	; 10
    2daa:	0e 94 c8 08 	call	0x1190	; 0x1190 <xQueueGenericCreate>
    2dae:	90 93 e3 17 	sts	0x17E3, r25	; 0x8017e3 <xTimerQueue+0x1>
    2db2:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xTimerQueue>
    2db6:	0f 90       	pop	r0
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	08 95       	ret

00002dbc <xTimerCreateTimerTask>:
    2dbc:	ef 92       	push	r14
    2dbe:	ff 92       	push	r15
    2dc0:	0f 93       	push	r16
    2dc2:	d3 df       	rcall	.-90     	; 0x2d6a <prvCheckForValidListAndQueue>
    2dc4:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xTimerQueue>
    2dc8:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xTimerQueue+0x1>
    2dcc:	89 2b       	or	r24, r25
    2dce:	91 f0       	breq	.+36     	; 0x2df4 <xTimerCreateTimerTask+0x38>
    2dd0:	0f 2e       	mov	r0, r31
    2dd2:	f0 ee       	ldi	r31, 0xE0	; 224
    2dd4:	ef 2e       	mov	r14, r31
    2dd6:	f7 e1       	ldi	r31, 0x17	; 23
    2dd8:	ff 2e       	mov	r15, r31
    2dda:	f0 2d       	mov	r31, r0
    2ddc:	03 e0       	ldi	r16, 0x03	; 3
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	45 e5       	ldi	r20, 0x55	; 85
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	64 e1       	ldi	r22, 0x14	; 20
    2de8:	74 e0       	ldi	r23, 0x04	; 4
    2dea:	83 e0       	ldi	r24, 0x03	; 3
    2dec:	91 e0       	ldi	r25, 0x01	; 1
    2dee:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xTaskCreate>
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <xTimerCreateTimerTask+0x3a>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	0f 91       	pop	r16
    2df8:	ff 90       	pop	r15
    2dfa:	ef 90       	pop	r14
    2dfc:	08 95       	ret

00002dfe <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2dfe:	8f 92       	push	r8
    2e00:	9f 92       	push	r9
    2e02:	af 92       	push	r10
    2e04:	bf 92       	push	r11
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	27 97       	sbiw	r28, 0x07	; 7
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2e26:	e0 91 e2 17 	lds	r30, 0x17E2	; 0x8017e2 <xTimerQueue>
    2e2a:	f0 91 e3 17 	lds	r31, 0x17E3	; 0x8017e3 <xTimerQueue+0x1>
    2e2e:	30 97       	sbiw	r30, 0x00	; 0
    2e30:	81 f1       	breq	.+96     	; 0x2e92 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2e32:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2e34:	2a 83       	std	Y+2, r18	; 0x02
    2e36:	3b 83       	std	Y+3, r19	; 0x03
    2e38:	4c 83       	std	Y+4, r20	; 0x04
    2e3a:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2e3c:	9f 83       	std	Y+7, r25	; 0x07
    2e3e:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2e40:	66 30       	cpi	r22, 0x06	; 6
    2e42:	f4 f4       	brge	.+60     	; 0x2e80 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2e44:	90 dc       	rcall	.-1760   	; 0x2766 <xTaskGetSchedulerState>
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	69 f4       	brne	.+26     	; 0x2e64 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2e4a:	00 e0       	ldi	r16, 0x00	; 0
    2e4c:	a7 01       	movw	r20, r14
    2e4e:	96 01       	movw	r18, r12
    2e50:	be 01       	movw	r22, r28
    2e52:	6f 5f       	subi	r22, 0xFF	; 255
    2e54:	7f 4f       	sbci	r23, 0xFF	; 255
    2e56:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xTimerQueue>
    2e5a:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xTimerQueue+0x1>
    2e5e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericSend>
    2e62:	18 c0       	rjmp	.+48     	; 0x2e94 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2e64:	00 e0       	ldi	r16, 0x00	; 0
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	a9 01       	movw	r20, r18
    2e6c:	be 01       	movw	r22, r28
    2e6e:	6f 5f       	subi	r22, 0xFF	; 255
    2e70:	7f 4f       	sbci	r23, 0xFF	; 255
    2e72:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xTimerQueue>
    2e76:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xTimerQueue+0x1>
    2e7a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericSend>
    2e7e:	0a c0       	rjmp	.+20     	; 0x2e94 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	a8 01       	movw	r20, r16
    2e84:	be 01       	movw	r22, r28
    2e86:	6f 5f       	subi	r22, 0xFF	; 255
    2e88:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8a:	cf 01       	movw	r24, r30
    2e8c:	0e 94 b1 09 	call	0x1362	; 0x1362 <xQueueGenericSendFromISR>
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2e94:	27 96       	adiw	r28, 0x07	; 7
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	1f 91       	pop	r17
    2ea6:	0f 91       	pop	r16
    2ea8:	ff 90       	pop	r15
    2eaa:	ef 90       	pop	r14
    2eac:	df 90       	pop	r13
    2eae:	cf 90       	pop	r12
    2eb0:	bf 90       	pop	r11
    2eb2:	af 90       	pop	r10
    2eb4:	9f 90       	pop	r9
    2eb6:	8f 90       	pop	r8
    2eb8:	08 95       	ret

00002eba <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2eba:	2f 92       	push	r2
    2ebc:	3f 92       	push	r3
    2ebe:	4f 92       	push	r4
    2ec0:	5f 92       	push	r5
    2ec2:	6f 92       	push	r6
    2ec4:	7f 92       	push	r7
    2ec6:	8f 92       	push	r8
    2ec8:	9f 92       	push	r9
    2eca:	af 92       	push	r10
    2ecc:	bf 92       	push	r11
    2ece:	cf 92       	push	r12
    2ed0:	df 92       	push	r13
    2ed2:	ef 92       	push	r14
    2ed4:	ff 92       	push	r15
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2ee0:	e0 d8       	rcall	.-3648   	; 0x20a2 <xTaskGetTickCount>
    2ee2:	2b 01       	movw	r4, r22
    2ee4:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    2ee6:	80 91 dc 17 	lds	r24, 0x17DC	; 0x8017dc <xLastTime.2432>
    2eea:	90 91 dd 17 	lds	r25, 0x17DD	; 0x8017dd <xLastTime.2432+0x1>
    2eee:	a0 91 de 17 	lds	r26, 0x17DE	; 0x8017de <xLastTime.2432+0x2>
    2ef2:	b0 91 df 17 	lds	r27, 0x17DF	; 0x8017df <xLastTime.2432+0x3>
    2ef6:	48 16       	cp	r4, r24
    2ef8:	59 06       	cpc	r5, r25
    2efa:	6a 06       	cpc	r6, r26
    2efc:	7b 06       	cpc	r7, r27
    2efe:	08 f0       	brcs	.+2      	; 0x2f02 <prvSampleTimeNow+0x48>
    2f00:	53 c0       	rjmp	.+166    	; 0x2fa8 <prvSampleTimeNow+0xee>
    2f02:	3b c0       	rjmp	.+118    	; 0x2f7a <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2f04:	07 80       	ldd	r0, Z+7	; 0x07
    2f06:	f0 85       	ldd	r31, Z+8	; 0x08
    2f08:	e0 2d       	mov	r30, r0
    2f0a:	80 80       	ld	r8, Z
    2f0c:	91 80       	ldd	r9, Z+1	; 0x01
    2f0e:	a2 80       	ldd	r10, Z+2	; 0x02
    2f10:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f12:	c0 85       	ldd	r28, Z+8	; 0x08
    2f14:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f16:	8e 01       	movw	r16, r28
    2f18:	0e 5f       	subi	r16, 0xFE	; 254
    2f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1c:	c8 01       	movw	r24, r16
    2f1e:	0e 94 17 06 	call	0xc2e	; 0xc2e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2f22:	ec 89       	ldd	r30, Y+20	; 0x14
    2f24:	fd 89       	ldd	r31, Y+21	; 0x15
    2f26:	ce 01       	movw	r24, r28
    2f28:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2c:	82 ff       	sbrs	r24, 2
    2f2e:	25 c0       	rjmp	.+74     	; 0x2f7a <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2f30:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f32:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f34:	a8 89       	ldd	r26, Y+16	; 0x10
    2f36:	b9 89       	ldd	r27, Y+17	; 0x11
    2f38:	88 0d       	add	r24, r8
    2f3a:	99 1d       	adc	r25, r9
    2f3c:	aa 1d       	adc	r26, r10
    2f3e:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2f40:	88 16       	cp	r8, r24
    2f42:	99 06       	cpc	r9, r25
    2f44:	aa 06       	cpc	r10, r26
    2f46:	bb 06       	cpc	r11, r27
    2f48:	70 f4       	brcc	.+28     	; 0x2f66 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2f4a:	8a 83       	std	Y+2, r24	; 0x02
    2f4c:	9b 83       	std	Y+3, r25	; 0x03
    2f4e:	ac 83       	std	Y+4, r26	; 0x04
    2f50:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2f52:	db 87       	std	Y+11, r29	; 0x0b
    2f54:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2f56:	b8 01       	movw	r22, r16
    2f58:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <pxCurrentTimerList>
    2f5c:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <pxCurrentTimerList+0x1>
    2f60:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsert>
    2f64:	0a c0       	rjmp	.+20     	; 0x2f7a <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2f66:	c1 2c       	mov	r12, r1
    2f68:	d1 2c       	mov	r13, r1
    2f6a:	76 01       	movw	r14, r12
    2f6c:	00 e0       	ldi	r16, 0x00	; 0
    2f6e:	10 e0       	ldi	r17, 0x00	; 0
    2f70:	a5 01       	movw	r20, r10
    2f72:	94 01       	movw	r18, r8
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	ce 01       	movw	r24, r28
    2f78:	42 df       	rcall	.-380    	; 0x2dfe <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2f7a:	e0 91 e6 17 	lds	r30, 0x17E6	; 0x8017e6 <pxCurrentTimerList>
    2f7e:	f0 91 e7 17 	lds	r31, 0x17E7	; 0x8017e7 <pxCurrentTimerList+0x1>
    2f82:	80 81       	ld	r24, Z
    2f84:	81 11       	cpse	r24, r1
    2f86:	be cf       	rjmp	.-132    	; 0x2f04 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2f88:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <pxOverflowTimerList>
    2f8c:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <pxOverflowTimerList+0x1>
    2f90:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <pxCurrentTimerList+0x1>
    2f94:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2f98:	f0 93 e5 17 	sts	0x17E5, r31	; 0x8017e5 <pxOverflowTimerList+0x1>
    2f9c:	e0 93 e4 17 	sts	0x17E4, r30	; 0x8017e4 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	f1 01       	movw	r30, r2
    2fa4:	80 83       	st	Z, r24
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2fa8:	f1 01       	movw	r30, r2
    2faa:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2fac:	40 92 dc 17 	sts	0x17DC, r4	; 0x8017dc <xLastTime.2432>
    2fb0:	50 92 dd 17 	sts	0x17DD, r5	; 0x8017dd <xLastTime.2432+0x1>
    2fb4:	60 92 de 17 	sts	0x17DE, r6	; 0x8017de <xLastTime.2432+0x2>
    2fb8:	70 92 df 17 	sts	0x17DF, r7	; 0x8017df <xLastTime.2432+0x3>

    return xTimeNow;
}
    2fbc:	c3 01       	movw	r24, r6
    2fbe:	b2 01       	movw	r22, r4
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	df 90       	pop	r13
    2fce:	cf 90       	pop	r12
    2fd0:	bf 90       	pop	r11
    2fd2:	af 90       	pop	r10
    2fd4:	9f 90       	pop	r9
    2fd6:	8f 90       	pop	r8
    2fd8:	7f 90       	pop	r7
    2fda:	6f 90       	pop	r6
    2fdc:	5f 90       	pop	r5
    2fde:	4f 90       	pop	r4
    2fe0:	3f 90       	pop	r3
    2fe2:	2f 90       	pop	r2
    2fe4:	08 95       	ret

00002fe6 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2fe6:	08 95       	ret

00002fe8 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2fe8:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2fea:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2fec:	2f ef       	ldi	r18, 0xFF	; 255
    2fee:	80 e7       	ldi	r24, 0x70	; 112
    2ff0:	92 e0       	ldi	r25, 0x02	; 2
    2ff2:	21 50       	subi	r18, 0x01	; 1
    2ff4:	80 40       	sbci	r24, 0x00	; 0
    2ff6:	90 40       	sbci	r25, 0x00	; 0
    2ff8:	e1 f7       	brne	.-8      	; 0x2ff2 <vApplicationMallocFailedHook+0xa>
    2ffa:	00 c0       	rjmp	.+0      	; 0x2ffc <vApplicationMallocFailedHook+0x14>
    2ffc:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2ffe:	1f 9a       	sbi	0x03, 7	; 3
    3000:	f5 cf       	rjmp	.-22     	; 0x2fec <vApplicationMallocFailedHook+0x4>

00003002 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3002:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3004:	2f 9a       	sbi	0x05, 7	; 5
    3006:	2f ef       	ldi	r18, 0xFF	; 255
    3008:	87 ea       	ldi	r24, 0xA7	; 167
    300a:	91 e6       	ldi	r25, 0x61	; 97
    300c:	21 50       	subi	r18, 0x01	; 1
    300e:	80 40       	sbci	r24, 0x00	; 0
    3010:	90 40       	sbci	r25, 0x00	; 0
    3012:	e1 f7       	brne	.-8      	; 0x300c <vApplicationStackOverflowHook+0xa>
    3014:	00 c0       	rjmp	.+0      	; 0x3016 <vApplicationStackOverflowHook+0x14>
    3016:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3018:	1f 9a       	sbi	0x03, 7	; 3
    301a:	f5 cf       	rjmp	.-22     	; 0x3006 <vApplicationStackOverflowHook+0x4>

0000301c <task1>:
	, NULL);
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	00 d0       	rcall	.+0      	; 0x3022 <task1+0x6>
    3022:	1f 92       	push	r1
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    3028:	61 e0       	ldi	r22, 0x01	; 1
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e da       	rcall	.-3044   	; 0x244e <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3032:	37 d8       	rcall	.-3986   	; 0x20a2 <xTaskGetTickCount>
    3034:	69 83       	std	Y+1, r22	; 0x01
    3036:	7a 83       	std	Y+2, r23	; 0x02
    3038:	8b 83       	std	Y+3, r24	; 0x03
    303a:	9c 83       	std	Y+4, r25	; 0x04
    303c:	11 e0       	ldi	r17, 0x01	; 1

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    303e:	4f e1       	ldi	r20, 0x1F	; 31
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	ce 01       	movw	r24, r28
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	8a d9       	rcall	.-3308   	; 0x2360 <vTaskDelayUntil>
    304c:	82 b1       	in	r24, 0x02	; 2
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    304e:	81 27       	eor	r24, r17
    3050:	82 b9       	out	0x02, r24	; 2
    3052:	f5 cf       	rjmp	.-22     	; 0x303e <task1+0x22>

00003054 <task2>:
    3054:	cf 93       	push	r28
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    3056:	df 93       	push	r29
    3058:	00 d0       	rcall	.+0      	; 0x305a <task2+0x6>
    305a:	1f 92       	push	r1
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    3060:	62 e0       	ldi	r22, 0x02	; 2
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	f2 d9       	rcall	.-3100   	; 0x244e <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    306a:	1b d8       	rcall	.-4042   	; 0x20a2 <xTaskGetTickCount>
    306c:	69 83       	std	Y+1, r22	; 0x01
    306e:	7a 83       	std	Y+2, r23	; 0x02
    3070:	8b 83       	std	Y+3, r24	; 0x03
    3072:	9c 83       	std	Y+4, r25	; 0x04
    3074:	4e e3       	ldi	r20, 0x3E	; 62

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	60 e0       	ldi	r22, 0x00	; 0
    307a:	70 e0       	ldi	r23, 0x00	; 0
    307c:	ce 01       	movw	r24, r28
    307e:	01 96       	adiw	r24, 0x01	; 1
    3080:	6f d9       	rcall	.-3362   	; 0x2360 <vTaskDelayUntil>
    3082:	82 b1       	in	r24, 0x02	; 2
		//puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA7);
    3084:	80 58       	subi	r24, 0x80	; 128
    3086:	82 b9       	out	0x02, r24	; 2
    3088:	f5 cf       	rjmp	.-22     	; 0x3074 <task2+0x20>

0000308a <create_tasks_and_semaphores>:
    308a:	ef 92       	push	r14
	//xSemaphoreGive(xTestSemaphore);
//}


void create_tasks_and_semaphores(void)
{
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3090:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <xTestSemaphore>
    3094:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <xTestSemaphore+0x1>
    3098:	89 2b       	or	r24, r25
    309a:	89 f4       	brne	.+34     	; 0x30be <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	0e 94 96 09 	call	0x132c	; 0x132c <xQueueCreateMutex>
    30a2:	90 93 5b 19 	sts	0x195B, r25	; 0x80195b <xTestSemaphore+0x1>
    30a6:	80 93 5a 19 	sts	0x195A, r24	; 0x80195a <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	41 f0       	breq	.+16     	; 0x30be <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    30ae:	00 e0       	ldi	r16, 0x00	; 0
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	a9 01       	movw	r20, r18
    30b6:	60 e0       	ldi	r22, 0x00	; 0
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericSend>
		}
	}

	xTaskCreate(
    30be:	e1 2c       	mov	r14, r1
    30c0:	f1 2c       	mov	r15, r1
    30c2:	02 e0       	ldi	r16, 0x02	; 2
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 ec       	ldi	r20, 0xC0	; 192
    30ca:	50 e0       	ldi	r21, 0x00	; 0
    30cc:	6c e1       	ldi	r22, 0x1C	; 28
    30ce:	74 e0       	ldi	r23, 0x04	; 4
    30d0:	8e e0       	ldi	r24, 0x0E	; 14
    30d2:	98 e1       	ldi	r25, 0x18	; 24
    30d4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    30d8:	01 e0       	ldi	r16, 0x01	; 1
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 ec       	ldi	r20, 0xC0	; 192
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	62 e2       	ldi	r22, 0x22	; 34
    30e4:	74 e0       	ldi	r23, 0x04	; 4
    30e6:	8a e2       	ldi	r24, 0x2A	; 42
    30e8:	98 e1       	ldi	r25, 0x18	; 24
    30ea:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    30ee:	20 91 5a 19 	lds	r18, 0x195A	; 0x80195a <xTestSemaphore>
    30f2:	30 91 5b 19 	lds	r19, 0x195B	; 0x80195b <xTestSemaphore+0x1>
    30f6:	03 e0       	ldi	r16, 0x03	; 3
    30f8:	40 ec       	ldi	r20, 0xC0	; 192
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	68 e2       	ldi	r22, 0x28	; 40
    30fe:	74 e0       	ldi	r23, 0x04	; 4
    3100:	8e ea       	ldi	r24, 0xAE	; 174
    3102:	93 e0       	ldi	r25, 0x03	; 3
    3104:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, xTestSemaphore
	, 3
	, NULL);
	
	xTaskCreate(
    3108:	20 91 5a 19 	lds	r18, 0x195A	; 0x80195a <xTestSemaphore>
    310c:	30 91 5b 19 	lds	r19, 0x195B	; 0x80195b <xTestSemaphore+0x1>
    3110:	40 ec       	ldi	r20, 0xC0	; 192
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	63 e3       	ldi	r22, 0x33	; 51
    3116:	74 e0       	ldi	r23, 0x04	; 4
    3118:	87 ef       	ldi	r24, 0xF7	; 247
    311a:	93 e0       	ldi	r25, 0x03	; 3
    311c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xTaskCreate>
	, "TH sensor"
	, configMINIMAL_STACK_SIZE
	, xTestSemaphore
	, 3
	, NULL);
}
    3120:	0f 91       	pop	r16
    3122:	ff 90       	pop	r15
    3124:	ef 90       	pop	r14
    3126:	08 95       	ret

00003128 <initialiseSystem>:
//}
/*-----------------------------------------------------------*/
void initialiseSystem()
{
	
	mh_z19_create(ser_USART3, &my_co2_call_back);
    3128:	6f ec       	ldi	r22, 0xCF	; 207
    312a:	73 e0       	ldi	r23, 0x03	; 3
    312c:	83 e0       	ldi	r24, 0x03	; 3
    312e:	0e 94 b2 20 	call	0x4164	; 0x4164 <mh_z19_create>
	
	if ( HIH8120_OK != hih8120Create() )
    3132:	db d0       	rcall	.+438    	; 0x32ea <hih8120Create>
    3134:	88 23       	and	r24, r24
    3136:	29 f0       	breq	.+10     	; 0x3142 <initialiseSystem+0x1a>
	{
		puts("driver not created OK");
    3138:	8d e3       	ldi	r24, 0x3D	; 61
    313a:	94 e0       	ldi	r25, 0x04	; 4
    313c:	0c 94 08 2a 	jmp	0x5410	; 0x5410 <puts>
		return 1;
    3140:	08 95       	ret
	}
	
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3142:	81 b1       	in	r24, 0x01	; 1
    3144:	81 68       	ori	r24, 0x81	; 129
    3146:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    3148:	0e 94 57 04 	call	0x8ae	; 0x8ae <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	0e 94 ad 24 	call	0x495a	; 0x495a <stdioCreate>
	// Let's create some tasks
	create_tasks_and_semaphores();

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3152:	9b df       	rcall	.-202    	; 0x308a <create_tasks_and_semaphores>
    3154:	85 e0       	ldi	r24, 0x05	; 5
    3156:	6a d0       	rcall	.+212    	; 0x322c <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    3158:	60 e0       	ldi	r22, 0x00	; 0
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	05 d4       	rcall	.+2058   	; 0x396a <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	0c 94 9a 03 	jmp	0x734	; 0x734 <lora_handler_create>
    3166:	08 95       	ret

00003168 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3168:	df df       	rcall	.-66     	; 0x3128 <initialiseSystem>
	
	printf("Program Started!!\n");
    316a:	83 e5       	ldi	r24, 0x53	; 83
    316c:	94 e0       	ldi	r25, 0x04	; 4
    316e:	0e 94 08 2a 	call	0x5410	; 0x5410 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3172:	0e 94 0f 10 	call	0x201e	; 0x201e <vTaskStartScheduler>
    3176:	ff cf       	rjmp	.-2      	; 0x3176 <main+0xe>

00003178 <__fixsfsi>:
    3178:	04 d0       	rcall	.+8      	; 0x3182 <__fixunssfsi>
    317a:	68 94       	set
    317c:	b1 11       	cpse	r27, r1
    317e:	50 c0       	rjmp	.+160    	; 0x3220 <__fp_szero>
    3180:	08 95       	ret

00003182 <__fixunssfsi>:
    3182:	33 d0       	rcall	.+102    	; 0x31ea <__fp_splitA>
    3184:	88 f0       	brcs	.+34     	; 0x31a8 <__fixunssfsi+0x26>
    3186:	9f 57       	subi	r25, 0x7F	; 127
    3188:	90 f0       	brcs	.+36     	; 0x31ae <__fixunssfsi+0x2c>
    318a:	b9 2f       	mov	r27, r25
    318c:	99 27       	eor	r25, r25
    318e:	b7 51       	subi	r27, 0x17	; 23
    3190:	a0 f0       	brcs	.+40     	; 0x31ba <__fixunssfsi+0x38>
    3192:	d1 f0       	breq	.+52     	; 0x31c8 <__fixunssfsi+0x46>
    3194:	66 0f       	add	r22, r22
    3196:	77 1f       	adc	r23, r23
    3198:	88 1f       	adc	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	1a f0       	brmi	.+6      	; 0x31a4 <__fixunssfsi+0x22>
    319e:	ba 95       	dec	r27
    31a0:	c9 f7       	brne	.-14     	; 0x3194 <__fixunssfsi+0x12>
    31a2:	12 c0       	rjmp	.+36     	; 0x31c8 <__fixunssfsi+0x46>
    31a4:	b1 30       	cpi	r27, 0x01	; 1
    31a6:	81 f0       	breq	.+32     	; 0x31c8 <__fixunssfsi+0x46>
    31a8:	3a d0       	rcall	.+116    	; 0x321e <__fp_zero>
    31aa:	b1 e0       	ldi	r27, 0x01	; 1
    31ac:	08 95       	ret
    31ae:	37 c0       	rjmp	.+110    	; 0x321e <__fp_zero>
    31b0:	67 2f       	mov	r22, r23
    31b2:	78 2f       	mov	r23, r24
    31b4:	88 27       	eor	r24, r24
    31b6:	b8 5f       	subi	r27, 0xF8	; 248
    31b8:	39 f0       	breq	.+14     	; 0x31c8 <__fixunssfsi+0x46>
    31ba:	b9 3f       	cpi	r27, 0xF9	; 249
    31bc:	cc f3       	brlt	.-14     	; 0x31b0 <__fixunssfsi+0x2e>
    31be:	86 95       	lsr	r24
    31c0:	77 95       	ror	r23
    31c2:	67 95       	ror	r22
    31c4:	b3 95       	inc	r27
    31c6:	d9 f7       	brne	.-10     	; 0x31be <__fixunssfsi+0x3c>
    31c8:	3e f4       	brtc	.+14     	; 0x31d8 <__fixunssfsi+0x56>
    31ca:	90 95       	com	r25
    31cc:	80 95       	com	r24
    31ce:	70 95       	com	r23
    31d0:	61 95       	neg	r22
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	8f 4f       	sbci	r24, 0xFF	; 255
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	08 95       	ret

000031da <__fp_split3>:
    31da:	57 fd       	sbrc	r21, 7
    31dc:	90 58       	subi	r25, 0x80	; 128
    31de:	44 0f       	add	r20, r20
    31e0:	55 1f       	adc	r21, r21
    31e2:	59 f0       	breq	.+22     	; 0x31fa <__fp_splitA+0x10>
    31e4:	5f 3f       	cpi	r21, 0xFF	; 255
    31e6:	71 f0       	breq	.+28     	; 0x3204 <__fp_splitA+0x1a>
    31e8:	47 95       	ror	r20

000031ea <__fp_splitA>:
    31ea:	88 0f       	add	r24, r24
    31ec:	97 fb       	bst	r25, 7
    31ee:	99 1f       	adc	r25, r25
    31f0:	61 f0       	breq	.+24     	; 0x320a <__fp_splitA+0x20>
    31f2:	9f 3f       	cpi	r25, 0xFF	; 255
    31f4:	79 f0       	breq	.+30     	; 0x3214 <__fp_splitA+0x2a>
    31f6:	87 95       	ror	r24
    31f8:	08 95       	ret
    31fa:	12 16       	cp	r1, r18
    31fc:	13 06       	cpc	r1, r19
    31fe:	14 06       	cpc	r1, r20
    3200:	55 1f       	adc	r21, r21
    3202:	f2 cf       	rjmp	.-28     	; 0x31e8 <__fp_split3+0xe>
    3204:	46 95       	lsr	r20
    3206:	f1 df       	rcall	.-30     	; 0x31ea <__fp_splitA>
    3208:	08 c0       	rjmp	.+16     	; 0x321a <__fp_splitA+0x30>
    320a:	16 16       	cp	r1, r22
    320c:	17 06       	cpc	r1, r23
    320e:	18 06       	cpc	r1, r24
    3210:	99 1f       	adc	r25, r25
    3212:	f1 cf       	rjmp	.-30     	; 0x31f6 <__fp_splitA+0xc>
    3214:	86 95       	lsr	r24
    3216:	71 05       	cpc	r23, r1
    3218:	61 05       	cpc	r22, r1
    321a:	08 94       	sec
    321c:	08 95       	ret

0000321e <__fp_zero>:
    321e:	e8 94       	clt

00003220 <__fp_szero>:
    3220:	bb 27       	eor	r27, r27
    3222:	66 27       	eor	r22, r22
    3224:	77 27       	eor	r23, r23
    3226:	cb 01       	movw	r24, r22
    3228:	97 f9       	bld	r25, 7
    322a:	08 95       	ret

0000322c <hal_create>:
    322c:	ec e5       	ldi	r30, 0x5C	; 92
    322e:	f9 e1       	ldi	r31, 0x19	; 25
    3230:	2a e0       	ldi	r18, 0x0A	; 10
    3232:	30 e2       	ldi	r19, 0x20	; 32
    3234:	31 83       	std	Z+1, r19	; 0x01
    3236:	20 83       	st	Z, r18
    3238:	2d e0       	ldi	r18, 0x0D	; 13
    323a:	30 e2       	ldi	r19, 0x20	; 32
    323c:	33 83       	std	Z+3, r19	; 0x03
    323e:	22 83       	std	Z+2, r18	; 0x02
    3240:	28 e1       	ldi	r18, 0x18	; 24
    3242:	30 e2       	ldi	r19, 0x20	; 32
    3244:	35 83       	std	Z+5, r19	; 0x05
    3246:	24 83       	std	Z+4, r18	; 0x04
    3248:	2c e1       	ldi	r18, 0x1C	; 28
    324a:	30 e2       	ldi	r19, 0x20	; 32
    324c:	37 83       	std	Z+7, r19	; 0x07
    324e:	26 83       	std	Z+6, r18	; 0x06
    3250:	22 e2       	ldi	r18, 0x22	; 34
    3252:	30 e2       	ldi	r19, 0x20	; 32
    3254:	31 87       	std	Z+9, r19	; 0x09
    3256:	20 87       	std	Z+8, r18	; 0x08
    3258:	2e e2       	ldi	r18, 0x2E	; 46
    325a:	30 e2       	ldi	r19, 0x20	; 32
    325c:	33 87       	std	Z+11, r19	; 0x0b
    325e:	22 87       	std	Z+10, r18	; 0x0a
    3260:	23 e3       	ldi	r18, 0x33	; 51
    3262:	30 e2       	ldi	r19, 0x20	; 32
    3264:	35 87       	std	Z+13, r19	; 0x0d
    3266:	24 87       	std	Z+12, r18	; 0x0c
    3268:	2f e3       	ldi	r18, 0x3F	; 63
    326a:	30 e2       	ldi	r19, 0x20	; 32
    326c:	37 87       	std	Z+15, r19	; 0x0f
    326e:	26 87       	std	Z+14, r18	; 0x0e
    3270:	2f e1       	ldi	r18, 0x1F	; 31
    3272:	30 e2       	ldi	r19, 0x20	; 32
    3274:	31 8b       	std	Z+17, r19	; 0x11
    3276:	20 8b       	std	Z+16, r18	; 0x10
    3278:	24 e4       	ldi	r18, 0x44	; 68
    327a:	30 e2       	ldi	r19, 0x20	; 32
    327c:	33 8b       	std	Z+19, r19	; 0x13
    327e:	22 8b       	std	Z+18, r18	; 0x12
    3280:	21 e5       	ldi	r18, 0x51	; 81
    3282:	30 e2       	ldi	r19, 0x20	; 32
    3284:	35 8b       	std	Z+21, r19	; 0x15
    3286:	24 8b       	std	Z+20, r18	; 0x14
    3288:	68 2f       	mov	r22, r24
    328a:	cf 01       	movw	r24, r30
    328c:	3a c1       	rjmp	.+628    	; 0x3502 <led_create>
    328e:	08 95       	ret

00003290 <_hihTwiCallback>:
    3290:	65 30       	cpi	r22, 0x05	; 5
    3292:	f1 f4       	brne	.+60     	; 0x32d0 <_hihTwiCallback+0x40>
    3294:	fa 01       	movw	r30, r20
    3296:	80 81       	ld	r24, Z
    3298:	8f 73       	andi	r24, 0x3F	; 63
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	98 2f       	mov	r25, r24
    329e:	88 27       	eor	r24, r24
    32a0:	21 81       	ldd	r18, Z+1	; 0x01
    32a2:	82 2b       	or	r24, r18
    32a4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    32a8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    32ac:	82 81       	ldd	r24, Z+2	; 0x02
    32ae:	f0 e4       	ldi	r31, 0x40	; 64
    32b0:	8f 9f       	mul	r24, r31
    32b2:	c0 01       	movw	r24, r0
    32b4:	11 24       	eor	r1, r1
    32b6:	fa 01       	movw	r30, r20
    32b8:	23 81       	ldd	r18, Z+3	; 0x03
    32ba:	26 95       	lsr	r18
    32bc:	26 95       	lsr	r18
    32be:	82 2b       	or	r24, r18
    32c0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    32c4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	80 93 fe 17 	sts	0x17FE, r24	; 0x8017fe <_measuringIsReady>
    32ce:	08 95       	ret
    32d0:	64 30       	cpi	r22, 0x04	; 4
    32d2:	51 f0       	breq	.+20     	; 0x32e8 <_hihTwiCallback+0x58>
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e4       	ldi	r25, 0x40	; 64
    32d8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    32dc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    32e0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    32e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    32e8:	08 95       	ret

000032ea <hih8120Create>:
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	08 e4       	ldi	r16, 0x48	; 72
    32f0:	19 e1       	ldi	r17, 0x19	; 25
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	34 e2       	ldi	r19, 0x24	; 36
    32f6:	44 ef       	ldi	r20, 0xF4	; 244
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	87 e2       	ldi	r24, 0x27	; 39
    32fe:	0e 94 e7 24 	call	0x49ce	; 0x49ce <twiCreate>
    3302:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <_hih8120Handler+0x1>
    3306:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <_hih8120Handler>
    330a:	21 e0       	ldi	r18, 0x01	; 1
    330c:	89 2b       	or	r24, r25
    330e:	09 f0       	breq	.+2      	; 0x3312 <hih8120Create+0x28>
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	82 2f       	mov	r24, r18
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	08 95       	ret

0000331a <hih8120Wakeup>:
    331a:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <_hih8120Handler>
    331e:	90 91 00 18 	lds	r25, 0x1800	; 0x801800 <_hih8120Handler+0x1>
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	59 f0       	breq	.+22     	; 0x333c <hih8120Wakeup+0x22>
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	60 e0       	ldi	r22, 0x00	; 0
    332a:	70 e0       	ldi	r23, 0x00	; 0
    332c:	0e 94 38 25 	call	0x4a70	; 0x4a70 <twiTransmit>
    3330:	84 30       	cpi	r24, 0x04	; 4
    3332:	31 f4       	brne	.+12     	; 0x3340 <hih8120Wakeup+0x26>
    3334:	10 92 fe 17 	sts	0x17FE, r1	; 0x8017fe <_measuringIsReady>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	08 95       	ret
    333c:	82 e0       	ldi	r24, 0x02	; 2
    333e:	08 95       	ret
    3340:	83 e0       	ldi	r24, 0x03	; 3
    3342:	08 95       	ret

00003344 <hih8120Meassure>:
    3344:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <_hih8120Handler>
    3348:	90 91 00 18 	lds	r25, 0x1800	; 0x801800 <_hih8120Handler+0x1>
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	39 f0       	breq	.+14     	; 0x335e <hih8120Meassure+0x1a>
    3350:	64 e0       	ldi	r22, 0x04	; 4
    3352:	0e 94 84 25 	call	0x4b08	; 0x4b08 <twiReceive>
    3356:	85 30       	cpi	r24, 0x05	; 5
    3358:	21 f0       	breq	.+8      	; 0x3362 <hih8120Meassure+0x1e>
    335a:	83 e0       	ldi	r24, 0x03	; 3
    335c:	08 95       	ret
    335e:	82 e0       	ldi	r24, 0x02	; 2
    3360:	08 95       	ret
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	08 95       	ret

00003366 <hih8120GetHumidity>:
    3366:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    336a:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__floatunsisf>
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	48 ec       	ldi	r20, 0xC8	; 200
    337c:	52 e4       	ldi	r21, 0x42	; 66
    337e:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__mulsf3>
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	38 ef       	ldi	r19, 0xF8	; 248
    3386:	4f e7       	ldi	r20, 0x7F	; 127
    3388:	56 e4       	ldi	r21, 0x46	; 70
    338a:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__divsf3>
    338e:	08 95       	ret

00003390 <hih8120GetTemperature>:
    3390:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3394:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__floatunsisf>
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	45 e2       	ldi	r20, 0x25	; 37
    33a6:	53 e4       	ldi	r21, 0x43	; 67
    33a8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__mulsf3>
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	38 ef       	ldi	r19, 0xF8	; 248
    33b0:	4f e7       	ldi	r20, 0x7F	; 127
    33b2:	56 e4       	ldi	r21, 0x46	; 70
    33b4:	0e 94 f7 26 	call	0x4dee	; 0x4dee <__divsf3>
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e2       	ldi	r20, 0x20	; 32
    33be:	52 e4       	ldi	r21, 0x42	; 66
    33c0:	0c 94 90 26 	jmp	0x4d20	; 0x4d20 <__subsf3>
    33c4:	08 95       	ret

000033c6 <_turn_off>:
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	fc 01       	movw	r30, r24
    33ce:	ee 0f       	add	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	e8 0f       	add	r30, r24
    33d4:	f9 1f       	adc	r31, r25
    33d6:	ee 0f       	add	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	ef 5f       	subi	r30, 0xFF	; 255
    33dc:	f7 4e       	sbci	r31, 0xE7	; 231
    33de:	23 81       	ldd	r18, Z+3	; 0x03
    33e0:	21 11       	cpse	r18, r1
    33e2:	0a c0       	rjmp	.+20     	; 0x33f8 <_turn_off+0x32>
    33e4:	ef 01       	movw	r28, r30
    33e6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <register_access+0x8>
    33ea:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <register_access+0x9>
    33ee:	6a 81       	ldd	r22, Y+2	; 0x02
    33f0:	88 81       	ld	r24, Y
    33f2:	99 81       	ldd	r25, Y+1	; 0x01
    33f4:	19 95       	eicall
    33f6:	12 c0       	rjmp	.+36     	; 0x341c <_turn_off+0x56>
    33f8:	dc 01       	movw	r26, r24
    33fa:	aa 0f       	add	r26, r26
    33fc:	bb 1f       	adc	r27, r27
    33fe:	ed 01       	movw	r28, r26
    3400:	c8 0f       	add	r28, r24
    3402:	d9 1f       	adc	r29, r25
    3404:	cc 0f       	add	r28, r28
    3406:	dd 1f       	adc	r29, r29
    3408:	cf 5f       	subi	r28, 0xFF	; 255
    340a:	d7 4e       	sbci	r29, 0xE7	; 231
    340c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <register_access+0x12>
    3410:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <register_access+0x13>
    3414:	6a 81       	ldd	r22, Y+2	; 0x02
    3416:	88 81       	ld	r24, Y
    3418:	99 81       	ldd	r25, Y+1	; 0x01
    341a:	19 95       	eicall
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	08 95       	ret

00003422 <_turn_on>:
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	fc 01       	movw	r30, r24
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	e8 0f       	add	r30, r24
    3430:	f9 1f       	adc	r31, r25
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	ef 5f       	subi	r30, 0xFF	; 255
    3438:	f7 4e       	sbci	r31, 0xE7	; 231
    343a:	23 81       	ldd	r18, Z+3	; 0x03
    343c:	21 11       	cpse	r18, r1
    343e:	0a c0       	rjmp	.+20     	; 0x3454 <_turn_on+0x32>
    3440:	ef 01       	movw	r28, r30
    3442:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <register_access+0x12>
    3446:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <register_access+0x13>
    344a:	6a 81       	ldd	r22, Y+2	; 0x02
    344c:	88 81       	ld	r24, Y
    344e:	99 81       	ldd	r25, Y+1	; 0x01
    3450:	19 95       	eicall
    3452:	12 c0       	rjmp	.+36     	; 0x3478 <_turn_on+0x56>
    3454:	dc 01       	movw	r26, r24
    3456:	aa 0f       	add	r26, r26
    3458:	bb 1f       	adc	r27, r27
    345a:	ed 01       	movw	r28, r26
    345c:	c8 0f       	add	r28, r24
    345e:	d9 1f       	adc	r29, r25
    3460:	cc 0f       	add	r28, r28
    3462:	dd 1f       	adc	r29, r29
    3464:	cf 5f       	subi	r28, 0xFF	; 255
    3466:	d7 4e       	sbci	r29, 0xE7	; 231
    3468:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <register_access+0x8>
    346c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <register_access+0x9>
    3470:	6a 81       	ldd	r22, Y+2	; 0x02
    3472:	88 81       	ld	r24, Y
    3474:	99 81       	ldd	r25, Y+1	; 0x01
    3476:	19 95       	eicall
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	08 95       	ret

0000347e <_hal_led_task>:
    347e:	0f 2e       	mov	r0, r31
    3480:	fc e5       	ldi	r31, 0x5C	; 92
    3482:	cf 2e       	mov	r12, r31
    3484:	f9 e1       	ldi	r31, 0x19	; 25
    3486:	df 2e       	mov	r13, r31
    3488:	f0 2d       	mov	r31, r0
    348a:	04 e0       	ldi	r16, 0x04	; 4
    348c:	c1 e0       	ldi	r28, 0x01	; 1
    348e:	d8 e1       	ldi	r29, 0x18	; 24
    3490:	10 e0       	ldi	r17, 0x00	; 0
    3492:	8c 81       	ldd	r24, Y+4	; 0x04
    3494:	81 30       	cpi	r24, 0x01	; 1
    3496:	69 f0       	breq	.+26     	; 0x34b2 <_hal_led_task+0x34>
    3498:	e8 f0       	brcs	.+58     	; 0x34d4 <_hal_led_task+0x56>
    349a:	82 30       	cpi	r24, 0x02	; 2
    349c:	39 f5       	brne	.+78     	; 0x34ec <_hal_led_task+0x6e>
    349e:	d6 01       	movw	r26, r12
    34a0:	1c 96       	adiw	r26, 0x0c	; 12
    34a2:	ed 91       	ld	r30, X+
    34a4:	fc 91       	ld	r31, X
    34a6:	1d 97       	sbiw	r26, 0x0d	; 13
    34a8:	6a 81       	ldd	r22, Y+2	; 0x02
    34aa:	88 81       	ld	r24, Y
    34ac:	99 81       	ldd	r25, Y+1	; 0x01
    34ae:	19 95       	eicall
    34b0:	1d c0       	rjmp	.+58     	; 0x34ec <_hal_led_task+0x6e>
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	8f 5f       	subi	r24, 0xFF	; 255
    34b6:	8a 30       	cpi	r24, 0x0A	; 10
    34b8:	10 f4       	brcc	.+4      	; 0x34be <_hal_led_task+0x40>
    34ba:	8d 83       	std	Y+5, r24	; 0x05
    34bc:	17 c0       	rjmp	.+46     	; 0x34ec <_hal_led_task+0x6e>
    34be:	1d 82       	std	Y+5, r1	; 0x05
    34c0:	d6 01       	movw	r26, r12
    34c2:	1c 96       	adiw	r26, 0x0c	; 12
    34c4:	ed 91       	ld	r30, X+
    34c6:	fc 91       	ld	r31, X
    34c8:	1d 97       	sbiw	r26, 0x0d	; 13
    34ca:	6a 81       	ldd	r22, Y+2	; 0x02
    34cc:	88 81       	ld	r24, Y
    34ce:	99 81       	ldd	r25, Y+1	; 0x01
    34d0:	19 95       	eicall
    34d2:	0c c0       	rjmp	.+24     	; 0x34ec <_hal_led_task+0x6e>
    34d4:	8d 81       	ldd	r24, Y+5	; 0x05
    34d6:	88 23       	and	r24, r24
    34d8:	31 f0       	breq	.+12     	; 0x34e6 <_hal_led_task+0x68>
    34da:	81 2f       	mov	r24, r17
    34dc:	a2 df       	rcall	.-188    	; 0x3422 <_turn_on>
    34de:	8d 81       	ldd	r24, Y+5	; 0x05
    34e0:	81 50       	subi	r24, 0x01	; 1
    34e2:	8d 83       	std	Y+5, r24	; 0x05
    34e4:	03 c0       	rjmp	.+6      	; 0x34ec <_hal_led_task+0x6e>
    34e6:	0c 83       	std	Y+4, r16	; 0x04
    34e8:	81 2f       	mov	r24, r17
    34ea:	6d df       	rcall	.-294    	; 0x33c6 <_turn_off>
    34ec:	1f 5f       	subi	r17, 0xFF	; 255
    34ee:	26 96       	adiw	r28, 0x06	; 6
    34f0:	14 30       	cpi	r17, 0x04	; 4
    34f2:	79 f6       	brne	.-98     	; 0x3492 <_hal_led_task+0x14>
    34f4:	65 e0       	ldi	r22, 0x05	; 5
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	0e 94 0e 12 	call	0x241c	; 0x241c <vTaskDelay>
    3500:	c5 cf       	rjmp	.-118    	; 0x348c <_hal_led_task+0xe>

00003502 <led_create>:
    3502:	cf 92       	push	r12
    3504:	df 92       	push	r13
    3506:	ef 92       	push	r14
    3508:	ff 92       	push	r15
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	06 2f       	mov	r16, r22
    3514:	0f 2e       	mov	r0, r31
    3516:	fc e5       	ldi	r31, 0x5C	; 92
    3518:	ef 2e       	mov	r14, r31
    351a:	f9 e1       	ldi	r31, 0x19	; 25
    351c:	ff 2e       	mov	r15, r31
    351e:	f0 2d       	mov	r31, r0
    3520:	d7 01       	movw	r26, r14
    3522:	18 96       	adiw	r26, 0x08	; 8
    3524:	ed 91       	ld	r30, X+
    3526:	fc 91       	ld	r31, X
    3528:	19 97       	sbiw	r26, 0x09	; 9
    352a:	66 e0       	ldi	r22, 0x06	; 6
    352c:	87 e2       	ldi	r24, 0x27	; 39
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	19 95       	eicall
    3532:	c1 e0       	ldi	r28, 0x01	; 1
    3534:	d8 e1       	ldi	r29, 0x18	; 24
    3536:	0f 2e       	mov	r0, r31
    3538:	f8 e2       	ldi	r31, 0x28	; 40
    353a:	cf 2e       	mov	r12, r31
    353c:	d1 2c       	mov	r13, r1
    353e:	f0 2d       	mov	r31, r0
    3540:	d9 82       	std	Y+1, r13	; 0x01
    3542:	c8 82       	st	Y, r12
    3544:	86 e0       	ldi	r24, 0x06	; 6
    3546:	8a 83       	std	Y+2, r24	; 0x02
    3548:	1b 82       	std	Y+3, r1	; 0x03
    354a:	14 e0       	ldi	r17, 0x04	; 4
    354c:	1c 83       	std	Y+4, r17	; 0x04
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	3a df       	rcall	.-396    	; 0x33c6 <_turn_off>
    3552:	d7 01       	movw	r26, r14
    3554:	18 96       	adiw	r26, 0x08	; 8
    3556:	ed 91       	ld	r30, X+
    3558:	fc 91       	ld	r31, X
    355a:	19 97       	sbiw	r26, 0x09	; 9
    355c:	67 e0       	ldi	r22, 0x07	; 7
    355e:	87 e2       	ldi	r24, 0x27	; 39
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	19 95       	eicall
    3564:	df 82       	std	Y+7, r13	; 0x07
    3566:	ce 82       	std	Y+6, r12	; 0x06
    3568:	87 e0       	ldi	r24, 0x07	; 7
    356a:	88 87       	std	Y+8, r24	; 0x08
    356c:	19 86       	std	Y+9, r1	; 0x09
    356e:	1a 87       	std	Y+10, r17	; 0x0a
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	29 df       	rcall	.-430    	; 0x33c6 <_turn_off>
    3574:	d7 01       	movw	r26, r14
    3576:	18 96       	adiw	r26, 0x08	; 8
    3578:	ed 91       	ld	r30, X+
    357a:	fc 91       	ld	r31, X
    357c:	19 97       	sbiw	r26, 0x09	; 9
    357e:	65 e0       	ldi	r22, 0x05	; 5
    3580:	83 e3       	ldi	r24, 0x33	; 51
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	19 95       	eicall
    3586:	d7 01       	movw	r26, r14
    3588:	18 96       	adiw	r26, 0x08	; 8
    358a:	ed 91       	ld	r30, X+
    358c:	fc 91       	ld	r31, X
    358e:	19 97       	sbiw	r26, 0x09	; 9
    3590:	61 e0       	ldi	r22, 0x01	; 1
    3592:	84 e3       	ldi	r24, 0x34	; 52
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	19 95       	eicall
    3598:	84 e3       	ldi	r24, 0x34	; 52
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9d 87       	std	Y+13, r25	; 0x0d
    359e:	8c 87       	std	Y+12, r24	; 0x0c
    35a0:	85 e0       	ldi	r24, 0x05	; 5
    35a2:	8e 87       	std	Y+14, r24	; 0x0e
    35a4:	1f 86       	std	Y+15, r1	; 0x0f
    35a6:	18 8b       	std	Y+16, r17	; 0x10
    35a8:	82 e0       	ldi	r24, 0x02	; 2
    35aa:	0d df       	rcall	.-486    	; 0x33c6 <_turn_off>
    35ac:	d7 01       	movw	r26, r14
    35ae:	18 96       	adiw	r26, 0x08	; 8
    35b0:	ed 91       	ld	r30, X+
    35b2:	fc 91       	ld	r31, X
    35b4:	19 97       	sbiw	r26, 0x09	; 9
    35b6:	64 e0       	ldi	r22, 0x04	; 4
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	91 e0       	ldi	r25, 0x01	; 1
    35bc:	19 95       	eicall
    35be:	d7 01       	movw	r26, r14
    35c0:	18 96       	adiw	r26, 0x08	; 8
    35c2:	ed 91       	ld	r30, X+
    35c4:	fc 91       	ld	r31, X
    35c6:	19 97       	sbiw	r26, 0x09	; 9
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	91 e0       	ldi	r25, 0x01	; 1
    35ce:	19 95       	eicall
    35d0:	82 e0       	ldi	r24, 0x02	; 2
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	9b 8b       	std	Y+19, r25	; 0x13
    35d6:	8a 8b       	std	Y+18, r24	; 0x12
    35d8:	1c 8b       	std	Y+20, r17	; 0x14
    35da:	1d 8a       	std	Y+21, r1	; 0x15
    35dc:	1e 8b       	std	Y+22, r17	; 0x16
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	f2 de       	rcall	.-540    	; 0x33c6 <_turn_off>
    35e2:	e1 2c       	mov	r14, r1
    35e4:	f1 2c       	mov	r15, r1
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 ec       	ldi	r20, 0xC0	; 192
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	65 e6       	ldi	r22, 0x65	; 101
    35f0:	74 e0       	ldi	r23, 0x04	; 4
    35f2:	8f e3       	ldi	r24, 0x3F	; 63
    35f4:	9a e1       	ldi	r25, 0x1A	; 26
    35f6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xTaskCreate>
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	ef 90       	pop	r14
    3606:	df 90       	pop	r13
    3608:	cf 90       	pop	r12
    360a:	08 95       	ret

0000360c <led_slow_blink>:
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	c8 2f       	mov	r28, r24
    3616:	d0 e0       	ldi	r29, 0x00	; 0
    3618:	8e 01       	movw	r16, r28
    361a:	00 0f       	add	r16, r16
    361c:	11 1f       	adc	r17, r17
    361e:	d8 01       	movw	r26, r16
    3620:	ac 0f       	add	r26, r28
    3622:	bd 1f       	adc	r27, r29
    3624:	aa 0f       	add	r26, r26
    3626:	bb 1f       	adc	r27, r27
    3628:	af 5f       	subi	r26, 0xFF	; 255
    362a:	b7 4e       	sbci	r27, 0xE7	; 231
    362c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <register_access+0xc>
    3630:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <register_access+0xd>
    3634:	12 96       	adiw	r26, 0x02	; 2
    3636:	6c 91       	ld	r22, X
    3638:	12 97       	sbiw	r26, 0x02	; 2
    363a:	8d 91       	ld	r24, X+
    363c:	9c 91       	ld	r25, X
    363e:	19 95       	eicall
    3640:	c0 0f       	add	r28, r16
    3642:	d1 1f       	adc	r29, r17
    3644:	cc 0f       	add	r28, r28
    3646:	dd 1f       	adc	r29, r29
    3648:	cf 5f       	subi	r28, 0xFF	; 255
    364a:	d7 4e       	sbci	r29, 0xE7	; 231
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	8c 83       	std	Y+4, r24	; 0x04
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	08 95       	ret

0000365a <led_fast_blink>:
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	c8 2f       	mov	r28, r24
    3664:	d0 e0       	ldi	r29, 0x00	; 0
    3666:	8e 01       	movw	r16, r28
    3668:	00 0f       	add	r16, r16
    366a:	11 1f       	adc	r17, r17
    366c:	d8 01       	movw	r26, r16
    366e:	ac 0f       	add	r26, r28
    3670:	bd 1f       	adc	r27, r29
    3672:	aa 0f       	add	r26, r26
    3674:	bb 1f       	adc	r27, r27
    3676:	af 5f       	subi	r26, 0xFF	; 255
    3678:	b7 4e       	sbci	r27, 0xE7	; 231
    367a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <register_access+0xc>
    367e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <register_access+0xd>
    3682:	12 96       	adiw	r26, 0x02	; 2
    3684:	6c 91       	ld	r22, X
    3686:	12 97       	sbiw	r26, 0x02	; 2
    3688:	8d 91       	ld	r24, X+
    368a:	9c 91       	ld	r25, X
    368c:	19 95       	eicall
    368e:	c0 0f       	add	r28, r16
    3690:	d1 1f       	adc	r29, r17
    3692:	cc 0f       	add	r28, r28
    3694:	dd 1f       	adc	r29, r29
    3696:	cf 5f       	subi	r28, 0xFF	; 255
    3698:	d7 4e       	sbci	r29, 0xE7	; 231
    369a:	82 e0       	ldi	r24, 0x02	; 2
    369c:	8c 83       	std	Y+4, r24	; 0x04
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	08 95       	ret

000036a8 <led_led_on>:
    36a8:	28 2f       	mov	r18, r24
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	f9 01       	movw	r30, r18
    36ae:	ee 0f       	add	r30, r30
    36b0:	ff 1f       	adc	r31, r31
    36b2:	e2 0f       	add	r30, r18
    36b4:	f3 1f       	adc	r31, r19
    36b6:	ee 0f       	add	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	ef 5f       	subi	r30, 0xFF	; 255
    36bc:	f7 4e       	sbci	r31, 0xE7	; 231
    36be:	93 e0       	ldi	r25, 0x03	; 3
    36c0:	94 83       	std	Z+4, r25	; 0x04
    36c2:	af ce       	rjmp	.-674    	; 0x3422 <_turn_on>
    36c4:	08 95       	ret

000036c6 <led_led_off>:
    36c6:	28 2f       	mov	r18, r24
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	f9 01       	movw	r30, r18
    36cc:	ee 0f       	add	r30, r30
    36ce:	ff 1f       	adc	r31, r31
    36d0:	e2 0f       	add	r30, r18
    36d2:	f3 1f       	adc	r31, r19
    36d4:	ee 0f       	add	r30, r30
    36d6:	ff 1f       	adc	r31, r31
    36d8:	ef 5f       	subi	r30, 0xFF	; 255
    36da:	f7 4e       	sbci	r31, 0xE7	; 231
    36dc:	94 e0       	ldi	r25, 0x04	; 4
    36de:	94 83       	std	Z+4, r25	; 0x04
    36e0:	72 ce       	rjmp	.-796    	; 0x33c6 <_turn_off>
    36e2:	08 95       	ret

000036e4 <led_long_puls>:
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	fc 01       	movw	r30, r24
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	df 01       	movw	r26, r30
    36ee:	a8 0f       	add	r26, r24
    36f0:	b9 1f       	adc	r27, r25
    36f2:	aa 0f       	add	r26, r26
    36f4:	bb 1f       	adc	r27, r27
    36f6:	af 5f       	subi	r26, 0xFF	; 255
    36f8:	b7 4e       	sbci	r27, 0xE7	; 231
    36fa:	24 e0       	ldi	r18, 0x04	; 4
    36fc:	15 96       	adiw	r26, 0x05	; 5
    36fe:	2c 93       	st	X, r18
    3700:	15 97       	sbiw	r26, 0x05	; 5
    3702:	fd 01       	movw	r30, r26
    3704:	14 82       	std	Z+4, r1	; 0x04
    3706:	08 95       	ret

00003708 <led_short_puls>:
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	fc 01       	movw	r30, r24
    370c:	ee 0f       	add	r30, r30
    370e:	ff 1f       	adc	r31, r31
    3710:	df 01       	movw	r26, r30
    3712:	a8 0f       	add	r26, r24
    3714:	b9 1f       	adc	r27, r25
    3716:	aa 0f       	add	r26, r26
    3718:	bb 1f       	adc	r27, r27
    371a:	af 5f       	subi	r26, 0xFF	; 255
    371c:	b7 4e       	sbci	r27, 0xE7	; 231
    371e:	21 e0       	ldi	r18, 0x01	; 1
    3720:	15 96       	adiw	r26, 0x05	; 5
    3722:	2c 93       	st	X, r18
    3724:	15 97       	sbiw	r26, 0x05	; 5
    3726:	fd 01       	movw	r30, r26
    3728:	14 82       	std	Z+4, r1	; 0x04
    372a:	08 95       	ret

0000372c <_serial_call_back>:
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	1f 92       	push	r1
    3736:	1f 92       	push	r1
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	8c 01       	movw	r16, r24
    373e:	19 82       	std	Y+1, r1	; 0x01
    3740:	2d c0       	rjmp	.+90     	; 0x379c <_serial_call_back+0x70>
    3742:	e0 91 7d 18 	lds	r30, 0x187D	; 0x80187d <rec_buf_inp.2947>
    3746:	ec 32       	cpi	r30, 0x2C	; 44
    3748:	50 f4       	brcc	.+20     	; 0x375e <_serial_call_back+0x32>
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	8e 0f       	add	r24, r30
    374e:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <rec_buf_inp.2947>
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	e1 55       	subi	r30, 0x51	; 81
    3756:	f7 4e       	sbci	r31, 0xE7	; 231
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	80 83       	st	Z, r24
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <_serial_call_back+0x36>
    375e:	10 92 7d 18 	sts	0x187D, r1	; 0x80187d <rec_buf_inp.2947>
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	8a 30       	cpi	r24, 0x0A	; 10
    3766:	d1 f4       	brne	.+52     	; 0x379c <_serial_call_back+0x70>
    3768:	40 91 7d 18 	lds	r20, 0x187D	; 0x80187d <rec_buf_inp.2947>
    376c:	50 e0       	ldi	r21, 0x00	; 0
    376e:	fa 01       	movw	r30, r20
    3770:	e3 55       	subi	r30, 0x53	; 83
    3772:	f7 4e       	sbci	r31, 0xE7	; 231
    3774:	10 82       	st	Z, r1
    3776:	41 50       	subi	r20, 0x01	; 1
    3778:	51 09       	sbc	r21, r1
    377a:	9e 01       	movw	r18, r28
    377c:	2f 5f       	subi	r18, 0xFF	; 255
    377e:	3f 4f       	sbci	r19, 0xFF	; 255
    3780:	6f ea       	ldi	r22, 0xAF	; 175
    3782:	78 e1       	ldi	r23, 0x18	; 24
    3784:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <_serial_reply_buffer_handle>
    3788:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <_serial_reply_buffer_handle+0x1>
    378c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <xStreamBufferSendFromISR>
    3790:	89 81       	ldd	r24, Y+1	; 0x01
    3792:	81 11       	cpse	r24, r1
    3794:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vPortYield>
    3798:	10 92 7d 18 	sts	0x187D, r1	; 0x80187d <rec_buf_inp.2947>
    379c:	be 01       	movw	r22, r28
    379e:	6e 5f       	subi	r22, 0xFE	; 254
    37a0:	7f 4f       	sbci	r23, 0xFF	; 255
    37a2:	c8 01       	movw	r24, r16
    37a4:	48 d6       	rcall	.+3216   	; 0x4436 <serial_get_byte>
    37a6:	88 23       	and	r24, r24
    37a8:	61 f2       	breq	.-104    	; 0x3742 <_serial_call_back+0x16>
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <_upload_message>:
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	8c 01       	movw	r16, r24
    37c2:	eb 01       	movw	r28, r22
    37c4:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <_serial_reply_buffer_handle>
    37c8:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <_serial_reply_buffer_handle+0x1>
    37cc:	0e 94 81 0c 	call	0x1902	; 0x1902 <xStreamBufferReset>
    37d0:	b8 01       	movw	r22, r16
    37d2:	89 e1       	ldi	r24, 0x19	; 25
    37d4:	98 e1       	ldi	r25, 0x18	; 24
    37d6:	0e 94 d6 29 	call	0x53ac	; 0x53ac <strcpy>
    37da:	20 97       	sbiw	r28, 0x00	; 0
    37dc:	79 f0       	breq	.+30     	; 0x37fc <_upload_message+0x44>
    37de:	e9 e1       	ldi	r30, 0x19	; 25
    37e0:	f8 e1       	ldi	r31, 0x18	; 24
    37e2:	01 90       	ld	r0, Z+
    37e4:	00 20       	and	r0, r0
    37e6:	e9 f7       	brne	.-6      	; 0x37e2 <_upload_message+0x2a>
    37e8:	31 97       	sbiw	r30, 0x01	; 1
    37ea:	80 e2       	ldi	r24, 0x20	; 32
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	91 83       	std	Z+1, r25	; 0x01
    37f0:	80 83       	st	Z, r24
    37f2:	be 01       	movw	r22, r28
    37f4:	89 e1       	ldi	r24, 0x19	; 25
    37f6:	98 e1       	ldi	r25, 0x18	; 24
    37f8:	0e 94 cb 29 	call	0x5396	; 0x5396 <strcat>
    37fc:	e9 e1       	ldi	r30, 0x19	; 25
    37fe:	f8 e1       	ldi	r31, 0x18	; 24
    3800:	df 01       	movw	r26, r30
    3802:	0d 90       	ld	r0, X+
    3804:	00 20       	and	r0, r0
    3806:	e9 f7       	brne	.-6      	; 0x3802 <_upload_message+0x4a>
    3808:	11 97       	sbiw	r26, 0x01	; 1
    380a:	8d e0       	ldi	r24, 0x0D	; 13
    380c:	9a e0       	ldi	r25, 0x0A	; 10
    380e:	11 96       	adiw	r26, 0x01	; 1
    3810:	9c 93       	st	X, r25
    3812:	8e 93       	st	-X, r24
    3814:	12 96       	adiw	r26, 0x02	; 2
    3816:	1c 92       	st	X, r1
    3818:	01 90       	ld	r0, Z+
    381a:	00 20       	and	r0, r0
    381c:	e9 f7       	brne	.-6      	; 0x3818 <_upload_message+0x60>
    381e:	31 97       	sbiw	r30, 0x01	; 1
    3820:	e9 51       	subi	r30, 0x19	; 25
    3822:	f8 41       	sbci	r31, 0x18	; 24
    3824:	ae 2f       	mov	r26, r30
    3826:	89 e1       	ldi	r24, 0x19	; 25
    3828:	98 e1       	ldi	r25, 0x18	; 24
    382a:	ac 01       	movw	r20, r24
    382c:	6a 2f       	mov	r22, r26
    382e:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <_rn2483_serial>
    3832:	90 91 83 18 	lds	r25, 0x1883	; 0x801883 <_rn2483_serial+0x1>
    3836:	af d5       	rcall	.+2910   	; 0x4396 <serial_send_bytes>
    3838:	81 11       	cpse	r24, r1
    383a:	11 c0       	rjmp	.+34     	; 0x385e <_upload_message+0xa6>
    383c:	08 e2       	ldi	r16, 0x28	; 40
    383e:	15 e0       	ldi	r17, 0x05	; 5
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	4d e2       	ldi	r20, 0x2D	; 45
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	69 e0       	ldi	r22, 0x09	; 9
    384a:	79 e1       	ldi	r23, 0x19	; 25
    384c:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <_serial_reply_buffer_handle>
    3850:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <_serial_reply_buffer_handle+0x1>
    3854:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
    3858:	89 e0       	ldi	r24, 0x09	; 9
    385a:	99 e1       	ldi	r25, 0x19	; 25
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <_upload_message+0xaa>
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	1f 91       	pop	r17
    3868:	0f 91       	pop	r16
    386a:	08 95       	ret

0000386c <_reply2return_code>:
    386c:	2f 92       	push	r2
    386e:	3f 92       	push	r3
    3870:	4f 92       	push	r4
    3872:	5f 92       	push	r5
    3874:	6f 92       	push	r6
    3876:	7f 92       	push	r7
    3878:	8f 92       	push	r8
    387a:	9f 92       	push	r9
    387c:	af 92       	push	r10
    387e:	bf 92       	push	r11
    3880:	cf 92       	push	r12
    3882:	df 92       	push	r13
    3884:	ef 92       	push	r14
    3886:	ff 92       	push	r15
    3888:	0f 93       	push	r16
    388a:	1f 93       	push	r17
    388c:	cf 93       	push	r28
    388e:	df 93       	push	r29
    3890:	5c 01       	movw	r10, r24
    3892:	fc 01       	movw	r30, r24
    3894:	01 90       	ld	r0, Z+
    3896:	00 20       	and	r0, r0
    3898:	e9 f7       	brne	.-6      	; 0x3894 <_reply2return_code+0x28>
    389a:	31 97       	sbiw	r30, 0x01	; 1
    389c:	6f 01       	movw	r12, r30
    389e:	c8 1a       	sub	r12, r24
    38a0:	d9 0a       	sbc	r13, r25
    38a2:	5c 2c       	mov	r5, r12
    38a4:	0f 2e       	mov	r0, r31
    38a6:	f6 e0       	ldi	r31, 0x06	; 6
    38a8:	8f 2e       	mov	r8, r31
    38aa:	f7 e0       	ldi	r31, 0x07	; 7
    38ac:	9f 2e       	mov	r9, r31
    38ae:	f0 2d       	mov	r31, r0
    38b0:	e1 2c       	mov	r14, r1
    38b2:	f1 2c       	mov	r15, r1
    38b4:	4c 2c       	mov	r4, r12
    38b6:	37 01       	movw	r6, r14
    38b8:	f4 01       	movw	r30, r8
    38ba:	01 81       	ldd	r16, Z+1	; 0x01
    38bc:	12 81       	ldd	r17, Z+2	; 0x02
    38be:	e8 01       	movw	r28, r16
    38c0:	09 90       	ld	r0, Y+
    38c2:	00 20       	and	r0, r0
    38c4:	e9 f7       	brne	.-6      	; 0x38c0 <_reply2return_code+0x54>
    38c6:	21 97       	sbiw	r28, 0x01	; 1
    38c8:	c0 1b       	sub	r28, r16
    38ca:	d1 0b       	sbc	r29, r17
    38cc:	3c 2e       	mov	r3, r28
    38ce:	f9 e0       	ldi	r31, 0x09	; 9
    38d0:	cf 16       	cp	r12, r31
    38d2:	d1 04       	cpc	r13, r1
    38d4:	58 f0       	brcs	.+22     	; 0x38ec <_reply2return_code+0x80>
    38d6:	f4 01       	movw	r30, r8
    38d8:	20 80       	ld	r2, Z
    38da:	fe e0       	ldi	r31, 0x0E	; 14
    38dc:	2f 12       	cpse	r2, r31
    38de:	06 c0       	rjmp	.+12     	; 0x38ec <_reply2return_code+0x80>
    38e0:	b8 01       	movw	r22, r16
    38e2:	c5 01       	movw	r24, r10
    38e4:	0e 94 a6 29 	call	0x534c	; 0x534c <strcasestr>
    38e8:	89 2b       	or	r24, r25
    38ea:	09 f5       	brne	.+66     	; 0x392e <_reply2return_code+0xc2>
    38ec:	44 2d       	mov	r20, r4
    38ee:	35 14       	cp	r3, r5
    38f0:	08 f4       	brcc	.+2      	; 0x38f4 <_reply2return_code+0x88>
    38f2:	4c 2f       	mov	r20, r28
    38f4:	50 e0       	ldi	r21, 0x00	; 0
    38f6:	b8 01       	movw	r22, r16
    38f8:	c5 01       	movw	r24, r10
    38fa:	0e 94 dd 29 	call	0x53ba	; 0x53ba <strncasecmp>
    38fe:	89 2b       	or	r24, r25
    3900:	49 f4       	brne	.+18     	; 0x3914 <_reply2return_code+0xa8>
    3902:	f3 01       	movw	r30, r6
    3904:	ee 0f       	add	r30, r30
    3906:	ff 1f       	adc	r31, r31
    3908:	e6 0d       	add	r30, r6
    390a:	f7 1d       	adc	r31, r7
    390c:	ea 5f       	subi	r30, 0xFA	; 250
    390e:	f8 4f       	sbci	r31, 0xF8	; 248
    3910:	20 80       	ld	r2, Z
    3912:	0d c0       	rjmp	.+26     	; 0x392e <_reply2return_code+0xc2>
    3914:	8f ef       	ldi	r24, 0xFF	; 255
    3916:	e8 1a       	sub	r14, r24
    3918:	f8 0a       	sbc	r15, r24
    391a:	e3 e0       	ldi	r30, 0x03	; 3
    391c:	8e 0e       	add	r8, r30
    391e:	91 1c       	adc	r9, r1
    3920:	f1 e1       	ldi	r31, 0x11	; 17
    3922:	ef 16       	cp	r14, r31
    3924:	f1 04       	cpc	r15, r1
    3926:	39 f6       	brne	.-114    	; 0x38b6 <_reply2return_code+0x4a>
    3928:	68 94       	set
    392a:	22 24       	eor	r2, r2
    392c:	24 f8       	bld	r2, 4
    392e:	82 2d       	mov	r24, r2
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	df 90       	pop	r13
    393e:	cf 90       	pop	r12
    3940:	bf 90       	pop	r11
    3942:	af 90       	pop	r10
    3944:	9f 90       	pop	r9
    3946:	8f 90       	pop	r8
    3948:	7f 90       	pop	r7
    394a:	6f 90       	pop	r6
    394c:	5f 90       	pop	r5
    394e:	4f 90       	pop	r4
    3950:	3f 90       	pop	r3
    3952:	2f 90       	pop	r2
    3954:	08 95       	ret

00003956 <_upload_message_rc>:
    3956:	30 df       	rcall	.-416    	; 0x37b8 <_upload_message>
    3958:	89 cf       	rjmp	.-238    	; 0x386c <_reply2return_code>
    395a:	08 95       	ret

0000395c <lora_driver_flush_buffers>:
    395c:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <_serial_reply_buffer_handle>
    3960:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <_serial_reply_buffer_handle+0x1>
    3964:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <xStreamBufferReset>
    3968:	08 95       	ret

0000396a <lora_driver_create>:
    396a:	8f 92       	push	r8
    396c:	9f 92       	push	r9
    396e:	af 92       	push	r10
    3970:	cf 92       	push	r12
    3972:	ef 92       	push	r14
    3974:	0f 93       	push	r16
    3976:	1f 93       	push	r17
    3978:	cf 93       	push	r28
    397a:	c8 2f       	mov	r28, r24
    397c:	8b 01       	movw	r16, r22
    397e:	41 e0       	ldi	r20, 0x01	; 1
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	70 e0       	ldi	r23, 0x00	; 0
    3984:	88 ec       	ldi	r24, 0xC8	; 200
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	0e 94 55 0c 	call	0x18aa	; 0x18aa <xStreamBufferGenericCreate>
    398c:	90 93 81 18 	sts	0x1881, r25	; 0x801881 <_serial_reply_buffer_handle+0x1>
    3990:	80 93 80 18 	sts	0x1880, r24	; 0x801880 <_serial_reply_buffer_handle>
    3994:	10 93 7f 18 	sts	0x187F, r17	; 0x80187f <_downlinkMessageBuffer+0x1>
    3998:	00 93 7e 18 	sts	0x187E, r16	; 0x80187e <_downlinkMessageBuffer>
    399c:	0f 2e       	mov	r0, r31
    399e:	f6 e9       	ldi	r31, 0x96	; 150
    39a0:	8f 2e       	mov	r8, r31
    39a2:	fb e1       	ldi	r31, 0x1B	; 27
    39a4:	9f 2e       	mov	r9, r31
    39a6:	f0 2d       	mov	r31, r0
    39a8:	68 94       	set
    39aa:	aa 24       	eor	r10, r10
    39ac:	a6 f8       	bld	r10, 6
    39ae:	68 94       	set
    39b0:	cc 24       	eor	r12, r12
    39b2:	c6 f8       	bld	r12, 6
    39b4:	e1 2c       	mov	r14, r1
    39b6:	00 e0       	ldi	r16, 0x00	; 0
    39b8:	23 e0       	ldi	r18, 0x03	; 3
    39ba:	40 e0       	ldi	r20, 0x00	; 0
    39bc:	51 ee       	ldi	r21, 0xE1	; 225
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	8c 2f       	mov	r24, r28
    39c4:	2c d4       	rcall	.+2136   	; 0x421e <serial_new_instance>
    39c6:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <_rn2483_serial+0x1>
    39ca:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <_rn2483_serial>
    39ce:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <register_access+0x8>
    39d2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <register_access+0x9>
    39d6:	64 e0       	ldi	r22, 0x04	; 4
    39d8:	87 e0       	ldi	r24, 0x07	; 7
    39da:	91 e0       	ldi	r25, 0x01	; 1
    39dc:	19 95       	eicall
    39de:	cf 91       	pop	r28
    39e0:	1f 91       	pop	r17
    39e2:	0f 91       	pop	r16
    39e4:	ef 90       	pop	r14
    39e6:	cf 90       	pop	r12
    39e8:	af 90       	pop	r10
    39ea:	9f 90       	pop	r9
    39ec:	8f 90       	pop	r8
    39ee:	08 95       	ret

000039f0 <lora_driver_reset_rn2483>:
    39f0:	88 23       	and	r24, r24
    39f2:	49 f0       	breq	.+18     	; 0x3a06 <lora_driver_reset_rn2483+0x16>
    39f4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <register_access+0x12>
    39f8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <register_access+0x13>
    39fc:	64 e0       	ldi	r22, 0x04	; 4
    39fe:	88 e0       	ldi	r24, 0x08	; 8
    3a00:	91 e0       	ldi	r25, 0x01	; 1
    3a02:	19 95       	eicall
    3a04:	08 95       	ret
    3a06:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <register_access+0x8>
    3a0a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <register_access+0x9>
    3a0e:	64 e0       	ldi	r22, 0x04	; 4
    3a10:	88 e0       	ldi	r24, 0x08	; 8
    3a12:	91 e0       	ldi	r25, 0x01	; 1
    3a14:	19 95       	eicall
    3a16:	08 95       	ret

00003a18 <lora_driver_rn2483_factory_reset>:
    3a18:	60 e0       	ldi	r22, 0x00	; 0
    3a1a:	70 e0       	ldi	r23, 0x00	; 0
    3a1c:	8c e8       	ldi	r24, 0x8C	; 140
    3a1e:	94 e0       	ldi	r25, 0x04	; 4
    3a20:	cb de       	rcall	.-618    	; 0x37b8 <_upload_message>
    3a22:	e9 e0       	ldi	r30, 0x09	; 9
    3a24:	f9 e1       	ldi	r31, 0x19	; 25
    3a26:	01 90       	ld	r0, Z+
    3a28:	00 20       	and	r0, r0
    3a2a:	e9 f7       	brne	.-6      	; 0x3a26 <lora_driver_rn2483_factory_reset+0xe>
    3a2c:	31 97       	sbiw	r30, 0x01	; 1
    3a2e:	e9 50       	subi	r30, 0x09	; 9
    3a30:	f9 41       	sbci	r31, 0x19	; 25
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	75 97       	sbiw	r30, 0x15	; 21
    3a36:	08 f0       	brcs	.+2      	; 0x3a3a <lora_driver_rn2483_factory_reset+0x22>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	08 95       	ret

00003a3c <lora_driver_get_rn2483_hweui>:
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	ec 01       	movw	r28, r24
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	70 e0       	ldi	r23, 0x00	; 0
    3a46:	8d e9       	ldi	r24, 0x9D	; 157
    3a48:	94 e0       	ldi	r25, 0x04	; 4
    3a4a:	b6 de       	rcall	.-660    	; 0x37b8 <_upload_message>
    3a4c:	e9 e0       	ldi	r30, 0x09	; 9
    3a4e:	f9 e1       	ldi	r31, 0x19	; 25
    3a50:	01 90       	ld	r0, Z+
    3a52:	00 20       	and	r0, r0
    3a54:	e9 f7       	brne	.-6      	; 0x3a50 <lora_driver_get_rn2483_hweui+0x14>
    3a56:	ea 51       	subi	r30, 0x1A	; 26
    3a58:	f9 41       	sbci	r31, 0x19	; 25
    3a5a:	39 f4       	brne	.+14     	; 0x3a6a <lora_driver_get_rn2483_hweui+0x2e>
    3a5c:	69 e0       	ldi	r22, 0x09	; 9
    3a5e:	79 e1       	ldi	r23, 0x19	; 25
    3a60:	ce 01       	movw	r24, r28
    3a62:	0e 94 d6 29 	call	0x53ac	; 0x53ac <strcpy>
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	02 c0       	rjmp	.+4      	; 0x3a6e <lora_driver_get_rn2483_hweui+0x32>
    3a6a:	18 82       	st	Y, r1
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	08 95       	ret

00003a74 <lora_driver_set_device_identifier>:
    3a74:	fc 01       	movw	r30, r24
    3a76:	01 90       	ld	r0, Z+
    3a78:	00 20       	and	r0, r0
    3a7a:	e9 f7       	brne	.-6      	; 0x3a76 <lora_driver_set_device_identifier+0x2>
    3a7c:	9f 01       	movw	r18, r30
    3a7e:	21 51       	subi	r18, 0x11	; 17
    3a80:	31 09       	sbc	r19, r1
    3a82:	28 17       	cp	r18, r24
    3a84:	39 07       	cpc	r19, r25
    3a86:	29 f4       	brne	.+10     	; 0x3a92 <lora_driver_set_device_identifier+0x1e>
    3a88:	bc 01       	movw	r22, r24
    3a8a:	8b ec       	ldi	r24, 0xCB	; 203
    3a8c:	94 e0       	ldi	r25, 0x04	; 4
    3a8e:	63 cf       	rjmp	.-314    	; 0x3956 <_upload_message_rc>
    3a90:	08 95       	ret
    3a92:	89 e0       	ldi	r24, 0x09	; 9
    3a94:	08 95       	ret

00003a96 <lora_driver_set_application_identifier>:
    3a96:	fc 01       	movw	r30, r24
    3a98:	01 90       	ld	r0, Z+
    3a9a:	00 20       	and	r0, r0
    3a9c:	e9 f7       	brne	.-6      	; 0x3a98 <lora_driver_set_application_identifier+0x2>
    3a9e:	9f 01       	movw	r18, r30
    3aa0:	21 51       	subi	r18, 0x11	; 17
    3aa2:	31 09       	sbc	r19, r1
    3aa4:	28 17       	cp	r18, r24
    3aa6:	39 07       	cpc	r19, r25
    3aa8:	29 f4       	brne	.+10     	; 0x3ab4 <lora_driver_set_application_identifier+0x1e>
    3aaa:	bc 01       	movw	r22, r24
    3aac:	8a ed       	ldi	r24, 0xDA	; 218
    3aae:	94 e0       	ldi	r25, 0x04	; 4
    3ab0:	52 cf       	rjmp	.-348    	; 0x3956 <_upload_message_rc>
    3ab2:	08 95       	ret
    3ab4:	89 e0       	ldi	r24, 0x09	; 9
    3ab6:	08 95       	ret

00003ab8 <lora_driver_set_application_key>:
    3ab8:	fc 01       	movw	r30, r24
    3aba:	01 90       	ld	r0, Z+
    3abc:	00 20       	and	r0, r0
    3abe:	e9 f7       	brne	.-6      	; 0x3aba <lora_driver_set_application_key+0x2>
    3ac0:	9f 01       	movw	r18, r30
    3ac2:	21 52       	subi	r18, 0x21	; 33
    3ac4:	31 09       	sbc	r19, r1
    3ac6:	28 17       	cp	r18, r24
    3ac8:	39 07       	cpc	r19, r25
    3aca:	29 f4       	brne	.+10     	; 0x3ad6 <lora_driver_set_application_key+0x1e>
    3acc:	bc 01       	movw	r22, r24
    3ace:	89 ee       	ldi	r24, 0xE9	; 233
    3ad0:	94 e0       	ldi	r25, 0x04	; 4
    3ad2:	41 cf       	rjmp	.-382    	; 0x3956 <_upload_message_rc>
    3ad4:	08 95       	ret
    3ad6:	89 e0       	ldi	r24, 0x09	; 9
    3ad8:	08 95       	ret

00003ada <lora_driver_save_mac>:
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	70 e0       	ldi	r23, 0x00	; 0
    3ade:	88 e2       	ldi	r24, 0x28	; 40
    3ae0:	95 e0       	ldi	r25, 0x05	; 5
    3ae2:	39 cf       	rjmp	.-398    	; 0x3956 <_upload_message_rc>
    3ae4:	08 95       	ret

00003ae6 <lora_driver_join>:
    3ae6:	0f 93       	push	r16
    3ae8:	1f 93       	push	r17
    3aea:	e8 2f       	mov	r30, r24
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	ee 0f       	add	r30, r30
    3af0:	ff 1f       	adc	r31, r31
    3af2:	ee 5f       	subi	r30, 0xFE	; 254
    3af4:	f8 4f       	sbci	r31, 0xF8	; 248
    3af6:	60 81       	ld	r22, Z
    3af8:	71 81       	ldd	r23, Z+1	; 0x01
    3afa:	81 e3       	ldi	r24, 0x31	; 49
    3afc:	95 e0       	ldi	r25, 0x05	; 5
    3afe:	2b df       	rcall	.-426    	; 0x3956 <_upload_message_rc>
    3b00:	81 11       	cpse	r24, r1
    3b02:	14 c0       	rjmp	.+40     	; 0x3b2c <lora_driver_join+0x46>
    3b04:	08 e2       	ldi	r16, 0x28	; 40
    3b06:	15 e0       	ldi	r17, 0x05	; 5
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	4d e2       	ldi	r20, 0x2D	; 45
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	69 e0       	ldi	r22, 0x09	; 9
    3b12:	79 e1       	ldi	r23, 0x19	; 25
    3b14:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <_serial_reply_buffer_handle>
    3b18:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <_serial_reply_buffer_handle+0x1>
    3b1c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
    3b20:	88 23       	and	r24, r24
    3b22:	21 f0       	breq	.+8      	; 0x3b2c <lora_driver_join+0x46>
    3b24:	89 e0       	ldi	r24, 0x09	; 9
    3b26:	99 e1       	ldi	r25, 0x19	; 25
    3b28:	a1 de       	rcall	.-702    	; 0x386c <_reply2return_code>
    3b2a:	03 c0       	rjmp	.+6      	; 0x3b32 <lora_driver_join+0x4c>
    3b2c:	89 e0       	ldi	r24, 0x09	; 9
    3b2e:	99 e1       	ldi	r25, 0x19	; 25
    3b30:	9d de       	rcall	.-710    	; 0x386c <_reply2return_code>
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <lora_driver_sent_upload_message>:
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	1f 92       	push	r1
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	db 01       	movw	r26, r22
    3b48:	11 96       	adiw	r26, 0x01	; 1
    3b4a:	9c 91       	ld	r25, X
    3b4c:	11 97       	sbiw	r26, 0x01	; 1
    3b4e:	95 31       	cpi	r25, 0x15	; 21
    3b50:	08 f0       	brcs	.+2      	; 0x3b54 <lora_driver_sent_upload_message+0x1c>
    3b52:	b4 c0       	rjmp	.+360    	; 0x3cbc <lora_driver_sent_upload_message+0x184>
    3b54:	99 23       	and	r25, r25
    3b56:	81 f1       	breq	.+96     	; 0x3bb8 <lora_driver_sent_upload_message+0x80>
    3b58:	60 e0       	ldi	r22, 0x00	; 0
    3b5a:	70 e0       	ldi	r23, 0x00	; 0
    3b5c:	27 2f       	mov	r18, r23
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	46 2f       	mov	r20, r22
    3b62:	50 e0       	ldi	r21, 0x00	; 0
    3b64:	fd 01       	movw	r30, r26
    3b66:	e4 0f       	add	r30, r20
    3b68:	f5 1f       	adc	r31, r21
    3b6a:	92 81       	ldd	r25, Z+2	; 0x02
    3b6c:	92 95       	swap	r25
    3b6e:	9f 70       	andi	r25, 0x0F	; 15
    3b70:	9a 30       	cpi	r25, 0x0A	; 10
    3b72:	10 f0       	brcs	.+4      	; 0x3b78 <lora_driver_sent_upload_message+0x40>
    3b74:	99 5c       	subi	r25, 0xC9	; 201
    3b76:	01 c0       	rjmp	.+2      	; 0x3b7a <lora_driver_sent_upload_message+0x42>
    3b78:	90 5d       	subi	r25, 0xD0	; 208
    3b7a:	f9 01       	movw	r30, r18
    3b7c:	e6 56       	subi	r30, 0x66	; 102
    3b7e:	f7 4e       	sbci	r31, 0xE7	; 231
    3b80:	90 83       	st	Z, r25
    3b82:	2f 5f       	subi	r18, 0xFF	; 255
    3b84:	3f 4f       	sbci	r19, 0xFF	; 255
    3b86:	fd 01       	movw	r30, r26
    3b88:	e4 0f       	add	r30, r20
    3b8a:	f5 1f       	adc	r31, r21
    3b8c:	92 81       	ldd	r25, Z+2	; 0x02
    3b8e:	9f 70       	andi	r25, 0x0F	; 15
    3b90:	49 2f       	mov	r20, r25
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	4a 30       	cpi	r20, 0x0A	; 10
    3b96:	51 05       	cpc	r21, r1
    3b98:	14 f0       	brlt	.+4      	; 0x3b9e <lora_driver_sent_upload_message+0x66>
    3b9a:	99 5c       	subi	r25, 0xC9	; 201
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <lora_driver_sent_upload_message+0x68>
    3b9e:	90 5d       	subi	r25, 0xD0	; 208
    3ba0:	f9 01       	movw	r30, r18
    3ba2:	e6 56       	subi	r30, 0x66	; 102
    3ba4:	f7 4e       	sbci	r31, 0xE7	; 231
    3ba6:	90 83       	st	Z, r25
    3ba8:	7e 5f       	subi	r23, 0xFE	; 254
    3baa:	6f 5f       	subi	r22, 0xFF	; 255
    3bac:	11 96       	adiw	r26, 0x01	; 1
    3bae:	9c 91       	ld	r25, X
    3bb0:	11 97       	sbiw	r26, 0x01	; 1
    3bb2:	69 17       	cp	r22, r25
    3bb4:	98 f2       	brcs	.-90     	; 0x3b5c <lora_driver_sent_upload_message+0x24>
    3bb6:	01 c0       	rjmp	.+2      	; 0x3bba <lora_driver_sent_upload_message+0x82>
    3bb8:	70 e0       	ldi	r23, 0x00	; 0
    3bba:	e7 2f       	mov	r30, r23
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	e6 56       	subi	r30, 0x66	; 102
    3bc0:	f7 4e       	sbci	r31, 0xE7	; 231
    3bc2:	10 82       	st	Z, r1
    3bc4:	4c 91       	ld	r20, X
    3bc6:	81 11       	cpse	r24, r1
    3bc8:	03 c0       	rjmp	.+6      	; 0x3bd0 <lora_driver_sent_upload_message+0x98>
    3bca:	8a e3       	ldi	r24, 0x3A	; 58
    3bcc:	95 e0       	ldi	r25, 0x05	; 5
    3bce:	02 c0       	rjmp	.+4      	; 0x3bd4 <lora_driver_sent_upload_message+0x9c>
    3bd0:	8c e3       	ldi	r24, 0x3C	; 60
    3bd2:	95 e0       	ldi	r25, 0x05	; 5
    3bd4:	2a e9       	ldi	r18, 0x9A	; 154
    3bd6:	38 e1       	ldi	r19, 0x18	; 24
    3bd8:	3f 93       	push	r19
    3bda:	2f 93       	push	r18
    3bdc:	1f 92       	push	r1
    3bde:	4f 93       	push	r20
    3be0:	9f 93       	push	r25
    3be2:	8f 93       	push	r24
    3be4:	80 e4       	ldi	r24, 0x40	; 64
    3be6:	95 e0       	ldi	r25, 0x05	; 5
    3be8:	9f 93       	push	r25
    3bea:	8f 93       	push	r24
    3bec:	8c ed       	ldi	r24, 0xDC	; 220
    3bee:	98 e1       	ldi	r25, 0x18	; 24
    3bf0:	9f 93       	push	r25
    3bf2:	8f 93       	push	r24
    3bf4:	0e 94 38 2a 	call	0x5470	; 0x5470 <sprintf>
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	8c ed       	ldi	r24, 0xDC	; 220
    3bfe:	98 e1       	ldi	r25, 0x18	; 24
    3c00:	aa de       	rcall	.-684    	; 0x3956 <_upload_message_rc>
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	81 11       	cpse	r24, r1
    3c0e:	59 c0       	rjmp	.+178    	; 0x3cc2 <lora_driver_sent_upload_message+0x18a>
    3c10:	08 e2       	ldi	r16, 0x28	; 40
    3c12:	15 e0       	ldi	r17, 0x05	; 5
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	4d e2       	ldi	r20, 0x2D	; 45
    3c1a:	50 e0       	ldi	r21, 0x00	; 0
    3c1c:	69 e0       	ldi	r22, 0x09	; 9
    3c1e:	79 e1       	ldi	r23, 0x19	; 25
    3c20:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <_serial_reply_buffer_handle>
    3c24:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <_serial_reply_buffer_handle+0x1>
    3c28:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
    3c2c:	88 23       	and	r24, r24
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <lora_driver_sent_upload_message+0xfa>
    3c30:	47 c0       	rjmp	.+142    	; 0x3cc0 <lora_driver_sent_upload_message+0x188>
    3c32:	89 e0       	ldi	r24, 0x09	; 9
    3c34:	99 e1       	ldi	r25, 0x19	; 25
    3c36:	1a de       	rcall	.-972    	; 0x386c <_reply2return_code>
    3c38:	8e 30       	cpi	r24, 0x0E	; 14
    3c3a:	09 f0       	breq	.+2      	; 0x3c3e <lora_driver_sent_upload_message+0x106>
    3c3c:	42 c0       	rjmp	.+132    	; 0x3cc2 <lora_driver_sent_upload_message+0x18a>
    3c3e:	87 e0       	ldi	r24, 0x07	; 7
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <_downlinkMessageBuffer>
    3c46:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <_downlinkMessageBuffer+0x1>
    3c4a:	89 2b       	or	r24, r25
    3c4c:	a9 f1       	breq	.+106    	; 0x3cb8 <lora_driver_sent_upload_message+0x180>
    3c4e:	be 01       	movw	r22, r28
    3c50:	6f 5f       	subi	r22, 0xFF	; 255
    3c52:	7f 4f       	sbci	r23, 0xFF	; 255
    3c54:	89 e0       	ldi	r24, 0x09	; 9
    3c56:	99 e1       	ldi	r25, 0x19	; 25
    3c58:	68 d1       	rcall	.+720    	; 0x3f2a <decode_port_no>
    3c5a:	80 93 84 18 	sts	0x1884, r24	; 0x801884 <_downlink_payload>
    3c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	e7 5f       	subi	r30, 0xF7	; 247
    3c64:	f6 4e       	sbci	r31, 0xE6	; 230
    3c66:	df 01       	movw	r26, r30
    3c68:	0d 90       	ld	r0, X+
    3c6a:	00 20       	and	r0, r0
    3c6c:	e9 f7       	brne	.-6      	; 0x3c68 <lora_driver_sent_upload_message+0x130>
    3c6e:	11 97       	sbiw	r26, 0x01	; 1
    3c70:	ae 1b       	sub	r26, r30
    3c72:	bf 0b       	sbc	r27, r31
    3c74:	aa 23       	and	r26, r26
    3c76:	91 f0       	breq	.+36     	; 0x3c9c <lora_driver_sent_upload_message+0x164>
    3c78:	bb 27       	eor	r27, r27
    3c7a:	cd 01       	movw	r24, r26
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	9c 01       	movw	r18, r24
    3c80:	12 f4       	brpl	.+4      	; 0x3c86 <lora_driver_sent_upload_message+0x14e>
    3c82:	2f 5f       	subi	r18, 0xFF	; 255
    3c84:	3f 4f       	sbci	r19, 0xFF	; 255
    3c86:	35 95       	asr	r19
    3c88:	27 95       	ror	r18
    3c8a:	20 93 85 18 	sts	0x1885, r18	; 0x801885 <_downlink_payload+0x1>
    3c8e:	af 01       	movw	r20, r30
    3c90:	4f 5f       	subi	r20, 0xFF	; 255
    3c92:	5f 4f       	sbci	r21, 0xFF	; 255
    3c94:	64 e1       	ldi	r22, 0x14	; 20
    3c96:	86 e8       	ldi	r24, 0x86	; 134
    3c98:	98 e1       	ldi	r25, 0x18	; 24
    3c9a:	73 d1       	rcall	.+742    	; 0x3f82 <decode_hexadecimal_string_bytes>
    3c9c:	01 e0       	ldi	r16, 0x01	; 1
    3c9e:	10 e0       	ldi	r17, 0x00	; 0
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	46 e1       	ldi	r20, 0x16	; 22
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
    3ca8:	64 e8       	ldi	r22, 0x84	; 132
    3caa:	78 e1       	ldi	r23, 0x18	; 24
    3cac:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <_downlinkMessageBuffer>
    3cb0:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <_downlinkMessageBuffer+0x1>
    3cb4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <xStreamBufferSend>
    3cb8:	8e e0       	ldi	r24, 0x0E	; 14
    3cba:	03 c0       	rjmp	.+6      	; 0x3cc2 <lora_driver_sent_upload_message+0x18a>
    3cbc:	84 e1       	ldi	r24, 0x14	; 20
    3cbe:	01 c0       	rjmp	.+2      	; 0x3cc2 <lora_driver_sent_upload_message+0x18a>
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	0f 90       	pop	r0
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	08 95       	ret

00003cce <lora_driver_set_adaptive_data_rate>:
    3cce:	81 30       	cpi	r24, 0x01	; 1
    3cd0:	19 f0       	breq	.+6      	; 0x3cd8 <lora_driver_set_adaptive_data_rate+0xa>
    3cd2:	60 e5       	ldi	r22, 0x50	; 80
    3cd4:	75 e0       	ldi	r23, 0x05	; 5
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <lora_driver_set_adaptive_data_rate+0xe>
    3cd8:	69 e2       	ldi	r22, 0x29	; 41
    3cda:	76 e0       	ldi	r23, 0x06	; 6
    3cdc:	84 e5       	ldi	r24, 0x54	; 84
    3cde:	95 e0       	ldi	r25, 0x05	; 5
    3ce0:	3a ce       	rjmp	.-908    	; 0x3956 <_upload_message_rc>
    3ce2:	08 95       	ret

00003ce4 <lora_driver_set_receive_delay>:
    3ce4:	9f 93       	push	r25
    3ce6:	8f 93       	push	r24
    3ce8:	85 e8       	ldi	r24, 0x85	; 133
    3cea:	95 e0       	ldi	r25, 0x05	; 5
    3cec:	9f 93       	push	r25
    3cee:	8f 93       	push	r24
    3cf0:	8c ed       	ldi	r24, 0xDC	; 220
    3cf2:	98 e1       	ldi	r25, 0x18	; 24
    3cf4:	9f 93       	push	r25
    3cf6:	8f 93       	push	r24
    3cf8:	0e 94 38 2a 	call	0x5470	; 0x5470 <sprintf>
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	8c ed       	ldi	r24, 0xDC	; 220
    3d02:	98 e1       	ldi	r25, 0x18	; 24
    3d04:	28 de       	rcall	.-944    	; 0x3956 <_upload_message_rc>
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	08 95       	ret

00003d14 <lora_driver_configure_to_eu868>:
    3d14:	2f 92       	push	r2
    3d16:	3f 92       	push	r3
    3d18:	4f 92       	push	r4
    3d1a:	5f 92       	push	r5
    3d1c:	6f 92       	push	r6
    3d1e:	7f 92       	push	r7
    3d20:	8f 92       	push	r8
    3d22:	9f 92       	push	r9
    3d24:	af 92       	push	r10
    3d26:	bf 92       	push	r11
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	a0 97       	sbiw	r28, 0x20	; 32
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	62 eb       	ldi	r22, 0xB2	; 178
    3d4a:	75 e0       	ldi	r23, 0x05	; 5
    3d4c:	8e eb       	ldi	r24, 0xBE	; 190
    3d4e:	95 e0       	ldi	r25, 0x05	; 5
    3d50:	33 dd       	rcall	.-1434   	; 0x37b8 <_upload_message>
    3d52:	8c dd       	rcall	.-1256   	; 0x386c <_reply2return_code>
    3d54:	81 11       	cpse	r24, r1
    3d56:	a3 c0       	rjmp	.+326    	; 0x3e9e <lora_driver_configure_to_eu868+0x18a>
    3d58:	80 e2       	ldi	r24, 0x20	; 32
    3d5a:	e1 e2       	ldi	r30, 0x21	; 33
    3d5c:	f2 e0       	ldi	r31, 0x02	; 2
    3d5e:	de 01       	movw	r26, r28
    3d60:	11 96       	adiw	r26, 0x01	; 1
    3d62:	01 90       	ld	r0, Z+
    3d64:	0d 92       	st	X+, r0
    3d66:	8a 95       	dec	r24
    3d68:	e1 f7       	brne	.-8      	; 0x3d62 <lora_driver_configure_to_eu868+0x4e>
    3d6a:	9e 01       	movw	r18, r28
    3d6c:	2f 5f       	subi	r18, 0xFF	; 255
    3d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d70:	69 01       	movw	r12, r18
    3d72:	e1 2c       	mov	r14, r1
    3d74:	f1 2c       	mov	r15, r1
    3d76:	0f 2e       	mov	r0, r31
    3d78:	fa ec       	ldi	r31, 0xCA	; 202
    3d7a:	af 2e       	mov	r10, r31
    3d7c:	f5 e0       	ldi	r31, 0x05	; 5
    3d7e:	bf 2e       	mov	r11, r31
    3d80:	f0 2d       	mov	r31, r0
    3d82:	0c ed       	ldi	r16, 0xDC	; 220
    3d84:	18 e1       	ldi	r17, 0x18	; 24
    3d86:	0f 2e       	mov	r0, r31
    3d88:	f3 ee       	ldi	r31, 0xE3	; 227
    3d8a:	4f 2e       	mov	r4, r31
    3d8c:	f5 e0       	ldi	r31, 0x05	; 5
    3d8e:	5f 2e       	mov	r5, r31
    3d90:	f0 2d       	mov	r31, r0
    3d92:	0f 2e       	mov	r0, r31
    3d94:	fa ef       	ldi	r31, 0xFA	; 250
    3d96:	8f 2e       	mov	r8, r31
    3d98:	f5 e0       	ldi	r31, 0x05	; 5
    3d9a:	9f 2e       	mov	r9, r31
    3d9c:	f0 2d       	mov	r31, r0
    3d9e:	0f 2e       	mov	r0, r31
    3da0:	f4 e1       	ldi	r31, 0x14	; 20
    3da2:	6f 2e       	mov	r6, r31
    3da4:	f6 e0       	ldi	r31, 0x06	; 6
    3da6:	7f 2e       	mov	r7, r31
    3da8:	f0 2d       	mov	r31, r0
    3daa:	3e 2c       	mov	r3, r14
    3dac:	2f 2c       	mov	r2, r15
    3dae:	ff 92       	push	r15
    3db0:	ef 92       	push	r14
    3db2:	bf 92       	push	r11
    3db4:	af 92       	push	r10
    3db6:	1f 93       	push	r17
    3db8:	0f 93       	push	r16
    3dba:	0e 94 38 2a 	call	0x5470	; 0x5470 <sprintf>
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	c8 01       	movw	r24, r16
    3dc4:	f9 dc       	rcall	.-1550   	; 0x37b8 <_upload_message>
    3dc6:	52 dd       	rcall	.-1372   	; 0x386c <_reply2return_code>
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	81 11       	cpse	r24, r1
    3dd6:	63 c0       	rjmp	.+198    	; 0x3e9e <lora_driver_configure_to_eu868+0x18a>
    3dd8:	32 e0       	ldi	r19, 0x02	; 2
    3dda:	3e 15       	cp	r19, r14
    3ddc:	e8 f4       	brcc	.+58     	; 0x3e18 <lora_driver_configure_to_eu868+0x104>
    3dde:	f6 01       	movw	r30, r12
    3de0:	83 81       	ldd	r24, Z+3	; 0x03
    3de2:	8f 93       	push	r24
    3de4:	82 81       	ldd	r24, Z+2	; 0x02
    3de6:	8f 93       	push	r24
    3de8:	81 81       	ldd	r24, Z+1	; 0x01
    3dea:	8f 93       	push	r24
    3dec:	80 81       	ld	r24, Z
    3dee:	8f 93       	push	r24
    3df0:	ff 92       	push	r15
    3df2:	ef 92       	push	r14
    3df4:	5f 92       	push	r5
    3df6:	4f 92       	push	r4
    3df8:	1f 93       	push	r17
    3dfa:	0f 93       	push	r16
    3dfc:	0e 94 38 2a 	call	0x5470	; 0x5470 <sprintf>
    3e00:	60 e0       	ldi	r22, 0x00	; 0
    3e02:	70 e0       	ldi	r23, 0x00	; 0
    3e04:	c8 01       	movw	r24, r16
    3e06:	d8 dc       	rcall	.-1616   	; 0x37b8 <_upload_message>
    3e08:	31 dd       	rcall	.-1438   	; 0x386c <_reply2return_code>
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	81 11       	cpse	r24, r1
    3e16:	43 c0       	rjmp	.+134    	; 0x3e9e <lora_driver_configure_to_eu868+0x18a>
    3e18:	2f 92       	push	r2
    3e1a:	3f 92       	push	r3
    3e1c:	9f 92       	push	r9
    3e1e:	8f 92       	push	r8
    3e20:	1f 93       	push	r17
    3e22:	0f 93       	push	r16
    3e24:	0e 94 38 2a 	call	0x5470	; 0x5470 <sprintf>
    3e28:	60 e0       	ldi	r22, 0x00	; 0
    3e2a:	70 e0       	ldi	r23, 0x00	; 0
    3e2c:	c8 01       	movw	r24, r16
    3e2e:	c4 dc       	rcall	.-1656   	; 0x37b8 <_upload_message>
    3e30:	1d dd       	rcall	.-1478   	; 0x386c <_reply2return_code>
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	81 11       	cpse	r24, r1
    3e40:	2e c0       	rjmp	.+92     	; 0x3e9e <lora_driver_configure_to_eu868+0x18a>
    3e42:	2f 92       	push	r2
    3e44:	3f 92       	push	r3
    3e46:	7f 92       	push	r7
    3e48:	6f 92       	push	r6
    3e4a:	1f 93       	push	r17
    3e4c:	0f 93       	push	r16
    3e4e:	0e 94 38 2a 	call	0x5470	; 0x5470 <sprintf>
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	c8 01       	movw	r24, r16
    3e58:	af dc       	rcall	.-1698   	; 0x37b8 <_upload_message>
    3e5a:	08 dd       	rcall	.-1520   	; 0x386c <_reply2return_code>
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	81 11       	cpse	r24, r1
    3e6a:	19 c0       	rjmp	.+50     	; 0x3e9e <lora_driver_configure_to_eu868+0x18a>
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	e3 1a       	sub	r14, r19
    3e70:	f3 0a       	sbc	r15, r19
    3e72:	84 e0       	ldi	r24, 0x04	; 4
    3e74:	c8 0e       	add	r12, r24
    3e76:	d1 1c       	adc	r13, r1
    3e78:	98 e0       	ldi	r25, 0x08	; 8
    3e7a:	e9 16       	cp	r14, r25
    3e7c:	f1 04       	cpc	r15, r1
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <lora_driver_configure_to_eu868+0x16e>
    3e80:	94 cf       	rjmp	.-216    	; 0x3daa <lora_driver_configure_to_eu868+0x96>
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	8c e2       	ldi	r24, 0x2C	; 44
    3e88:	96 e0       	ldi	r25, 0x06	; 6
    3e8a:	96 dc       	rcall	.-1748   	; 0x37b8 <_upload_message>
    3e8c:	ef dc       	rcall	.-1570   	; 0x386c <_reply2return_code>
    3e8e:	81 11       	cpse	r24, r1
    3e90:	06 c0       	rjmp	.+12     	; 0x3e9e <lora_driver_configure_to_eu868+0x18a>
    3e92:	60 e0       	ldi	r22, 0x00	; 0
    3e94:	70 e0       	ldi	r23, 0x00	; 0
    3e96:	8d e3       	ldi	r24, 0x3D	; 61
    3e98:	96 e0       	ldi	r25, 0x06	; 6
    3e9a:	8e dc       	rcall	.-1764   	; 0x37b8 <_upload_message>
    3e9c:	e7 dc       	rcall	.-1586   	; 0x386c <_reply2return_code>
    3e9e:	a0 96       	adiw	r28, 0x20	; 32
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	de bf       	out	0x3e, r29	; 62
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	df 91       	pop	r29
    3eac:	cf 91       	pop	r28
    3eae:	1f 91       	pop	r17
    3eb0:	0f 91       	pop	r16
    3eb2:	ff 90       	pop	r15
    3eb4:	ef 90       	pop	r14
    3eb6:	df 90       	pop	r13
    3eb8:	cf 90       	pop	r12
    3eba:	bf 90       	pop	r11
    3ebc:	af 90       	pop	r10
    3ebe:	9f 90       	pop	r9
    3ec0:	8f 90       	pop	r8
    3ec2:	7f 90       	pop	r7
    3ec4:	6f 90       	pop	r6
    3ec6:	5f 90       	pop	r5
    3ec8:	4f 90       	pop	r4
    3eca:	3f 90       	pop	r3
    3ecc:	2f 90       	pop	r2
    3ece:	08 95       	ret

00003ed0 <lora_driver_set_otaa_identity>:
    3ed0:	ef 92       	push	r14
    3ed2:	ff 92       	push	r15
    3ed4:	0f 93       	push	r16
    3ed6:	1f 93       	push	r17
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	ec 01       	movw	r28, r24
    3ede:	8b 01       	movw	r16, r22
    3ee0:	7a 01       	movw	r14, r20
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	f4 de       	rcall	.-536    	; 0x3cce <lora_driver_set_adaptive_data_rate>
    3ee6:	81 11       	cpse	r24, r1
    3ee8:	0d c0       	rjmp	.+26     	; 0x3f04 <lora_driver_set_otaa_identity+0x34>
    3eea:	ce 01       	movw	r24, r28
    3eec:	d4 dd       	rcall	.-1112   	; 0x3a96 <lora_driver_set_application_identifier>
    3eee:	81 11       	cpse	r24, r1
    3ef0:	09 c0       	rjmp	.+18     	; 0x3f04 <lora_driver_set_otaa_identity+0x34>
    3ef2:	c8 01       	movw	r24, r16
    3ef4:	e1 dd       	rcall	.-1086   	; 0x3ab8 <lora_driver_set_application_key>
    3ef6:	81 11       	cpse	r24, r1
    3ef8:	05 c0       	rjmp	.+10     	; 0x3f04 <lora_driver_set_otaa_identity+0x34>
    3efa:	c7 01       	movw	r24, r14
    3efc:	bb dd       	rcall	.-1162   	; 0x3a74 <lora_driver_set_device_identifier>
    3efe:	81 11       	cpse	r24, r1
    3f00:	01 c0       	rjmp	.+2      	; 0x3f04 <lora_driver_set_otaa_identity+0x34>
    3f02:	eb dd       	rcall	.-1066   	; 0x3ada <lora_driver_save_mac>
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	1f 91       	pop	r17
    3f0a:	0f 91       	pop	r16
    3f0c:	ff 90       	pop	r15
    3f0e:	ef 90       	pop	r14
    3f10:	08 95       	ret

00003f12 <lora_driver_map_return_code_to_text>:
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	fc 01       	movw	r30, r24
    3f16:	ee 0f       	add	r30, r30
    3f18:	ff 1f       	adc	r31, r31
    3f1a:	8e 0f       	add	r24, r30
    3f1c:	9f 1f       	adc	r25, r31
    3f1e:	fc 01       	movw	r30, r24
    3f20:	ea 5f       	subi	r30, 0xFA	; 250
    3f22:	f8 4f       	sbci	r31, 0xF8	; 248
    3f24:	81 81       	ldd	r24, Z+1	; 0x01
    3f26:	92 81       	ldd	r25, Z+2	; 0x02
    3f28:	08 95       	ret

00003f2a <decode_port_no>:
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	29 f1       	breq	.+74     	; 0x3f7a <decode_port_no+0x50>
    3f30:	fb 01       	movw	r30, r22
    3f32:	20 81       	ld	r18, Z
    3f34:	fc 01       	movw	r30, r24
    3f36:	01 90       	ld	r0, Z+
    3f38:	00 20       	and	r0, r0
    3f3a:	e9 f7       	brne	.-6      	; 0x3f36 <decode_port_no+0xc>
    3f3c:	31 97       	sbiw	r30, 0x01	; 1
    3f3e:	e8 1b       	sub	r30, r24
    3f40:	f9 0b       	sbc	r31, r25
    3f42:	82 2f       	mov	r24, r18
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	e8 17       	cp	r30, r24
    3f48:	f9 07       	cpc	r31, r25
    3f4a:	c8 f0       	brcs	.+50     	; 0x3f7e <decode_port_no+0x54>
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	08 c0       	rjmp	.+16     	; 0x3f60 <decode_port_no+0x36>
    3f50:	88 0f       	add	r24, r24
    3f52:	38 2f       	mov	r19, r24
    3f54:	33 0f       	add	r19, r19
    3f56:	33 0f       	add	r19, r19
    3f58:	83 0f       	add	r24, r19
    3f5a:	80 53       	subi	r24, 0x30	; 48
    3f5c:	89 0f       	add	r24, r25
    3f5e:	2f 5f       	subi	r18, 0xFF	; 255
    3f60:	fd 01       	movw	r30, r26
    3f62:	e2 0f       	add	r30, r18
    3f64:	f1 1d       	adc	r31, r1
    3f66:	90 81       	ld	r25, Z
    3f68:	30 ed       	ldi	r19, 0xD0	; 208
    3f6a:	39 0f       	add	r19, r25
    3f6c:	3a 30       	cpi	r19, 0x0A	; 10
    3f6e:	10 f4       	brcc	.+4      	; 0x3f74 <decode_port_no+0x4a>
    3f70:	91 11       	cpse	r25, r1
    3f72:	ee cf       	rjmp	.-36     	; 0x3f50 <decode_port_no+0x26>
    3f74:	fb 01       	movw	r30, r22
    3f76:	20 83       	st	Z, r18
    3f78:	08 95       	ret
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	08 95       	ret
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	08 95       	ret

00003f82 <decode_hexadecimal_string_bytes>:
    3f82:	0f 93       	push	r16
    3f84:	1f 93       	push	r17
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	ea 01       	movw	r28, r20
    3f8e:	20 97       	sbiw	r28, 0x00	; 0
    3f90:	e1 f1       	breq	.+120    	; 0x400a <decode_hexadecimal_string_bytes+0x88>
    3f92:	fa 01       	movw	r30, r20
    3f94:	01 90       	ld	r0, Z+
    3f96:	00 20       	and	r0, r0
    3f98:	e9 f7       	brne	.-6      	; 0x3f94 <decode_hexadecimal_string_bytes+0x12>
    3f9a:	31 97       	sbiw	r30, 0x01	; 1
    3f9c:	e4 1b       	sub	r30, r20
    3f9e:	f5 0b       	sbc	r31, r21
    3fa0:	32 97       	sbiw	r30, 0x02	; 2
    3fa2:	10 f5       	brcc	.+68     	; 0x3fe8 <decode_hexadecimal_string_bytes+0x66>
    3fa4:	32 c0       	rjmp	.+100    	; 0x400a <decode_hexadecimal_string_bytes+0x88>
    3fa6:	8d 01       	movw	r16, r26
    3fa8:	04 0f       	add	r16, r20
    3faa:	15 1f       	adc	r17, r21
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	ae 01       	movw	r20, r28
    3fb0:	42 0f       	add	r20, r18
    3fb2:	53 1f       	adc	r21, r19
    3fb4:	fa 01       	movw	r30, r20
    3fb6:	90 81       	ld	r25, Z
    3fb8:	91 34       	cpi	r25, 0x41	; 65
    3fba:	28 f0       	brcs	.+10     	; 0x3fc6 <decode_hexadecimal_string_bytes+0x44>
    3fbc:	97 53       	subi	r25, 0x37	; 55
    3fbe:	59 2f       	mov	r21, r25
    3fc0:	52 95       	swap	r21
    3fc2:	50 7f       	andi	r21, 0xF0	; 240
    3fc4:	03 c0       	rjmp	.+6      	; 0x3fcc <decode_hexadecimal_string_bytes+0x4a>
    3fc6:	59 2f       	mov	r21, r25
    3fc8:	52 95       	swap	r21
    3fca:	50 7f       	andi	r21, 0xF0	; 240
    3fcc:	2c 0f       	add	r18, r28
    3fce:	3d 1f       	adc	r19, r29
    3fd0:	f9 01       	movw	r30, r18
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	91 34       	cpi	r25, 0x41	; 65
    3fd6:	10 f0       	brcs	.+4      	; 0x3fdc <decode_hexadecimal_string_bytes+0x5a>
    3fd8:	97 53       	subi	r25, 0x37	; 55
    3fda:	01 c0       	rjmp	.+2      	; 0x3fde <decode_hexadecimal_string_bytes+0x5c>
    3fdc:	90 53       	subi	r25, 0x30	; 48
    3fde:	95 0f       	add	r25, r21
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	90 83       	st	Z, r25
    3fe4:	8f 5f       	subi	r24, 0xFF	; 255
    3fe6:	01 c0       	rjmp	.+2      	; 0x3fea <decode_hexadecimal_string_bytes+0x68>
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	28 2f       	mov	r18, r24
    3fec:	22 0f       	add	r18, r18
    3fee:	48 2f       	mov	r20, r24
    3ff0:	50 e0       	ldi	r21, 0x00	; 0
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	01 90       	ld	r0, Z+
    3ff6:	00 20       	and	r0, r0
    3ff8:	e9 f7       	brne	.-6      	; 0x3ff4 <decode_hexadecimal_string_bytes+0x72>
    3ffa:	31 97       	sbiw	r30, 0x01	; 1
    3ffc:	ec 1b       	sub	r30, r28
    3ffe:	fd 0b       	sbc	r31, r29
    4000:	4e 17       	cp	r20, r30
    4002:	5f 07       	cpc	r21, r31
    4004:	10 f4       	brcc	.+4      	; 0x400a <decode_hexadecimal_string_bytes+0x88>
    4006:	86 13       	cpse	r24, r22
    4008:	ce cf       	rjmp	.-100    	; 0x3fa6 <decode_hexadecimal_string_bytes+0x24>
    400a:	df 91       	pop	r29
    400c:	cf 91       	pop	r28
    400e:	1f 91       	pop	r17
    4010:	0f 91       	pop	r16
    4012:	08 95       	ret

00004014 <reg_read_register>:
    4014:	fc 01       	movw	r30, r24
    4016:	80 81       	ld	r24, Z
    4018:	08 95       	ret

0000401a <reg_read_bit>:
    401a:	fc 01       	movw	r30, r24
    401c:	20 81       	ld	r18, Z
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	02 c0       	rjmp	.+4      	; 0x4028 <reg_read_bit+0xe>
    4024:	88 0f       	add	r24, r24
    4026:	99 1f       	adc	r25, r25
    4028:	6a 95       	dec	r22
    402a:	e2 f7       	brpl	.-8      	; 0x4024 <reg_read_bit+0xa>
    402c:	82 23       	and	r24, r18
    402e:	08 95       	ret

00004030 <reg_read_bits>:
    4030:	fc 01       	movw	r30, r24
    4032:	80 81       	ld	r24, Z
    4034:	86 23       	and	r24, r22
    4036:	08 95       	ret

00004038 <reg_set_register>:
    4038:	fc 01       	movw	r30, r24
    403a:	60 83       	st	Z, r22
    403c:	08 95       	ret

0000403e <reg_clear_register>:
    403e:	fc 01       	movw	r30, r24
    4040:	10 82       	st	Z, r1
    4042:	08 95       	ret

00004044 <reg_set_bit>:
    4044:	fc 01       	movw	r30, r24
    4046:	40 81       	ld	r20, Z
    4048:	21 e0       	ldi	r18, 0x01	; 1
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	02 c0       	rjmp	.+4      	; 0x4052 <reg_set_bit+0xe>
    404e:	22 0f       	add	r18, r18
    4050:	33 1f       	adc	r19, r19
    4052:	6a 95       	dec	r22
    4054:	e2 f7       	brpl	.-8      	; 0x404e <reg_set_bit+0xa>
    4056:	24 2b       	or	r18, r20
    4058:	20 83       	st	Z, r18
    405a:	08 95       	ret

0000405c <reg_set_bits>:
    405c:	fc 01       	movw	r30, r24
    405e:	20 81       	ld	r18, Z
    4060:	62 2b       	or	r22, r18
    4062:	60 83       	st	Z, r22
    4064:	08 95       	ret

00004066 <reg_toggle_bit>:
    4066:	fc 01       	movw	r30, r24
    4068:	40 81       	ld	r20, Z
    406a:	21 e0       	ldi	r18, 0x01	; 1
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	02 c0       	rjmp	.+4      	; 0x4074 <reg_toggle_bit+0xe>
    4070:	22 0f       	add	r18, r18
    4072:	33 1f       	adc	r19, r19
    4074:	6a 95       	dec	r22
    4076:	e2 f7       	brpl	.-8      	; 0x4070 <reg_toggle_bit+0xa>
    4078:	24 27       	eor	r18, r20
    407a:	20 83       	st	Z, r18
    407c:	08 95       	ret

0000407e <reg_toggle_bits>:
    407e:	fc 01       	movw	r30, r24
    4080:	20 81       	ld	r18, Z
    4082:	62 27       	eor	r22, r18
    4084:	60 83       	st	Z, r22
    4086:	08 95       	ret

00004088 <reg_clear_bit>:
    4088:	fc 01       	movw	r30, r24
    408a:	90 81       	ld	r25, Z
    408c:	21 e0       	ldi	r18, 0x01	; 1
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <reg_clear_bit+0xe>
    4092:	22 0f       	add	r18, r18
    4094:	33 1f       	adc	r19, r19
    4096:	6a 95       	dec	r22
    4098:	e2 f7       	brpl	.-8      	; 0x4092 <reg_clear_bit+0xa>
    409a:	20 95       	com	r18
    409c:	29 23       	and	r18, r25
    409e:	20 83       	st	Z, r18
    40a0:	08 95       	ret

000040a2 <reg_clear_bits>:
    40a2:	fc 01       	movw	r30, r24
    40a4:	90 81       	ld	r25, Z
    40a6:	60 95       	com	r22
    40a8:	69 23       	and	r22, r25
    40aa:	60 83       	st	Z, r22
    40ac:	08 95       	ret

000040ae <_serial_call_back>:
    40ae:	80 91 39 19 	lds	r24, 0x1939	; 0x801939 <crc_sum.1941>
    40b2:	86 0f       	add	r24, r22
    40b4:	80 93 39 19 	sts	0x1939, r24	; 0x801939 <crc_sum.1941>
    40b8:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <_mh_state>
    40bc:	91 30       	cpi	r25, 0x01	; 1
    40be:	79 f0       	breq	.+30     	; 0x40de <_serial_call_back+0x30>
    40c0:	28 f0       	brcs	.+10     	; 0x40cc <_serial_call_back+0x1e>
    40c2:	92 30       	cpi	r25, 0x02	; 2
    40c4:	a9 f0       	breq	.+42     	; 0x40f0 <_serial_call_back+0x42>
    40c6:	93 30       	cpi	r25, 0x03	; 3
    40c8:	19 f1       	breq	.+70     	; 0x4110 <_serial_call_back+0x62>
    40ca:	08 95       	ret
    40cc:	6f 3f       	cpi	r22, 0xFF	; 255
    40ce:	09 f0       	breq	.+2      	; 0x40d2 <_serial_call_back+0x24>
    40d0:	48 c0       	rjmp	.+144    	; 0x4162 <_serial_call_back+0xb4>
    40d2:	10 92 39 19 	sts	0x1939, r1	; 0x801939 <crc_sum.1941>
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <_mh_state>
    40dc:	08 95       	ret
    40de:	66 38       	cpi	r22, 0x86	; 134
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <_serial_call_back+0x36>
    40e2:	3f c0       	rjmp	.+126    	; 0x4162 <_serial_call_back+0xb4>
    40e4:	10 92 38 19 	sts	0x1938, r1	; 0x801938 <inDex.1939>
    40e8:	82 e0       	ldi	r24, 0x02	; 2
    40ea:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <_mh_state>
    40ee:	08 95       	ret
    40f0:	e0 91 38 19 	lds	r30, 0x1938	; 0x801938 <inDex.1939>
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	8e 0f       	add	r24, r30
    40f8:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <inDex.1939>
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	ea 5c       	subi	r30, 0xCA	; 202
    4100:	f6 4e       	sbci	r31, 0xE6	; 230
    4102:	60 83       	st	Z, r22
    4104:	82 30       	cpi	r24, 0x02	; 2
    4106:	69 f5       	brne	.+90     	; 0x4162 <_serial_call_back+0xb4>
    4108:	83 e0       	ldi	r24, 0x03	; 3
    410a:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <_mh_state>
    410e:	08 95       	ret
    4110:	90 91 38 19 	lds	r25, 0x1938	; 0x801938 <inDex.1939>
    4114:	21 e0       	ldi	r18, 0x01	; 1
    4116:	29 0f       	add	r18, r25
    4118:	20 93 38 19 	sts	0x1938, r18	; 0x801938 <inDex.1939>
    411c:	96 30       	cpi	r25, 0x06	; 6
    411e:	09 f5       	brne	.+66     	; 0x4162 <_serial_call_back+0xb4>
    4120:	81 11       	cpse	r24, r1
    4122:	0e c0       	rjmp	.+28     	; 0x4140 <_serial_call_back+0x92>
    4124:	e6 e3       	ldi	r30, 0x36	; 54
    4126:	f9 e1       	ldi	r31, 0x19	; 25
    4128:	80 81       	ld	r24, Z
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	98 2f       	mov	r25, r24
    412e:	88 27       	eor	r24, r24
    4130:	21 81       	ldd	r18, Z+1	; 0x01
    4132:	82 0f       	add	r24, r18
    4134:	91 1d       	adc	r25, r1
    4136:	90 93 3e 19 	sts	0x193E, r25	; 0x80193e <_ppm+0x1>
    413a:	80 93 3d 19 	sts	0x193D, r24	; 0x80193d <_ppm>
    413e:	04 c0       	rjmp	.+8      	; 0x4148 <_serial_call_back+0x9a>
    4140:	10 92 3e 19 	sts	0x193E, r1	; 0x80193e <_ppm+0x1>
    4144:	10 92 3d 19 	sts	0x193D, r1	; 0x80193d <_ppm>
    4148:	10 92 3c 19 	sts	0x193C, r1	; 0x80193c <_mh_state>
    414c:	e0 91 3a 19 	lds	r30, 0x193A	; 0x80193a <_app_call_back>
    4150:	f0 91 3b 19 	lds	r31, 0x193B	; 0x80193b <_app_call_back+0x1>
    4154:	30 97       	sbiw	r30, 0x00	; 0
    4156:	29 f0       	breq	.+10     	; 0x4162 <_serial_call_back+0xb4>
    4158:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <_ppm>
    415c:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <_ppm+0x1>
    4160:	19 95       	eicall
    4162:	08 95       	ret

00004164 <mh_z19_create>:
    4164:	8f 92       	push	r8
    4166:	9f 92       	push	r9
    4168:	af 92       	push	r10
    416a:	cf 92       	push	r12
    416c:	ef 92       	push	r14
    416e:	0f 93       	push	r16
    4170:	cf 93       	push	r28
    4172:	df 93       	push	r29
    4174:	eb 01       	movw	r28, r22
    4176:	0f 2e       	mov	r0, r31
    4178:	f7 e5       	ldi	r31, 0x57	; 87
    417a:	8f 2e       	mov	r8, r31
    417c:	f0 e2       	ldi	r31, 0x20	; 32
    417e:	9f 2e       	mov	r9, r31
    4180:	f0 2d       	mov	r31, r0
    4182:	68 94       	set
    4184:	aa 24       	eor	r10, r10
    4186:	a4 f8       	bld	r10, 4
    4188:	68 94       	set
    418a:	cc 24       	eor	r12, r12
    418c:	c4 f8       	bld	r12, 4
    418e:	e1 2c       	mov	r14, r1
    4190:	00 e0       	ldi	r16, 0x00	; 0
    4192:	23 e0       	ldi	r18, 0x03	; 3
    4194:	40 e8       	ldi	r20, 0x80	; 128
    4196:	55 e2       	ldi	r21, 0x25	; 37
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	40 d0       	rcall	.+128    	; 0x421e <serial_new_instance>
    419e:	90 93 40 19 	sts	0x1940, r25	; 0x801940 <_serial+0x1>
    41a2:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <_serial>
    41a6:	d0 93 3b 19 	sts	0x193B, r29	; 0x80193b <_app_call_back+0x1>
    41aa:	c0 93 3a 19 	sts	0x193A, r28	; 0x80193a <_app_call_back>
    41ae:	df 91       	pop	r29
    41b0:	cf 91       	pop	r28
    41b2:	0f 91       	pop	r16
    41b4:	ef 90       	pop	r14
    41b6:	cf 90       	pop	r12
    41b8:	af 90       	pop	r10
    41ba:	9f 90       	pop	r9
    41bc:	8f 90       	pop	r8
    41be:	08 95       	ret

000041c0 <mh_z19_take_meassuring>:
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	29 97       	sbiw	r28, 0x09	; 9
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	89 e0       	ldi	r24, 0x09	; 9
    41d6:	e1 e4       	ldi	r30, 0x41	; 65
    41d8:	f2 e0       	ldi	r31, 0x02	; 2
    41da:	9e 01       	movw	r18, r28
    41dc:	2f 5f       	subi	r18, 0xFF	; 255
    41de:	3f 4f       	sbci	r19, 0xFF	; 255
    41e0:	d9 01       	movw	r26, r18
    41e2:	01 90       	ld	r0, Z+
    41e4:	0d 92       	st	X+, r0
    41e6:	8a 95       	dec	r24
    41e8:	e1 f7       	brne	.-8      	; 0x41e2 <mh_z19_take_meassuring+0x22>
    41ea:	10 92 3e 19 	sts	0x193E, r1	; 0x80193e <_ppm+0x1>
    41ee:	10 92 3d 19 	sts	0x193D, r1	; 0x80193d <_ppm>
    41f2:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <_serial>
    41f6:	90 91 40 19 	lds	r25, 0x1940	; 0x801940 <_serial+0x1>
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	31 f0       	breq	.+12     	; 0x420a <mh_z19_take_meassuring+0x4a>
    41fe:	42 2f       	mov	r20, r18
    4200:	53 2f       	mov	r21, r19
    4202:	69 e0       	ldi	r22, 0x09	; 9
    4204:	c8 d0       	rcall	.+400    	; 0x4396 <serial_send_bytes>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	01 c0       	rjmp	.+2      	; 0x420c <mh_z19_take_meassuring+0x4c>
    420a:	82 e0       	ldi	r24, 0x02	; 2
    420c:	29 96       	adiw	r28, 0x09	; 9
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	df 91       	pop	r29
    421a:	cf 91       	pop	r28
    421c:	08 95       	ret

0000421e <serial_new_instance>:
    421e:	2f 92       	push	r2
    4220:	3f 92       	push	r3
    4222:	4f 92       	push	r4
    4224:	5f 92       	push	r5
    4226:	6f 92       	push	r6
    4228:	7f 92       	push	r7
    422a:	8f 92       	push	r8
    422c:	9f 92       	push	r9
    422e:	af 92       	push	r10
    4230:	cf 92       	push	r12
    4232:	ef 92       	push	r14
    4234:	ff 92       	push	r15
    4236:	0f 93       	push	r16
    4238:	1f 93       	push	r17
    423a:	cf 93       	push	r28
    423c:	df 93       	push	r29
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	f8 2e       	mov	r15, r24
    4244:	2a 01       	movw	r4, r20
    4246:	3b 01       	movw	r6, r22
    4248:	88 e0       	ldi	r24, 0x08	; 8
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	4a d7       	rcall	.+3732   	; 0x50e2 <malloc>
    424e:	8c 01       	movw	r16, r24
    4250:	8f 2d       	mov	r24, r15
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	88 0f       	add	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	fc 01       	movw	r30, r24
    425a:	ef 5b       	subi	r30, 0xBF	; 191
    425c:	f6 4e       	sbci	r31, 0xE6	; 230
    425e:	11 83       	std	Z+1, r17	; 0x01
    4260:	00 83       	st	Z, r16
    4262:	fc 01       	movw	r30, r24
    4264:	e6 5f       	subi	r30, 0xF6	; 246
    4266:	fd 4f       	sbci	r31, 0xFD	; 253
    4268:	80 81       	ld	r24, Z
    426a:	91 81       	ldd	r25, Z+1	; 0x01
    426c:	d8 01       	movw	r26, r16
    426e:	8d 93       	st	X+, r24
    4270:	9c 93       	st	X, r25
    4272:	6c 2d       	mov	r22, r12
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	84 e0       	ldi	r24, 0x04	; 4
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	19 d7       	rcall	.+3634   	; 0x50ae <calloc>
    427c:	1c 01       	movw	r2, r24
    427e:	61 e0       	ldi	r22, 0x01	; 1
    4280:	70 e0       	ldi	r23, 0x00	; 0
    4282:	86 e0       	ldi	r24, 0x06	; 6
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	13 d7       	rcall	.+3622   	; 0x50ae <calloc>
    4288:	7c 01       	movw	r14, r24
    428a:	4c 2d       	mov	r20, r12
    428c:	b1 01       	movw	r22, r2
    428e:	2c d5       	rcall	.+2648   	; 0x4ce8 <fifo_init>
    4290:	f8 01       	movw	r30, r16
    4292:	f5 82       	std	Z+5, r15	; 0x05
    4294:	e4 82       	std	Z+4, r14	; 0x04
    4296:	6a 2d       	mov	r22, r10
    4298:	70 e0       	ldi	r23, 0x00	; 0
    429a:	84 e0       	ldi	r24, 0x04	; 4
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	07 d7       	rcall	.+3598   	; 0x50ae <calloc>
    42a0:	1c 01       	movw	r2, r24
    42a2:	61 e0       	ldi	r22, 0x01	; 1
    42a4:	70 e0       	ldi	r23, 0x00	; 0
    42a6:	86 e0       	ldi	r24, 0x06	; 6
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	01 d7       	rcall	.+3586   	; 0x50ae <calloc>
    42ac:	7c 01       	movw	r14, r24
    42ae:	4a 2d       	mov	r20, r10
    42b0:	b1 01       	movw	r22, r2
    42b2:	1a d5       	rcall	.+2612   	; 0x4ce8 <fifo_init>
    42b4:	d8 01       	movw	r26, r16
    42b6:	13 96       	adiw	r26, 0x03	; 3
    42b8:	fc 92       	st	X, r15
    42ba:	ee 92       	st	-X, r14
    42bc:	12 97       	sbiw	r26, 0x02	; 2
    42be:	17 96       	adiw	r26, 0x07	; 7
    42c0:	9c 92       	st	X, r9
    42c2:	8e 92       	st	-X, r8
    42c4:	16 97       	sbiw	r26, 0x06	; 6
    42c6:	ff b6       	in	r15, 0x3f	; 63
    42c8:	f8 94       	cli
    42ca:	ed 91       	ld	r30, X+
    42cc:	fc 91       	ld	r31, X
    42ce:	11 97       	sbiw	r26, 0x01	; 1
    42d0:	36 97       	sbiw	r30, 0x06	; 6
    42d2:	80 81       	ld	r24, Z
    42d4:	82 60       	ori	r24, 0x02	; 2
    42d6:	80 83       	st	Z, r24
    42d8:	8d 90       	ld	r8, X+
    42da:	9c 90       	ld	r9, X
    42dc:	c3 01       	movw	r24, r6
    42de:	b2 01       	movw	r22, r4
    42e0:	f1 d5       	rcall	.+3042   	; 0x4ec4 <__floatunsisf>
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e0       	ldi	r20, 0x00	; 0
    42e8:	51 e4       	ldi	r21, 0x41	; 65
    42ea:	51 d6       	rcall	.+3234   	; 0x4f8e <__mulsf3>
    42ec:	9b 01       	movw	r18, r22
    42ee:	ac 01       	movw	r20, r24
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	74 e2       	ldi	r23, 0x24	; 36
    42f4:	84 e7       	ldi	r24, 0x74	; 116
    42f6:	9b e4       	ldi	r25, 0x4B	; 75
    42f8:	7a d5       	rcall	.+2804   	; 0x4dee <__divsf3>
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	40 e8       	ldi	r20, 0x80	; 128
    4300:	5f e3       	ldi	r21, 0x3F	; 63
    4302:	0e d5       	rcall	.+2588   	; 0x4d20 <__subsf3>
    4304:	0e 94 c1 18 	call	0x3182	; 0x3182 <__fixunssfsi>
    4308:	f4 01       	movw	r30, r8
    430a:	32 97       	sbiw	r30, 0x02	; 2
    430c:	60 83       	st	Z, r22
    430e:	d8 01       	movw	r26, r16
    4310:	ed 91       	ld	r30, X+
    4312:	fc 91       	ld	r31, X
    4314:	11 97       	sbiw	r26, 0x01	; 1
    4316:	35 97       	sbiw	r30, 0x05	; 5
    4318:	88 e9       	ldi	r24, 0x98	; 152
    431a:	80 83       	st	Z, r24
    431c:	ed 91       	ld	r30, X+
    431e:	fc 91       	ld	r31, X
    4320:	34 97       	sbiw	r30, 0x04	; 4
    4322:	86 e0       	ldi	r24, 0x06	; 6
    4324:	80 83       	st	Z, r24
    4326:	ff be       	out	0x3f, r15	; 63
    4328:	c8 01       	movw	r24, r16
    432a:	df 91       	pop	r29
    432c:	cf 91       	pop	r28
    432e:	1f 91       	pop	r17
    4330:	0f 91       	pop	r16
    4332:	ff 90       	pop	r15
    4334:	ef 90       	pop	r14
    4336:	cf 90       	pop	r12
    4338:	af 90       	pop	r10
    433a:	9f 90       	pop	r9
    433c:	8f 90       	pop	r8
    433e:	7f 90       	pop	r7
    4340:	6f 90       	pop	r6
    4342:	5f 90       	pop	r5
    4344:	4f 90       	pop	r4
    4346:	3f 90       	pop	r3
    4348:	2f 90       	pop	r2
    434a:	08 95       	ret

0000434c <serial_send_byte>:
    434c:	cf 93       	push	r28
    434e:	df 93       	push	r29
    4350:	ec 01       	movw	r28, r24
    4352:	ea 81       	ldd	r30, Y+2	; 0x02
    4354:	fb 81       	ldd	r31, Y+3	; 0x03
    4356:	93 81       	ldd	r25, Z+3	; 0x03
    4358:	82 81       	ldd	r24, Z+2	; 0x02
    435a:	25 81       	ldd	r18, Z+5	; 0x05
    435c:	98 1b       	sub	r25, r24
    435e:	92 23       	and	r25, r18
    4360:	84 81       	ldd	r24, Z+4	; 0x04
    4362:	98 17       	cp	r25, r24
    4364:	a1 f0       	breq	.+40     	; 0x438e <serial_send_byte+0x42>
    4366:	93 81       	ldd	r25, Z+3	; 0x03
    4368:	26 95       	lsr	r18
    436a:	29 23       	and	r18, r25
    436c:	a0 81       	ld	r26, Z
    436e:	b1 81       	ldd	r27, Z+1	; 0x01
    4370:	a2 0f       	add	r26, r18
    4372:	b1 1d       	adc	r27, r1
    4374:	6c 93       	st	X, r22
    4376:	9f 5f       	subi	r25, 0xFF	; 255
    4378:	25 81       	ldd	r18, Z+5	; 0x05
    437a:	92 23       	and	r25, r18
    437c:	93 83       	std	Z+3, r25	; 0x03
    437e:	e8 81       	ld	r30, Y
    4380:	f9 81       	ldd	r31, Y+1	; 0x01
    4382:	35 97       	sbiw	r30, 0x05	; 5
    4384:	80 81       	ld	r24, Z
    4386:	80 62       	ori	r24, 0x20	; 32
    4388:	80 83       	st	Z, r24
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	01 c0       	rjmp	.+2      	; 0x4390 <serial_send_byte+0x44>
    438e:	82 e0       	ldi	r24, 0x02	; 2
    4390:	df 91       	pop	r29
    4392:	cf 91       	pop	r28
    4394:	08 95       	ret

00004396 <serial_send_bytes>:
    4396:	ef 92       	push	r14
    4398:	ff 92       	push	r15
    439a:	0f 93       	push	r16
    439c:	1f 93       	push	r17
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	7c 01       	movw	r14, r24
    43a4:	dc 01       	movw	r26, r24
    43a6:	12 96       	adiw	r26, 0x02	; 2
    43a8:	ed 91       	ld	r30, X+
    43aa:	fc 91       	ld	r31, X
    43ac:	13 97       	sbiw	r26, 0x03	; 3
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	82 81       	ldd	r24, Z+2	; 0x02
    43b2:	98 1b       	sub	r25, r24
    43b4:	85 81       	ldd	r24, Z+5	; 0x05
    43b6:	98 23       	and	r25, r24
    43b8:	84 81       	ldd	r24, Z+4	; 0x04
    43ba:	89 1b       	sub	r24, r25
    43bc:	86 17       	cp	r24, r22
    43be:	98 f1       	brcs	.+102    	; 0x4426 <serial_send_bytes+0x90>
    43c0:	66 23       	and	r22, r22
    43c2:	41 f1       	breq	.+80     	; 0x4414 <serial_send_bytes+0x7e>
    43c4:	84 2f       	mov	r24, r20
    43c6:	95 2f       	mov	r25, r21
    43c8:	dc 01       	movw	r26, r24
    43ca:	61 50       	subi	r22, 0x01	; 1
    43cc:	46 2f       	mov	r20, r22
    43ce:	50 e0       	ldi	r21, 0x00	; 0
    43d0:	4f 5f       	subi	r20, 0xFF	; 255
    43d2:	5f 4f       	sbci	r21, 0xFF	; 255
    43d4:	48 0f       	add	r20, r24
    43d6:	59 1f       	adc	r21, r25
    43d8:	e7 01       	movw	r28, r14
    43da:	ea 81       	ldd	r30, Y+2	; 0x02
    43dc:	fb 81       	ldd	r31, Y+3	; 0x03
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	82 81       	ldd	r24, Z+2	; 0x02
    43e2:	25 81       	ldd	r18, Z+5	; 0x05
    43e4:	98 1b       	sub	r25, r24
    43e6:	92 23       	and	r25, r18
    43e8:	84 81       	ldd	r24, Z+4	; 0x04
    43ea:	98 17       	cp	r25, r24
    43ec:	79 f0       	breq	.+30     	; 0x440c <serial_send_bytes+0x76>
    43ee:	8c 91       	ld	r24, X
    43f0:	93 81       	ldd	r25, Z+3	; 0x03
    43f2:	26 95       	lsr	r18
    43f4:	29 23       	and	r18, r25
    43f6:	60 81       	ld	r22, Z
    43f8:	71 81       	ldd	r23, Z+1	; 0x01
    43fa:	8b 01       	movw	r16, r22
    43fc:	02 0f       	add	r16, r18
    43fe:	11 1d       	adc	r17, r1
    4400:	e8 01       	movw	r28, r16
    4402:	88 83       	st	Y, r24
    4404:	9f 5f       	subi	r25, 0xFF	; 255
    4406:	85 81       	ldd	r24, Z+5	; 0x05
    4408:	98 23       	and	r25, r24
    440a:	93 83       	std	Z+3, r25	; 0x03
    440c:	11 96       	adiw	r26, 0x01	; 1
    440e:	a4 17       	cp	r26, r20
    4410:	b5 07       	cpc	r27, r21
    4412:	11 f7       	brne	.-60     	; 0x43d8 <serial_send_bytes+0x42>
    4414:	d7 01       	movw	r26, r14
    4416:	ed 91       	ld	r30, X+
    4418:	fc 91       	ld	r31, X
    441a:	35 97       	sbiw	r30, 0x05	; 5
    441c:	80 81       	ld	r24, Z
    441e:	80 62       	ori	r24, 0x20	; 32
    4420:	80 83       	st	Z, r24
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	01 c0       	rjmp	.+2      	; 0x4428 <serial_send_bytes+0x92>
    4426:	82 e0       	ldi	r24, 0x02	; 2
    4428:	df 91       	pop	r29
    442a:	cf 91       	pop	r28
    442c:	1f 91       	pop	r17
    442e:	0f 91       	pop	r16
    4430:	ff 90       	pop	r15
    4432:	ef 90       	pop	r14
    4434:	08 95       	ret

00004436 <serial_get_byte>:
    4436:	dc 01       	movw	r26, r24
    4438:	14 96       	adiw	r26, 0x04	; 4
    443a:	ed 91       	ld	r30, X+
    443c:	fc 91       	ld	r31, X
    443e:	15 97       	sbiw	r26, 0x05	; 5
    4440:	93 81       	ldd	r25, Z+3	; 0x03
    4442:	82 81       	ldd	r24, Z+2	; 0x02
    4444:	98 17       	cp	r25, r24
    4446:	89 f0       	breq	.+34     	; 0x446a <serial_get_byte+0x34>
    4448:	92 81       	ldd	r25, Z+2	; 0x02
    444a:	85 81       	ldd	r24, Z+5	; 0x05
    444c:	86 95       	lsr	r24
    444e:	89 23       	and	r24, r25
    4450:	a0 81       	ld	r26, Z
    4452:	b1 81       	ldd	r27, Z+1	; 0x01
    4454:	a8 0f       	add	r26, r24
    4456:	b1 1d       	adc	r27, r1
    4458:	8c 91       	ld	r24, X
    445a:	db 01       	movw	r26, r22
    445c:	8c 93       	st	X, r24
    445e:	9f 5f       	subi	r25, 0xFF	; 255
    4460:	85 81       	ldd	r24, Z+5	; 0x05
    4462:	98 23       	and	r25, r24
    4464:	92 83       	std	Z+2, r25	; 0x02
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	08 95       	ret
    446a:	83 e0       	ldi	r24, 0x03	; 3
    446c:	08 95       	ret

0000446e <__vector_25>:
    446e:	1f 92       	push	r1
    4470:	0f 92       	push	r0
    4472:	0f b6       	in	r0, 0x3f	; 63
    4474:	0f 92       	push	r0
    4476:	11 24       	eor	r1, r1
    4478:	0b b6       	in	r0, 0x3b	; 59
    447a:	0f 92       	push	r0
    447c:	2f 93       	push	r18
    447e:	3f 93       	push	r19
    4480:	4f 93       	push	r20
    4482:	5f 93       	push	r21
    4484:	6f 93       	push	r22
    4486:	7f 93       	push	r23
    4488:	8f 93       	push	r24
    448a:	9f 93       	push	r25
    448c:	af 93       	push	r26
    448e:	bf 93       	push	r27
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	ef 93       	push	r30
    4496:	ff 93       	push	r31
    4498:	a0 91 41 19 	lds	r26, 0x1941	; 0x801941 <_ser_handle>
    449c:	b0 91 42 19 	lds	r27, 0x1942	; 0x801942 <_ser_handle+0x1>
    44a0:	10 97       	sbiw	r26, 0x00	; 0
    44a2:	11 f1       	breq	.+68     	; 0x44e8 <__vector_25+0x7a>
    44a4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    44a8:	14 96       	adiw	r26, 0x04	; 4
    44aa:	ed 91       	ld	r30, X+
    44ac:	fc 91       	ld	r31, X
    44ae:	15 97       	sbiw	r26, 0x05	; 5
    44b0:	93 81       	ldd	r25, Z+3	; 0x03
    44b2:	82 81       	ldd	r24, Z+2	; 0x02
    44b4:	25 81       	ldd	r18, Z+5	; 0x05
    44b6:	98 1b       	sub	r25, r24
    44b8:	92 23       	and	r25, r18
    44ba:	84 81       	ldd	r24, Z+4	; 0x04
    44bc:	98 17       	cp	r25, r24
    44be:	61 f0       	breq	.+24     	; 0x44d8 <__vector_25+0x6a>
    44c0:	83 81       	ldd	r24, Z+3	; 0x03
    44c2:	26 95       	lsr	r18
    44c4:	28 23       	and	r18, r24
    44c6:	c0 81       	ld	r28, Z
    44c8:	d1 81       	ldd	r29, Z+1	; 0x01
    44ca:	c2 0f       	add	r28, r18
    44cc:	d1 1d       	adc	r29, r1
    44ce:	68 83       	st	Y, r22
    44d0:	8f 5f       	subi	r24, 0xFF	; 255
    44d2:	95 81       	ldd	r25, Z+5	; 0x05
    44d4:	89 23       	and	r24, r25
    44d6:	83 83       	std	Z+3, r24	; 0x03
    44d8:	16 96       	adiw	r26, 0x06	; 6
    44da:	ed 91       	ld	r30, X+
    44dc:	fc 91       	ld	r31, X
    44de:	17 97       	sbiw	r26, 0x07	; 7
    44e0:	30 97       	sbiw	r30, 0x00	; 0
    44e2:	11 f0       	breq	.+4      	; 0x44e8 <__vector_25+0x7a>
    44e4:	cd 01       	movw	r24, r26
    44e6:	19 95       	eicall
    44e8:	ff 91       	pop	r31
    44ea:	ef 91       	pop	r30
    44ec:	df 91       	pop	r29
    44ee:	cf 91       	pop	r28
    44f0:	bf 91       	pop	r27
    44f2:	af 91       	pop	r26
    44f4:	9f 91       	pop	r25
    44f6:	8f 91       	pop	r24
    44f8:	7f 91       	pop	r23
    44fa:	6f 91       	pop	r22
    44fc:	5f 91       	pop	r21
    44fe:	4f 91       	pop	r20
    4500:	3f 91       	pop	r19
    4502:	2f 91       	pop	r18
    4504:	0f 90       	pop	r0
    4506:	0b be       	out	0x3b, r0	; 59
    4508:	0f 90       	pop	r0
    450a:	0f be       	out	0x3f, r0	; 63
    450c:	0f 90       	pop	r0
    450e:	1f 90       	pop	r1
    4510:	18 95       	reti

00004512 <__vector_26>:
    4512:	1f 92       	push	r1
    4514:	0f 92       	push	r0
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	0f 92       	push	r0
    451a:	11 24       	eor	r1, r1
    451c:	0b b6       	in	r0, 0x3b	; 59
    451e:	0f 92       	push	r0
    4520:	2f 93       	push	r18
    4522:	8f 93       	push	r24
    4524:	9f 93       	push	r25
    4526:	af 93       	push	r26
    4528:	bf 93       	push	r27
    452a:	ef 93       	push	r30
    452c:	ff 93       	push	r31
    452e:	e0 91 41 19 	lds	r30, 0x1941	; 0x801941 <_ser_handle>
    4532:	f0 91 42 19 	lds	r31, 0x1942	; 0x801942 <_ser_handle+0x1>
    4536:	30 97       	sbiw	r30, 0x00	; 0
    4538:	b9 f0       	breq	.+46     	; 0x4568 <__vector_26+0x56>
    453a:	02 80       	ldd	r0, Z+2	; 0x02
    453c:	f3 81       	ldd	r31, Z+3	; 0x03
    453e:	e0 2d       	mov	r30, r0
    4540:	93 81       	ldd	r25, Z+3	; 0x03
    4542:	82 81       	ldd	r24, Z+2	; 0x02
    4544:	98 17       	cp	r25, r24
    4546:	b1 f0       	breq	.+44     	; 0x4574 <__vector_26+0x62>
    4548:	92 81       	ldd	r25, Z+2	; 0x02
    454a:	85 81       	ldd	r24, Z+5	; 0x05
    454c:	28 2f       	mov	r18, r24
    454e:	26 95       	lsr	r18
    4550:	29 23       	and	r18, r25
    4552:	a0 81       	ld	r26, Z
    4554:	b1 81       	ldd	r27, Z+1	; 0x01
    4556:	a2 0f       	add	r26, r18
    4558:	b1 1d       	adc	r27, r1
    455a:	2c 91       	ld	r18, X
    455c:	9f 5f       	subi	r25, 0xFF	; 255
    455e:	89 23       	and	r24, r25
    4560:	82 83       	std	Z+2, r24	; 0x02
    4562:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4566:	0b c0       	rjmp	.+22     	; 0x457e <__vector_26+0x6c>
    4568:	e1 ec       	ldi	r30, 0xC1	; 193
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	80 81       	ld	r24, Z
    456e:	8f 7d       	andi	r24, 0xDF	; 223
    4570:	80 83       	st	Z, r24
    4572:	05 c0       	rjmp	.+10     	; 0x457e <__vector_26+0x6c>
    4574:	e1 ec       	ldi	r30, 0xC1	; 193
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	8f 7d       	andi	r24, 0xDF	; 223
    457c:	80 83       	st	Z, r24
    457e:	ff 91       	pop	r31
    4580:	ef 91       	pop	r30
    4582:	bf 91       	pop	r27
    4584:	af 91       	pop	r26
    4586:	9f 91       	pop	r25
    4588:	8f 91       	pop	r24
    458a:	2f 91       	pop	r18
    458c:	0f 90       	pop	r0
    458e:	0b be       	out	0x3b, r0	; 59
    4590:	0f 90       	pop	r0
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	0f 90       	pop	r0
    4596:	1f 90       	pop	r1
    4598:	18 95       	reti

0000459a <__vector_36>:
    459a:	1f 92       	push	r1
    459c:	0f 92       	push	r0
    459e:	0f b6       	in	r0, 0x3f	; 63
    45a0:	0f 92       	push	r0
    45a2:	11 24       	eor	r1, r1
    45a4:	0b b6       	in	r0, 0x3b	; 59
    45a6:	0f 92       	push	r0
    45a8:	2f 93       	push	r18
    45aa:	3f 93       	push	r19
    45ac:	4f 93       	push	r20
    45ae:	5f 93       	push	r21
    45b0:	6f 93       	push	r22
    45b2:	7f 93       	push	r23
    45b4:	8f 93       	push	r24
    45b6:	9f 93       	push	r25
    45b8:	af 93       	push	r26
    45ba:	bf 93       	push	r27
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    45c0:	ef 93       	push	r30
    45c2:	ff 93       	push	r31
    45c4:	a0 91 43 19 	lds	r26, 0x1943	; 0x801943 <_ser_handle+0x2>
    45c8:	b0 91 44 19 	lds	r27, 0x1944	; 0x801944 <_ser_handle+0x3>
    45cc:	10 97       	sbiw	r26, 0x00	; 0
    45ce:	11 f1       	breq	.+68     	; 0x4614 <__vector_36+0x7a>
    45d0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    45d4:	14 96       	adiw	r26, 0x04	; 4
    45d6:	ed 91       	ld	r30, X+
    45d8:	fc 91       	ld	r31, X
    45da:	15 97       	sbiw	r26, 0x05	; 5
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	82 81       	ldd	r24, Z+2	; 0x02
    45e0:	25 81       	ldd	r18, Z+5	; 0x05
    45e2:	98 1b       	sub	r25, r24
    45e4:	92 23       	and	r25, r18
    45e6:	84 81       	ldd	r24, Z+4	; 0x04
    45e8:	98 17       	cp	r25, r24
    45ea:	61 f0       	breq	.+24     	; 0x4604 <__vector_36+0x6a>
    45ec:	83 81       	ldd	r24, Z+3	; 0x03
    45ee:	26 95       	lsr	r18
    45f0:	28 23       	and	r18, r24
    45f2:	c0 81       	ld	r28, Z
    45f4:	d1 81       	ldd	r29, Z+1	; 0x01
    45f6:	c2 0f       	add	r28, r18
    45f8:	d1 1d       	adc	r29, r1
    45fa:	68 83       	st	Y, r22
    45fc:	8f 5f       	subi	r24, 0xFF	; 255
    45fe:	95 81       	ldd	r25, Z+5	; 0x05
    4600:	89 23       	and	r24, r25
    4602:	83 83       	std	Z+3, r24	; 0x03
    4604:	16 96       	adiw	r26, 0x06	; 6
    4606:	ed 91       	ld	r30, X+
    4608:	fc 91       	ld	r31, X
    460a:	17 97       	sbiw	r26, 0x07	; 7
    460c:	30 97       	sbiw	r30, 0x00	; 0
    460e:	11 f0       	breq	.+4      	; 0x4614 <__vector_36+0x7a>
    4610:	cd 01       	movw	r24, r26
    4612:	19 95       	eicall
    4614:	ff 91       	pop	r31
    4616:	ef 91       	pop	r30
    4618:	df 91       	pop	r29
    461a:	cf 91       	pop	r28
    461c:	bf 91       	pop	r27
    461e:	af 91       	pop	r26
    4620:	9f 91       	pop	r25
    4622:	8f 91       	pop	r24
    4624:	7f 91       	pop	r23
    4626:	6f 91       	pop	r22
    4628:	5f 91       	pop	r21
    462a:	4f 91       	pop	r20
    462c:	3f 91       	pop	r19
    462e:	2f 91       	pop	r18
    4630:	0f 90       	pop	r0
    4632:	0b be       	out	0x3b, r0	; 59
    4634:	0f 90       	pop	r0
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	0f 90       	pop	r0
    463a:	1f 90       	pop	r1
    463c:	18 95       	reti

0000463e <__vector_37>:
    463e:	1f 92       	push	r1
    4640:	0f 92       	push	r0
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	0f 92       	push	r0
    4646:	11 24       	eor	r1, r1
    4648:	0b b6       	in	r0, 0x3b	; 59
    464a:	0f 92       	push	r0
    464c:	2f 93       	push	r18
    464e:	8f 93       	push	r24
    4650:	9f 93       	push	r25
    4652:	af 93       	push	r26
    4654:	bf 93       	push	r27
    4656:	ef 93       	push	r30
    4658:	ff 93       	push	r31
    465a:	e0 91 43 19 	lds	r30, 0x1943	; 0x801943 <_ser_handle+0x2>
    465e:	f0 91 44 19 	lds	r31, 0x1944	; 0x801944 <_ser_handle+0x3>
    4662:	30 97       	sbiw	r30, 0x00	; 0
    4664:	b9 f0       	breq	.+46     	; 0x4694 <__vector_37+0x56>
    4666:	02 80       	ldd	r0, Z+2	; 0x02
    4668:	f3 81       	ldd	r31, Z+3	; 0x03
    466a:	e0 2d       	mov	r30, r0
    466c:	93 81       	ldd	r25, Z+3	; 0x03
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	98 17       	cp	r25, r24
    4672:	b1 f0       	breq	.+44     	; 0x46a0 <__vector_37+0x62>
    4674:	92 81       	ldd	r25, Z+2	; 0x02
    4676:	85 81       	ldd	r24, Z+5	; 0x05
    4678:	28 2f       	mov	r18, r24
    467a:	26 95       	lsr	r18
    467c:	29 23       	and	r18, r25
    467e:	a0 81       	ld	r26, Z
    4680:	b1 81       	ldd	r27, Z+1	; 0x01
    4682:	a2 0f       	add	r26, r18
    4684:	b1 1d       	adc	r27, r1
    4686:	2c 91       	ld	r18, X
    4688:	9f 5f       	subi	r25, 0xFF	; 255
    468a:	89 23       	and	r24, r25
    468c:	82 83       	std	Z+2, r24	; 0x02
    468e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4692:	0b c0       	rjmp	.+22     	; 0x46aa <__vector_37+0x6c>
    4694:	e9 ec       	ldi	r30, 0xC9	; 201
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	80 81       	ld	r24, Z
    469a:	8f 7d       	andi	r24, 0xDF	; 223
    469c:	80 83       	st	Z, r24
    469e:	05 c0       	rjmp	.+10     	; 0x46aa <__vector_37+0x6c>
    46a0:	e9 ec       	ldi	r30, 0xC9	; 201
    46a2:	f0 e0       	ldi	r31, 0x00	; 0
    46a4:	80 81       	ld	r24, Z
    46a6:	8f 7d       	andi	r24, 0xDF	; 223
    46a8:	80 83       	st	Z, r24
    46aa:	ff 91       	pop	r31
    46ac:	ef 91       	pop	r30
    46ae:	bf 91       	pop	r27
    46b0:	af 91       	pop	r26
    46b2:	9f 91       	pop	r25
    46b4:	8f 91       	pop	r24
    46b6:	2f 91       	pop	r18
    46b8:	0f 90       	pop	r0
    46ba:	0b be       	out	0x3b, r0	; 59
    46bc:	0f 90       	pop	r0
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	0f 90       	pop	r0
    46c2:	1f 90       	pop	r1
    46c4:	18 95       	reti

000046c6 <__vector_51>:
    46c6:	1f 92       	push	r1
    46c8:	0f 92       	push	r0
    46ca:	0f b6       	in	r0, 0x3f	; 63
    46cc:	0f 92       	push	r0
    46ce:	11 24       	eor	r1, r1
    46d0:	0b b6       	in	r0, 0x3b	; 59
    46d2:	0f 92       	push	r0
    46d4:	2f 93       	push	r18
    46d6:	3f 93       	push	r19
    46d8:	4f 93       	push	r20
    46da:	5f 93       	push	r21
    46dc:	6f 93       	push	r22
    46de:	7f 93       	push	r23
    46e0:	8f 93       	push	r24
    46e2:	9f 93       	push	r25
    46e4:	af 93       	push	r26
    46e6:	bf 93       	push	r27
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	ef 93       	push	r30
    46ee:	ff 93       	push	r31
    46f0:	a0 91 45 19 	lds	r26, 0x1945	; 0x801945 <_ser_handle+0x4>
    46f4:	b0 91 46 19 	lds	r27, 0x1946	; 0x801946 <_ser_handle+0x5>
    46f8:	10 97       	sbiw	r26, 0x00	; 0
    46fa:	11 f1       	breq	.+68     	; 0x4740 <__vector_51+0x7a>
    46fc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4700:	14 96       	adiw	r26, 0x04	; 4
    4702:	ed 91       	ld	r30, X+
    4704:	fc 91       	ld	r31, X
    4706:	15 97       	sbiw	r26, 0x05	; 5
    4708:	93 81       	ldd	r25, Z+3	; 0x03
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	25 81       	ldd	r18, Z+5	; 0x05
    470e:	98 1b       	sub	r25, r24
    4710:	92 23       	and	r25, r18
    4712:	84 81       	ldd	r24, Z+4	; 0x04
    4714:	98 17       	cp	r25, r24
    4716:	61 f0       	breq	.+24     	; 0x4730 <__vector_51+0x6a>
    4718:	83 81       	ldd	r24, Z+3	; 0x03
    471a:	26 95       	lsr	r18
    471c:	28 23       	and	r18, r24
    471e:	c0 81       	ld	r28, Z
    4720:	d1 81       	ldd	r29, Z+1	; 0x01
    4722:	c2 0f       	add	r28, r18
    4724:	d1 1d       	adc	r29, r1
    4726:	68 83       	st	Y, r22
    4728:	8f 5f       	subi	r24, 0xFF	; 255
    472a:	95 81       	ldd	r25, Z+5	; 0x05
    472c:	89 23       	and	r24, r25
    472e:	83 83       	std	Z+3, r24	; 0x03
    4730:	16 96       	adiw	r26, 0x06	; 6
    4732:	ed 91       	ld	r30, X+
    4734:	fc 91       	ld	r31, X
    4736:	17 97       	sbiw	r26, 0x07	; 7
    4738:	30 97       	sbiw	r30, 0x00	; 0
    473a:	11 f0       	breq	.+4      	; 0x4740 <__vector_51+0x7a>
    473c:	cd 01       	movw	r24, r26
    473e:	19 95       	eicall
    4740:	ff 91       	pop	r31
    4742:	ef 91       	pop	r30
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	bf 91       	pop	r27
    474a:	af 91       	pop	r26
    474c:	9f 91       	pop	r25
    474e:	8f 91       	pop	r24
    4750:	7f 91       	pop	r23
    4752:	6f 91       	pop	r22
    4754:	5f 91       	pop	r21
    4756:	4f 91       	pop	r20
    4758:	3f 91       	pop	r19
    475a:	2f 91       	pop	r18
    475c:	0f 90       	pop	r0
    475e:	0b be       	out	0x3b, r0	; 59
    4760:	0f 90       	pop	r0
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	0f 90       	pop	r0
    4766:	1f 90       	pop	r1
    4768:	18 95       	reti

0000476a <__vector_52>:
    476a:	1f 92       	push	r1
    476c:	0f 92       	push	r0
    476e:	0f b6       	in	r0, 0x3f	; 63
    4770:	0f 92       	push	r0
    4772:	11 24       	eor	r1, r1
    4774:	0b b6       	in	r0, 0x3b	; 59
    4776:	0f 92       	push	r0
    4778:	2f 93       	push	r18
    477a:	8f 93       	push	r24
    477c:	9f 93       	push	r25
    477e:	af 93       	push	r26
    4780:	bf 93       	push	r27
    4782:	ef 93       	push	r30
    4784:	ff 93       	push	r31
    4786:	e0 91 45 19 	lds	r30, 0x1945	; 0x801945 <_ser_handle+0x4>
    478a:	f0 91 46 19 	lds	r31, 0x1946	; 0x801946 <_ser_handle+0x5>
    478e:	30 97       	sbiw	r30, 0x00	; 0
    4790:	b9 f0       	breq	.+46     	; 0x47c0 <__vector_52+0x56>
    4792:	02 80       	ldd	r0, Z+2	; 0x02
    4794:	f3 81       	ldd	r31, Z+3	; 0x03
    4796:	e0 2d       	mov	r30, r0
    4798:	93 81       	ldd	r25, Z+3	; 0x03
    479a:	82 81       	ldd	r24, Z+2	; 0x02
    479c:	98 17       	cp	r25, r24
    479e:	b1 f0       	breq	.+44     	; 0x47cc <__vector_52+0x62>
    47a0:	92 81       	ldd	r25, Z+2	; 0x02
    47a2:	85 81       	ldd	r24, Z+5	; 0x05
    47a4:	28 2f       	mov	r18, r24
    47a6:	26 95       	lsr	r18
    47a8:	29 23       	and	r18, r25
    47aa:	a0 81       	ld	r26, Z
    47ac:	b1 81       	ldd	r27, Z+1	; 0x01
    47ae:	a2 0f       	add	r26, r18
    47b0:	b1 1d       	adc	r27, r1
    47b2:	2c 91       	ld	r18, X
    47b4:	9f 5f       	subi	r25, 0xFF	; 255
    47b6:	89 23       	and	r24, r25
    47b8:	82 83       	std	Z+2, r24	; 0x02
    47ba:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    47be:	0b c0       	rjmp	.+22     	; 0x47d6 <__vector_52+0x6c>
    47c0:	e1 ed       	ldi	r30, 0xD1	; 209
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	80 81       	ld	r24, Z
    47c6:	8f 7d       	andi	r24, 0xDF	; 223
    47c8:	80 83       	st	Z, r24
    47ca:	05 c0       	rjmp	.+10     	; 0x47d6 <__vector_52+0x6c>
    47cc:	e1 ed       	ldi	r30, 0xD1	; 209
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	80 81       	ld	r24, Z
    47d2:	8f 7d       	andi	r24, 0xDF	; 223
    47d4:	80 83       	st	Z, r24
    47d6:	ff 91       	pop	r31
    47d8:	ef 91       	pop	r30
    47da:	bf 91       	pop	r27
    47dc:	af 91       	pop	r26
    47de:	9f 91       	pop	r25
    47e0:	8f 91       	pop	r24
    47e2:	2f 91       	pop	r18
    47e4:	0f 90       	pop	r0
    47e6:	0b be       	out	0x3b, r0	; 59
    47e8:	0f 90       	pop	r0
    47ea:	0f be       	out	0x3f, r0	; 63
    47ec:	0f 90       	pop	r0
    47ee:	1f 90       	pop	r1
    47f0:	18 95       	reti

000047f2 <__vector_54>:
    47f2:	1f 92       	push	r1
    47f4:	0f 92       	push	r0
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	0f 92       	push	r0
    47fa:	11 24       	eor	r1, r1
    47fc:	0b b6       	in	r0, 0x3b	; 59
    47fe:	0f 92       	push	r0
    4800:	2f 93       	push	r18
    4802:	3f 93       	push	r19
    4804:	4f 93       	push	r20
    4806:	5f 93       	push	r21
    4808:	6f 93       	push	r22
    480a:	7f 93       	push	r23
    480c:	8f 93       	push	r24
    480e:	9f 93       	push	r25
    4810:	af 93       	push	r26
    4812:	bf 93       	push	r27
    4814:	cf 93       	push	r28
    4816:	df 93       	push	r29
    4818:	ef 93       	push	r30
    481a:	ff 93       	push	r31
    481c:	a0 91 47 19 	lds	r26, 0x1947	; 0x801947 <_ser_handle+0x6>
    4820:	b0 91 48 19 	lds	r27, 0x1948	; 0x801948 <_ser_handle+0x7>
    4824:	10 97       	sbiw	r26, 0x00	; 0
    4826:	11 f1       	breq	.+68     	; 0x486c <__vector_54+0x7a>
    4828:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    482c:	14 96       	adiw	r26, 0x04	; 4
    482e:	ed 91       	ld	r30, X+
    4830:	fc 91       	ld	r31, X
    4832:	15 97       	sbiw	r26, 0x05	; 5
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	82 81       	ldd	r24, Z+2	; 0x02
    4838:	25 81       	ldd	r18, Z+5	; 0x05
    483a:	98 1b       	sub	r25, r24
    483c:	92 23       	and	r25, r18
    483e:	84 81       	ldd	r24, Z+4	; 0x04
    4840:	98 17       	cp	r25, r24
    4842:	61 f0       	breq	.+24     	; 0x485c <__vector_54+0x6a>
    4844:	83 81       	ldd	r24, Z+3	; 0x03
    4846:	26 95       	lsr	r18
    4848:	28 23       	and	r18, r24
    484a:	c0 81       	ld	r28, Z
    484c:	d1 81       	ldd	r29, Z+1	; 0x01
    484e:	c2 0f       	add	r28, r18
    4850:	d1 1d       	adc	r29, r1
    4852:	68 83       	st	Y, r22
    4854:	8f 5f       	subi	r24, 0xFF	; 255
    4856:	95 81       	ldd	r25, Z+5	; 0x05
    4858:	89 23       	and	r24, r25
    485a:	83 83       	std	Z+3, r24	; 0x03
    485c:	16 96       	adiw	r26, 0x06	; 6
    485e:	ed 91       	ld	r30, X+
    4860:	fc 91       	ld	r31, X
    4862:	17 97       	sbiw	r26, 0x07	; 7
    4864:	30 97       	sbiw	r30, 0x00	; 0
    4866:	11 f0       	breq	.+4      	; 0x486c <__vector_54+0x7a>
    4868:	cd 01       	movw	r24, r26
    486a:	19 95       	eicall
    486c:	ff 91       	pop	r31
    486e:	ef 91       	pop	r30
    4870:	df 91       	pop	r29
    4872:	cf 91       	pop	r28
    4874:	bf 91       	pop	r27
    4876:	af 91       	pop	r26
    4878:	9f 91       	pop	r25
    487a:	8f 91       	pop	r24
    487c:	7f 91       	pop	r23
    487e:	6f 91       	pop	r22
    4880:	5f 91       	pop	r21
    4882:	4f 91       	pop	r20
    4884:	3f 91       	pop	r19
    4886:	2f 91       	pop	r18
    4888:	0f 90       	pop	r0
    488a:	0b be       	out	0x3b, r0	; 59
    488c:	0f 90       	pop	r0
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	0f 90       	pop	r0
    4892:	1f 90       	pop	r1
    4894:	18 95       	reti

00004896 <__vector_55>:
    4896:	1f 92       	push	r1
    4898:	0f 92       	push	r0
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	0f 92       	push	r0
    489e:	11 24       	eor	r1, r1
    48a0:	0b b6       	in	r0, 0x3b	; 59
    48a2:	0f 92       	push	r0
    48a4:	2f 93       	push	r18
    48a6:	8f 93       	push	r24
    48a8:	9f 93       	push	r25
    48aa:	af 93       	push	r26
    48ac:	bf 93       	push	r27
    48ae:	ef 93       	push	r30
    48b0:	ff 93       	push	r31
    48b2:	e0 91 47 19 	lds	r30, 0x1947	; 0x801947 <_ser_handle+0x6>
    48b6:	f0 91 48 19 	lds	r31, 0x1948	; 0x801948 <_ser_handle+0x7>
    48ba:	30 97       	sbiw	r30, 0x00	; 0
    48bc:	b9 f0       	breq	.+46     	; 0x48ec <__vector_55+0x56>
    48be:	02 80       	ldd	r0, Z+2	; 0x02
    48c0:	f3 81       	ldd	r31, Z+3	; 0x03
    48c2:	e0 2d       	mov	r30, r0
    48c4:	93 81       	ldd	r25, Z+3	; 0x03
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	98 17       	cp	r25, r24
    48ca:	b1 f0       	breq	.+44     	; 0x48f8 <__vector_55+0x62>
    48cc:	92 81       	ldd	r25, Z+2	; 0x02
    48ce:	85 81       	ldd	r24, Z+5	; 0x05
    48d0:	28 2f       	mov	r18, r24
    48d2:	26 95       	lsr	r18
    48d4:	29 23       	and	r18, r25
    48d6:	a0 81       	ld	r26, Z
    48d8:	b1 81       	ldd	r27, Z+1	; 0x01
    48da:	a2 0f       	add	r26, r18
    48dc:	b1 1d       	adc	r27, r1
    48de:	2c 91       	ld	r18, X
    48e0:	9f 5f       	subi	r25, 0xFF	; 255
    48e2:	89 23       	and	r24, r25
    48e4:	82 83       	std	Z+2, r24	; 0x02
    48e6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    48ea:	0b c0       	rjmp	.+22     	; 0x4902 <__vector_55+0x6c>
    48ec:	e1 e3       	ldi	r30, 0x31	; 49
    48ee:	f1 e0       	ldi	r31, 0x01	; 1
    48f0:	80 81       	ld	r24, Z
    48f2:	8f 7d       	andi	r24, 0xDF	; 223
    48f4:	80 83       	st	Z, r24
    48f6:	05 c0       	rjmp	.+10     	; 0x4902 <__vector_55+0x6c>
    48f8:	e1 e3       	ldi	r30, 0x31	; 49
    48fa:	f1 e0       	ldi	r31, 0x01	; 1
    48fc:	80 81       	ld	r24, Z
    48fe:	8f 7d       	andi	r24, 0xDF	; 223
    4900:	80 83       	st	Z, r24
    4902:	ff 91       	pop	r31
    4904:	ef 91       	pop	r30
    4906:	bf 91       	pop	r27
    4908:	af 91       	pop	r26
    490a:	9f 91       	pop	r25
    490c:	8f 91       	pop	r24
    490e:	2f 91       	pop	r18
    4910:	0f 90       	pop	r0
    4912:	0b be       	out	0x3b, r0	; 59
    4914:	0f 90       	pop	r0
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	0f 90       	pop	r0
    491a:	1f 90       	pop	r1
    491c:	18 95       	reti

0000491e <usart_getchar>:
    491e:	cf 93       	push	r28
    4920:	df 93       	push	r29
    4922:	1f 92       	push	r1
    4924:	cd b7       	in	r28, 0x3d	; 61
    4926:	de b7       	in	r29, 0x3e	; 62
    4928:	be 01       	movw	r22, r28
    492a:	6f 5f       	subi	r22, 0xFF	; 255
    492c:	7f 4f       	sbci	r23, 0xFF	; 255
    492e:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <_com_serial_instance>
    4932:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <_com_serial_instance+0x1>
    4936:	7f dd       	rcall	.-1282   	; 0x4436 <serial_get_byte>
    4938:	81 11       	cpse	r24, r1
    493a:	f6 cf       	rjmp	.-20     	; 0x4928 <usart_getchar+0xa>
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	0f 90       	pop	r0
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	08 95       	ret

00004948 <usart_putchar>:
    4948:	68 2f       	mov	r22, r24
    494a:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <_com_serial_instance>
    494e:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <_com_serial_instance+0x1>
    4952:	fc dc       	rcall	.-1544   	; 0x434c <serial_send_byte>
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	08 95       	ret

0000495a <stdioCreate>:
    495a:	8f 92       	push	r8
    495c:	9f 92       	push	r9
    495e:	af 92       	push	r10
    4960:	cf 92       	push	r12
    4962:	ef 92       	push	r14
    4964:	0f 93       	push	r16
    4966:	81 2c       	mov	r8, r1
    4968:	91 2c       	mov	r9, r1
    496a:	68 94       	set
    496c:	aa 24       	eor	r10, r10
    496e:	a7 f8       	bld	r10, 7
    4970:	68 94       	set
    4972:	cc 24       	eor	r12, r12
    4974:	c7 f8       	bld	r12, 7
    4976:	e1 2c       	mov	r14, r1
    4978:	00 e0       	ldi	r16, 0x00	; 0
    497a:	23 e0       	ldi	r18, 0x03	; 3
    497c:	40 e0       	ldi	r20, 0x00	; 0
    497e:	51 ee       	ldi	r21, 0xE1	; 225
    4980:	60 e0       	ldi	r22, 0x00	; 0
    4982:	70 e0       	ldi	r23, 0x00	; 0
    4984:	4c dc       	rcall	.-1896   	; 0x421e <serial_new_instance>
    4986:	90 93 4a 19 	sts	0x194A, r25	; 0x80194a <_com_serial_instance+0x1>
    498a:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <_com_serial_instance>
    498e:	e6 e7       	ldi	r30, 0x76	; 118
    4990:	f9 e1       	ldi	r31, 0x19	; 25
    4992:	82 e1       	ldi	r24, 0x12	; 18
    4994:	92 e0       	ldi	r25, 0x02	; 2
    4996:	91 83       	std	Z+1, r25	; 0x01
    4998:	80 83       	st	Z, r24
    499a:	93 83       	std	Z+3, r25	; 0x03
    499c:	82 83       	std	Z+2, r24	; 0x02
    499e:	0f 91       	pop	r16
    49a0:	ef 90       	pop	r14
    49a2:	cf 90       	pop	r12
    49a4:	af 90       	pop	r10
    49a6:	9f 90       	pop	r9
    49a8:	8f 90       	pop	r8
    49aa:	08 95       	ret

000049ac <_initTwiInterface>:
    49ac:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_twiIsInitiated>
    49b0:	81 11       	cpse	r24, r1
    49b2:	0c c0       	rjmp	.+24     	; 0x49cc <_initTwiInterface+0x20>
    49b4:	8c e0       	ldi	r24, 0x0C	; 12
    49b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    49ba:	8f ef       	ldi	r24, 0xFF	; 255
    49bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49c0:	84 e0       	ldi	r24, 0x04	; 4
    49c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <_twiIsInitiated>
    49cc:	08 95       	ret

000049ce <twiCreate>:
    49ce:	af 92       	push	r10
    49d0:	bf 92       	push	r11
    49d2:	cf 92       	push	r12
    49d4:	df 92       	push	r13
    49d6:	ef 92       	push	r14
    49d8:	ff 92       	push	r15
    49da:	0f 93       	push	r16
    49dc:	1f 93       	push	r17
    49de:	cf 93       	push	r28
    49e0:	df 93       	push	r29
    49e2:	a8 2e       	mov	r10, r24
    49e4:	b6 2e       	mov	r11, r22
    49e6:	69 01       	movw	r12, r18
    49e8:	7a 01       	movw	r14, r20
    49ea:	84 e0       	ldi	r24, 0x04	; 4
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	79 d3       	rcall	.+1778   	; 0x50e2 <malloc>
    49f0:	ec 01       	movw	r28, r24
    49f2:	89 2b       	or	r24, r25
    49f4:	61 f1       	breq	.+88     	; 0x4a4e <twiCreate+0x80>
    49f6:	a8 82       	st	Y, r10
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	b8 12       	cpse	r11, r24
    49fc:	12 c0       	rjmp	.+36     	; 0x4a22 <twiCreate+0x54>
    49fe:	c7 01       	movw	r24, r14
    4a00:	b6 01       	movw	r22, r12
    4a02:	20 ea       	ldi	r18, 0xA0	; 160
    4a04:	36 e8       	ldi	r19, 0x86	; 134
    4a06:	41 e0       	ldi	r20, 0x01	; 1
    4a08:	50 e0       	ldi	r21, 0x00	; 0
    4a0a:	27 d3       	rcall	.+1614   	; 0x505a <__udivmodsi4>
    4a0c:	da 01       	movw	r26, r20
    4a0e:	c9 01       	movw	r24, r18
    4a10:	40 97       	sbiw	r24, 0x10	; 16
    4a12:	a1 09       	sbc	r26, r1
    4a14:	b1 09       	sbc	r27, r1
    4a16:	b6 95       	lsr	r27
    4a18:	a7 95       	ror	r26
    4a1a:	97 95       	ror	r25
    4a1c:	87 95       	ror	r24
    4a1e:	89 83       	std	Y+1, r24	; 0x01
    4a20:	11 c0       	rjmp	.+34     	; 0x4a44 <twiCreate+0x76>
    4a22:	c7 01       	movw	r24, r14
    4a24:	b6 01       	movw	r22, r12
    4a26:	20 e8       	ldi	r18, 0x80	; 128
    4a28:	3a e1       	ldi	r19, 0x1A	; 26
    4a2a:	46 e0       	ldi	r20, 0x06	; 6
    4a2c:	50 e0       	ldi	r21, 0x00	; 0
    4a2e:	15 d3       	rcall	.+1578   	; 0x505a <__udivmodsi4>
    4a30:	da 01       	movw	r26, r20
    4a32:	c9 01       	movw	r24, r18
    4a34:	40 97       	sbiw	r24, 0x10	; 16
    4a36:	a1 09       	sbc	r26, r1
    4a38:	b1 09       	sbc	r27, r1
    4a3a:	b6 95       	lsr	r27
    4a3c:	a7 95       	ror	r26
    4a3e:	97 95       	ror	r25
    4a40:	87 95       	ror	r24
    4a42:	89 83       	std	Y+1, r24	; 0x01
    4a44:	1b 83       	std	Y+3, r17	; 0x03
    4a46:	0a 83       	std	Y+2, r16	; 0x02
    4a48:	8c 2f       	mov	r24, r28
    4a4a:	9d 2f       	mov	r25, r29
    4a4c:	02 c0       	rjmp	.+4      	; 0x4a52 <twiCreate+0x84>
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	df 91       	pop	r29
    4a54:	cf 91       	pop	r28
    4a56:	1f 91       	pop	r17
    4a58:	0f 91       	pop	r16
    4a5a:	ff 90       	pop	r15
    4a5c:	ef 90       	pop	r14
    4a5e:	df 90       	pop	r13
    4a60:	cf 90       	pop	r12
    4a62:	bf 90       	pop	r11
    4a64:	af 90       	pop	r10
    4a66:	08 95       	ret

00004a68 <twiIsBusy>:
    4a68:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a6c:	81 70       	andi	r24, 0x01	; 1
    4a6e:	08 95       	ret

00004a70 <twiTransmit>:
    4a70:	ff 92       	push	r15
    4a72:	0f 93       	push	r16
    4a74:	1f 93       	push	r17
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
    4a7a:	00 97       	sbiw	r24, 0x00	; 0
    4a7c:	d1 f1       	breq	.+116    	; 0x4af2 <twiTransmit+0x82>
    4a7e:	4a 30       	cpi	r20, 0x0A	; 10
    4a80:	d0 f5       	brcc	.+116    	; 0x4af6 <twiTransmit+0x86>
    4a82:	f4 2e       	mov	r15, r20
    4a84:	8b 01       	movw	r16, r22
    4a86:	ec 01       	movw	r28, r24
    4a88:	ef df       	rcall	.-34     	; 0x4a68 <twiIsBusy>
    4a8a:	81 11       	cpse	r24, r1
    4a8c:	36 c0       	rjmp	.+108    	; 0x4afa <twiTransmit+0x8a>
    4a8e:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <_twiCurrentHandler>
    4a92:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <_twiCurrentHandler+0x1>
    4a96:	c8 17       	cp	r28, r24
    4a98:	d9 07       	cpc	r29, r25
    4a9a:	41 f0       	breq	.+16     	; 0x4aac <twiTransmit+0x3c>
    4a9c:	87 df       	rcall	.-242    	; 0x49ac <_initTwiInterface>
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4aa4:	d0 93 4d 19 	sts	0x194D, r29	; 0x80194d <_twiCurrentHandler+0x1>
    4aa8:	c0 93 4c 19 	sts	0x194C, r28	; 0x80194c <_twiCurrentHandler>
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	8f 0d       	add	r24, r15
    4ab0:	80 93 4e 19 	sts	0x194E, r24	; 0x80194e <_twiMessageLen>
    4ab4:	88 81       	ld	r24, Y
    4ab6:	88 0f       	add	r24, r24
    4ab8:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <_twiMessageBuffer>
    4abc:	ff 20       	and	r15, r15
    4abe:	89 f0       	breq	.+34     	; 0x4ae2 <twiTransmit+0x72>
    4ac0:	f8 01       	movw	r30, r16
    4ac2:	a0 e5       	ldi	r26, 0x50	; 80
    4ac4:	b9 e1       	ldi	r27, 0x19	; 25
    4ac6:	4f ef       	ldi	r20, 0xFF	; 255
    4ac8:	4f 0d       	add	r20, r15
    4aca:	64 2f       	mov	r22, r20
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	cb 01       	movw	r24, r22
    4ad0:	01 96       	adiw	r24, 0x01	; 1
    4ad2:	b8 01       	movw	r22, r16
    4ad4:	68 0f       	add	r22, r24
    4ad6:	79 1f       	adc	r23, r25
    4ad8:	81 91       	ld	r24, Z+
    4ada:	8d 93       	st	X+, r24
    4adc:	e6 17       	cp	r30, r22
    4ade:	f7 07       	cpc	r31, r23
    4ae0:	d9 f7       	brne	.-10     	; 0x4ad8 <twiTransmit+0x68>
    4ae2:	88 ef       	ldi	r24, 0xF8	; 248
    4ae4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4ae8:	85 ea       	ldi	r24, 0xA5	; 165
    4aea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4aee:	84 e0       	ldi	r24, 0x04	; 4
    4af0:	05 c0       	rjmp	.+10     	; 0x4afc <twiTransmit+0x8c>
    4af2:	86 e0       	ldi	r24, 0x06	; 6
    4af4:	03 c0       	rjmp	.+6      	; 0x4afc <twiTransmit+0x8c>
    4af6:	87 e0       	ldi	r24, 0x07	; 7
    4af8:	01 c0       	rjmp	.+2      	; 0x4afc <twiTransmit+0x8c>
    4afa:	82 e0       	ldi	r24, 0x02	; 2
    4afc:	df 91       	pop	r29
    4afe:	cf 91       	pop	r28
    4b00:	1f 91       	pop	r17
    4b02:	0f 91       	pop	r16
    4b04:	ff 90       	pop	r15
    4b06:	08 95       	ret

00004b08 <twiReceive>:
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	00 97       	sbiw	r24, 0x00	; 0
    4b10:	29 f1       	breq	.+74     	; 0x4b5c <twiReceive+0x54>
    4b12:	6b 30       	cpi	r22, 0x0B	; 11
    4b14:	28 f5       	brcc	.+74     	; 0x4b60 <twiReceive+0x58>
    4b16:	16 2f       	mov	r17, r22
    4b18:	ec 01       	movw	r28, r24
    4b1a:	a6 df       	rcall	.-180    	; 0x4a68 <twiIsBusy>
    4b1c:	81 11       	cpse	r24, r1
    4b1e:	22 c0       	rjmp	.+68     	; 0x4b64 <twiReceive+0x5c>
    4b20:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <_twiCurrentHandler>
    4b24:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <_twiCurrentHandler+0x1>
    4b28:	c8 17       	cp	r28, r24
    4b2a:	d9 07       	cpc	r29, r25
    4b2c:	41 f0       	breq	.+16     	; 0x4b3e <twiReceive+0x36>
    4b2e:	3e df       	rcall	.-388    	; 0x49ac <_initTwiInterface>
    4b30:	89 81       	ldd	r24, Y+1	; 0x01
    4b32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4b36:	d0 93 4d 19 	sts	0x194D, r29	; 0x80194d <_twiCurrentHandler+0x1>
    4b3a:	c0 93 4c 19 	sts	0x194C, r28	; 0x80194c <_twiCurrentHandler>
    4b3e:	10 93 4e 19 	sts	0x194E, r17	; 0x80194e <_twiMessageLen>
    4b42:	88 81       	ld	r24, Y
    4b44:	88 0f       	add	r24, r24
    4b46:	81 60       	ori	r24, 0x01	; 1
    4b48:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <_twiMessageBuffer>
    4b4c:	88 ef       	ldi	r24, 0xF8	; 248
    4b4e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4b52:	85 ea       	ldi	r24, 0xA5	; 165
    4b54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4b58:	85 e0       	ldi	r24, 0x05	; 5
    4b5a:	05 c0       	rjmp	.+10     	; 0x4b66 <twiReceive+0x5e>
    4b5c:	86 e0       	ldi	r24, 0x06	; 6
    4b5e:	03 c0       	rjmp	.+6      	; 0x4b66 <twiReceive+0x5e>
    4b60:	87 e0       	ldi	r24, 0x07	; 7
    4b62:	01 c0       	rjmp	.+2      	; 0x4b66 <twiReceive+0x5e>
    4b64:	82 e0       	ldi	r24, 0x02	; 2
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	1f 91       	pop	r17
    4b6c:	08 95       	ret

00004b6e <__vector_39>:
    4b6e:	1f 92       	push	r1
    4b70:	0f 92       	push	r0
    4b72:	0f b6       	in	r0, 0x3f	; 63
    4b74:	0f 92       	push	r0
    4b76:	11 24       	eor	r1, r1
    4b78:	0b b6       	in	r0, 0x3b	; 59
    4b7a:	0f 92       	push	r0
    4b7c:	2f 93       	push	r18
    4b7e:	3f 93       	push	r19
    4b80:	4f 93       	push	r20
    4b82:	5f 93       	push	r21
    4b84:	6f 93       	push	r22
    4b86:	7f 93       	push	r23
    4b88:	8f 93       	push	r24
    4b8a:	9f 93       	push	r25
    4b8c:	af 93       	push	r26
    4b8e:	bf 93       	push	r27
    4b90:	ef 93       	push	r30
    4b92:	ff 93       	push	r31
    4b94:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4b98:	8e 2f       	mov	r24, r30
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	38 97       	sbiw	r30, 0x08	; 8
    4ba0:	e1 35       	cpi	r30, 0x51	; 81
    4ba2:	f1 05       	cpc	r31, r1
    4ba4:	08 f0       	brcs	.+2      	; 0x4ba8 <__vector_39+0x3a>
    4ba6:	75 c0       	rjmp	.+234    	; 0x4c92 <__vector_39+0x124>
    4ba8:	88 27       	eor	r24, r24
    4baa:	e4 58       	subi	r30, 0x84	; 132
    4bac:	ff 4f       	sbci	r31, 0xFF	; 255
    4bae:	8f 4f       	sbci	r24, 0xFF	; 255
    4bb0:	76 c2       	rjmp	.+1260   	; 0x509e <__tablejump2__>
    4bb2:	10 92 4b 19 	sts	0x194B, r1	; 0x80194b <_index.1885>
    4bb6:	e0 91 4b 19 	lds	r30, 0x194B	; 0x80194b <_index.1885>
    4bba:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <_twiMessageLen>
    4bbe:	e8 17       	cp	r30, r24
    4bc0:	70 f4       	brcc	.+28     	; 0x4bde <__vector_39+0x70>
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	8e 0f       	add	r24, r30
    4bc6:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <_index.1885>
    4bca:	f0 e0       	ldi	r31, 0x00	; 0
    4bcc:	e1 5b       	subi	r30, 0xB1	; 177
    4bce:	f6 4e       	sbci	r31, 0xE6	; 230
    4bd0:	80 81       	ld	r24, Z
    4bd2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4bd6:	85 e8       	ldi	r24, 0x85	; 133
    4bd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4bdc:	72 c0       	rjmp	.+228    	; 0x4cc2 <__vector_39+0x154>
    4bde:	84 e9       	ldi	r24, 0x94	; 148
    4be0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4be4:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <_twiCurrentHandler>
    4be8:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <_twiCurrentHandler+0x1>
    4bec:	dc 01       	movw	r26, r24
    4bee:	12 96       	adiw	r26, 0x02	; 2
    4bf0:	ed 91       	ld	r30, X+
    4bf2:	fc 91       	ld	r31, X
    4bf4:	13 97       	sbiw	r26, 0x03	; 3
    4bf6:	30 97       	sbiw	r30, 0x00	; 0
    4bf8:	09 f4       	brne	.+2      	; 0x4bfc <__vector_39+0x8e>
    4bfa:	63 c0       	rjmp	.+198    	; 0x4cc2 <__vector_39+0x154>
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	40 e0       	ldi	r20, 0x00	; 0
    4c00:	50 e0       	ldi	r21, 0x00	; 0
    4c02:	64 e0       	ldi	r22, 0x04	; 4
    4c04:	19 95       	eicall
    4c06:	5d c0       	rjmp	.+186    	; 0x4cc2 <__vector_39+0x154>
    4c08:	e0 91 4b 19 	lds	r30, 0x194B	; 0x80194b <_index.1885>
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	8e 0f       	add	r24, r30
    4c10:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <_index.1885>
    4c14:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4c18:	f0 e0       	ldi	r31, 0x00	; 0
    4c1a:	e1 5b       	subi	r30, 0xB1	; 177
    4c1c:	f6 4e       	sbci	r31, 0xE6	; 230
    4c1e:	80 83       	st	Z, r24
    4c20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4c24:	80 34       	cpi	r24, 0x40	; 64
    4c26:	11 f4       	brne	.+4      	; 0x4c2c <__vector_39+0xbe>
    4c28:	10 92 4b 19 	sts	0x194B, r1	; 0x80194b <_index.1885>
    4c2c:	20 91 4b 19 	lds	r18, 0x194B	; 0x80194b <_index.1885>
    4c30:	30 e0       	ldi	r19, 0x00	; 0
    4c32:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <_twiMessageLen>
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	01 97       	sbiw	r24, 0x01	; 1
    4c3a:	28 17       	cp	r18, r24
    4c3c:	39 07       	cpc	r19, r25
    4c3e:	24 f4       	brge	.+8      	; 0x4c48 <__vector_39+0xda>
    4c40:	85 ec       	ldi	r24, 0xC5	; 197
    4c42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c46:	3d c0       	rjmp	.+122    	; 0x4cc2 <__vector_39+0x154>
    4c48:	85 e8       	ldi	r24, 0x85	; 133
    4c4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c4e:	39 c0       	rjmp	.+114    	; 0x4cc2 <__vector_39+0x154>
    4c50:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4c54:	e0 91 4b 19 	lds	r30, 0x194B	; 0x80194b <_index.1885>
    4c58:	f0 e0       	ldi	r31, 0x00	; 0
    4c5a:	e1 5b       	subi	r30, 0xB1	; 177
    4c5c:	f6 4e       	sbci	r31, 0xE6	; 230
    4c5e:	80 83       	st	Z, r24
    4c60:	84 e9       	ldi	r24, 0x94	; 148
    4c62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c66:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <_twiCurrentHandler>
    4c6a:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <_twiCurrentHandler+0x1>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	12 96       	adiw	r26, 0x02	; 2
    4c72:	ed 91       	ld	r30, X+
    4c74:	fc 91       	ld	r31, X
    4c76:	13 97       	sbiw	r26, 0x03	; 3
    4c78:	30 97       	sbiw	r30, 0x00	; 0
    4c7a:	19 f1       	breq	.+70     	; 0x4cc2 <__vector_39+0x154>
    4c7c:	20 91 4e 19 	lds	r18, 0x194E	; 0x80194e <_twiMessageLen>
    4c80:	4f e4       	ldi	r20, 0x4F	; 79
    4c82:	59 e1       	ldi	r21, 0x19	; 25
    4c84:	65 e0       	ldi	r22, 0x05	; 5
    4c86:	19 95       	eicall
    4c88:	1c c0       	rjmp	.+56     	; 0x4cc2 <__vector_39+0x154>
    4c8a:	85 ea       	ldi	r24, 0xA5	; 165
    4c8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c90:	18 c0       	rjmp	.+48     	; 0x4cc2 <__vector_39+0x154>
    4c92:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4c96:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4c9a:	84 e0       	ldi	r24, 0x04	; 4
    4c9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4ca0:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <_twiCurrentHandler>
    4ca4:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <_twiCurrentHandler+0x1>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	12 96       	adiw	r26, 0x02	; 2
    4cac:	ed 91       	ld	r30, X+
    4cae:	fc 91       	ld	r31, X
    4cb0:	13 97       	sbiw	r26, 0x03	; 3
    4cb2:	30 97       	sbiw	r30, 0x00	; 0
    4cb4:	31 f0       	breq	.+12     	; 0x4cc2 <__vector_39+0x154>
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	40 e0       	ldi	r20, 0x00	; 0
    4cba:	50 e0       	ldi	r21, 0x00	; 0
    4cbc:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    4cc0:	19 95       	eicall
    4cc2:	ff 91       	pop	r31
    4cc4:	ef 91       	pop	r30
    4cc6:	bf 91       	pop	r27
    4cc8:	af 91       	pop	r26
    4cca:	9f 91       	pop	r25
    4ccc:	8f 91       	pop	r24
    4cce:	7f 91       	pop	r23
    4cd0:	6f 91       	pop	r22
    4cd2:	5f 91       	pop	r21
    4cd4:	4f 91       	pop	r20
    4cd6:	3f 91       	pop	r19
    4cd8:	2f 91       	pop	r18
    4cda:	0f 90       	pop	r0
    4cdc:	0b be       	out	0x3b, r0	; 59
    4cde:	0f 90       	pop	r0
    4ce0:	0f be       	out	0x3f, r0	; 63
    4ce2:	0f 90       	pop	r0
    4ce4:	1f 90       	pop	r1
    4ce6:	18 95       	reti

00004ce8 <fifo_init>:
    4ce8:	fc 01       	movw	r30, r24
    4cea:	41 11       	cpse	r20, r1
    4cec:	01 c0       	rjmp	.+2      	; 0x4cf0 <fifo_init+0x8>
    4cee:	1a d3       	rcall	.+1588   	; 0x5324 <abort>
    4cf0:	84 2f       	mov	r24, r20
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	9c 01       	movw	r18, r24
    4cf6:	21 50       	subi	r18, 0x01	; 1
    4cf8:	31 09       	sbc	r19, r1
    4cfa:	82 23       	and	r24, r18
    4cfc:	93 23       	and	r25, r19
    4cfe:	89 2b       	or	r24, r25
    4d00:	09 f0       	breq	.+2      	; 0x4d04 <fifo_init+0x1c>
    4d02:	10 d3       	rcall	.+1568   	; 0x5324 <abort>
    4d04:	41 38       	cpi	r20, 0x81	; 129
    4d06:	08 f0       	brcs	.+2      	; 0x4d0a <fifo_init+0x22>
    4d08:	0d d3       	rcall	.+1562   	; 0x5324 <abort>
    4d0a:	12 82       	std	Z+2, r1	; 0x02
    4d0c:	13 82       	std	Z+3, r1	; 0x03
    4d0e:	44 83       	std	Z+4, r20	; 0x04
    4d10:	44 0f       	add	r20, r20
    4d12:	41 50       	subi	r20, 0x01	; 1
    4d14:	45 83       	std	Z+5, r20	; 0x05
    4d16:	71 83       	std	Z+1, r23	; 0x01
    4d18:	60 83       	st	Z, r22
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	08 95       	ret

00004d20 <__subsf3>:
    4d20:	50 58       	subi	r21, 0x80	; 128

00004d22 <__addsf3>:
    4d22:	bb 27       	eor	r27, r27
    4d24:	aa 27       	eor	r26, r26
    4d26:	0e d0       	rcall	.+28     	; 0x4d44 <__addsf3x>
    4d28:	21 c1       	rjmp	.+578    	; 0x4f6c <__fp_round>
    4d2a:	12 d1       	rcall	.+548    	; 0x4f50 <__fp_pscA>
    4d2c:	30 f0       	brcs	.+12     	; 0x4d3a <__addsf3+0x18>
    4d2e:	17 d1       	rcall	.+558    	; 0x4f5e <__fp_pscB>
    4d30:	20 f0       	brcs	.+8      	; 0x4d3a <__addsf3+0x18>
    4d32:	31 f4       	brne	.+12     	; 0x4d40 <__addsf3+0x1e>
    4d34:	9f 3f       	cpi	r25, 0xFF	; 255
    4d36:	11 f4       	brne	.+4      	; 0x4d3c <__addsf3+0x1a>
    4d38:	1e f4       	brtc	.+6      	; 0x4d40 <__addsf3+0x1e>
    4d3a:	07 c1       	rjmp	.+526    	; 0x4f4a <__fp_nan>
    4d3c:	0e f4       	brtc	.+2      	; 0x4d40 <__addsf3+0x1e>
    4d3e:	e0 95       	com	r30
    4d40:	e7 fb       	bst	r30, 7
    4d42:	fd c0       	rjmp	.+506    	; 0x4f3e <__fp_inf>

00004d44 <__addsf3x>:
    4d44:	e9 2f       	mov	r30, r25
    4d46:	0e 94 ed 18 	call	0x31da	; 0x31da <__fp_split3>
    4d4a:	78 f3       	brcs	.-34     	; 0x4d2a <__addsf3+0x8>
    4d4c:	ba 17       	cp	r27, r26
    4d4e:	62 07       	cpc	r22, r18
    4d50:	73 07       	cpc	r23, r19
    4d52:	84 07       	cpc	r24, r20
    4d54:	95 07       	cpc	r25, r21
    4d56:	20 f0       	brcs	.+8      	; 0x4d60 <__addsf3x+0x1c>
    4d58:	79 f4       	brne	.+30     	; 0x4d78 <__addsf3x+0x34>
    4d5a:	a6 f5       	brtc	.+104    	; 0x4dc4 <__addsf3x+0x80>
    4d5c:	0c 94 0f 19 	jmp	0x321e	; 0x321e <__fp_zero>
    4d60:	0e f4       	brtc	.+2      	; 0x4d64 <__addsf3x+0x20>
    4d62:	e0 95       	com	r30
    4d64:	0b 2e       	mov	r0, r27
    4d66:	ba 2f       	mov	r27, r26
    4d68:	a0 2d       	mov	r26, r0
    4d6a:	0b 01       	movw	r0, r22
    4d6c:	b9 01       	movw	r22, r18
    4d6e:	90 01       	movw	r18, r0
    4d70:	0c 01       	movw	r0, r24
    4d72:	ca 01       	movw	r24, r20
    4d74:	a0 01       	movw	r20, r0
    4d76:	11 24       	eor	r1, r1
    4d78:	ff 27       	eor	r31, r31
    4d7a:	59 1b       	sub	r21, r25
    4d7c:	99 f0       	breq	.+38     	; 0x4da4 <__addsf3x+0x60>
    4d7e:	59 3f       	cpi	r21, 0xF9	; 249
    4d80:	50 f4       	brcc	.+20     	; 0x4d96 <__addsf3x+0x52>
    4d82:	50 3e       	cpi	r21, 0xE0	; 224
    4d84:	68 f1       	brcs	.+90     	; 0x4de0 <__addsf3x+0x9c>
    4d86:	1a 16       	cp	r1, r26
    4d88:	f0 40       	sbci	r31, 0x00	; 0
    4d8a:	a2 2f       	mov	r26, r18
    4d8c:	23 2f       	mov	r18, r19
    4d8e:	34 2f       	mov	r19, r20
    4d90:	44 27       	eor	r20, r20
    4d92:	58 5f       	subi	r21, 0xF8	; 248
    4d94:	f3 cf       	rjmp	.-26     	; 0x4d7c <__addsf3x+0x38>
    4d96:	46 95       	lsr	r20
    4d98:	37 95       	ror	r19
    4d9a:	27 95       	ror	r18
    4d9c:	a7 95       	ror	r26
    4d9e:	f0 40       	sbci	r31, 0x00	; 0
    4da0:	53 95       	inc	r21
    4da2:	c9 f7       	brne	.-14     	; 0x4d96 <__addsf3x+0x52>
    4da4:	7e f4       	brtc	.+30     	; 0x4dc4 <__addsf3x+0x80>
    4da6:	1f 16       	cp	r1, r31
    4da8:	ba 0b       	sbc	r27, r26
    4daa:	62 0b       	sbc	r22, r18
    4dac:	73 0b       	sbc	r23, r19
    4dae:	84 0b       	sbc	r24, r20
    4db0:	ba f0       	brmi	.+46     	; 0x4de0 <__addsf3x+0x9c>
    4db2:	91 50       	subi	r25, 0x01	; 1
    4db4:	a1 f0       	breq	.+40     	; 0x4dde <__addsf3x+0x9a>
    4db6:	ff 0f       	add	r31, r31
    4db8:	bb 1f       	adc	r27, r27
    4dba:	66 1f       	adc	r22, r22
    4dbc:	77 1f       	adc	r23, r23
    4dbe:	88 1f       	adc	r24, r24
    4dc0:	c2 f7       	brpl	.-16     	; 0x4db2 <__addsf3x+0x6e>
    4dc2:	0e c0       	rjmp	.+28     	; 0x4de0 <__addsf3x+0x9c>
    4dc4:	ba 0f       	add	r27, r26
    4dc6:	62 1f       	adc	r22, r18
    4dc8:	73 1f       	adc	r23, r19
    4dca:	84 1f       	adc	r24, r20
    4dcc:	48 f4       	brcc	.+18     	; 0x4de0 <__addsf3x+0x9c>
    4dce:	87 95       	ror	r24
    4dd0:	77 95       	ror	r23
    4dd2:	67 95       	ror	r22
    4dd4:	b7 95       	ror	r27
    4dd6:	f7 95       	ror	r31
    4dd8:	9e 3f       	cpi	r25, 0xFE	; 254
    4dda:	08 f0       	brcs	.+2      	; 0x4dde <__addsf3x+0x9a>
    4ddc:	b1 cf       	rjmp	.-158    	; 0x4d40 <__addsf3+0x1e>
    4dde:	93 95       	inc	r25
    4de0:	88 0f       	add	r24, r24
    4de2:	08 f0       	brcs	.+2      	; 0x4de6 <__addsf3x+0xa2>
    4de4:	99 27       	eor	r25, r25
    4de6:	ee 0f       	add	r30, r30
    4de8:	97 95       	ror	r25
    4dea:	87 95       	ror	r24
    4dec:	08 95       	ret

00004dee <__divsf3>:
    4dee:	0d d0       	rcall	.+26     	; 0x4e0a <__divsf3x>
    4df0:	bd c0       	rjmp	.+378    	; 0x4f6c <__fp_round>
    4df2:	b5 d0       	rcall	.+362    	; 0x4f5e <__fp_pscB>
    4df4:	48 f0       	brcs	.+18     	; 0x4e08 <__divsf3+0x1a>
    4df6:	ac d0       	rcall	.+344    	; 0x4f50 <__fp_pscA>
    4df8:	38 f0       	brcs	.+14     	; 0x4e08 <__divsf3+0x1a>
    4dfa:	21 f4       	brne	.+8      	; 0x4e04 <__divsf3+0x16>
    4dfc:	5f 3f       	cpi	r21, 0xFF	; 255
    4dfe:	21 f0       	breq	.+8      	; 0x4e08 <__divsf3+0x1a>
    4e00:	9e c0       	rjmp	.+316    	; 0x4f3e <__fp_inf>
    4e02:	51 11       	cpse	r21, r1
    4e04:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_szero>
    4e08:	a0 c0       	rjmp	.+320    	; 0x4f4a <__fp_nan>

00004e0a <__divsf3x>:
    4e0a:	0e 94 ed 18 	call	0x31da	; 0x31da <__fp_split3>
    4e0e:	88 f3       	brcs	.-30     	; 0x4df2 <__divsf3+0x4>

00004e10 <__divsf3_pse>:
    4e10:	99 23       	and	r25, r25
    4e12:	b9 f3       	breq	.-18     	; 0x4e02 <__divsf3+0x14>
    4e14:	55 23       	and	r21, r21
    4e16:	a1 f3       	breq	.-24     	; 0x4e00 <__divsf3+0x12>
    4e18:	95 1b       	sub	r25, r21
    4e1a:	55 0b       	sbc	r21, r21
    4e1c:	bb 27       	eor	r27, r27
    4e1e:	aa 27       	eor	r26, r26
    4e20:	62 17       	cp	r22, r18
    4e22:	73 07       	cpc	r23, r19
    4e24:	84 07       	cpc	r24, r20
    4e26:	38 f0       	brcs	.+14     	; 0x4e36 <__divsf3_pse+0x26>
    4e28:	9f 5f       	subi	r25, 0xFF	; 255
    4e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e2c:	22 0f       	add	r18, r18
    4e2e:	33 1f       	adc	r19, r19
    4e30:	44 1f       	adc	r20, r20
    4e32:	aa 1f       	adc	r26, r26
    4e34:	a9 f3       	breq	.-22     	; 0x4e20 <__divsf3_pse+0x10>
    4e36:	34 d0       	rcall	.+104    	; 0x4ea0 <__divsf3_pse+0x90>
    4e38:	0e 2e       	mov	r0, r30
    4e3a:	3a f0       	brmi	.+14     	; 0x4e4a <__divsf3_pse+0x3a>
    4e3c:	e0 e8       	ldi	r30, 0x80	; 128
    4e3e:	31 d0       	rcall	.+98     	; 0x4ea2 <__divsf3_pse+0x92>
    4e40:	91 50       	subi	r25, 0x01	; 1
    4e42:	50 40       	sbci	r21, 0x00	; 0
    4e44:	e6 95       	lsr	r30
    4e46:	00 1c       	adc	r0, r0
    4e48:	ca f7       	brpl	.-14     	; 0x4e3c <__divsf3_pse+0x2c>
    4e4a:	2a d0       	rcall	.+84     	; 0x4ea0 <__divsf3_pse+0x90>
    4e4c:	fe 2f       	mov	r31, r30
    4e4e:	28 d0       	rcall	.+80     	; 0x4ea0 <__divsf3_pse+0x90>
    4e50:	66 0f       	add	r22, r22
    4e52:	77 1f       	adc	r23, r23
    4e54:	88 1f       	adc	r24, r24
    4e56:	bb 1f       	adc	r27, r27
    4e58:	26 17       	cp	r18, r22
    4e5a:	37 07       	cpc	r19, r23
    4e5c:	48 07       	cpc	r20, r24
    4e5e:	ab 07       	cpc	r26, r27
    4e60:	b0 e8       	ldi	r27, 0x80	; 128
    4e62:	09 f0       	breq	.+2      	; 0x4e66 <__divsf3_pse+0x56>
    4e64:	bb 0b       	sbc	r27, r27
    4e66:	80 2d       	mov	r24, r0
    4e68:	bf 01       	movw	r22, r30
    4e6a:	ff 27       	eor	r31, r31
    4e6c:	93 58       	subi	r25, 0x83	; 131
    4e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e70:	32 f0       	brmi	.+12     	; 0x4e7e <__divsf3_pse+0x6e>
    4e72:	9e 3f       	cpi	r25, 0xFE	; 254
    4e74:	51 05       	cpc	r21, r1
    4e76:	70 f0       	brcs	.+28     	; 0x4e94 <__divsf3_pse+0x84>
    4e78:	62 c0       	rjmp	.+196    	; 0x4f3e <__fp_inf>
    4e7a:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_szero>
    4e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    4e80:	e4 f3       	brlt	.-8      	; 0x4e7a <__divsf3_pse+0x6a>
    4e82:	98 3e       	cpi	r25, 0xE8	; 232
    4e84:	d4 f3       	brlt	.-12     	; 0x4e7a <__divsf3_pse+0x6a>
    4e86:	86 95       	lsr	r24
    4e88:	77 95       	ror	r23
    4e8a:	67 95       	ror	r22
    4e8c:	b7 95       	ror	r27
    4e8e:	f7 95       	ror	r31
    4e90:	9f 5f       	subi	r25, 0xFF	; 255
    4e92:	c9 f7       	brne	.-14     	; 0x4e86 <__divsf3_pse+0x76>
    4e94:	88 0f       	add	r24, r24
    4e96:	91 1d       	adc	r25, r1
    4e98:	96 95       	lsr	r25
    4e9a:	87 95       	ror	r24
    4e9c:	97 f9       	bld	r25, 7
    4e9e:	08 95       	ret
    4ea0:	e1 e0       	ldi	r30, 0x01	; 1
    4ea2:	66 0f       	add	r22, r22
    4ea4:	77 1f       	adc	r23, r23
    4ea6:	88 1f       	adc	r24, r24
    4ea8:	bb 1f       	adc	r27, r27
    4eaa:	62 17       	cp	r22, r18
    4eac:	73 07       	cpc	r23, r19
    4eae:	84 07       	cpc	r24, r20
    4eb0:	ba 07       	cpc	r27, r26
    4eb2:	20 f0       	brcs	.+8      	; 0x4ebc <__divsf3_pse+0xac>
    4eb4:	62 1b       	sub	r22, r18
    4eb6:	73 0b       	sbc	r23, r19
    4eb8:	84 0b       	sbc	r24, r20
    4eba:	ba 0b       	sbc	r27, r26
    4ebc:	ee 1f       	adc	r30, r30
    4ebe:	88 f7       	brcc	.-30     	; 0x4ea2 <__divsf3_pse+0x92>
    4ec0:	e0 95       	com	r30
    4ec2:	08 95       	ret

00004ec4 <__floatunsisf>:
    4ec4:	e8 94       	clt
    4ec6:	09 c0       	rjmp	.+18     	; 0x4eda <__floatsisf+0x12>

00004ec8 <__floatsisf>:
    4ec8:	97 fb       	bst	r25, 7
    4eca:	3e f4       	brtc	.+14     	; 0x4eda <__floatsisf+0x12>
    4ecc:	90 95       	com	r25
    4ece:	80 95       	com	r24
    4ed0:	70 95       	com	r23
    4ed2:	61 95       	neg	r22
    4ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eda:	99 23       	and	r25, r25
    4edc:	a9 f0       	breq	.+42     	; 0x4f08 <__floatsisf+0x40>
    4ede:	f9 2f       	mov	r31, r25
    4ee0:	96 e9       	ldi	r25, 0x96	; 150
    4ee2:	bb 27       	eor	r27, r27
    4ee4:	93 95       	inc	r25
    4ee6:	f6 95       	lsr	r31
    4ee8:	87 95       	ror	r24
    4eea:	77 95       	ror	r23
    4eec:	67 95       	ror	r22
    4eee:	b7 95       	ror	r27
    4ef0:	f1 11       	cpse	r31, r1
    4ef2:	f8 cf       	rjmp	.-16     	; 0x4ee4 <__floatsisf+0x1c>
    4ef4:	fa f4       	brpl	.+62     	; 0x4f34 <__floatsisf+0x6c>
    4ef6:	bb 0f       	add	r27, r27
    4ef8:	11 f4       	brne	.+4      	; 0x4efe <__floatsisf+0x36>
    4efa:	60 ff       	sbrs	r22, 0
    4efc:	1b c0       	rjmp	.+54     	; 0x4f34 <__floatsisf+0x6c>
    4efe:	6f 5f       	subi	r22, 0xFF	; 255
    4f00:	7f 4f       	sbci	r23, 0xFF	; 255
    4f02:	8f 4f       	sbci	r24, 0xFF	; 255
    4f04:	9f 4f       	sbci	r25, 0xFF	; 255
    4f06:	16 c0       	rjmp	.+44     	; 0x4f34 <__floatsisf+0x6c>
    4f08:	88 23       	and	r24, r24
    4f0a:	11 f0       	breq	.+4      	; 0x4f10 <__floatsisf+0x48>
    4f0c:	96 e9       	ldi	r25, 0x96	; 150
    4f0e:	11 c0       	rjmp	.+34     	; 0x4f32 <__floatsisf+0x6a>
    4f10:	77 23       	and	r23, r23
    4f12:	21 f0       	breq	.+8      	; 0x4f1c <__floatsisf+0x54>
    4f14:	9e e8       	ldi	r25, 0x8E	; 142
    4f16:	87 2f       	mov	r24, r23
    4f18:	76 2f       	mov	r23, r22
    4f1a:	05 c0       	rjmp	.+10     	; 0x4f26 <__floatsisf+0x5e>
    4f1c:	66 23       	and	r22, r22
    4f1e:	71 f0       	breq	.+28     	; 0x4f3c <__floatsisf+0x74>
    4f20:	96 e8       	ldi	r25, 0x86	; 134
    4f22:	86 2f       	mov	r24, r22
    4f24:	70 e0       	ldi	r23, 0x00	; 0
    4f26:	60 e0       	ldi	r22, 0x00	; 0
    4f28:	2a f0       	brmi	.+10     	; 0x4f34 <__floatsisf+0x6c>
    4f2a:	9a 95       	dec	r25
    4f2c:	66 0f       	add	r22, r22
    4f2e:	77 1f       	adc	r23, r23
    4f30:	88 1f       	adc	r24, r24
    4f32:	da f7       	brpl	.-10     	; 0x4f2a <__floatsisf+0x62>
    4f34:	88 0f       	add	r24, r24
    4f36:	96 95       	lsr	r25
    4f38:	87 95       	ror	r24
    4f3a:	97 f9       	bld	r25, 7
    4f3c:	08 95       	ret

00004f3e <__fp_inf>:
    4f3e:	97 f9       	bld	r25, 7
    4f40:	9f 67       	ori	r25, 0x7F	; 127
    4f42:	80 e8       	ldi	r24, 0x80	; 128
    4f44:	70 e0       	ldi	r23, 0x00	; 0
    4f46:	60 e0       	ldi	r22, 0x00	; 0
    4f48:	08 95       	ret

00004f4a <__fp_nan>:
    4f4a:	9f ef       	ldi	r25, 0xFF	; 255
    4f4c:	80 ec       	ldi	r24, 0xC0	; 192
    4f4e:	08 95       	ret

00004f50 <__fp_pscA>:
    4f50:	00 24       	eor	r0, r0
    4f52:	0a 94       	dec	r0
    4f54:	16 16       	cp	r1, r22
    4f56:	17 06       	cpc	r1, r23
    4f58:	18 06       	cpc	r1, r24
    4f5a:	09 06       	cpc	r0, r25
    4f5c:	08 95       	ret

00004f5e <__fp_pscB>:
    4f5e:	00 24       	eor	r0, r0
    4f60:	0a 94       	dec	r0
    4f62:	12 16       	cp	r1, r18
    4f64:	13 06       	cpc	r1, r19
    4f66:	14 06       	cpc	r1, r20
    4f68:	05 06       	cpc	r0, r21
    4f6a:	08 95       	ret

00004f6c <__fp_round>:
    4f6c:	09 2e       	mov	r0, r25
    4f6e:	03 94       	inc	r0
    4f70:	00 0c       	add	r0, r0
    4f72:	11 f4       	brne	.+4      	; 0x4f78 <__fp_round+0xc>
    4f74:	88 23       	and	r24, r24
    4f76:	52 f0       	brmi	.+20     	; 0x4f8c <__fp_round+0x20>
    4f78:	bb 0f       	add	r27, r27
    4f7a:	40 f4       	brcc	.+16     	; 0x4f8c <__fp_round+0x20>
    4f7c:	bf 2b       	or	r27, r31
    4f7e:	11 f4       	brne	.+4      	; 0x4f84 <__fp_round+0x18>
    4f80:	60 ff       	sbrs	r22, 0
    4f82:	04 c0       	rjmp	.+8      	; 0x4f8c <__fp_round+0x20>
    4f84:	6f 5f       	subi	r22, 0xFF	; 255
    4f86:	7f 4f       	sbci	r23, 0xFF	; 255
    4f88:	8f 4f       	sbci	r24, 0xFF	; 255
    4f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f8c:	08 95       	ret

00004f8e <__mulsf3>:
    4f8e:	0c d0       	rcall	.+24     	; 0x4fa8 <__mulsf3x>
    4f90:	ed cf       	rjmp	.-38     	; 0x4f6c <__fp_round>
    4f92:	de df       	rcall	.-68     	; 0x4f50 <__fp_pscA>
    4f94:	28 f0       	brcs	.+10     	; 0x4fa0 <__mulsf3+0x12>
    4f96:	e3 df       	rcall	.-58     	; 0x4f5e <__fp_pscB>
    4f98:	18 f0       	brcs	.+6      	; 0x4fa0 <__mulsf3+0x12>
    4f9a:	95 23       	and	r25, r21
    4f9c:	09 f0       	breq	.+2      	; 0x4fa0 <__mulsf3+0x12>
    4f9e:	cf cf       	rjmp	.-98     	; 0x4f3e <__fp_inf>
    4fa0:	d4 cf       	rjmp	.-88     	; 0x4f4a <__fp_nan>
    4fa2:	11 24       	eor	r1, r1
    4fa4:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_szero>

00004fa8 <__mulsf3x>:
    4fa8:	0e 94 ed 18 	call	0x31da	; 0x31da <__fp_split3>
    4fac:	90 f3       	brcs	.-28     	; 0x4f92 <__mulsf3+0x4>

00004fae <__mulsf3_pse>:
    4fae:	95 9f       	mul	r25, r21
    4fb0:	c1 f3       	breq	.-16     	; 0x4fa2 <__mulsf3+0x14>
    4fb2:	95 0f       	add	r25, r21
    4fb4:	50 e0       	ldi	r21, 0x00	; 0
    4fb6:	55 1f       	adc	r21, r21
    4fb8:	62 9f       	mul	r22, r18
    4fba:	f0 01       	movw	r30, r0
    4fbc:	72 9f       	mul	r23, r18
    4fbe:	bb 27       	eor	r27, r27
    4fc0:	f0 0d       	add	r31, r0
    4fc2:	b1 1d       	adc	r27, r1
    4fc4:	63 9f       	mul	r22, r19
    4fc6:	aa 27       	eor	r26, r26
    4fc8:	f0 0d       	add	r31, r0
    4fca:	b1 1d       	adc	r27, r1
    4fcc:	aa 1f       	adc	r26, r26
    4fce:	64 9f       	mul	r22, r20
    4fd0:	66 27       	eor	r22, r22
    4fd2:	b0 0d       	add	r27, r0
    4fd4:	a1 1d       	adc	r26, r1
    4fd6:	66 1f       	adc	r22, r22
    4fd8:	82 9f       	mul	r24, r18
    4fda:	22 27       	eor	r18, r18
    4fdc:	b0 0d       	add	r27, r0
    4fde:	a1 1d       	adc	r26, r1
    4fe0:	62 1f       	adc	r22, r18
    4fe2:	73 9f       	mul	r23, r19
    4fe4:	b0 0d       	add	r27, r0
    4fe6:	a1 1d       	adc	r26, r1
    4fe8:	62 1f       	adc	r22, r18
    4fea:	83 9f       	mul	r24, r19
    4fec:	a0 0d       	add	r26, r0
    4fee:	61 1d       	adc	r22, r1
    4ff0:	22 1f       	adc	r18, r18
    4ff2:	74 9f       	mul	r23, r20
    4ff4:	33 27       	eor	r19, r19
    4ff6:	a0 0d       	add	r26, r0
    4ff8:	61 1d       	adc	r22, r1
    4ffa:	23 1f       	adc	r18, r19
    4ffc:	84 9f       	mul	r24, r20
    4ffe:	60 0d       	add	r22, r0
    5000:	21 1d       	adc	r18, r1
    5002:	82 2f       	mov	r24, r18
    5004:	76 2f       	mov	r23, r22
    5006:	6a 2f       	mov	r22, r26
    5008:	11 24       	eor	r1, r1
    500a:	9f 57       	subi	r25, 0x7F	; 127
    500c:	50 40       	sbci	r21, 0x00	; 0
    500e:	92 f0       	brmi	.+36     	; 0x5034 <__mulsf3_pse+0x86>
    5010:	e9 f0       	breq	.+58     	; 0x504c <__mulsf3_pse+0x9e>
    5012:	88 23       	and	r24, r24
    5014:	4a f0       	brmi	.+18     	; 0x5028 <__mulsf3_pse+0x7a>
    5016:	ee 0f       	add	r30, r30
    5018:	ff 1f       	adc	r31, r31
    501a:	bb 1f       	adc	r27, r27
    501c:	66 1f       	adc	r22, r22
    501e:	77 1f       	adc	r23, r23
    5020:	88 1f       	adc	r24, r24
    5022:	91 50       	subi	r25, 0x01	; 1
    5024:	50 40       	sbci	r21, 0x00	; 0
    5026:	a9 f7       	brne	.-22     	; 0x5012 <__mulsf3_pse+0x64>
    5028:	9e 3f       	cpi	r25, 0xFE	; 254
    502a:	51 05       	cpc	r21, r1
    502c:	78 f0       	brcs	.+30     	; 0x504c <__mulsf3_pse+0x9e>
    502e:	87 cf       	rjmp	.-242    	; 0x4f3e <__fp_inf>
    5030:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_szero>
    5034:	5f 3f       	cpi	r21, 0xFF	; 255
    5036:	e4 f3       	brlt	.-8      	; 0x5030 <__mulsf3_pse+0x82>
    5038:	98 3e       	cpi	r25, 0xE8	; 232
    503a:	d4 f3       	brlt	.-12     	; 0x5030 <__mulsf3_pse+0x82>
    503c:	86 95       	lsr	r24
    503e:	77 95       	ror	r23
    5040:	67 95       	ror	r22
    5042:	b7 95       	ror	r27
    5044:	f7 95       	ror	r31
    5046:	e7 95       	ror	r30
    5048:	9f 5f       	subi	r25, 0xFF	; 255
    504a:	c1 f7       	brne	.-16     	; 0x503c <__mulsf3_pse+0x8e>
    504c:	fe 2b       	or	r31, r30
    504e:	88 0f       	add	r24, r24
    5050:	91 1d       	adc	r25, r1
    5052:	96 95       	lsr	r25
    5054:	87 95       	ror	r24
    5056:	97 f9       	bld	r25, 7
    5058:	08 95       	ret

0000505a <__udivmodsi4>:
    505a:	a1 e2       	ldi	r26, 0x21	; 33
    505c:	1a 2e       	mov	r1, r26
    505e:	aa 1b       	sub	r26, r26
    5060:	bb 1b       	sub	r27, r27
    5062:	fd 01       	movw	r30, r26
    5064:	0d c0       	rjmp	.+26     	; 0x5080 <__udivmodsi4_ep>

00005066 <__udivmodsi4_loop>:
    5066:	aa 1f       	adc	r26, r26
    5068:	bb 1f       	adc	r27, r27
    506a:	ee 1f       	adc	r30, r30
    506c:	ff 1f       	adc	r31, r31
    506e:	a2 17       	cp	r26, r18
    5070:	b3 07       	cpc	r27, r19
    5072:	e4 07       	cpc	r30, r20
    5074:	f5 07       	cpc	r31, r21
    5076:	20 f0       	brcs	.+8      	; 0x5080 <__udivmodsi4_ep>
    5078:	a2 1b       	sub	r26, r18
    507a:	b3 0b       	sbc	r27, r19
    507c:	e4 0b       	sbc	r30, r20
    507e:	f5 0b       	sbc	r31, r21

00005080 <__udivmodsi4_ep>:
    5080:	66 1f       	adc	r22, r22
    5082:	77 1f       	adc	r23, r23
    5084:	88 1f       	adc	r24, r24
    5086:	99 1f       	adc	r25, r25
    5088:	1a 94       	dec	r1
    508a:	69 f7       	brne	.-38     	; 0x5066 <__udivmodsi4_loop>
    508c:	60 95       	com	r22
    508e:	70 95       	com	r23
    5090:	80 95       	com	r24
    5092:	90 95       	com	r25
    5094:	9b 01       	movw	r18, r22
    5096:	ac 01       	movw	r20, r24
    5098:	bd 01       	movw	r22, r26
    509a:	cf 01       	movw	r24, r30
    509c:	08 95       	ret

0000509e <__tablejump2__>:
    509e:	ee 0f       	add	r30, r30
    50a0:	ff 1f       	adc	r31, r31
    50a2:	88 1f       	adc	r24, r24
    50a4:	8b bf       	out	0x3b, r24	; 59
    50a6:	07 90       	elpm	r0, Z+
    50a8:	f6 91       	elpm	r31, Z
    50aa:	e0 2d       	mov	r30, r0
    50ac:	19 94       	eijmp

000050ae <calloc>:
    50ae:	0f 93       	push	r16
    50b0:	1f 93       	push	r17
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	86 9f       	mul	r24, r22
    50b8:	80 01       	movw	r16, r0
    50ba:	87 9f       	mul	r24, r23
    50bc:	10 0d       	add	r17, r0
    50be:	96 9f       	mul	r25, r22
    50c0:	10 0d       	add	r17, r0
    50c2:	11 24       	eor	r1, r1
    50c4:	c8 01       	movw	r24, r16
    50c6:	0d d0       	rcall	.+26     	; 0x50e2 <malloc>
    50c8:	ec 01       	movw	r28, r24
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	21 f0       	breq	.+8      	; 0x50d6 <calloc+0x28>
    50ce:	a8 01       	movw	r20, r16
    50d0:	60 e0       	ldi	r22, 0x00	; 0
    50d2:	70 e0       	ldi	r23, 0x00	; 0
    50d4:	34 d1       	rcall	.+616    	; 0x533e <memset>
    50d6:	ce 01       	movw	r24, r28
    50d8:	df 91       	pop	r29
    50da:	cf 91       	pop	r28
    50dc:	1f 91       	pop	r17
    50de:	0f 91       	pop	r16
    50e0:	08 95       	ret

000050e2 <malloc>:
    50e2:	0f 93       	push	r16
    50e4:	1f 93       	push	r17
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
    50ea:	82 30       	cpi	r24, 0x02	; 2
    50ec:	91 05       	cpc	r25, r1
    50ee:	10 f4       	brcc	.+4      	; 0x50f4 <malloc+0x12>
    50f0:	82 e0       	ldi	r24, 0x02	; 2
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <__flp>
    50f8:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <__flp+0x1>
    50fc:	20 e0       	ldi	r18, 0x00	; 0
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	a0 e0       	ldi	r26, 0x00	; 0
    5102:	b0 e0       	ldi	r27, 0x00	; 0
    5104:	30 97       	sbiw	r30, 0x00	; 0
    5106:	19 f1       	breq	.+70     	; 0x514e <malloc+0x6c>
    5108:	40 81       	ld	r20, Z
    510a:	51 81       	ldd	r21, Z+1	; 0x01
    510c:	02 81       	ldd	r16, Z+2	; 0x02
    510e:	13 81       	ldd	r17, Z+3	; 0x03
    5110:	48 17       	cp	r20, r24
    5112:	59 07       	cpc	r21, r25
    5114:	c8 f0       	brcs	.+50     	; 0x5148 <malloc+0x66>
    5116:	84 17       	cp	r24, r20
    5118:	95 07       	cpc	r25, r21
    511a:	69 f4       	brne	.+26     	; 0x5136 <malloc+0x54>
    511c:	10 97       	sbiw	r26, 0x00	; 0
    511e:	31 f0       	breq	.+12     	; 0x512c <malloc+0x4a>
    5120:	12 96       	adiw	r26, 0x02	; 2
    5122:	0c 93       	st	X, r16
    5124:	12 97       	sbiw	r26, 0x02	; 2
    5126:	13 96       	adiw	r26, 0x03	; 3
    5128:	1c 93       	st	X, r17
    512a:	27 c0       	rjmp	.+78     	; 0x517a <malloc+0x98>
    512c:	00 93 74 19 	sts	0x1974, r16	; 0x801974 <__flp>
    5130:	10 93 75 19 	sts	0x1975, r17	; 0x801975 <__flp+0x1>
    5134:	22 c0       	rjmp	.+68     	; 0x517a <malloc+0x98>
    5136:	21 15       	cp	r18, r1
    5138:	31 05       	cpc	r19, r1
    513a:	19 f0       	breq	.+6      	; 0x5142 <malloc+0x60>
    513c:	42 17       	cp	r20, r18
    513e:	53 07       	cpc	r21, r19
    5140:	18 f4       	brcc	.+6      	; 0x5148 <malloc+0x66>
    5142:	9a 01       	movw	r18, r20
    5144:	bd 01       	movw	r22, r26
    5146:	ef 01       	movw	r28, r30
    5148:	df 01       	movw	r26, r30
    514a:	f8 01       	movw	r30, r16
    514c:	db cf       	rjmp	.-74     	; 0x5104 <malloc+0x22>
    514e:	21 15       	cp	r18, r1
    5150:	31 05       	cpc	r19, r1
    5152:	f9 f0       	breq	.+62     	; 0x5192 <malloc+0xb0>
    5154:	28 1b       	sub	r18, r24
    5156:	39 0b       	sbc	r19, r25
    5158:	24 30       	cpi	r18, 0x04	; 4
    515a:	31 05       	cpc	r19, r1
    515c:	80 f4       	brcc	.+32     	; 0x517e <malloc+0x9c>
    515e:	8a 81       	ldd	r24, Y+2	; 0x02
    5160:	9b 81       	ldd	r25, Y+3	; 0x03
    5162:	61 15       	cp	r22, r1
    5164:	71 05       	cpc	r23, r1
    5166:	21 f0       	breq	.+8      	; 0x5170 <malloc+0x8e>
    5168:	fb 01       	movw	r30, r22
    516a:	93 83       	std	Z+3, r25	; 0x03
    516c:	82 83       	std	Z+2, r24	; 0x02
    516e:	04 c0       	rjmp	.+8      	; 0x5178 <malloc+0x96>
    5170:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <__flp+0x1>
    5174:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <__flp>
    5178:	fe 01       	movw	r30, r28
    517a:	32 96       	adiw	r30, 0x02	; 2
    517c:	44 c0       	rjmp	.+136    	; 0x5206 <malloc+0x124>
    517e:	fe 01       	movw	r30, r28
    5180:	e2 0f       	add	r30, r18
    5182:	f3 1f       	adc	r31, r19
    5184:	81 93       	st	Z+, r24
    5186:	91 93       	st	Z+, r25
    5188:	22 50       	subi	r18, 0x02	; 2
    518a:	31 09       	sbc	r19, r1
    518c:	39 83       	std	Y+1, r19	; 0x01
    518e:	28 83       	st	Y, r18
    5190:	3a c0       	rjmp	.+116    	; 0x5206 <malloc+0x124>
    5192:	20 91 72 19 	lds	r18, 0x1972	; 0x801972 <__brkval>
    5196:	30 91 73 19 	lds	r19, 0x1973	; 0x801973 <__brkval+0x1>
    519a:	23 2b       	or	r18, r19
    519c:	41 f4       	brne	.+16     	; 0x51ae <malloc+0xcc>
    519e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    51a2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    51a6:	30 93 73 19 	sts	0x1973, r19	; 0x801973 <__brkval+0x1>
    51aa:	20 93 72 19 	sts	0x1972, r18	; 0x801972 <__brkval>
    51ae:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    51b2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    51b6:	21 15       	cp	r18, r1
    51b8:	31 05       	cpc	r19, r1
    51ba:	41 f4       	brne	.+16     	; 0x51cc <malloc+0xea>
    51bc:	2d b7       	in	r18, 0x3d	; 61
    51be:	3e b7       	in	r19, 0x3e	; 62
    51c0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    51c4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    51c8:	24 1b       	sub	r18, r20
    51ca:	35 0b       	sbc	r19, r21
    51cc:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <__brkval>
    51d0:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <__brkval+0x1>
    51d4:	e2 17       	cp	r30, r18
    51d6:	f3 07       	cpc	r31, r19
    51d8:	a0 f4       	brcc	.+40     	; 0x5202 <malloc+0x120>
    51da:	2e 1b       	sub	r18, r30
    51dc:	3f 0b       	sbc	r19, r31
    51de:	28 17       	cp	r18, r24
    51e0:	39 07       	cpc	r19, r25
    51e2:	78 f0       	brcs	.+30     	; 0x5202 <malloc+0x120>
    51e4:	ac 01       	movw	r20, r24
    51e6:	4e 5f       	subi	r20, 0xFE	; 254
    51e8:	5f 4f       	sbci	r21, 0xFF	; 255
    51ea:	24 17       	cp	r18, r20
    51ec:	35 07       	cpc	r19, r21
    51ee:	48 f0       	brcs	.+18     	; 0x5202 <malloc+0x120>
    51f0:	4e 0f       	add	r20, r30
    51f2:	5f 1f       	adc	r21, r31
    51f4:	50 93 73 19 	sts	0x1973, r21	; 0x801973 <__brkval+0x1>
    51f8:	40 93 72 19 	sts	0x1972, r20	; 0x801972 <__brkval>
    51fc:	81 93       	st	Z+, r24
    51fe:	91 93       	st	Z+, r25
    5200:	02 c0       	rjmp	.+4      	; 0x5206 <malloc+0x124>
    5202:	e0 e0       	ldi	r30, 0x00	; 0
    5204:	f0 e0       	ldi	r31, 0x00	; 0
    5206:	cf 01       	movw	r24, r30
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	1f 91       	pop	r17
    520e:	0f 91       	pop	r16
    5210:	08 95       	ret

00005212 <free>:
    5212:	cf 93       	push	r28
    5214:	df 93       	push	r29
    5216:	00 97       	sbiw	r24, 0x00	; 0
    5218:	09 f4       	brne	.+2      	; 0x521c <free+0xa>
    521a:	81 c0       	rjmp	.+258    	; 0x531e <free+0x10c>
    521c:	fc 01       	movw	r30, r24
    521e:	32 97       	sbiw	r30, 0x02	; 2
    5220:	13 82       	std	Z+3, r1	; 0x03
    5222:	12 82       	std	Z+2, r1	; 0x02
    5224:	a0 91 74 19 	lds	r26, 0x1974	; 0x801974 <__flp>
    5228:	b0 91 75 19 	lds	r27, 0x1975	; 0x801975 <__flp+0x1>
    522c:	10 97       	sbiw	r26, 0x00	; 0
    522e:	81 f4       	brne	.+32     	; 0x5250 <free+0x3e>
    5230:	20 81       	ld	r18, Z
    5232:	31 81       	ldd	r19, Z+1	; 0x01
    5234:	82 0f       	add	r24, r18
    5236:	93 1f       	adc	r25, r19
    5238:	20 91 72 19 	lds	r18, 0x1972	; 0x801972 <__brkval>
    523c:	30 91 73 19 	lds	r19, 0x1973	; 0x801973 <__brkval+0x1>
    5240:	28 17       	cp	r18, r24
    5242:	39 07       	cpc	r19, r25
    5244:	51 f5       	brne	.+84     	; 0x529a <free+0x88>
    5246:	f0 93 73 19 	sts	0x1973, r31	; 0x801973 <__brkval+0x1>
    524a:	e0 93 72 19 	sts	0x1972, r30	; 0x801972 <__brkval>
    524e:	67 c0       	rjmp	.+206    	; 0x531e <free+0x10c>
    5250:	ed 01       	movw	r28, r26
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	ce 17       	cp	r28, r30
    5258:	df 07       	cpc	r29, r31
    525a:	40 f4       	brcc	.+16     	; 0x526c <free+0x5a>
    525c:	4a 81       	ldd	r20, Y+2	; 0x02
    525e:	5b 81       	ldd	r21, Y+3	; 0x03
    5260:	9e 01       	movw	r18, r28
    5262:	41 15       	cp	r20, r1
    5264:	51 05       	cpc	r21, r1
    5266:	f1 f0       	breq	.+60     	; 0x52a4 <free+0x92>
    5268:	ea 01       	movw	r28, r20
    526a:	f5 cf       	rjmp	.-22     	; 0x5256 <free+0x44>
    526c:	d3 83       	std	Z+3, r29	; 0x03
    526e:	c2 83       	std	Z+2, r28	; 0x02
    5270:	40 81       	ld	r20, Z
    5272:	51 81       	ldd	r21, Z+1	; 0x01
    5274:	84 0f       	add	r24, r20
    5276:	95 1f       	adc	r25, r21
    5278:	c8 17       	cp	r28, r24
    527a:	d9 07       	cpc	r29, r25
    527c:	59 f4       	brne	.+22     	; 0x5294 <free+0x82>
    527e:	88 81       	ld	r24, Y
    5280:	99 81       	ldd	r25, Y+1	; 0x01
    5282:	84 0f       	add	r24, r20
    5284:	95 1f       	adc	r25, r21
    5286:	02 96       	adiw	r24, 0x02	; 2
    5288:	91 83       	std	Z+1, r25	; 0x01
    528a:	80 83       	st	Z, r24
    528c:	8a 81       	ldd	r24, Y+2	; 0x02
    528e:	9b 81       	ldd	r25, Y+3	; 0x03
    5290:	93 83       	std	Z+3, r25	; 0x03
    5292:	82 83       	std	Z+2, r24	; 0x02
    5294:	21 15       	cp	r18, r1
    5296:	31 05       	cpc	r19, r1
    5298:	29 f4       	brne	.+10     	; 0x52a4 <free+0x92>
    529a:	f0 93 75 19 	sts	0x1975, r31	; 0x801975 <__flp+0x1>
    529e:	e0 93 74 19 	sts	0x1974, r30	; 0x801974 <__flp>
    52a2:	3d c0       	rjmp	.+122    	; 0x531e <free+0x10c>
    52a4:	e9 01       	movw	r28, r18
    52a6:	fb 83       	std	Y+3, r31	; 0x03
    52a8:	ea 83       	std	Y+2, r30	; 0x02
    52aa:	49 91       	ld	r20, Y+
    52ac:	59 91       	ld	r21, Y+
    52ae:	c4 0f       	add	r28, r20
    52b0:	d5 1f       	adc	r29, r21
    52b2:	ec 17       	cp	r30, r28
    52b4:	fd 07       	cpc	r31, r29
    52b6:	61 f4       	brne	.+24     	; 0x52d0 <free+0xbe>
    52b8:	80 81       	ld	r24, Z
    52ba:	91 81       	ldd	r25, Z+1	; 0x01
    52bc:	84 0f       	add	r24, r20
    52be:	95 1f       	adc	r25, r21
    52c0:	02 96       	adiw	r24, 0x02	; 2
    52c2:	e9 01       	movw	r28, r18
    52c4:	99 83       	std	Y+1, r25	; 0x01
    52c6:	88 83       	st	Y, r24
    52c8:	82 81       	ldd	r24, Z+2	; 0x02
    52ca:	93 81       	ldd	r25, Z+3	; 0x03
    52cc:	9b 83       	std	Y+3, r25	; 0x03
    52ce:	8a 83       	std	Y+2, r24	; 0x02
    52d0:	e0 e0       	ldi	r30, 0x00	; 0
    52d2:	f0 e0       	ldi	r31, 0x00	; 0
    52d4:	12 96       	adiw	r26, 0x02	; 2
    52d6:	8d 91       	ld	r24, X+
    52d8:	9c 91       	ld	r25, X
    52da:	13 97       	sbiw	r26, 0x03	; 3
    52dc:	00 97       	sbiw	r24, 0x00	; 0
    52de:	19 f0       	breq	.+6      	; 0x52e6 <free+0xd4>
    52e0:	fd 01       	movw	r30, r26
    52e2:	dc 01       	movw	r26, r24
    52e4:	f7 cf       	rjmp	.-18     	; 0x52d4 <free+0xc2>
    52e6:	8d 91       	ld	r24, X+
    52e8:	9c 91       	ld	r25, X
    52ea:	11 97       	sbiw	r26, 0x01	; 1
    52ec:	9d 01       	movw	r18, r26
    52ee:	2e 5f       	subi	r18, 0xFE	; 254
    52f0:	3f 4f       	sbci	r19, 0xFF	; 255
    52f2:	82 0f       	add	r24, r18
    52f4:	93 1f       	adc	r25, r19
    52f6:	20 91 72 19 	lds	r18, 0x1972	; 0x801972 <__brkval>
    52fa:	30 91 73 19 	lds	r19, 0x1973	; 0x801973 <__brkval+0x1>
    52fe:	28 17       	cp	r18, r24
    5300:	39 07       	cpc	r19, r25
    5302:	69 f4       	brne	.+26     	; 0x531e <free+0x10c>
    5304:	30 97       	sbiw	r30, 0x00	; 0
    5306:	29 f4       	brne	.+10     	; 0x5312 <free+0x100>
    5308:	10 92 75 19 	sts	0x1975, r1	; 0x801975 <__flp+0x1>
    530c:	10 92 74 19 	sts	0x1974, r1	; 0x801974 <__flp>
    5310:	02 c0       	rjmp	.+4      	; 0x5316 <free+0x104>
    5312:	13 82       	std	Z+3, r1	; 0x03
    5314:	12 82       	std	Z+2, r1	; 0x02
    5316:	b0 93 73 19 	sts	0x1973, r27	; 0x801973 <__brkval+0x1>
    531a:	a0 93 72 19 	sts	0x1972, r26	; 0x801972 <__brkval>
    531e:	df 91       	pop	r29
    5320:	cf 91       	pop	r28
    5322:	08 95       	ret

00005324 <abort>:
    5324:	81 e0       	ldi	r24, 0x01	; 1
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	f8 94       	cli
    532a:	7d c3       	rjmp	.+1786   	; 0x5a26 <_exit>

0000532c <memcpy>:
    532c:	fb 01       	movw	r30, r22
    532e:	dc 01       	movw	r26, r24
    5330:	02 c0       	rjmp	.+4      	; 0x5336 <memcpy+0xa>
    5332:	01 90       	ld	r0, Z+
    5334:	0d 92       	st	X+, r0
    5336:	41 50       	subi	r20, 0x01	; 1
    5338:	50 40       	sbci	r21, 0x00	; 0
    533a:	d8 f7       	brcc	.-10     	; 0x5332 <memcpy+0x6>
    533c:	08 95       	ret

0000533e <memset>:
    533e:	dc 01       	movw	r26, r24
    5340:	01 c0       	rjmp	.+2      	; 0x5344 <memset+0x6>
    5342:	6d 93       	st	X+, r22
    5344:	41 50       	subi	r20, 0x01	; 1
    5346:	50 40       	sbci	r21, 0x00	; 0
    5348:	e0 f7       	brcc	.-8      	; 0x5342 <memset+0x4>
    534a:	08 95       	ret

0000534c <strcasestr>:
    534c:	fb 01       	movw	r30, r22
    534e:	51 91       	ld	r21, Z+
    5350:	55 23       	and	r21, r21
    5352:	b1 f0       	breq	.+44     	; 0x5380 <strcasestr+0x34>
    5354:	bf 01       	movw	r22, r30
    5356:	dc 01       	movw	r26, r24
    5358:	05 2e       	mov	r0, r21
    535a:	4d 91       	ld	r20, X+
    535c:	44 23       	and	r20, r20
    535e:	69 f0       	breq	.+26     	; 0x537a <strcasestr+0x2e>
    5360:	10 d0       	rcall	.+32     	; 0x5382 <strcasestr+0x36>
    5362:	d9 f7       	brne	.-10     	; 0x535a <strcasestr+0xe>
    5364:	cd 01       	movw	r24, r26
    5366:	01 90       	ld	r0, Z+
    5368:	00 20       	and	r0, r0
    536a:	49 f0       	breq	.+18     	; 0x537e <strcasestr+0x32>
    536c:	4d 91       	ld	r20, X+
    536e:	41 11       	cpse	r20, r1
    5370:	08 d0       	rcall	.+16     	; 0x5382 <strcasestr+0x36>
    5372:	c9 f3       	breq	.-14     	; 0x5366 <strcasestr+0x1a>
    5374:	fb 01       	movw	r30, r22
    5376:	41 11       	cpse	r20, r1
    5378:	ee cf       	rjmp	.-36     	; 0x5356 <strcasestr+0xa>
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	08 95       	ret
    5382:	40 25       	eor	r20, r0
    5384:	39 f0       	breq	.+14     	; 0x5394 <strcasestr+0x48>
    5386:	40 32       	cpi	r20, 0x20	; 32
    5388:	29 f4       	brne	.+10     	; 0x5394 <strcasestr+0x48>
    538a:	40 29       	or	r20, r0
    538c:	4b 57       	subi	r20, 0x7B	; 123
    538e:	46 5e       	subi	r20, 0xE6	; 230
    5390:	08 f0       	brcs	.+2      	; 0x5394 <strcasestr+0x48>
    5392:	18 94       	sez
    5394:	08 95       	ret

00005396 <strcat>:
    5396:	fb 01       	movw	r30, r22
    5398:	dc 01       	movw	r26, r24
    539a:	0d 90       	ld	r0, X+
    539c:	00 20       	and	r0, r0
    539e:	e9 f7       	brne	.-6      	; 0x539a <strcat+0x4>
    53a0:	11 97       	sbiw	r26, 0x01	; 1
    53a2:	01 90       	ld	r0, Z+
    53a4:	0d 92       	st	X+, r0
    53a6:	00 20       	and	r0, r0
    53a8:	e1 f7       	brne	.-8      	; 0x53a2 <strcat+0xc>
    53aa:	08 95       	ret

000053ac <strcpy>:
    53ac:	fb 01       	movw	r30, r22
    53ae:	dc 01       	movw	r26, r24
    53b0:	01 90       	ld	r0, Z+
    53b2:	0d 92       	st	X+, r0
    53b4:	00 20       	and	r0, r0
    53b6:	e1 f7       	brne	.-8      	; 0x53b0 <strcpy+0x4>
    53b8:	08 95       	ret

000053ba <strncasecmp>:
    53ba:	fb 01       	movw	r30, r22
    53bc:	dc 01       	movw	r26, r24
    53be:	41 50       	subi	r20, 0x01	; 1
    53c0:	50 40       	sbci	r21, 0x00	; 0
    53c2:	88 f0       	brcs	.+34     	; 0x53e6 <strncasecmp+0x2c>
    53c4:	8d 91       	ld	r24, X+
    53c6:	81 34       	cpi	r24, 0x41	; 65
    53c8:	1c f0       	brlt	.+6      	; 0x53d0 <strncasecmp+0x16>
    53ca:	8b 35       	cpi	r24, 0x5B	; 91
    53cc:	0c f4       	brge	.+2      	; 0x53d0 <strncasecmp+0x16>
    53ce:	80 5e       	subi	r24, 0xE0	; 224
    53d0:	61 91       	ld	r22, Z+
    53d2:	61 34       	cpi	r22, 0x41	; 65
    53d4:	1c f0       	brlt	.+6      	; 0x53dc <strncasecmp+0x22>
    53d6:	6b 35       	cpi	r22, 0x5B	; 91
    53d8:	0c f4       	brge	.+2      	; 0x53dc <strncasecmp+0x22>
    53da:	60 5e       	subi	r22, 0xE0	; 224
    53dc:	86 1b       	sub	r24, r22
    53de:	61 11       	cpse	r22, r1
    53e0:	71 f3       	breq	.-36     	; 0x53be <strncasecmp+0x4>
    53e2:	99 0b       	sbc	r25, r25
    53e4:	08 95       	ret
    53e6:	88 1b       	sub	r24, r24
    53e8:	fc cf       	rjmp	.-8      	; 0x53e2 <strncasecmp+0x28>

000053ea <printf>:
    53ea:	cf 93       	push	r28
    53ec:	df 93       	push	r29
    53ee:	cd b7       	in	r28, 0x3d	; 61
    53f0:	de b7       	in	r29, 0x3e	; 62
    53f2:	ae 01       	movw	r20, r28
    53f4:	4a 5f       	subi	r20, 0xFA	; 250
    53f6:	5f 4f       	sbci	r21, 0xFF	; 255
    53f8:	fa 01       	movw	r30, r20
    53fa:	61 91       	ld	r22, Z+
    53fc:	71 91       	ld	r23, Z+
    53fe:	af 01       	movw	r20, r30
    5400:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <__iob+0x2>
    5404:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <__iob+0x3>
    5408:	61 d0       	rcall	.+194    	; 0x54cc <vfprintf>
    540a:	df 91       	pop	r29
    540c:	cf 91       	pop	r28
    540e:	08 95       	ret

00005410 <puts>:
    5410:	0f 93       	push	r16
    5412:	1f 93       	push	r17
    5414:	cf 93       	push	r28
    5416:	df 93       	push	r29
    5418:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <__iob+0x2>
    541c:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <__iob+0x3>
    5420:	23 81       	ldd	r18, Z+3	; 0x03
    5422:	21 ff       	sbrs	r18, 1
    5424:	1b c0       	rjmp	.+54     	; 0x545c <puts+0x4c>
    5426:	8c 01       	movw	r16, r24
    5428:	d0 e0       	ldi	r29, 0x00	; 0
    542a:	c0 e0       	ldi	r28, 0x00	; 0
    542c:	f8 01       	movw	r30, r16
    542e:	81 91       	ld	r24, Z+
    5430:	8f 01       	movw	r16, r30
    5432:	60 91 78 19 	lds	r22, 0x1978	; 0x801978 <__iob+0x2>
    5436:	70 91 79 19 	lds	r23, 0x1979	; 0x801979 <__iob+0x3>
    543a:	db 01       	movw	r26, r22
    543c:	18 96       	adiw	r26, 0x08	; 8
    543e:	ed 91       	ld	r30, X+
    5440:	fc 91       	ld	r31, X
    5442:	19 97       	sbiw	r26, 0x09	; 9
    5444:	88 23       	and	r24, r24
    5446:	31 f0       	breq	.+12     	; 0x5454 <puts+0x44>
    5448:	19 95       	eicall
    544a:	89 2b       	or	r24, r25
    544c:	79 f3       	breq	.-34     	; 0x542c <puts+0x1c>
    544e:	df ef       	ldi	r29, 0xFF	; 255
    5450:	cf ef       	ldi	r28, 0xFF	; 255
    5452:	ec cf       	rjmp	.-40     	; 0x542c <puts+0x1c>
    5454:	8a e0       	ldi	r24, 0x0A	; 10
    5456:	19 95       	eicall
    5458:	89 2b       	or	r24, r25
    545a:	19 f0       	breq	.+6      	; 0x5462 <puts+0x52>
    545c:	8f ef       	ldi	r24, 0xFF	; 255
    545e:	9f ef       	ldi	r25, 0xFF	; 255
    5460:	02 c0       	rjmp	.+4      	; 0x5466 <puts+0x56>
    5462:	8d 2f       	mov	r24, r29
    5464:	9c 2f       	mov	r25, r28
    5466:	df 91       	pop	r29
    5468:	cf 91       	pop	r28
    546a:	1f 91       	pop	r17
    546c:	0f 91       	pop	r16
    546e:	08 95       	ret

00005470 <sprintf>:
    5470:	0f 93       	push	r16
    5472:	1f 93       	push	r17
    5474:	cf 93       	push	r28
    5476:	df 93       	push	r29
    5478:	cd b7       	in	r28, 0x3d	; 61
    547a:	de b7       	in	r29, 0x3e	; 62
    547c:	2e 97       	sbiw	r28, 0x0e	; 14
    547e:	0f b6       	in	r0, 0x3f	; 63
    5480:	f8 94       	cli
    5482:	de bf       	out	0x3e, r29	; 62
    5484:	0f be       	out	0x3f, r0	; 63
    5486:	cd bf       	out	0x3d, r28	; 61
    5488:	0e 89       	ldd	r16, Y+22	; 0x16
    548a:	1f 89       	ldd	r17, Y+23	; 0x17
    548c:	86 e0       	ldi	r24, 0x06	; 6
    548e:	8c 83       	std	Y+4, r24	; 0x04
    5490:	1a 83       	std	Y+2, r17	; 0x02
    5492:	09 83       	std	Y+1, r16	; 0x01
    5494:	8f ef       	ldi	r24, 0xFF	; 255
    5496:	9f e7       	ldi	r25, 0x7F	; 127
    5498:	9e 83       	std	Y+6, r25	; 0x06
    549a:	8d 83       	std	Y+5, r24	; 0x05
    549c:	ae 01       	movw	r20, r28
    549e:	46 5e       	subi	r20, 0xE6	; 230
    54a0:	5f 4f       	sbci	r21, 0xFF	; 255
    54a2:	68 8d       	ldd	r22, Y+24	; 0x18
    54a4:	79 8d       	ldd	r23, Y+25	; 0x19
    54a6:	ce 01       	movw	r24, r28
    54a8:	01 96       	adiw	r24, 0x01	; 1
    54aa:	10 d0       	rcall	.+32     	; 0x54cc <vfprintf>
    54ac:	ef 81       	ldd	r30, Y+7	; 0x07
    54ae:	f8 85       	ldd	r31, Y+8	; 0x08
    54b0:	e0 0f       	add	r30, r16
    54b2:	f1 1f       	adc	r31, r17
    54b4:	10 82       	st	Z, r1
    54b6:	2e 96       	adiw	r28, 0x0e	; 14
    54b8:	0f b6       	in	r0, 0x3f	; 63
    54ba:	f8 94       	cli
    54bc:	de bf       	out	0x3e, r29	; 62
    54be:	0f be       	out	0x3f, r0	; 63
    54c0:	cd bf       	out	0x3d, r28	; 61
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	1f 91       	pop	r17
    54c8:	0f 91       	pop	r16
    54ca:	08 95       	ret

000054cc <vfprintf>:
    54cc:	2f 92       	push	r2
    54ce:	3f 92       	push	r3
    54d0:	4f 92       	push	r4
    54d2:	5f 92       	push	r5
    54d4:	6f 92       	push	r6
    54d6:	7f 92       	push	r7
    54d8:	8f 92       	push	r8
    54da:	9f 92       	push	r9
    54dc:	af 92       	push	r10
    54de:	bf 92       	push	r11
    54e0:	cf 92       	push	r12
    54e2:	df 92       	push	r13
    54e4:	ef 92       	push	r14
    54e6:	ff 92       	push	r15
    54e8:	0f 93       	push	r16
    54ea:	1f 93       	push	r17
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
    54f0:	cd b7       	in	r28, 0x3d	; 61
    54f2:	de b7       	in	r29, 0x3e	; 62
    54f4:	2b 97       	sbiw	r28, 0x0b	; 11
    54f6:	0f b6       	in	r0, 0x3f	; 63
    54f8:	f8 94       	cli
    54fa:	de bf       	out	0x3e, r29	; 62
    54fc:	0f be       	out	0x3f, r0	; 63
    54fe:	cd bf       	out	0x3d, r28	; 61
    5500:	6c 01       	movw	r12, r24
    5502:	7b 01       	movw	r14, r22
    5504:	8a 01       	movw	r16, r20
    5506:	fc 01       	movw	r30, r24
    5508:	17 82       	std	Z+7, r1	; 0x07
    550a:	16 82       	std	Z+6, r1	; 0x06
    550c:	83 81       	ldd	r24, Z+3	; 0x03
    550e:	81 ff       	sbrs	r24, 1
    5510:	bf c1       	rjmp	.+894    	; 0x5890 <vfprintf+0x3c4>
    5512:	ce 01       	movw	r24, r28
    5514:	01 96       	adiw	r24, 0x01	; 1
    5516:	3c 01       	movw	r6, r24
    5518:	f6 01       	movw	r30, r12
    551a:	93 81       	ldd	r25, Z+3	; 0x03
    551c:	f7 01       	movw	r30, r14
    551e:	93 fd       	sbrc	r25, 3
    5520:	85 91       	lpm	r24, Z+
    5522:	93 ff       	sbrs	r25, 3
    5524:	81 91       	ld	r24, Z+
    5526:	7f 01       	movw	r14, r30
    5528:	88 23       	and	r24, r24
    552a:	09 f4       	brne	.+2      	; 0x552e <vfprintf+0x62>
    552c:	ad c1       	rjmp	.+858    	; 0x5888 <vfprintf+0x3bc>
    552e:	85 32       	cpi	r24, 0x25	; 37
    5530:	39 f4       	brne	.+14     	; 0x5540 <vfprintf+0x74>
    5532:	93 fd       	sbrc	r25, 3
    5534:	85 91       	lpm	r24, Z+
    5536:	93 ff       	sbrs	r25, 3
    5538:	81 91       	ld	r24, Z+
    553a:	7f 01       	movw	r14, r30
    553c:	85 32       	cpi	r24, 0x25	; 37
    553e:	21 f4       	brne	.+8      	; 0x5548 <vfprintf+0x7c>
    5540:	b6 01       	movw	r22, r12
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	d6 d1       	rcall	.+940    	; 0x58f2 <fputc>
    5546:	e8 cf       	rjmp	.-48     	; 0x5518 <vfprintf+0x4c>
    5548:	91 2c       	mov	r9, r1
    554a:	21 2c       	mov	r2, r1
    554c:	31 2c       	mov	r3, r1
    554e:	ff e1       	ldi	r31, 0x1F	; 31
    5550:	f3 15       	cp	r31, r3
    5552:	d8 f0       	brcs	.+54     	; 0x558a <vfprintf+0xbe>
    5554:	8b 32       	cpi	r24, 0x2B	; 43
    5556:	79 f0       	breq	.+30     	; 0x5576 <vfprintf+0xaa>
    5558:	38 f4       	brcc	.+14     	; 0x5568 <vfprintf+0x9c>
    555a:	80 32       	cpi	r24, 0x20	; 32
    555c:	79 f0       	breq	.+30     	; 0x557c <vfprintf+0xb0>
    555e:	83 32       	cpi	r24, 0x23	; 35
    5560:	a1 f4       	brne	.+40     	; 0x558a <vfprintf+0xbe>
    5562:	23 2d       	mov	r18, r3
    5564:	20 61       	ori	r18, 0x10	; 16
    5566:	1d c0       	rjmp	.+58     	; 0x55a2 <vfprintf+0xd6>
    5568:	8d 32       	cpi	r24, 0x2D	; 45
    556a:	61 f0       	breq	.+24     	; 0x5584 <vfprintf+0xb8>
    556c:	80 33       	cpi	r24, 0x30	; 48
    556e:	69 f4       	brne	.+26     	; 0x558a <vfprintf+0xbe>
    5570:	23 2d       	mov	r18, r3
    5572:	21 60       	ori	r18, 0x01	; 1
    5574:	16 c0       	rjmp	.+44     	; 0x55a2 <vfprintf+0xd6>
    5576:	83 2d       	mov	r24, r3
    5578:	82 60       	ori	r24, 0x02	; 2
    557a:	38 2e       	mov	r3, r24
    557c:	e3 2d       	mov	r30, r3
    557e:	e4 60       	ori	r30, 0x04	; 4
    5580:	3e 2e       	mov	r3, r30
    5582:	2a c0       	rjmp	.+84     	; 0x55d8 <vfprintf+0x10c>
    5584:	f3 2d       	mov	r31, r3
    5586:	f8 60       	ori	r31, 0x08	; 8
    5588:	1d c0       	rjmp	.+58     	; 0x55c4 <vfprintf+0xf8>
    558a:	37 fc       	sbrc	r3, 7
    558c:	2d c0       	rjmp	.+90     	; 0x55e8 <vfprintf+0x11c>
    558e:	20 ed       	ldi	r18, 0xD0	; 208
    5590:	28 0f       	add	r18, r24
    5592:	2a 30       	cpi	r18, 0x0A	; 10
    5594:	40 f0       	brcs	.+16     	; 0x55a6 <vfprintf+0xda>
    5596:	8e 32       	cpi	r24, 0x2E	; 46
    5598:	b9 f4       	brne	.+46     	; 0x55c8 <vfprintf+0xfc>
    559a:	36 fc       	sbrc	r3, 6
    559c:	75 c1       	rjmp	.+746    	; 0x5888 <vfprintf+0x3bc>
    559e:	23 2d       	mov	r18, r3
    55a0:	20 64       	ori	r18, 0x40	; 64
    55a2:	32 2e       	mov	r3, r18
    55a4:	19 c0       	rjmp	.+50     	; 0x55d8 <vfprintf+0x10c>
    55a6:	36 fe       	sbrs	r3, 6
    55a8:	06 c0       	rjmp	.+12     	; 0x55b6 <vfprintf+0xea>
    55aa:	8a e0       	ldi	r24, 0x0A	; 10
    55ac:	98 9e       	mul	r9, r24
    55ae:	20 0d       	add	r18, r0
    55b0:	11 24       	eor	r1, r1
    55b2:	92 2e       	mov	r9, r18
    55b4:	11 c0       	rjmp	.+34     	; 0x55d8 <vfprintf+0x10c>
    55b6:	ea e0       	ldi	r30, 0x0A	; 10
    55b8:	2e 9e       	mul	r2, r30
    55ba:	20 0d       	add	r18, r0
    55bc:	11 24       	eor	r1, r1
    55be:	22 2e       	mov	r2, r18
    55c0:	f3 2d       	mov	r31, r3
    55c2:	f0 62       	ori	r31, 0x20	; 32
    55c4:	3f 2e       	mov	r3, r31
    55c6:	08 c0       	rjmp	.+16     	; 0x55d8 <vfprintf+0x10c>
    55c8:	8c 36       	cpi	r24, 0x6C	; 108
    55ca:	21 f4       	brne	.+8      	; 0x55d4 <vfprintf+0x108>
    55cc:	83 2d       	mov	r24, r3
    55ce:	80 68       	ori	r24, 0x80	; 128
    55d0:	38 2e       	mov	r3, r24
    55d2:	02 c0       	rjmp	.+4      	; 0x55d8 <vfprintf+0x10c>
    55d4:	88 36       	cpi	r24, 0x68	; 104
    55d6:	41 f4       	brne	.+16     	; 0x55e8 <vfprintf+0x11c>
    55d8:	f7 01       	movw	r30, r14
    55da:	93 fd       	sbrc	r25, 3
    55dc:	85 91       	lpm	r24, Z+
    55de:	93 ff       	sbrs	r25, 3
    55e0:	81 91       	ld	r24, Z+
    55e2:	7f 01       	movw	r14, r30
    55e4:	81 11       	cpse	r24, r1
    55e6:	b3 cf       	rjmp	.-154    	; 0x554e <vfprintf+0x82>
    55e8:	98 2f       	mov	r25, r24
    55ea:	9f 7d       	andi	r25, 0xDF	; 223
    55ec:	95 54       	subi	r25, 0x45	; 69
    55ee:	93 30       	cpi	r25, 0x03	; 3
    55f0:	28 f4       	brcc	.+10     	; 0x55fc <vfprintf+0x130>
    55f2:	0c 5f       	subi	r16, 0xFC	; 252
    55f4:	1f 4f       	sbci	r17, 0xFF	; 255
    55f6:	9f e3       	ldi	r25, 0x3F	; 63
    55f8:	99 83       	std	Y+1, r25	; 0x01
    55fa:	0d c0       	rjmp	.+26     	; 0x5616 <vfprintf+0x14a>
    55fc:	83 36       	cpi	r24, 0x63	; 99
    55fe:	31 f0       	breq	.+12     	; 0x560c <vfprintf+0x140>
    5600:	83 37       	cpi	r24, 0x73	; 115
    5602:	71 f0       	breq	.+28     	; 0x5620 <vfprintf+0x154>
    5604:	83 35       	cpi	r24, 0x53	; 83
    5606:	09 f0       	breq	.+2      	; 0x560a <vfprintf+0x13e>
    5608:	55 c0       	rjmp	.+170    	; 0x56b4 <vfprintf+0x1e8>
    560a:	20 c0       	rjmp	.+64     	; 0x564c <vfprintf+0x180>
    560c:	f8 01       	movw	r30, r16
    560e:	80 81       	ld	r24, Z
    5610:	89 83       	std	Y+1, r24	; 0x01
    5612:	0e 5f       	subi	r16, 0xFE	; 254
    5614:	1f 4f       	sbci	r17, 0xFF	; 255
    5616:	88 24       	eor	r8, r8
    5618:	83 94       	inc	r8
    561a:	91 2c       	mov	r9, r1
    561c:	53 01       	movw	r10, r6
    561e:	12 c0       	rjmp	.+36     	; 0x5644 <vfprintf+0x178>
    5620:	28 01       	movw	r4, r16
    5622:	f2 e0       	ldi	r31, 0x02	; 2
    5624:	4f 0e       	add	r4, r31
    5626:	51 1c       	adc	r5, r1
    5628:	f8 01       	movw	r30, r16
    562a:	a0 80       	ld	r10, Z
    562c:	b1 80       	ldd	r11, Z+1	; 0x01
    562e:	36 fe       	sbrs	r3, 6
    5630:	03 c0       	rjmp	.+6      	; 0x5638 <vfprintf+0x16c>
    5632:	69 2d       	mov	r22, r9
    5634:	70 e0       	ldi	r23, 0x00	; 0
    5636:	02 c0       	rjmp	.+4      	; 0x563c <vfprintf+0x170>
    5638:	6f ef       	ldi	r22, 0xFF	; 255
    563a:	7f ef       	ldi	r23, 0xFF	; 255
    563c:	c5 01       	movw	r24, r10
    563e:	4e d1       	rcall	.+668    	; 0x58dc <strnlen>
    5640:	4c 01       	movw	r8, r24
    5642:	82 01       	movw	r16, r4
    5644:	f3 2d       	mov	r31, r3
    5646:	ff 77       	andi	r31, 0x7F	; 127
    5648:	3f 2e       	mov	r3, r31
    564a:	15 c0       	rjmp	.+42     	; 0x5676 <vfprintf+0x1aa>
    564c:	28 01       	movw	r4, r16
    564e:	22 e0       	ldi	r18, 0x02	; 2
    5650:	42 0e       	add	r4, r18
    5652:	51 1c       	adc	r5, r1
    5654:	f8 01       	movw	r30, r16
    5656:	a0 80       	ld	r10, Z
    5658:	b1 80       	ldd	r11, Z+1	; 0x01
    565a:	36 fe       	sbrs	r3, 6
    565c:	03 c0       	rjmp	.+6      	; 0x5664 <vfprintf+0x198>
    565e:	69 2d       	mov	r22, r9
    5660:	70 e0       	ldi	r23, 0x00	; 0
    5662:	02 c0       	rjmp	.+4      	; 0x5668 <vfprintf+0x19c>
    5664:	6f ef       	ldi	r22, 0xFF	; 255
    5666:	7f ef       	ldi	r23, 0xFF	; 255
    5668:	c5 01       	movw	r24, r10
    566a:	2d d1       	rcall	.+602    	; 0x58c6 <strnlen_P>
    566c:	4c 01       	movw	r8, r24
    566e:	f3 2d       	mov	r31, r3
    5670:	f0 68       	ori	r31, 0x80	; 128
    5672:	3f 2e       	mov	r3, r31
    5674:	82 01       	movw	r16, r4
    5676:	33 fc       	sbrc	r3, 3
    5678:	19 c0       	rjmp	.+50     	; 0x56ac <vfprintf+0x1e0>
    567a:	82 2d       	mov	r24, r2
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	88 16       	cp	r8, r24
    5680:	99 06       	cpc	r9, r25
    5682:	a0 f4       	brcc	.+40     	; 0x56ac <vfprintf+0x1e0>
    5684:	b6 01       	movw	r22, r12
    5686:	80 e2       	ldi	r24, 0x20	; 32
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	33 d1       	rcall	.+614    	; 0x58f2 <fputc>
    568c:	2a 94       	dec	r2
    568e:	f5 cf       	rjmp	.-22     	; 0x567a <vfprintf+0x1ae>
    5690:	f5 01       	movw	r30, r10
    5692:	37 fc       	sbrc	r3, 7
    5694:	85 91       	lpm	r24, Z+
    5696:	37 fe       	sbrs	r3, 7
    5698:	81 91       	ld	r24, Z+
    569a:	5f 01       	movw	r10, r30
    569c:	b6 01       	movw	r22, r12
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	28 d1       	rcall	.+592    	; 0x58f2 <fputc>
    56a2:	21 10       	cpse	r2, r1
    56a4:	2a 94       	dec	r2
    56a6:	21 e0       	ldi	r18, 0x01	; 1
    56a8:	82 1a       	sub	r8, r18
    56aa:	91 08       	sbc	r9, r1
    56ac:	81 14       	cp	r8, r1
    56ae:	91 04       	cpc	r9, r1
    56b0:	79 f7       	brne	.-34     	; 0x5690 <vfprintf+0x1c4>
    56b2:	e1 c0       	rjmp	.+450    	; 0x5876 <vfprintf+0x3aa>
    56b4:	84 36       	cpi	r24, 0x64	; 100
    56b6:	11 f0       	breq	.+4      	; 0x56bc <vfprintf+0x1f0>
    56b8:	89 36       	cpi	r24, 0x69	; 105
    56ba:	39 f5       	brne	.+78     	; 0x570a <vfprintf+0x23e>
    56bc:	f8 01       	movw	r30, r16
    56be:	37 fe       	sbrs	r3, 7
    56c0:	07 c0       	rjmp	.+14     	; 0x56d0 <vfprintf+0x204>
    56c2:	60 81       	ld	r22, Z
    56c4:	71 81       	ldd	r23, Z+1	; 0x01
    56c6:	82 81       	ldd	r24, Z+2	; 0x02
    56c8:	93 81       	ldd	r25, Z+3	; 0x03
    56ca:	0c 5f       	subi	r16, 0xFC	; 252
    56cc:	1f 4f       	sbci	r17, 0xFF	; 255
    56ce:	08 c0       	rjmp	.+16     	; 0x56e0 <vfprintf+0x214>
    56d0:	60 81       	ld	r22, Z
    56d2:	71 81       	ldd	r23, Z+1	; 0x01
    56d4:	07 2e       	mov	r0, r23
    56d6:	00 0c       	add	r0, r0
    56d8:	88 0b       	sbc	r24, r24
    56da:	99 0b       	sbc	r25, r25
    56dc:	0e 5f       	subi	r16, 0xFE	; 254
    56de:	1f 4f       	sbci	r17, 0xFF	; 255
    56e0:	f3 2d       	mov	r31, r3
    56e2:	ff 76       	andi	r31, 0x6F	; 111
    56e4:	3f 2e       	mov	r3, r31
    56e6:	97 ff       	sbrs	r25, 7
    56e8:	09 c0       	rjmp	.+18     	; 0x56fc <vfprintf+0x230>
    56ea:	90 95       	com	r25
    56ec:	80 95       	com	r24
    56ee:	70 95       	com	r23
    56f0:	61 95       	neg	r22
    56f2:	7f 4f       	sbci	r23, 0xFF	; 255
    56f4:	8f 4f       	sbci	r24, 0xFF	; 255
    56f6:	9f 4f       	sbci	r25, 0xFF	; 255
    56f8:	f0 68       	ori	r31, 0x80	; 128
    56fa:	3f 2e       	mov	r3, r31
    56fc:	2a e0       	ldi	r18, 0x0A	; 10
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	a3 01       	movw	r20, r6
    5702:	33 d1       	rcall	.+614    	; 0x596a <__ultoa_invert>
    5704:	88 2e       	mov	r8, r24
    5706:	86 18       	sub	r8, r6
    5708:	44 c0       	rjmp	.+136    	; 0x5792 <vfprintf+0x2c6>
    570a:	85 37       	cpi	r24, 0x75	; 117
    570c:	31 f4       	brne	.+12     	; 0x571a <vfprintf+0x24e>
    570e:	23 2d       	mov	r18, r3
    5710:	2f 7e       	andi	r18, 0xEF	; 239
    5712:	b2 2e       	mov	r11, r18
    5714:	2a e0       	ldi	r18, 0x0A	; 10
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	25 c0       	rjmp	.+74     	; 0x5764 <vfprintf+0x298>
    571a:	93 2d       	mov	r25, r3
    571c:	99 7f       	andi	r25, 0xF9	; 249
    571e:	b9 2e       	mov	r11, r25
    5720:	8f 36       	cpi	r24, 0x6F	; 111
    5722:	c1 f0       	breq	.+48     	; 0x5754 <vfprintf+0x288>
    5724:	18 f4       	brcc	.+6      	; 0x572c <vfprintf+0x260>
    5726:	88 35       	cpi	r24, 0x58	; 88
    5728:	79 f0       	breq	.+30     	; 0x5748 <vfprintf+0x27c>
    572a:	ae c0       	rjmp	.+348    	; 0x5888 <vfprintf+0x3bc>
    572c:	80 37       	cpi	r24, 0x70	; 112
    572e:	19 f0       	breq	.+6      	; 0x5736 <vfprintf+0x26a>
    5730:	88 37       	cpi	r24, 0x78	; 120
    5732:	21 f0       	breq	.+8      	; 0x573c <vfprintf+0x270>
    5734:	a9 c0       	rjmp	.+338    	; 0x5888 <vfprintf+0x3bc>
    5736:	e9 2f       	mov	r30, r25
    5738:	e0 61       	ori	r30, 0x10	; 16
    573a:	be 2e       	mov	r11, r30
    573c:	b4 fe       	sbrs	r11, 4
    573e:	0d c0       	rjmp	.+26     	; 0x575a <vfprintf+0x28e>
    5740:	fb 2d       	mov	r31, r11
    5742:	f4 60       	ori	r31, 0x04	; 4
    5744:	bf 2e       	mov	r11, r31
    5746:	09 c0       	rjmp	.+18     	; 0x575a <vfprintf+0x28e>
    5748:	34 fe       	sbrs	r3, 4
    574a:	0a c0       	rjmp	.+20     	; 0x5760 <vfprintf+0x294>
    574c:	29 2f       	mov	r18, r25
    574e:	26 60       	ori	r18, 0x06	; 6
    5750:	b2 2e       	mov	r11, r18
    5752:	06 c0       	rjmp	.+12     	; 0x5760 <vfprintf+0x294>
    5754:	28 e0       	ldi	r18, 0x08	; 8
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	05 c0       	rjmp	.+10     	; 0x5764 <vfprintf+0x298>
    575a:	20 e1       	ldi	r18, 0x10	; 16
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	02 c0       	rjmp	.+4      	; 0x5764 <vfprintf+0x298>
    5760:	20 e1       	ldi	r18, 0x10	; 16
    5762:	32 e0       	ldi	r19, 0x02	; 2
    5764:	f8 01       	movw	r30, r16
    5766:	b7 fe       	sbrs	r11, 7
    5768:	07 c0       	rjmp	.+14     	; 0x5778 <vfprintf+0x2ac>
    576a:	60 81       	ld	r22, Z
    576c:	71 81       	ldd	r23, Z+1	; 0x01
    576e:	82 81       	ldd	r24, Z+2	; 0x02
    5770:	93 81       	ldd	r25, Z+3	; 0x03
    5772:	0c 5f       	subi	r16, 0xFC	; 252
    5774:	1f 4f       	sbci	r17, 0xFF	; 255
    5776:	06 c0       	rjmp	.+12     	; 0x5784 <vfprintf+0x2b8>
    5778:	60 81       	ld	r22, Z
    577a:	71 81       	ldd	r23, Z+1	; 0x01
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	0e 5f       	subi	r16, 0xFE	; 254
    5782:	1f 4f       	sbci	r17, 0xFF	; 255
    5784:	a3 01       	movw	r20, r6
    5786:	f1 d0       	rcall	.+482    	; 0x596a <__ultoa_invert>
    5788:	88 2e       	mov	r8, r24
    578a:	86 18       	sub	r8, r6
    578c:	fb 2d       	mov	r31, r11
    578e:	ff 77       	andi	r31, 0x7F	; 127
    5790:	3f 2e       	mov	r3, r31
    5792:	36 fe       	sbrs	r3, 6
    5794:	0d c0       	rjmp	.+26     	; 0x57b0 <vfprintf+0x2e4>
    5796:	23 2d       	mov	r18, r3
    5798:	2e 7f       	andi	r18, 0xFE	; 254
    579a:	a2 2e       	mov	r10, r18
    579c:	89 14       	cp	r8, r9
    579e:	58 f4       	brcc	.+22     	; 0x57b6 <vfprintf+0x2ea>
    57a0:	34 fe       	sbrs	r3, 4
    57a2:	0b c0       	rjmp	.+22     	; 0x57ba <vfprintf+0x2ee>
    57a4:	32 fc       	sbrc	r3, 2
    57a6:	09 c0       	rjmp	.+18     	; 0x57ba <vfprintf+0x2ee>
    57a8:	83 2d       	mov	r24, r3
    57aa:	8e 7e       	andi	r24, 0xEE	; 238
    57ac:	a8 2e       	mov	r10, r24
    57ae:	05 c0       	rjmp	.+10     	; 0x57ba <vfprintf+0x2ee>
    57b0:	b8 2c       	mov	r11, r8
    57b2:	a3 2c       	mov	r10, r3
    57b4:	03 c0       	rjmp	.+6      	; 0x57bc <vfprintf+0x2f0>
    57b6:	b8 2c       	mov	r11, r8
    57b8:	01 c0       	rjmp	.+2      	; 0x57bc <vfprintf+0x2f0>
    57ba:	b9 2c       	mov	r11, r9
    57bc:	a4 fe       	sbrs	r10, 4
    57be:	0f c0       	rjmp	.+30     	; 0x57de <vfprintf+0x312>
    57c0:	fe 01       	movw	r30, r28
    57c2:	e8 0d       	add	r30, r8
    57c4:	f1 1d       	adc	r31, r1
    57c6:	80 81       	ld	r24, Z
    57c8:	80 33       	cpi	r24, 0x30	; 48
    57ca:	21 f4       	brne	.+8      	; 0x57d4 <vfprintf+0x308>
    57cc:	9a 2d       	mov	r25, r10
    57ce:	99 7e       	andi	r25, 0xE9	; 233
    57d0:	a9 2e       	mov	r10, r25
    57d2:	09 c0       	rjmp	.+18     	; 0x57e6 <vfprintf+0x31a>
    57d4:	a2 fe       	sbrs	r10, 2
    57d6:	06 c0       	rjmp	.+12     	; 0x57e4 <vfprintf+0x318>
    57d8:	b3 94       	inc	r11
    57da:	b3 94       	inc	r11
    57dc:	04 c0       	rjmp	.+8      	; 0x57e6 <vfprintf+0x31a>
    57de:	8a 2d       	mov	r24, r10
    57e0:	86 78       	andi	r24, 0x86	; 134
    57e2:	09 f0       	breq	.+2      	; 0x57e6 <vfprintf+0x31a>
    57e4:	b3 94       	inc	r11
    57e6:	a3 fc       	sbrc	r10, 3
    57e8:	10 c0       	rjmp	.+32     	; 0x580a <vfprintf+0x33e>
    57ea:	a0 fe       	sbrs	r10, 0
    57ec:	06 c0       	rjmp	.+12     	; 0x57fa <vfprintf+0x32e>
    57ee:	b2 14       	cp	r11, r2
    57f0:	80 f4       	brcc	.+32     	; 0x5812 <vfprintf+0x346>
    57f2:	28 0c       	add	r2, r8
    57f4:	92 2c       	mov	r9, r2
    57f6:	9b 18       	sub	r9, r11
    57f8:	0d c0       	rjmp	.+26     	; 0x5814 <vfprintf+0x348>
    57fa:	b2 14       	cp	r11, r2
    57fc:	58 f4       	brcc	.+22     	; 0x5814 <vfprintf+0x348>
    57fe:	b6 01       	movw	r22, r12
    5800:	80 e2       	ldi	r24, 0x20	; 32
    5802:	90 e0       	ldi	r25, 0x00	; 0
    5804:	76 d0       	rcall	.+236    	; 0x58f2 <fputc>
    5806:	b3 94       	inc	r11
    5808:	f8 cf       	rjmp	.-16     	; 0x57fa <vfprintf+0x32e>
    580a:	b2 14       	cp	r11, r2
    580c:	18 f4       	brcc	.+6      	; 0x5814 <vfprintf+0x348>
    580e:	2b 18       	sub	r2, r11
    5810:	02 c0       	rjmp	.+4      	; 0x5816 <vfprintf+0x34a>
    5812:	98 2c       	mov	r9, r8
    5814:	21 2c       	mov	r2, r1
    5816:	a4 fe       	sbrs	r10, 4
    5818:	0f c0       	rjmp	.+30     	; 0x5838 <vfprintf+0x36c>
    581a:	b6 01       	movw	r22, r12
    581c:	80 e3       	ldi	r24, 0x30	; 48
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	68 d0       	rcall	.+208    	; 0x58f2 <fputc>
    5822:	a2 fe       	sbrs	r10, 2
    5824:	16 c0       	rjmp	.+44     	; 0x5852 <vfprintf+0x386>
    5826:	a1 fc       	sbrc	r10, 1
    5828:	03 c0       	rjmp	.+6      	; 0x5830 <vfprintf+0x364>
    582a:	88 e7       	ldi	r24, 0x78	; 120
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	02 c0       	rjmp	.+4      	; 0x5834 <vfprintf+0x368>
    5830:	88 e5       	ldi	r24, 0x58	; 88
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	b6 01       	movw	r22, r12
    5836:	0c c0       	rjmp	.+24     	; 0x5850 <vfprintf+0x384>
    5838:	8a 2d       	mov	r24, r10
    583a:	86 78       	andi	r24, 0x86	; 134
    583c:	51 f0       	breq	.+20     	; 0x5852 <vfprintf+0x386>
    583e:	a1 fe       	sbrs	r10, 1
    5840:	02 c0       	rjmp	.+4      	; 0x5846 <vfprintf+0x37a>
    5842:	8b e2       	ldi	r24, 0x2B	; 43
    5844:	01 c0       	rjmp	.+2      	; 0x5848 <vfprintf+0x37c>
    5846:	80 e2       	ldi	r24, 0x20	; 32
    5848:	a7 fc       	sbrc	r10, 7
    584a:	8d e2       	ldi	r24, 0x2D	; 45
    584c:	b6 01       	movw	r22, r12
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	50 d0       	rcall	.+160    	; 0x58f2 <fputc>
    5852:	89 14       	cp	r8, r9
    5854:	30 f4       	brcc	.+12     	; 0x5862 <vfprintf+0x396>
    5856:	b6 01       	movw	r22, r12
    5858:	80 e3       	ldi	r24, 0x30	; 48
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	4a d0       	rcall	.+148    	; 0x58f2 <fputc>
    585e:	9a 94       	dec	r9
    5860:	f8 cf       	rjmp	.-16     	; 0x5852 <vfprintf+0x386>
    5862:	8a 94       	dec	r8
    5864:	f3 01       	movw	r30, r6
    5866:	e8 0d       	add	r30, r8
    5868:	f1 1d       	adc	r31, r1
    586a:	80 81       	ld	r24, Z
    586c:	b6 01       	movw	r22, r12
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	40 d0       	rcall	.+128    	; 0x58f2 <fputc>
    5872:	81 10       	cpse	r8, r1
    5874:	f6 cf       	rjmp	.-20     	; 0x5862 <vfprintf+0x396>
    5876:	22 20       	and	r2, r2
    5878:	09 f4       	brne	.+2      	; 0x587c <vfprintf+0x3b0>
    587a:	4e ce       	rjmp	.-868    	; 0x5518 <vfprintf+0x4c>
    587c:	b6 01       	movw	r22, r12
    587e:	80 e2       	ldi	r24, 0x20	; 32
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	37 d0       	rcall	.+110    	; 0x58f2 <fputc>
    5884:	2a 94       	dec	r2
    5886:	f7 cf       	rjmp	.-18     	; 0x5876 <vfprintf+0x3aa>
    5888:	f6 01       	movw	r30, r12
    588a:	86 81       	ldd	r24, Z+6	; 0x06
    588c:	97 81       	ldd	r25, Z+7	; 0x07
    588e:	02 c0       	rjmp	.+4      	; 0x5894 <vfprintf+0x3c8>
    5890:	8f ef       	ldi	r24, 0xFF	; 255
    5892:	9f ef       	ldi	r25, 0xFF	; 255
    5894:	2b 96       	adiw	r28, 0x0b	; 11
    5896:	0f b6       	in	r0, 0x3f	; 63
    5898:	f8 94       	cli
    589a:	de bf       	out	0x3e, r29	; 62
    589c:	0f be       	out	0x3f, r0	; 63
    589e:	cd bf       	out	0x3d, r28	; 61
    58a0:	df 91       	pop	r29
    58a2:	cf 91       	pop	r28
    58a4:	1f 91       	pop	r17
    58a6:	0f 91       	pop	r16
    58a8:	ff 90       	pop	r15
    58aa:	ef 90       	pop	r14
    58ac:	df 90       	pop	r13
    58ae:	cf 90       	pop	r12
    58b0:	bf 90       	pop	r11
    58b2:	af 90       	pop	r10
    58b4:	9f 90       	pop	r9
    58b6:	8f 90       	pop	r8
    58b8:	7f 90       	pop	r7
    58ba:	6f 90       	pop	r6
    58bc:	5f 90       	pop	r5
    58be:	4f 90       	pop	r4
    58c0:	3f 90       	pop	r3
    58c2:	2f 90       	pop	r2
    58c4:	08 95       	ret

000058c6 <strnlen_P>:
    58c6:	fc 01       	movw	r30, r24
    58c8:	05 90       	lpm	r0, Z+
    58ca:	61 50       	subi	r22, 0x01	; 1
    58cc:	70 40       	sbci	r23, 0x00	; 0
    58ce:	01 10       	cpse	r0, r1
    58d0:	d8 f7       	brcc	.-10     	; 0x58c8 <strnlen_P+0x2>
    58d2:	80 95       	com	r24
    58d4:	90 95       	com	r25
    58d6:	8e 0f       	add	r24, r30
    58d8:	9f 1f       	adc	r25, r31
    58da:	08 95       	ret

000058dc <strnlen>:
    58dc:	fc 01       	movw	r30, r24
    58de:	61 50       	subi	r22, 0x01	; 1
    58e0:	70 40       	sbci	r23, 0x00	; 0
    58e2:	01 90       	ld	r0, Z+
    58e4:	01 10       	cpse	r0, r1
    58e6:	d8 f7       	brcc	.-10     	; 0x58de <strnlen+0x2>
    58e8:	80 95       	com	r24
    58ea:	90 95       	com	r25
    58ec:	8e 0f       	add	r24, r30
    58ee:	9f 1f       	adc	r25, r31
    58f0:	08 95       	ret

000058f2 <fputc>:
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	fb 01       	movw	r30, r22
    58fc:	23 81       	ldd	r18, Z+3	; 0x03
    58fe:	21 fd       	sbrc	r18, 1
    5900:	03 c0       	rjmp	.+6      	; 0x5908 <fputc+0x16>
    5902:	8f ef       	ldi	r24, 0xFF	; 255
    5904:	9f ef       	ldi	r25, 0xFF	; 255
    5906:	2c c0       	rjmp	.+88     	; 0x5960 <fputc+0x6e>
    5908:	22 ff       	sbrs	r18, 2
    590a:	16 c0       	rjmp	.+44     	; 0x5938 <fputc+0x46>
    590c:	46 81       	ldd	r20, Z+6	; 0x06
    590e:	57 81       	ldd	r21, Z+7	; 0x07
    5910:	24 81       	ldd	r18, Z+4	; 0x04
    5912:	35 81       	ldd	r19, Z+5	; 0x05
    5914:	42 17       	cp	r20, r18
    5916:	53 07       	cpc	r21, r19
    5918:	44 f4       	brge	.+16     	; 0x592a <fputc+0x38>
    591a:	a0 81       	ld	r26, Z
    591c:	b1 81       	ldd	r27, Z+1	; 0x01
    591e:	9d 01       	movw	r18, r26
    5920:	2f 5f       	subi	r18, 0xFF	; 255
    5922:	3f 4f       	sbci	r19, 0xFF	; 255
    5924:	31 83       	std	Z+1, r19	; 0x01
    5926:	20 83       	st	Z, r18
    5928:	8c 93       	st	X, r24
    592a:	26 81       	ldd	r18, Z+6	; 0x06
    592c:	37 81       	ldd	r19, Z+7	; 0x07
    592e:	2f 5f       	subi	r18, 0xFF	; 255
    5930:	3f 4f       	sbci	r19, 0xFF	; 255
    5932:	37 83       	std	Z+7, r19	; 0x07
    5934:	26 83       	std	Z+6, r18	; 0x06
    5936:	14 c0       	rjmp	.+40     	; 0x5960 <fputc+0x6e>
    5938:	8b 01       	movw	r16, r22
    593a:	ec 01       	movw	r28, r24
    593c:	fb 01       	movw	r30, r22
    593e:	00 84       	ldd	r0, Z+8	; 0x08
    5940:	f1 85       	ldd	r31, Z+9	; 0x09
    5942:	e0 2d       	mov	r30, r0
    5944:	19 95       	eicall
    5946:	89 2b       	or	r24, r25
    5948:	e1 f6       	brne	.-72     	; 0x5902 <fputc+0x10>
    594a:	d8 01       	movw	r26, r16
    594c:	16 96       	adiw	r26, 0x06	; 6
    594e:	8d 91       	ld	r24, X+
    5950:	9c 91       	ld	r25, X
    5952:	17 97       	sbiw	r26, 0x07	; 7
    5954:	01 96       	adiw	r24, 0x01	; 1
    5956:	17 96       	adiw	r26, 0x07	; 7
    5958:	9c 93       	st	X, r25
    595a:	8e 93       	st	-X, r24
    595c:	16 97       	sbiw	r26, 0x06	; 6
    595e:	ce 01       	movw	r24, r28
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	1f 91       	pop	r17
    5966:	0f 91       	pop	r16
    5968:	08 95       	ret

0000596a <__ultoa_invert>:
    596a:	fa 01       	movw	r30, r20
    596c:	aa 27       	eor	r26, r26
    596e:	28 30       	cpi	r18, 0x08	; 8
    5970:	51 f1       	breq	.+84     	; 0x59c6 <__ultoa_invert+0x5c>
    5972:	20 31       	cpi	r18, 0x10	; 16
    5974:	81 f1       	breq	.+96     	; 0x59d6 <__ultoa_invert+0x6c>
    5976:	e8 94       	clt
    5978:	6f 93       	push	r22
    597a:	6e 7f       	andi	r22, 0xFE	; 254
    597c:	6e 5f       	subi	r22, 0xFE	; 254
    597e:	7f 4f       	sbci	r23, 0xFF	; 255
    5980:	8f 4f       	sbci	r24, 0xFF	; 255
    5982:	9f 4f       	sbci	r25, 0xFF	; 255
    5984:	af 4f       	sbci	r26, 0xFF	; 255
    5986:	b1 e0       	ldi	r27, 0x01	; 1
    5988:	3e d0       	rcall	.+124    	; 0x5a06 <__ultoa_invert+0x9c>
    598a:	b4 e0       	ldi	r27, 0x04	; 4
    598c:	3c d0       	rcall	.+120    	; 0x5a06 <__ultoa_invert+0x9c>
    598e:	67 0f       	add	r22, r23
    5990:	78 1f       	adc	r23, r24
    5992:	89 1f       	adc	r24, r25
    5994:	9a 1f       	adc	r25, r26
    5996:	a1 1d       	adc	r26, r1
    5998:	68 0f       	add	r22, r24
    599a:	79 1f       	adc	r23, r25
    599c:	8a 1f       	adc	r24, r26
    599e:	91 1d       	adc	r25, r1
    59a0:	a1 1d       	adc	r26, r1
    59a2:	6a 0f       	add	r22, r26
    59a4:	71 1d       	adc	r23, r1
    59a6:	81 1d       	adc	r24, r1
    59a8:	91 1d       	adc	r25, r1
    59aa:	a1 1d       	adc	r26, r1
    59ac:	20 d0       	rcall	.+64     	; 0x59ee <__ultoa_invert+0x84>
    59ae:	09 f4       	brne	.+2      	; 0x59b2 <__ultoa_invert+0x48>
    59b0:	68 94       	set
    59b2:	3f 91       	pop	r19
    59b4:	2a e0       	ldi	r18, 0x0A	; 10
    59b6:	26 9f       	mul	r18, r22
    59b8:	11 24       	eor	r1, r1
    59ba:	30 19       	sub	r19, r0
    59bc:	30 5d       	subi	r19, 0xD0	; 208
    59be:	31 93       	st	Z+, r19
    59c0:	de f6       	brtc	.-74     	; 0x5978 <__ultoa_invert+0xe>
    59c2:	cf 01       	movw	r24, r30
    59c4:	08 95       	ret
    59c6:	46 2f       	mov	r20, r22
    59c8:	47 70       	andi	r20, 0x07	; 7
    59ca:	40 5d       	subi	r20, 0xD0	; 208
    59cc:	41 93       	st	Z+, r20
    59ce:	b3 e0       	ldi	r27, 0x03	; 3
    59d0:	0f d0       	rcall	.+30     	; 0x59f0 <__ultoa_invert+0x86>
    59d2:	c9 f7       	brne	.-14     	; 0x59c6 <__ultoa_invert+0x5c>
    59d4:	f6 cf       	rjmp	.-20     	; 0x59c2 <__ultoa_invert+0x58>
    59d6:	46 2f       	mov	r20, r22
    59d8:	4f 70       	andi	r20, 0x0F	; 15
    59da:	40 5d       	subi	r20, 0xD0	; 208
    59dc:	4a 33       	cpi	r20, 0x3A	; 58
    59de:	18 f0       	brcs	.+6      	; 0x59e6 <__ultoa_invert+0x7c>
    59e0:	49 5d       	subi	r20, 0xD9	; 217
    59e2:	31 fd       	sbrc	r19, 1
    59e4:	40 52       	subi	r20, 0x20	; 32
    59e6:	41 93       	st	Z+, r20
    59e8:	02 d0       	rcall	.+4      	; 0x59ee <__ultoa_invert+0x84>
    59ea:	a9 f7       	brne	.-22     	; 0x59d6 <__ultoa_invert+0x6c>
    59ec:	ea cf       	rjmp	.-44     	; 0x59c2 <__ultoa_invert+0x58>
    59ee:	b4 e0       	ldi	r27, 0x04	; 4
    59f0:	a6 95       	lsr	r26
    59f2:	97 95       	ror	r25
    59f4:	87 95       	ror	r24
    59f6:	77 95       	ror	r23
    59f8:	67 95       	ror	r22
    59fa:	ba 95       	dec	r27
    59fc:	c9 f7       	brne	.-14     	; 0x59f0 <__ultoa_invert+0x86>
    59fe:	00 97       	sbiw	r24, 0x00	; 0
    5a00:	61 05       	cpc	r22, r1
    5a02:	71 05       	cpc	r23, r1
    5a04:	08 95       	ret
    5a06:	9b 01       	movw	r18, r22
    5a08:	ac 01       	movw	r20, r24
    5a0a:	0a 2e       	mov	r0, r26
    5a0c:	06 94       	lsr	r0
    5a0e:	57 95       	ror	r21
    5a10:	47 95       	ror	r20
    5a12:	37 95       	ror	r19
    5a14:	27 95       	ror	r18
    5a16:	ba 95       	dec	r27
    5a18:	c9 f7       	brne	.-14     	; 0x5a0c <__ultoa_invert+0xa2>
    5a1a:	62 0f       	add	r22, r18
    5a1c:	73 1f       	adc	r23, r19
    5a1e:	84 1f       	adc	r24, r20
    5a20:	95 1f       	adc	r25, r21
    5a22:	a0 1d       	adc	r26, r0
    5a24:	08 95       	ret

00005a26 <_exit>:
    5a26:	f8 94       	cli

00005a28 <__stop_program>:
    5a28:	ff cf       	rjmp	.-2      	; 0x5a28 <__stop_program>


SEP4Embd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004f4  00800200  00005692  00005726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005692  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001252  008006f4  008006f4  00005c1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b18  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dc7d  00000000  00000000  000067d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a26  00000000  00000000  0001444d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006619  00000000  00000000  00017e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002394  00000000  00000000  0001e48c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000413c  00000000  00000000  00020820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b9c2  00000000  00000000  0002495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b18  00000000  00000000  0003031e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	47 c2       	rjmp	.+1166   	; 0x490 <__ctors_end>
       2:	00 00       	nop
       4:	66 c2       	rjmp	.+1228   	; 0x4d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c2       	rjmp	.+1224   	; 0x4d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c2       	rjmp	.+1220   	; 0x4d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c2       	rjmp	.+1216   	; 0x4d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c2       	rjmp	.+1212   	; 0x4d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c2       	rjmp	.+1208   	; 0x4d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c2       	rjmp	.+1204   	; 0x4d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c2       	rjmp	.+1200   	; 0x4d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c2       	rjmp	.+1196   	; 0x4d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c2       	rjmp	.+1192   	; 0x4d2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c2       	rjmp	.+1188   	; 0x4d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c7       	rjmp	.+3822   	; 0xf20 <__vector_12>
      32:	00 00       	nop
      34:	4e c2       	rjmp	.+1180   	; 0x4d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c2       	rjmp	.+1176   	; 0x4d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c2       	rjmp	.+1172   	; 0x4d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c2       	rjmp	.+1168   	; 0x4d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	46 c2       	rjmp	.+1164   	; 0x4d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c2       	rjmp	.+1160   	; 0x4d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c2       	rjmp	.+1156   	; 0x4d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	40 c2       	rjmp	.+1152   	; 0x4d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	3e c2       	rjmp	.+1148   	; 0x4d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c2       	rjmp	.+1144   	; 0x4d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c2       	rjmp	.+1140   	; 0x4d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c2       	rjmp	.+1136   	; 0x4d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6b 20 	jmp	0x40d6	; 0x40d6 <__vector_25>
      68:	0c 94 bd 20 	jmp	0x417a	; 0x417a <__vector_26>
      6c:	32 c2       	rjmp	.+1124   	; 0x4d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c2       	rjmp	.+1120   	; 0x4d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c2       	rjmp	.+1116   	; 0x4d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c2       	rjmp	.+1112   	; 0x4d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c2       	rjmp	.+1108   	; 0x4d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c2       	rjmp	.+1104   	; 0x4d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c2       	rjmp	.+1100   	; 0x4d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c2       	rjmp	.+1096   	; 0x4d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c2       	rjmp	.+1092   	; 0x4d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__vector_36>
      94:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <__vector_37>
      98:	1c c2       	rjmp	.+1080   	; 0x4d2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 eb 23 	jmp	0x47d6	; 0x47d6 <__vector_39>
      a0:	18 c2       	rjmp	.+1072   	; 0x4d2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	16 c2       	rjmp	.+1068   	; 0x4d2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	14 c2       	rjmp	.+1064   	; 0x4d2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	12 c2       	rjmp	.+1060   	; 0x4d2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	10 c2       	rjmp	.+1056   	; 0x4d2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0e c2       	rjmp	.+1052   	; 0x4d2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c c2       	rjmp	.+1048   	; 0x4d2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0a c2       	rjmp	.+1044   	; 0x4d2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	08 c2       	rjmp	.+1040   	; 0x4d2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	06 c2       	rjmp	.+1036   	; 0x4d2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	04 c2       	rjmp	.+1032   	; 0x4d2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 97 21 	jmp	0x432e	; 0x432e <__vector_51>
      d0:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <__vector_52>
      d4:	fe c1       	rjmp	.+1020   	; 0x4d2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2d 22 	jmp	0x445a	; 0x445a <__vector_54>
      dc:	0c 94 7f 22 	jmp	0x44fe	; 0x44fe <__vector_55>
      e0:	f8 c1       	rjmp	.+1008   	; 0x4d2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 01       	movw	r22, r30
      e6:	bf 01       	movw	r22, r30
      e8:	bf 01       	movw	r22, r30
      ea:	f9 01       	movw	r30, r18
      ec:	01 02       	muls	r16, r17
      ee:	17 02       	muls	r17, r23
      f0:	bf 01       	movw	r22, r30
      f2:	bf 01       	movw	r22, r30
      f4:	f9 01       	movw	r30, r18
      f6:	01 02       	muls	r16, r17
      f8:	0d 24       	eor	r0, r13
      fa:	7d 24       	eor	r7, r13
      fc:	7d 24       	eor	r7, r13
      fe:	7d 24       	eor	r7, r13
     100:	7d 24       	eor	r7, r13
     102:	7d 24       	eor	r7, r13
     104:	7d 24       	eor	r7, r13
     106:	7d 24       	eor	r7, r13
     108:	0d 24       	eor	r0, r13
     10a:	7d 24       	eor	r7, r13
     10c:	7d 24       	eor	r7, r13
     10e:	7d 24       	eor	r7, r13
     110:	7d 24       	eor	r7, r13
     112:	7d 24       	eor	r7, r13
     114:	7d 24       	eor	r7, r13
     116:	7d 24       	eor	r7, r13
     118:	0f 24       	eor	r0, r15
     11a:	7d 24       	eor	r7, r13
     11c:	7d 24       	eor	r7, r13
     11e:	7d 24       	eor	r7, r13
     120:	7d 24       	eor	r7, r13
     122:	7d 24       	eor	r7, r13
     124:	7d 24       	eor	r7, r13
     126:	7d 24       	eor	r7, r13
     128:	7d 24       	eor	r7, r13
     12a:	7d 24       	eor	r7, r13
     12c:	7d 24       	eor	r7, r13
     12e:	7d 24       	eor	r7, r13
     130:	7d 24       	eor	r7, r13
     132:	7d 24       	eor	r7, r13
     134:	7d 24       	eor	r7, r13
     136:	7d 24       	eor	r7, r13
     138:	0f 24       	eor	r0, r15
     13a:	7d 24       	eor	r7, r13
     13c:	7d 24       	eor	r7, r13
     13e:	7d 24       	eor	r7, r13
     140:	7d 24       	eor	r7, r13
     142:	7d 24       	eor	r7, r13
     144:	7d 24       	eor	r7, r13
     146:	7d 24       	eor	r7, r13
     148:	7d 24       	eor	r7, r13
     14a:	7d 24       	eor	r7, r13
     14c:	7d 24       	eor	r7, r13
     14e:	7d 24       	eor	r7, r13
     150:	7d 24       	eor	r7, r13
     152:	7d 24       	eor	r7, r13
     154:	7d 24       	eor	r7, r13
     156:	7d 24       	eor	r7, r13
     158:	79 24       	eor	r7, r9
     15a:	7d 24       	eor	r7, r13
     15c:	7d 24       	eor	r7, r13
     15e:	7d 24       	eor	r7, r13
     160:	7d 24       	eor	r7, r13
     162:	7d 24       	eor	r7, r13
     164:	7d 24       	eor	r7, r13
     166:	7d 24       	eor	r7, r13
     168:	44 24       	eor	r4, r4
     16a:	7d 24       	eor	r7, r13
     16c:	7d 24       	eor	r7, r13
     16e:	7d 24       	eor	r7, r13
     170:	7d 24       	eor	r7, r13
     172:	7d 24       	eor	r7, r13
     174:	7d 24       	eor	r7, r13
     176:	7d 24       	eor	r7, r13
     178:	7d 24       	eor	r7, r13
     17a:	7d 24       	eor	r7, r13
     17c:	7d 24       	eor	r7, r13
     17e:	7d 24       	eor	r7, r13
     180:	7d 24       	eor	r7, r13
     182:	7d 24       	eor	r7, r13
     184:	7d 24       	eor	r7, r13
     186:	7d 24       	eor	r7, r13
     188:	38 24       	eor	r3, r8
     18a:	7d 24       	eor	r7, r13
     18c:	7d 24       	eor	r7, r13
     18e:	7d 24       	eor	r7, r13
     190:	7d 24       	eor	r7, r13
     192:	7d 24       	eor	r7, r13
     194:	7d 24       	eor	r7, r13
     196:	7d 24       	eor	r7, r13
     198:	5c 24       	eor	r5, r12

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 e2       	ldi	r16, 0x22	; 34
     19c:	17 e1       	ldi	r17, 0x17	; 23
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e5       	ldi	r31, 0x52	; 82
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e1       	ldi	r31, 0x17	; 23
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0f d5       	rcall	.+2590   	; 0xbea <uxListRemove>
     1cc:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 15 17 	sts	0x1715, r24	; 0x801715 <uxCurrentNumberOfTasks>
     1d6:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 21 17 	sts	0x1721, r24	; 0x801721 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	5c d4       	rcall	.+2232   	; 0xaa2 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	5a d4       	rcall	.+2228   	; 0xaa2 <vPortFree>
     1ee:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	ca d5       	rcall	.+2964   	; 0xd94 <vPortYield>
     200:	0e 94 22 16 	call	0x2c44	; 0x2c44 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 8a 17 	lds	r30, 0x178A	; 0x80178a <pxCurrentTimerList>
     232:	f0 91 8b 17 	lds	r31, 0x178B	; 0x80178b <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0f c1       	rjmp	.+542    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	65 c0       	rjmp	.+202    	; 0x330 <prvTimerTask+0x12a>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
     27e:	e0 91 8a 17 	lds	r30, 0x178A	; 0x80178a <pxCurrentTimerList>
     282:	f0 91 8b 17 	lds	r31, 0x178B	; 0x80178b <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	a8 d4       	rcall	.+2384   	; 0xbea <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	87 89       	ldd	r24, Z+23	; 0x17
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 9c 14 	call	0x2938	; 0x2938 <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	57 96       	adiw	r26, 0x17	; 23
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9f c0       	rjmp	.+318    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <xTimerQueue>
     31c:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <xTimerQueue+0x1>
     320:	0e 94 5f 0a 	call	0x14be	; 0x14be <vQueueWaitForMessageRestricted>
     324:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
     328:	81 11       	cpse	r24, r1
     32a:	8a c0       	rjmp	.+276    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     32c:	33 d5       	rcall	.+2662   	; 0xd94 <vPortYield>
     32e:	88 c0       	rjmp	.+272    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     330:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
     334:	85 c0       	rjmp	.+266    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 23       	and	r24, r24
     33a:	0c f4       	brge	.+2      	; 0x33e <prvTimerTask+0x138>
     33c:	81 c0       	rjmp	.+258    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     33e:	4e 80       	ldd	r4, Y+6	; 0x06
     340:	5f 80       	ldd	r5, Y+7	; 0x07
     342:	d2 01       	movw	r26, r4
     344:	1c 96       	adiw	r26, 0x0c	; 12
     346:	8d 91       	ld	r24, X+
     348:	9c 91       	ld	r25, X
     34a:	1d 97       	sbiw	r26, 0x0d	; 13
     34c:	89 2b       	or	r24, r25
     34e:	19 f0       	breq	.+6      	; 0x356 <prvTimerTask+0x150>
     350:	c2 01       	movw	r24, r4
     352:	02 96       	adiw	r24, 0x02	; 2
     354:	4a d4       	rcall	.+2196   	; 0xbea <uxListRemove>
     356:	ce 01       	movw	r24, r28
     358:	08 96       	adiw	r24, 0x08	; 8
     35a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <prvSampleTimeNow>
     35e:	8b 01       	movw	r16, r22
     360:	9c 01       	movw	r18, r24
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	0e 2e       	mov	r0, r30
     366:	00 0c       	add	r0, r0
     368:	ff 0b       	sbc	r31, r31
     36a:	ea 30       	cpi	r30, 0x0A	; 10
     36c:	f1 05       	cpc	r31, r1
     36e:	08 f0       	brcs	.+2      	; 0x372 <prvTimerTask+0x16c>
     370:	67 c0       	rjmp	.+206    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     372:	88 27       	eor	r24, r24
     374:	ee 58       	subi	r30, 0x8E	; 142
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	8f 4f       	sbci	r24, 0xFF	; 255
     37a:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__tablejump2__>
     37e:	f2 01       	movw	r30, r4
     380:	87 89       	ldd	r24, Z+23	; 0x17
     382:	81 60       	ori	r24, 0x01	; 1
     384:	87 8b       	std	Z+23, r24	; 0x17
     386:	ca 80       	ldd	r12, Y+2	; 0x02
     388:	db 80       	ldd	r13, Y+3	; 0x03
     38a:	ec 80       	ldd	r14, Y+4	; 0x04
     38c:	fd 80       	ldd	r15, Y+5	; 0x05
     38e:	46 85       	ldd	r20, Z+14	; 0x0e
     390:	57 85       	ldd	r21, Z+15	; 0x0f
     392:	60 89       	ldd	r22, Z+16	; 0x10
     394:	71 89       	ldd	r23, Z+17	; 0x11
     396:	4c 0d       	add	r20, r12
     398:	5d 1d       	adc	r21, r13
     39a:	6e 1d       	adc	r22, r14
     39c:	7f 1d       	adc	r23, r15
     39e:	c2 01       	movw	r24, r4
     3a0:	0e 94 9c 14 	call	0x2938	; 0x2938 <prvInsertTimerInActiveList>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <prvTimerTask+0x1a4>
     3a8:	4b c0       	rjmp	.+150    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3aa:	d2 01       	movw	r26, r4
     3ac:	54 96       	adiw	r26, 0x14	; 20
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	55 97       	sbiw	r26, 0x15	; 21
     3b4:	c2 01       	movw	r24, r4
     3b6:	19 95       	eicall
     3b8:	f2 01       	movw	r30, r4
     3ba:	87 89       	ldd	r24, Z+23	; 0x17
     3bc:	82 ff       	sbrs	r24, 2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3c0:	4a 81       	ldd	r20, Y+2	; 0x02
     3c2:	5b 81       	ldd	r21, Y+3	; 0x03
     3c4:	6c 81       	ldd	r22, Y+4	; 0x04
     3c6:	7d 81       	ldd	r23, Y+5	; 0x05
     3c8:	86 85       	ldd	r24, Z+14	; 0x0e
     3ca:	97 85       	ldd	r25, Z+15	; 0x0f
     3cc:	a0 89       	ldd	r26, Z+16	; 0x10
     3ce:	b1 89       	ldd	r27, Z+17	; 0x11
     3d0:	9a 01       	movw	r18, r20
     3d2:	ab 01       	movw	r20, r22
     3d4:	28 0f       	add	r18, r24
     3d6:	39 1f       	adc	r19, r25
     3d8:	4a 1f       	adc	r20, r26
     3da:	5b 1f       	adc	r21, r27
     3dc:	c8 2c       	mov	r12, r8
     3de:	d9 2c       	mov	r13, r9
     3e0:	ea 2c       	mov	r14, r10
     3e2:	fb 2c       	mov	r15, r11
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	c2 01       	movw	r24, r4
     3ec:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <xTimerGenericCommand>
     3f0:	27 c0       	rjmp	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3f2:	d2 01       	movw	r26, r4
     3f4:	57 96       	adiw	r26, 0x17	; 23
     3f6:	8c 91       	ld	r24, X
     3f8:	57 97       	sbiw	r26, 0x17	; 23
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 93       	st	X, r24
     400:	1f c0       	rjmp	.+62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     402:	f2 01       	movw	r30, r4
     404:	87 89       	ldd	r24, Z+23	; 0x17
     406:	81 60       	ori	r24, 0x01	; 1
     408:	87 8b       	std	Z+23, r24	; 0x17
     40a:	4a 81       	ldd	r20, Y+2	; 0x02
     40c:	5b 81       	ldd	r21, Y+3	; 0x03
     40e:	6c 81       	ldd	r22, Y+4	; 0x04
     410:	7d 81       	ldd	r23, Y+5	; 0x05
     412:	46 87       	std	Z+14, r20	; 0x0e
     414:	57 87       	std	Z+15, r21	; 0x0f
     416:	60 8b       	std	Z+16, r22	; 0x10
     418:	71 8b       	std	Z+17, r23	; 0x11
     41a:	40 0f       	add	r20, r16
     41c:	51 1f       	adc	r21, r17
     41e:	62 1f       	adc	r22, r18
     420:	73 1f       	adc	r23, r19
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	c2 01       	movw	r24, r4
     428:	0e 94 9c 14 	call	0x2938	; 0x2938 <prvInsertTimerInActiveList>
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	f2 01       	movw	r30, r4
     430:	87 89       	ldd	r24, Z+23	; 0x17
     432:	81 fd       	sbrc	r24, 1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	c2 01       	movw	r24, r4
     438:	34 d3       	rcall	.+1640   	; 0xaa2 <vPortFree>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	87 8b       	std	Z+23, r24	; 0x17
     440:	28 2d       	mov	r18, r8
     442:	39 2d       	mov	r19, r9
     444:	4a 2d       	mov	r20, r10
     446:	5b 2d       	mov	r21, r11
     448:	66 2d       	mov	r22, r6
     44a:	77 2d       	mov	r23, r7
     44c:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <xTimerQueue>
     450:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <xTimerQueue+0x1>
     454:	9d d7       	rcall	.+3898   	; 0x1390 <xQueueReceive>
     456:	81 11       	cpse	r24, r1
     458:	6e cf       	rjmp	.-292    	; 0x336 <prvTimerTask+0x130>
     45a:	e9 ce       	rjmp	.-558    	; 0x22e <prvTimerTask+0x28>
     45c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <prvSampleTimeNow>
     468:	6b 87       	std	Y+11, r22	; 0x0b
     46a:	7c 87       	std	Y+12, r23	; 0x0c
     46c:	8d 87       	std	Y+13, r24	; 0x0d
     46e:	9e 87       	std	Y+14, r25	; 0x0e
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	81 11       	cpse	r24, r1
     474:	5d cf       	rjmp	.-326    	; 0x330 <prvTimerTask+0x12a>
     476:	e0 91 88 17 	lds	r30, 0x1788	; 0x801788 <pxOverflowTimerList>
     47a:	f0 91 89 17 	lds	r31, 0x1789	; 0x801789 <pxOverflowTimerList+0x1>
     47e:	80 81       	ld	r24, Z
     480:	21 e0       	ldi	r18, 0x01	; 1
     482:	81 11       	cpse	r24, r1
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	28 2c       	mov	r2, r8
     488:	39 2c       	mov	r3, r9
     48a:	4a 2c       	mov	r4, r10
     48c:	5b 2c       	mov	r5, r11
     48e:	3a cf       	rjmp	.-396    	; 0x304 <prvTimerTask+0xfe>

00000490 <__ctors_end>:
     490:	11 24       	eor	r1, r1
     492:	1f be       	out	0x3f, r1	; 63
     494:	cf ef       	ldi	r28, 0xFF	; 255
     496:	d1 e2       	ldi	r29, 0x21	; 33
     498:	de bf       	out	0x3e, r29	; 62
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	0c bf       	out	0x3c, r16	; 60

000004a0 <__do_copy_data>:
     4a0:	16 e0       	ldi	r17, 0x06	; 6
     4a2:	a0 e0       	ldi	r26, 0x00	; 0
     4a4:	b2 e0       	ldi	r27, 0x02	; 2
     4a6:	e2 e9       	ldi	r30, 0x92	; 146
     4a8:	f6 e5       	ldi	r31, 0x56	; 86
     4aa:	00 e0       	ldi	r16, 0x00	; 0
     4ac:	0b bf       	out	0x3b, r16	; 59
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__do_copy_data+0x14>
     4b0:	07 90       	elpm	r0, Z+
     4b2:	0d 92       	st	X+, r0
     4b4:	a4 3f       	cpi	r26, 0xF4	; 244
     4b6:	b1 07       	cpc	r27, r17
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__do_copy_data+0x10>

000004ba <__do_clear_bss>:
     4ba:	29 e1       	ldi	r18, 0x19	; 25
     4bc:	a4 ef       	ldi	r26, 0xF4	; 244
     4be:	b6 e0       	ldi	r27, 0x06	; 6
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <.do_clear_bss_start>

000004c2 <.do_clear_bss_loop>:
     4c2:	1d 92       	st	X+, r1

000004c4 <.do_clear_bss_start>:
     4c4:	a6 34       	cpi	r26, 0x46	; 70
     4c6:	b2 07       	cpc	r27, r18
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <.do_clear_bss_loop>
     4ca:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <main>
     4ce:	0c 94 47 2b 	jmp	0x568e	; 0x568e <_exit>

000004d2 <__bad_interrupt>:
     4d2:	96 cd       	rjmp	.-1236   	; 0x0 <__vectors>

000004d4 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lora_handler_task+0x6>
     4da:	1f 92       	push	r1
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     4e6:	62 e0       	ldi	r22, 0x02	; 2
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     4f8:	66 e9       	ldi	r22, 0x96	; 150
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     504:	0e 94 ae 1a 	call	0x355c	; 0x355c <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 06 19 	call	0x320c	; 0x320c <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     50e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <lora_driver_rn2483_factory_reset>
     512:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	8e e6       	ldi	r24, 0x6E	; 110
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     526:	0e 94 8a 1c 	call	0x3914	; 0x3914 <lora_driver_configure_to_eu868>
     52a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	81 e8       	ldi	r24, 0x81	; 129
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     53e:	84 ef       	ldi	r24, 0xF4	; 244
     540:	96 e0       	ldi	r25, 0x06	; 6
     542:	0e 94 1e 1b 	call	0x363c	; 0x363c <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     546:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     54a:	04 ef       	ldi	r16, 0xF4	; 244
     54c:	16 e0       	ldi	r17, 0x06	; 6
     54e:	1f 93       	push	r17
     550:	0f 93       	push	r16
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	8a e9       	ldi	r24, 0x9A	; 154
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     562:	c8 01       	movw	r24, r16
     564:	0e 94 3a 1b 	call	0x3674	; 0x3674 <lora_driver_set_device_identifier>
     568:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	1f 93       	push	r17
     572:	0f 93       	push	r16
     574:	8e ea       	ldi	r24, 0xAE	; 174
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     580:	a8 01       	movw	r20, r16
     582:	63 ec       	ldi	r22, 0xC3	; 195
     584:	72 e0       	ldi	r23, 0x02	; 2
     586:	84 ee       	ldi	r24, 0xE4	; 228
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <lora_driver_set_otaa_identity>
     58e:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	83 ec       	ldi	r24, 0xC3	; 195
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	9f 93       	push	r25
     5a0:	8f 93       	push	r24
     5a2:	84 ee       	ldi	r24, 0xE4	; 228
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	85 ef       	ldi	r24, 0xF5	; 245
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     5b6:	0e 94 6d 1b 	call	0x36da	; 0x36da <lora_driver_save_mac>
     5ba:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	8b e2       	ldi	r24, 0x2B	; 43
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 67 1c 	call	0x38ce	; 0x38ce <lora_driver_set_adaptive_data_rate>
     5de:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	8a e3       	ldi	r24, 0x3A	; 58
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     5f2:	84 ef       	ldi	r24, 0xF4	; 244
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <lora_driver_set_receive_delay>
     5fa:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8f 93       	push	r24
     606:	84 ef       	ldi	r24, 0xF4	; 244
     608:	8f 93       	push	r24
     60a:	8b e5       	ldi	r24, 0x5B	; 91
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	0a e0       	ldi	r16, 0x0A	; 10
     622:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     624:	0f 2e       	mov	r0, r31
     626:	fb e7       	ldi	r31, 0x7B	; 123
     628:	ef 2e       	mov	r14, r31
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	ff 2e       	mov	r15, r31
     62e:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <lora_driver_join>
     636:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     638:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	1f 93       	push	r17
     642:	0f 93       	push	r16
     644:	ff 92       	push	r15
     646:	ef 92       	push	r14
     648:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>

		if ( rc != LoRa_ACCEPTED)
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	98 e0       	ldi	r25, 0x08	; 8
     65a:	d9 16       	cp	r13, r25
     65c:	09 f4       	brne	.+2      	; 0x660 <lora_handler_task+0x18c>
     65e:	3f c0       	rjmp	.+126    	; 0x6de <lora_handler_task+0x20a>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 72 19 	call	0x32e4	; 0x32e4 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     666:	66 e3       	ldi	r22, 0x36	; 54
     668:	71 e0       	ldi	r23, 0x01	; 1
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>
     672:	01 50       	subi	r16, 0x01	; 1
     674:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     676:	e1 f6       	brne	.-72     	; 0x630 <lora_handler_task+0x15c>
     678:	2b c0       	rjmp	.+86     	; 0x6d0 <lora_handler_task+0x1fc>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     67a:	8c d3       	rcall	.+1816   	; 0xd94 <vPortYield>
     67c:	fe cf       	rjmp	.-4      	; 0x67a <lora_handler_task+0x1a6>
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms) man atrodo kad valanda yra 3 600 000
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     67e:	48 ea       	ldi	r20, 0xA8	; 168
     680:	58 e4       	ldi	r21, 0x48	; 72
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	0e 94 bb 10 	call	0x2176	; 0x2176 <vTaskDelayUntil>
		
		BaseType_t em = xQueueReceive(xQueue, &payload, 0);
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	a9 01       	movw	r20, r18
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	79 e1       	ldi	r23, 0x19	; 25
     698:	80 91 fe 18 	lds	r24, 0x18FE	; 0x8018fe <xQueue>
     69c:	90 91 ff 18 	lds	r25, 0x18FF	; 0x8018ff <xQueue+0x1>
     6a0:	77 d6       	rcall	.+3310   	; 0x1390 <xQueueReceive>
		
		if (em == pdTRUE)
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	61 f7       	brne	.-40     	; 0x67e <lora_handler_task+0x1aa>
		{
			led_short_puls(led_ST4);  // OPTIONAL
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	0e 94 84 19 	call	0x3308	; 0x3308 <led_short_puls>
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &payload)));
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	79 e1       	ldi	r23, 0x19	; 25
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 9c 1b 	call	0x3738	; 0x3738 <lora_driver_sent_upload_message>
     6b6:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lora_driver_map_return_code_to_text>
     6ba:	9f 93       	push	r25
     6bc:	8f 93       	push	r24
     6be:	1f 93       	push	r17
     6c0:	0f 93       	push	r16
     6c2:	0e 94 29 28 	call	0x5052	; 0x5052 <printf>
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	d7 cf       	rjmp	.-82     	; 0x67e <lora_handler_task+0x1aa>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 63 19 	call	0x32c6	; 0x32c6 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 2d 19 	call	0x325a	; 0x325a <led_fast_blink>
     6dc:	ce cf       	rjmp	.-100    	; 0x67a <lora_handler_task+0x1a6>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 54 19 	call	0x32a8	; 0x32a8 <led_led_on>
	_lora_setup();


	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms) man atrodo kad valanda yra 3 600 000
	 xLastWakeTime = xTaskGetTickCount();
     6e4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <xTaskGetTickCount>
     6e8:	69 83       	std	Y+1, r22	; 0x01
     6ea:	7a 83       	std	Y+2, r23	; 0x02
     6ec:	8b 83       	std	Y+3, r24	; 0x03
     6ee:	9c 83       	std	Y+4, r25	; 0x04
		BaseType_t em = xQueueReceive(xQueue, &payload, 0);
		
		if (em == pdTRUE)
		{
			led_short_puls(led_ST4);  // OPTIONAL
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &payload)));
     6f0:	0b e9       	ldi	r16, 0x9B	; 155
     6f2:	13 e0       	ldi	r17, 0x03	; 3
     6f4:	c4 cf       	rjmp	.-120    	; 0x67e <lora_handler_task+0x1aa>

000006f6 <lora_handler_create>:
void lora_handler_task( void *pvParameters );

//static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority, QueueHandle_t xQueue)
{
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	9b 01       	movw	r18, r22
	xTaskCreate(
     6fe:	e1 2c       	mov	r14, r1
     700:	f1 2c       	mov	r15, r1
     702:	08 2f       	mov	r16, r24
     704:	48 e8       	ldi	r20, 0x88	; 136
     706:	51 e0       	ldi	r21, 0x01	; 1
     708:	60 eb       	ldi	r22, 0xB0	; 176
     70a:	73 e0       	ldi	r23, 0x03	; 3
     70c:	8a e6       	ldi	r24, 0x6A	; 106
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xQueue
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	08 95       	ret

0000071c <setCO2>:
uint16_t hum;
uint16_t noise;

void setCO2 (uint16_t latest_ppm)
{
	ppm = latest_ppm;
     71c:	90 93 1b 19 	sts	0x191B, r25	; 0x80191b <ppm+0x1>
     720:	80 93 1a 19 	sts	0x191A, r24	; 0x80191a <ppm>
     724:	08 95       	ret

00000726 <setTemperature>:
	
}

void setTemperature (uint16_t latest_temp)
{
	temp = latest_temp;
     726:	90 93 19 19 	sts	0x1919, r25	; 0x801919 <temp+0x1>
     72a:	80 93 18 19 	sts	0x1918, r24	; 0x801918 <temp>
     72e:	08 95       	ret

00000730 <setHumidity>:
	
}

void setHumidity (uint16_t latest_hum)
{
	hum = latest_hum;
     730:	90 93 17 19 	sts	0x1917, r25	; 0x801917 <hum+0x1>
     734:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <hum>
     738:	08 95       	ret

0000073a <setNoise>:
	
}

void setNoise (uint16_t latest_noise)
{
	hum = latest_noise;
     73a:	90 93 17 19 	sts	0x1917, r25	; 0x801917 <hum+0x1>
     73e:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <hum>
     742:	08 95       	ret

00000744 <getLoraPayload>:
	
}

lora_payload_t getLoraPayload()
{
     744:	fc 01       	movw	r30, r24
	
	_uplink_payload.len = 8;
	_uplink_payload.port_no = 2;
	
	
	_uplink_payload.bytes[0] = hum >> 8;
     746:	60 91 16 19 	lds	r22, 0x1916	; 0x801916 <hum>
     74a:	70 91 17 19 	lds	r23, 0x1917	; 0x801917 <hum+0x1>
	_uplink_payload.bytes[1] = hum & 0xFF;
	_uplink_payload.bytes[2] = temp >> 8;
     74e:	40 91 18 19 	lds	r20, 0x1918	; 0x801918 <temp>
     752:	50 91 19 19 	lds	r21, 0x1919	; 0x801919 <temp+0x1>
	_uplink_payload.bytes[3] = temp & 0xFF;
	_uplink_payload.bytes[4] = ppm >> 8;
     756:	20 91 1a 19 	lds	r18, 0x191A	; 0x80191a <ppm>
     75a:	30 91 1b 19 	lds	r19, 0x191B	; 0x80191b <ppm+0x1>
	_uplink_payload.bytes[5] = ppm & 0xFF;
	_uplink_payload.bytes[6] = noise >> 8;
     75e:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <noise>
     762:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <noise+0x1>
	_uplink_payload.bytes[7] = noise & 0xFF;

	return _uplink_payload;
     766:	a2 e0       	ldi	r26, 0x02	; 2
     768:	a0 83       	st	Z, r26
     76a:	a8 e0       	ldi	r26, 0x08	; 8
     76c:	a1 83       	std	Z+1, r26	; 0x01
     76e:	72 83       	std	Z+2, r23	; 0x02
     770:	63 83       	std	Z+3, r22	; 0x03
     772:	54 83       	std	Z+4, r21	; 0x04
     774:	45 83       	std	Z+5, r20	; 0x05
     776:	36 83       	std	Z+6, r19	; 0x06
     778:	27 83       	std	Z+7, r18	; 0x07
     77a:	90 87       	std	Z+8, r25	; 0x08
     77c:	81 87       	std	Z+9, r24	; 0x09

}
     77e:	cf 01       	movw	r24, r30
     780:	08 95       	ret

00000782 <CO2Sensor>:
//SemaphoreHandle_t xTestSemaphore;

void CO2Sensor(void *pvParameters){
	//xTestSemaphore = pvParameters;
	while(1){
		vTaskDelay(1000);
     782:	68 ee       	ldi	r22, 0xE8	; 232
     784:	73 e0       	ldi	r23, 0x03	; 3
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>
		int r = mh_z19_take_meassuring();
     78e:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <mh_z19_take_meassuring>
		if(r != MHZ19_OK)
		{
			//printf("CO2 sensor: %d", r);
			
		}
		vTaskDelay(9000);
     792:	68 e2       	ldi	r22, 0x28	; 40
     794:	73 e2       	ldi	r23, 0x23	; 35
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>
     79e:	f1 cf       	rjmp	.-30     	; 0x782 <CO2Sensor>

000007a0 <my_co2_call_back>:
	//xSemaphoreTake (xTestSemaphore, portMAX_DELAY);
	//printf("CO2 measured: %u \n", ppm);
	//xSemaphoreGive(xTestSemaphore);
	
	//pakeist event group bita gal
	latest_CO2 = ppm;
     7a0:	90 93 1f 19 	sts	0x191F, r25	; 0x80191f <latest_CO2+0x1>
     7a4:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <latest_CO2>
     7a8:	08 95       	ret

000007aa <get_CO2>:
}

uint16_t get_CO2()
{
	return latest_CO2;
}
     7aa:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <latest_CO2>
     7ae:	90 91 1f 19 	lds	r25, 0x191F	; 0x80191f <latest_CO2+0x1>
     7b2:	08 95       	ret

000007b4 <ControllerTask>:
uint16_t latest_Hum;
uint16_t latest_Temp;



void ControllerTask(void *pvParameters){
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	ac 97       	sbiw	r28, 0x2c	; 44
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
	QueueHandle_t xQueue = ((void**)pvParameters)[0];
     7c8:	fc 01       	movw	r30, r24
     7ca:	e0 80       	ld	r14, Z
     7cc:	f1 80       	ldd	r15, Z+1	; 0x01
	lora_payload_t payload = getLoraPayload();
     7ce:	ce 01       	movw	r24, r28
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	b8 df       	rcall	.-144    	; 0x744 <getLoraPayload>
	//event group stuff
	
	for (;;)
	{ 
		setHumidity(get_Hum());
     7d4:	36 d0       	rcall	.+108    	; 0x842 <get_Hum>
     7d6:	ac df       	rcall	.-168    	; 0x730 <setHumidity>
		setTemperature(get_Temp());
     7d8:	3e d0       	rcall	.+124    	; 0x856 <get_Temp>
     7da:	a5 df       	rcall	.-182    	; 0x726 <setTemperature>
     7dc:	e6 df       	rcall	.-52     	; 0x7aa <get_CO2>
		setCO2(get_CO2());
     7de:	9e df       	rcall	.-196    	; 0x71c <setCO2>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
		setNoise(1);
     7e4:	aa df       	rcall	.-172    	; 0x73a <setNoise>
     7e6:	ce 01       	movw	r24, r28
     7e8:	47 96       	adiw	r24, 0x17	; 23
     7ea:	ac df       	rcall	.-168    	; 0x744 <getLoraPayload>
		
		payload = getLoraPayload();
     7ec:	86 e1       	ldi	r24, 0x16	; 22
     7ee:	fe 01       	movw	r30, r28
     7f0:	77 96       	adiw	r30, 0x17	; 23
     7f2:	de 01       	movw	r26, r28
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	8a 95       	dec	r24
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <ControllerTask+0x42>
     7fe:	00 e0       	ldi	r16, 0x00	; 0
     800:	2f ef       	ldi	r18, 0xFF	; 255
     802:	3f ef       	ldi	r19, 0xFF	; 255
		
		xQueueSend(xQueue, &payload, portMAX_DELAY);
     804:	a9 01       	movw	r20, r18
     806:	be 01       	movw	r22, r28
     808:	6f 5f       	subi	r22, 0xFF	; 255
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	c7 01       	movw	r24, r14
     80e:	cc d4       	rcall	.+2456   	; 0x11a8 <xQueueGenericSend>
     810:	e1 cf       	rjmp	.-62     	; 0x7d4 <ControllerTask+0x20>

00000812 <rcServoTask>:
#include <stdio_driver.h>
#include "../Headers/rcServo.h"
#include "rcServo.h"

void rcServoTask(void *pvParameters)
{
     812:	ff cf       	rjmp	.-2      	; 0x812 <rcServoTask>

00000814 <T_HSensor>:

void T_HSensor(void *pvParameters){
	//xTestSemaphore = pvParameters;
	while(1)
	{
		vTaskDelay(1000);
     814:	68 ee       	ldi	r22, 0xE8	; 232
     816:	73 e0       	ldi	r23, 0x03	; 3
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>
		int r = hih8120Wakeup();
     820:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <hih8120Wakeup>
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			//puts("temp-wake error:");
		}
		vTaskDelay(100);
     824:	64 e6       	ldi	r22, 0x64	; 100
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>
		r = hih8120Meassure();
     830:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <hih8120Meassure>
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			//puts("Temp-read error: ");

		}
		vTaskDelay(100);
     834:	64 e6       	ldi	r22, 0x64	; 100
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskDelay>
     840:	e9 cf       	rjmp	.-46     	; 0x814 <T_HSensor>

00000842 <get_Hum>:
	}
}

uint16_t get_Hum()
{
	latest_Hum = hih8120GetHumidity();
     842:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <hih8120GetHumidity>
     846:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__fixunssfsi>
     84a:	70 93 23 19 	sts	0x1923, r23	; 0x801923 <latest_Hum+0x1>
     84e:	60 93 22 19 	sts	0x1922, r22	; 0x801922 <latest_Hum>
	return latest_Hum;
}
     852:	cb 01       	movw	r24, r22
     854:	08 95       	ret

00000856 <get_Temp>:

uint16_t get_Temp()
{
	latest_Temp = hih8120GetTemperature();
     856:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <hih8120GetTemperature>
     85a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__fixunssfsi>
     85e:	70 93 21 19 	sts	0x1921, r23	; 0x801921 <latest_Temp+0x1>
     862:	60 93 20 19 	sts	0x1920, r22	; 0x801920 <latest_Temp>
	return latest_Temp;
     866:	cb 01       	movw	r24, r22
     868:	08 95       	ret

0000086a <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     86a:	e7 e0       	ldi	r30, 0x07	; 7
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	80 81       	ld	r24, Z
     870:	8f 60       	ori	r24, 0x0F	; 15
     872:	80 83       	st	Z, r24
     874:	08 95       	ret

00000876 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     876:	e8 e0       	ldi	r30, 0x08	; 8
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	90 81       	ld	r25, Z
     87c:	90 7f       	andi	r25, 0xF0	; 240
     87e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     880:	90 81       	ld	r25, Z
     882:	8f 70       	andi	r24, 0x0F	; 15
     884:	98 2b       	or	r25, r24
     886:	90 83       	st	Z, r25
     888:	08 95       	ret

0000088a <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     88a:	e8 e0       	ldi	r30, 0x08	; 8
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	80 81       	ld	r24, Z
     890:	80 7f       	andi	r24, 0xF0	; 240
     892:	80 83       	st	Z, r24
     894:	08 95       	ret

00000896 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     89c:	e0 e6       	ldi	r30, 0x60	; 96
     89e:	f7 e0       	ldi	r31, 0x07	; 7
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <prvInsertBlockIntoFreeList+0xe>
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	31 81       	ldd	r19, Z+1	; 0x01
     8a8:	2a 17       	cp	r18, r26
     8aa:	3b 07       	cpc	r19, r27
     8ac:	d0 f3       	brcs	.-12     	; 0x8a2 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     8ae:	82 81       	ldd	r24, Z+2	; 0x02
     8b0:	93 81       	ldd	r25, Z+3	; 0x03
     8b2:	af 01       	movw	r20, r30
     8b4:	48 0f       	add	r20, r24
     8b6:	59 1f       	adc	r21, r25
     8b8:	a4 17       	cp	r26, r20
     8ba:	b5 07       	cpc	r27, r21
     8bc:	49 f4       	brne	.+18     	; 0x8d0 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     8be:	12 96       	adiw	r26, 0x02	; 2
     8c0:	4d 91       	ld	r20, X+
     8c2:	5c 91       	ld	r21, X
     8c4:	13 97       	sbiw	r26, 0x03	; 3
     8c6:	84 0f       	add	r24, r20
     8c8:	95 1f       	adc	r25, r21
     8ca:	93 83       	std	Z+3, r25	; 0x03
     8cc:	82 83       	std	Z+2, r24	; 0x02
     8ce:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	8d 91       	ld	r24, X+
     8d4:	9c 91       	ld	r25, X
     8d6:	13 97       	sbiw	r26, 0x03	; 3
     8d8:	ed 01       	movw	r28, r26
     8da:	c8 0f       	add	r28, r24
     8dc:	d9 1f       	adc	r29, r25
     8de:	2c 17       	cp	r18, r28
     8e0:	3d 07       	cpc	r19, r29
     8e2:	d9 f4       	brne	.+54     	; 0x91a <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     8e4:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <pxEnd>
     8e8:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <pxEnd+0x1>
     8ec:	c2 17       	cp	r28, r18
     8ee:	d3 07       	cpc	r29, r19
     8f0:	81 f0       	breq	.+32     	; 0x912 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     8f2:	2a 81       	ldd	r18, Y+2	; 0x02
     8f4:	3b 81       	ldd	r19, Y+3	; 0x03
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	13 96       	adiw	r26, 0x03	; 3
     8fc:	9c 93       	st	X, r25
     8fe:	8e 93       	st	-X, r24
     900:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     902:	c0 81       	ld	r28, Z
     904:	d1 81       	ldd	r29, Z+1	; 0x01
     906:	88 81       	ld	r24, Y
     908:	99 81       	ldd	r25, Y+1	; 0x01
     90a:	11 96       	adiw	r26, 0x01	; 1
     90c:	9c 93       	st	X, r25
     90e:	8e 93       	st	-X, r24
     910:	07 c0       	rjmp	.+14     	; 0x920 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	dc 93       	st	X, r29
     916:	ce 93       	st	-X, r28
     918:	03 c0       	rjmp	.+6      	; 0x920 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     91a:	11 96       	adiw	r26, 0x01	; 1
     91c:	3c 93       	st	X, r19
     91e:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     920:	ae 17       	cp	r26, r30
     922:	bf 07       	cpc	r27, r31
     924:	11 f0       	breq	.+4      	; 0x92a <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     926:	b1 83       	std	Z+1, r27	; 0x01
     928:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     942:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     946:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <pxEnd>
     94a:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <pxEnd+0x1>
     94e:	89 2b       	or	r24, r25
     950:	41 f5       	brne	.+80     	; 0x9a2 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     952:	e0 e6       	ldi	r30, 0x60	; 96
     954:	f7 e0       	ldi	r31, 0x07	; 7
     956:	a4 e6       	ldi	r26, 0x64	; 100
     958:	b7 e0       	ldi	r27, 0x07	; 7
     95a:	b1 83       	std	Z+1, r27	; 0x01
     95c:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     95e:	13 82       	std	Z+3, r1	; 0x03
     960:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     962:	e0 e0       	ldi	r30, 0x00	; 0
     964:	f7 e1       	ldi	r31, 0x17	; 23
     966:	f0 93 5f 07 	sts	0x075F, r31	; 0x80075f <pxEnd+0x1>
     96a:	e0 93 5e 07 	sts	0x075E, r30	; 0x80075e <pxEnd>
	pxEnd->xBlockSize = 0;
     96e:	13 82       	std	Z+3, r1	; 0x03
     970:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     972:	11 82       	std	Z+1, r1	; 0x01
     974:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     976:	8c e9       	ldi	r24, 0x9C	; 156
     978:	9f e0       	ldi	r25, 0x0F	; 15
     97a:	13 96       	adiw	r26, 0x03	; 3
     97c:	9c 93       	st	X, r25
     97e:	8e 93       	st	-X, r24
     980:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     982:	ed 93       	st	X+, r30
     984:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     986:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <xMinimumEverFreeBytesRemaining+0x1>
     98a:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     98e:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <xFreeBytesRemaining+0x1>
     992:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e8       	ldi	r25, 0x80	; 128
     99a:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <xBlockAllocatedBit+0x1>
     99e:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9a2:	e0 90 58 07 	lds	r14, 0x0758	; 0x800758 <xBlockAllocatedBit>
     9a6:	f0 90 59 07 	lds	r15, 0x0759	; 0x800759 <xBlockAllocatedBit+0x1>
     9aa:	c7 01       	movw	r24, r14
     9ac:	8c 23       	and	r24, r28
     9ae:	9d 23       	and	r25, r29
     9b0:	89 2b       	or	r24, r25
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <pvPortMalloc+0x86>
     9b4:	66 c0       	rjmp	.+204    	; 0xa82 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     9b6:	20 97       	sbiw	r28, 0x00	; 0
     9b8:	09 f4       	brne	.+2      	; 0x9bc <pvPortMalloc+0x8c>
     9ba:	66 c0       	rjmp	.+204    	; 0xa88 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     9bc:	ae 01       	movw	r20, r28
     9be:	4c 5f       	subi	r20, 0xFC	; 252
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <pvPortMalloc+0x96>
     9c4:	5e c0       	rjmp	.+188    	; 0xa82 <pvPortMalloc+0x152>
     9c6:	00 91 5c 07 	lds	r16, 0x075C	; 0x80075c <xFreeBytesRemaining>
     9ca:	10 91 5d 07 	lds	r17, 0x075D	; 0x80075d <xFreeBytesRemaining+0x1>
     9ce:	04 17       	cp	r16, r20
     9d0:	15 07       	cpc	r17, r21
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <pvPortMalloc+0xa6>
     9d4:	56 c0       	rjmp	.+172    	; 0xa82 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     9d6:	c0 91 60 07 	lds	r28, 0x0760	; 0x800760 <xStart>
     9da:	d0 91 61 07 	lds	r29, 0x0761	; 0x800761 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     9de:	e0 e6       	ldi	r30, 0x60	; 96
     9e0:	f7 e0       	ldi	r31, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <pvPortMalloc+0xb8>
     9e4:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     9e6:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     9e8:	2a 81       	ldd	r18, Y+2	; 0x02
     9ea:	3b 81       	ldd	r19, Y+3	; 0x03
     9ec:	24 17       	cp	r18, r20
     9ee:	35 07       	cpc	r19, r21
     9f0:	28 f4       	brcc	.+10     	; 0x9fc <pvPortMalloc+0xcc>
     9f2:	28 81       	ld	r18, Y
     9f4:	39 81       	ldd	r19, Y+1	; 0x01
     9f6:	21 15       	cp	r18, r1
     9f8:	31 05       	cpc	r19, r1
     9fa:	a1 f7       	brne	.-24     	; 0x9e4 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     9fc:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <pxEnd>
     a00:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <pxEnd+0x1>
     a04:	c8 17       	cp	r28, r24
     a06:	d9 07       	cpc	r29, r25
     a08:	e1 f1       	breq	.+120    	; 0xa82 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a0a:	c0 80       	ld	r12, Z
     a0c:	d1 80       	ldd	r13, Z+1	; 0x01
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	c8 0e       	add	r12, r24
     a12:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a14:	88 81       	ld	r24, Y
     a16:	99 81       	ldd	r25, Y+1	; 0x01
     a18:	91 83       	std	Z+1, r25	; 0x01
     a1a:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a1c:	2a 81       	ldd	r18, Y+2	; 0x02
     a1e:	3b 81       	ldd	r19, Y+3	; 0x03
     a20:	24 1b       	sub	r18, r20
     a22:	35 0b       	sbc	r19, r21
     a24:	29 30       	cpi	r18, 0x09	; 9
     a26:	31 05       	cpc	r19, r1
     a28:	48 f0       	brcs	.+18     	; 0xa3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a2a:	ce 01       	movw	r24, r28
     a2c:	84 0f       	add	r24, r20
     a2e:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a30:	fc 01       	movw	r30, r24
     a32:	33 83       	std	Z+3, r19	; 0x03
     a34:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     a36:	5b 83       	std	Y+3, r21	; 0x03
     a38:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     a3a:	2d df       	rcall	.-422    	; 0x896 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     a3c:	8a 81       	ldd	r24, Y+2	; 0x02
     a3e:	9b 81       	ldd	r25, Y+3	; 0x03
     a40:	08 1b       	sub	r16, r24
     a42:	19 0b       	sbc	r17, r25
     a44:	10 93 5d 07 	sts	0x075D, r17	; 0x80075d <xFreeBytesRemaining+0x1>
     a48:	00 93 5c 07 	sts	0x075C, r16	; 0x80075c <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     a4c:	20 91 5a 07 	lds	r18, 0x075A	; 0x80075a <xMinimumEverFreeBytesRemaining>
     a50:	30 91 5b 07 	lds	r19, 0x075B	; 0x80075b <xMinimumEverFreeBytesRemaining+0x1>
     a54:	02 17       	cp	r16, r18
     a56:	13 07       	cpc	r17, r19
     a58:	20 f4       	brcc	.+8      	; 0xa62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     a5a:	10 93 5b 07 	sts	0x075B, r17	; 0x80075b <xMinimumEverFreeBytesRemaining+0x1>
     a5e:	00 93 5a 07 	sts	0x075A, r16	; 0x80075a <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     a62:	e8 2a       	or	r14, r24
     a64:	f9 2a       	or	r15, r25
     a66:	fb 82       	std	Y+3, r15	; 0x03
     a68:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     a6a:	19 82       	std	Y+1, r1	; 0x01
     a6c:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     a6e:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     a72:	c1 14       	cp	r12, r1
     a74:	d1 04       	cpc	r13, r1
     a76:	59 f4       	brne	.+22     	; 0xa8e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     a78:	0e 94 23 16 	call	0x2c46	; 0x2c46 <vApplicationMallocFailedHook>
     a7c:	c1 2c       	mov	r12, r1
     a7e:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     a82:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
     a86:	f8 cf       	rjmp	.-16     	; 0xa78 <pvPortMalloc+0x148>
     a88:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
     a8c:	f5 cf       	rjmp	.-22     	; 0xa78 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     a8e:	c6 01       	movw	r24, r12
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	08 95       	ret

00000aa2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	51 f1       	breq	.+84     	; 0xafe <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     aaa:	fc 01       	movw	r30, r24
     aac:	34 97       	sbiw	r30, 0x04	; 4
     aae:	22 81       	ldd	r18, Z+2	; 0x02
     ab0:	33 81       	ldd	r19, Z+3	; 0x03
     ab2:	40 91 58 07 	lds	r20, 0x0758	; 0x800758 <xBlockAllocatedBit>
     ab6:	50 91 59 07 	lds	r21, 0x0759	; 0x800759 <xBlockAllocatedBit+0x1>
     aba:	b9 01       	movw	r22, r18
     abc:	64 23       	and	r22, r20
     abe:	75 23       	and	r23, r21
     ac0:	67 2b       	or	r22, r23
     ac2:	e9 f0       	breq	.+58     	; 0xafe <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	67 2b       	or	r22, r23
     aca:	c9 f4       	brne	.+50     	; 0xafe <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     acc:	ef 01       	movw	r28, r30
     ace:	40 95       	com	r20
     ad0:	50 95       	com	r21
     ad2:	24 23       	and	r18, r20
     ad4:	35 23       	and	r19, r21
     ad6:	33 83       	std	Z+3, r19	; 0x03
     ad8:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     ada:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     ade:	20 91 5c 07 	lds	r18, 0x075C	; 0x80075c <xFreeBytesRemaining>
     ae2:	30 91 5d 07 	lds	r19, 0x075D	; 0x80075d <xFreeBytesRemaining+0x1>
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	9b 81       	ldd	r25, Y+3	; 0x03
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <xFreeBytesRemaining+0x1>
     af2:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     af6:	ce 01       	movw	r24, r28
     af8:	ce de       	rcall	.-612    	; 0x896 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     afa:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b04:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b06:	03 96       	adiw	r24, 0x03	; 3
     b08:	92 83       	std	Z+2, r25	; 0x02
     b0a:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     b0c:	4f ef       	ldi	r20, 0xFF	; 255
     b0e:	5f ef       	ldi	r21, 0xFF	; 255
     b10:	ba 01       	movw	r22, r20
     b12:	43 83       	std	Z+3, r20	; 0x03
     b14:	54 83       	std	Z+4, r21	; 0x04
     b16:	65 83       	std	Z+5, r22	; 0x05
     b18:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b1a:	90 87       	std	Z+8, r25	; 0x08
     b1c:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b1e:	92 87       	std	Z+10, r25	; 0x0a
     b20:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b22:	10 82       	st	Z, r1
     b24:	08 95       	ret

00000b26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     b26:	fc 01       	movw	r30, r24
     b28:	13 86       	std	Z+11, r1	; 0x0b
     b2a:	12 86       	std	Z+10, r1	; 0x0a
     b2c:	08 95       	ret

00000b2e <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	9c 01       	movw	r18, r24
     b34:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     b36:	dc 01       	movw	r26, r24
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	cd 91       	ld	r28, X+
     b3c:	dc 91       	ld	r29, X
     b3e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     b40:	d5 83       	std	Z+5, r29	; 0x05
     b42:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     b44:	8e 81       	ldd	r24, Y+6	; 0x06
     b46:	9f 81       	ldd	r25, Y+7	; 0x07
     b48:	97 83       	std	Z+7, r25	; 0x07
     b4a:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     b4c:	8e 81       	ldd	r24, Y+6	; 0x06
     b4e:	9f 81       	ldd	r25, Y+7	; 0x07
     b50:	dc 01       	movw	r26, r24
     b52:	15 96       	adiw	r26, 0x05	; 5
     b54:	7c 93       	st	X, r23
     b56:	6e 93       	st	-X, r22
     b58:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     b5a:	7f 83       	std	Y+7, r23	; 0x07
     b5c:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     b5e:	33 87       	std	Z+11, r19	; 0x0b
     b60:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     b62:	f9 01       	movw	r30, r18
     b64:	80 81       	ld	r24, Z
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b7a:	08 81       	ld	r16, Y
     b7c:	19 81       	ldd	r17, Y+1	; 0x01
     b7e:	2a 81       	ldd	r18, Y+2	; 0x02
     b80:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     b82:	0f 3f       	cpi	r16, 0xFF	; 255
     b84:	4f ef       	ldi	r20, 0xFF	; 255
     b86:	14 07       	cpc	r17, r20
     b88:	24 07       	cpc	r18, r20
     b8a:	34 07       	cpc	r19, r20
     b8c:	21 f4       	brne	.+8      	; 0xb96 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     b8e:	fc 01       	movw	r30, r24
     b90:	a1 85       	ldd	r26, Z+9	; 0x09
     b92:	b2 85       	ldd	r27, Z+10	; 0x0a
     b94:	11 c0       	rjmp	.+34     	; 0xbb8 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b96:	dc 01       	movw	r26, r24
     b98:	13 96       	adiw	r26, 0x03	; 3
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <vListInsert+0x2e>
     b9c:	df 01       	movw	r26, r30
     b9e:	14 96       	adiw	r26, 0x04	; 4
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	15 97       	sbiw	r26, 0x05	; 5
     ba6:	40 81       	ld	r20, Z
     ba8:	51 81       	ldd	r21, Z+1	; 0x01
     baa:	62 81       	ldd	r22, Z+2	; 0x02
     bac:	73 81       	ldd	r23, Z+3	; 0x03
     bae:	04 17       	cp	r16, r20
     bb0:	15 07       	cpc	r17, r21
     bb2:	26 07       	cpc	r18, r22
     bb4:	37 07       	cpc	r19, r23
     bb6:	90 f7       	brcc	.-28     	; 0xb9c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bb8:	14 96       	adiw	r26, 0x04	; 4
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	15 97       	sbiw	r26, 0x05	; 5
     bc0:	fd 83       	std	Y+5, r31	; 0x05
     bc2:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bc4:	d7 83       	std	Z+7, r29	; 0x07
     bc6:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     bc8:	bf 83       	std	Y+7, r27	; 0x07
     bca:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     bcc:	15 96       	adiw	r26, 0x05	; 5
     bce:	dc 93       	st	X, r29
     bd0:	ce 93       	st	-X, r28
     bd2:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     bd4:	9b 87       	std	Y+11, r25	; 0x0b
     bd6:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     bd8:	fc 01       	movw	r30, r24
     bda:	20 81       	ld	r18, Z
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
     bde:	20 83       	st	Z, r18
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     bf0:	a2 85       	ldd	r26, Z+10	; 0x0a
     bf2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     bf4:	c4 81       	ldd	r28, Z+4	; 0x04
     bf6:	d5 81       	ldd	r29, Z+5	; 0x05
     bf8:	86 81       	ldd	r24, Z+6	; 0x06
     bfa:	97 81       	ldd	r25, Z+7	; 0x07
     bfc:	9f 83       	std	Y+7, r25	; 0x07
     bfe:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c00:	c6 81       	ldd	r28, Z+6	; 0x06
     c02:	d7 81       	ldd	r29, Z+7	; 0x07
     c04:	84 81       	ldd	r24, Z+4	; 0x04
     c06:	95 81       	ldd	r25, Z+5	; 0x05
     c08:	9d 83       	std	Y+5, r25	; 0x05
     c0a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c0c:	11 96       	adiw	r26, 0x01	; 1
     c0e:	8d 91       	ld	r24, X+
     c10:	9c 91       	ld	r25, X
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	e8 17       	cp	r30, r24
     c16:	f9 07       	cpc	r31, r25
     c18:	31 f4       	brne	.+12     	; 0xc26 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c1a:	86 81       	ldd	r24, Z+6	; 0x06
     c1c:	97 81       	ldd	r25, Z+7	; 0x07
     c1e:	12 96       	adiw	r26, 0x02	; 2
     c20:	9c 93       	st	X, r25
     c22:	8e 93       	st	-X, r24
     c24:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c26:	13 86       	std	Z+11, r1	; 0x0b
     c28:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c2a:	8c 91       	ld	r24, X
     c2c:	81 50       	subi	r24, 0x01	; 1
     c2e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c30:	8c 91       	ld	r24, X
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c38:	31 e1       	ldi	r19, 0x11	; 17
     c3a:	fc 01       	movw	r30, r24
     c3c:	30 83       	st	Z, r19
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	22 e2       	ldi	r18, 0x22	; 34
     c42:	20 83       	st	Z, r18
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	a3 e3       	ldi	r26, 0x33	; 51
     c48:	a0 83       	st	Z, r26
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	60 83       	st	Z, r22
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	70 83       	st	Z, r23
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	10 82       	st	Z, r1
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	10 82       	st	Z, r1
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	60 e8       	ldi	r22, 0x80	; 128
     c5e:	60 83       	st	Z, r22
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	10 82       	st	Z, r1
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	10 82       	st	Z, r1
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	10 82       	st	Z, r1
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	62 e0       	ldi	r22, 0x02	; 2
     c70:	60 83       	st	Z, r22
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	63 e0       	ldi	r22, 0x03	; 3
     c76:	60 83       	st	Z, r22
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	64 e0       	ldi	r22, 0x04	; 4
     c7c:	60 83       	st	Z, r22
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	65 e0       	ldi	r22, 0x05	; 5
     c82:	60 83       	st	Z, r22
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	66 e0       	ldi	r22, 0x06	; 6
     c88:	60 83       	st	Z, r22
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	67 e0       	ldi	r22, 0x07	; 7
     c8e:	60 83       	st	Z, r22
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	68 e0       	ldi	r22, 0x08	; 8
     c94:	60 83       	st	Z, r22
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	69 e0       	ldi	r22, 0x09	; 9
     c9a:	60 83       	st	Z, r22
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	60 e1       	ldi	r22, 0x10	; 16
     ca0:	60 83       	st	Z, r22
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	30 83       	st	Z, r19
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	32 e1       	ldi	r19, 0x12	; 18
     caa:	30 83       	st	Z, r19
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	33 e1       	ldi	r19, 0x13	; 19
     cb0:	30 83       	st	Z, r19
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	34 e1       	ldi	r19, 0x14	; 20
     cb6:	30 83       	st	Z, r19
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	35 e1       	ldi	r19, 0x15	; 21
     cbc:	30 83       	st	Z, r19
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	36 e1       	ldi	r19, 0x16	; 22
     cc2:	30 83       	st	Z, r19
     cc4:	31 97       	sbiw	r30, 0x01	; 1
     cc6:	37 e1       	ldi	r19, 0x17	; 23
     cc8:	30 83       	st	Z, r19
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	38 e1       	ldi	r19, 0x18	; 24
     cce:	30 83       	st	Z, r19
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	39 e1       	ldi	r19, 0x19	; 25
     cd4:	30 83       	st	Z, r19
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	30 e2       	ldi	r19, 0x20	; 32
     cda:	30 83       	st	Z, r19
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	31 e2       	ldi	r19, 0x21	; 33
     ce0:	30 83       	st	Z, r19
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	20 83       	st	Z, r18
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	23 e2       	ldi	r18, 0x23	; 35
     cea:	20 83       	st	Z, r18
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	40 83       	st	Z, r20
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	50 83       	st	Z, r21
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	26 e2       	ldi	r18, 0x26	; 38
     cf8:	20 83       	st	Z, r18
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	27 e2       	ldi	r18, 0x27	; 39
     cfe:	20 83       	st	Z, r18
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	28 e2       	ldi	r18, 0x28	; 40
     d04:	20 83       	st	Z, r18
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	29 e2       	ldi	r18, 0x29	; 41
     d0a:	20 83       	st	Z, r18
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	20 e3       	ldi	r18, 0x30	; 48
     d10:	20 83       	st	Z, r18
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	21 e3       	ldi	r18, 0x31	; 49
     d16:	20 83       	st	Z, r18
     d18:	89 97       	sbiw	r24, 0x29	; 41
     d1a:	08 95       	ret

00000d1c <xPortStartScheduler>:
     d1c:	a8 95       	wdr
     d1e:	90 ec       	ldi	r25, 0xC0	; 192
     d20:	88 e1       	ldi	r24, 0x18	; 24
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	a8 95       	wdr
     d28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     d32:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <pxCurrentTCB>
     d36:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
     d3a:	cd 91       	ld	r28, X+
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	dd 91       	ld	r29, X+
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	af 90       	pop	r10
     d6e:	9f 90       	pop	r9
     d70:	8f 90       	pop	r8
     d72:	7f 90       	pop	r7
     d74:	6f 90       	pop	r6
     d76:	5f 90       	pop	r5
     d78:	4f 90       	pop	r4
     d7a:	3f 90       	pop	r3
     d7c:	2f 90       	pop	r2
     d7e:	1f 90       	pop	r1
     d80:	0f 90       	pop	r0
     d82:	0c be       	out	0x3c, r0	; 60
     d84:	0f 90       	pop	r0
     d86:	0b be       	out	0x3b, r0	; 59
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	08 95       	ret
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	08 95       	ret

00000d94 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	0f 92       	push	r0
     d9c:	0b b6       	in	r0, 0x3b	; 59
     d9e:	0f 92       	push	r0
     da0:	0c b6       	in	r0, 0x3c	; 60
     da2:	0f 92       	push	r0
     da4:	1f 92       	push	r1
     da6:	11 24       	eor	r1, r1
     da8:	2f 92       	push	r2
     daa:	3f 92       	push	r3
     dac:	4f 92       	push	r4
     dae:	5f 92       	push	r5
     db0:	6f 92       	push	r6
     db2:	7f 92       	push	r7
     db4:	8f 92       	push	r8
     db6:	9f 92       	push	r9
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	2f 93       	push	r18
     dca:	3f 93       	push	r19
     dcc:	4f 93       	push	r20
     dce:	5f 93       	push	r21
     dd0:	6f 93       	push	r22
     dd2:	7f 93       	push	r23
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
     de4:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <pxCurrentTCB>
     de8:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
     dec:	0d b6       	in	r0, 0x3d	; 61
     dee:	0d 92       	st	X+, r0
     df0:	0e b6       	in	r0, 0x3e	; 62
     df2:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     df4:	0e 94 32 11 	call	0x2264	; 0x2264 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     df8:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <pxCurrentTCB>
     dfc:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
     e00:	cd 91       	ld	r28, X+
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	dd 91       	ld	r29, X+
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	bf 90       	pop	r11
     e32:	af 90       	pop	r10
     e34:	9f 90       	pop	r9
     e36:	8f 90       	pop	r8
     e38:	7f 90       	pop	r7
     e3a:	6f 90       	pop	r6
     e3c:	5f 90       	pop	r5
     e3e:	4f 90       	pop	r4
     e40:	3f 90       	pop	r3
     e42:	2f 90       	pop	r2
     e44:	1f 90       	pop	r1
     e46:	0f 90       	pop	r0
     e48:	0c be       	out	0x3c, r0	; 60
     e4a:	0f 90       	pop	r0
     e4c:	0b be       	out	0x3b, r0	; 59
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e54:	08 95       	ret

00000e56 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	0f 92       	push	r0
     e5e:	0b b6       	in	r0, 0x3b	; 59
     e60:	0f 92       	push	r0
     e62:	0c b6       	in	r0, 0x3c	; 60
     e64:	0f 92       	push	r0
     e66:	1f 92       	push	r1
     e68:	11 24       	eor	r1, r1
     e6a:	2f 92       	push	r2
     e6c:	3f 92       	push	r3
     e6e:	4f 92       	push	r4
     e70:	5f 92       	push	r5
     e72:	6f 92       	push	r6
     e74:	7f 92       	push	r7
     e76:	8f 92       	push	r8
     e78:	9f 92       	push	r9
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
     ea6:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <pxCurrentTCB>
     eaa:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
     eae:	0d b6       	in	r0, 0x3d	; 61
     eb0:	0d 92       	st	X+, r0
     eb2:	0e b6       	in	r0, 0x3e	; 62
     eb4:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     eb6:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     eb8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskIncrementTick>
     ebc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ebe:	0e 94 32 11 	call	0x2264	; 0x2264 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     ec2:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <pxCurrentTCB>
     ec6:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
     eca:	cd 91       	ld	r28, X+
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	dd 91       	ld	r29, X+
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	9f 90       	pop	r9
     f00:	8f 90       	pop	r8
     f02:	7f 90       	pop	r7
     f04:	6f 90       	pop	r6
     f06:	5f 90       	pop	r5
     f08:	4f 90       	pop	r4
     f0a:	3f 90       	pop	r3
     f0c:	2f 90       	pop	r2
     f0e:	1f 90       	pop	r1
     f10:	0f 90       	pop	r0
     f12:	0c be       	out	0x3c, r0	; 60
     f14:	0f 90       	pop	r0
     f16:	0b be       	out	0x3b, r0	; 59
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f1e:	08 95       	ret

00000f20 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f20:	9a df       	rcall	.-204    	; 0xe56 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f22:	18 95       	reti

00000f24 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	0f 92       	push	r0
     f2a:	fc 01       	movw	r30, r24
     f2c:	96 8d       	ldd	r25, Z+30	; 0x1e
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	91 11       	cpse	r25, r1
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	08 95       	ret

00000f3a <prvCopyDataToQueue>:
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
     f44:	04 2f       	mov	r16, r20
     f46:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f48:	48 a1       	ldd	r20, Y+32	; 0x20
     f4a:	41 11       	cpse	r20, r1
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <prvCopyDataToQueue+0x2c>
     f4e:	88 81       	ld	r24, Y
     f50:	99 81       	ldd	r25, Y+1	; 0x01
     f52:	89 2b       	or	r24, r25
     f54:	09 f0       	breq	.+2      	; 0xf58 <prvCopyDataToQueue+0x1e>
     f56:	42 c0       	rjmp	.+132    	; 0xfdc <prvCopyDataToQueue+0xa2>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	0e 94 bd 12 	call	0x257a	; 0x257a <xTaskPriorityDisinherit>
     f60:	1d 82       	std	Y+5, r1	; 0x05
     f62:	1c 82       	std	Y+4, r1	; 0x04
     f64:	42 c0       	rjmp	.+132    	; 0xfea <prvCopyDataToQueue+0xb0>
     f66:	01 11       	cpse	r16, r1
     f68:	17 c0       	rjmp	.+46     	; 0xf98 <prvCopyDataToQueue+0x5e>
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <memcpy>
     f74:	28 a1       	ldd	r18, Y+32	; 0x20
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	82 0f       	add	r24, r18
     f7c:	91 1d       	adc	r25, r1
     f7e:	9b 83       	std	Y+3, r25	; 0x03
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	50 f1       	brcs	.+84     	; 0xfe0 <prvCopyDataToQueue+0xa6>
     f8c:	88 81       	ld	r24, Y
     f8e:	99 81       	ldd	r25, Y+1	; 0x01
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	29 c0       	rjmp	.+82     	; 0xfea <prvCopyDataToQueue+0xb0>
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	8e 81       	ldd	r24, Y+6	; 0x06
     f9c:	9f 81       	ldd	r25, Y+7	; 0x07
     f9e:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <memcpy>
     fa2:	88 a1       	ldd	r24, Y+32	; 0x20
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	91 95       	neg	r25
     fa8:	81 95       	neg	r24
     faa:	91 09       	sbc	r25, r1
     fac:	2e 81       	ldd	r18, Y+6	; 0x06
     fae:	3f 81       	ldd	r19, Y+7	; 0x07
     fb0:	28 0f       	add	r18, r24
     fb2:	39 1f       	adc	r19, r25
     fb4:	3f 83       	std	Y+7, r19	; 0x07
     fb6:	2e 83       	std	Y+6, r18	; 0x06
     fb8:	48 81       	ld	r20, Y
     fba:	59 81       	ldd	r21, Y+1	; 0x01
     fbc:	24 17       	cp	r18, r20
     fbe:	35 07       	cpc	r19, r21
     fc0:	30 f4       	brcc	.+12     	; 0xfce <prvCopyDataToQueue+0x94>
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	9f 83       	std	Y+7, r25	; 0x07
     fcc:	8e 83       	std	Y+6, r24	; 0x06
     fce:	02 30       	cpi	r16, 0x02	; 2
     fd0:	49 f4       	brne	.+18     	; 0xfe4 <prvCopyDataToQueue+0xaa>
     fd2:	11 23       	and	r17, r17
     fd4:	49 f0       	breq	.+18     	; 0xfe8 <prvCopyDataToQueue+0xae>
     fd6:	11 50       	subi	r17, 0x01	; 1
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	07 c0       	rjmp	.+14     	; 0xfea <prvCopyDataToQueue+0xb0>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	05 c0       	rjmp	.+10     	; 0xfea <prvCopyDataToQueue+0xb0>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <prvCopyDataToQueue+0xb0>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <prvCopyDataToQueue+0xb0>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	1f 5f       	subi	r17, 0xFF	; 255
     fec:	1e 8f       	std	Y+30, r17	; 0x1e
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <prvCopyDataFromQueue>:
     ff8:	fc 01       	movw	r30, r24
     ffa:	40 a1       	ldd	r20, Z+32	; 0x20
     ffc:	44 23       	and	r20, r20
     ffe:	a9 f0       	breq	.+42     	; 0x102a <prvCopyDataFromQueue+0x32>
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	26 81       	ldd	r18, Z+6	; 0x06
    1004:	37 81       	ldd	r19, Z+7	; 0x07
    1006:	24 0f       	add	r18, r20
    1008:	35 1f       	adc	r19, r21
    100a:	37 83       	std	Z+7, r19	; 0x07
    100c:	26 83       	std	Z+6, r18	; 0x06
    100e:	84 81       	ldd	r24, Z+4	; 0x04
    1010:	95 81       	ldd	r25, Z+5	; 0x05
    1012:	28 17       	cp	r18, r24
    1014:	39 07       	cpc	r19, r25
    1016:	20 f0       	brcs	.+8      	; 0x1020 <prvCopyDataFromQueue+0x28>
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	97 83       	std	Z+7, r25	; 0x07
    101e:	86 83       	std	Z+6, r24	; 0x06
    1020:	cb 01       	movw	r24, r22
    1022:	66 81       	ldd	r22, Z+6	; 0x06
    1024:	77 81       	ldd	r23, Z+7	; 0x07
    1026:	0c 94 ca 27 	jmp	0x4f94	; 0x4f94 <memcpy>
    102a:	08 95       	ret

0000102c <prvUnlockQueue>:
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	8c 01       	movw	r16, r24
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	0f 92       	push	r0
    103e:	fc 01       	movw	r30, r24
    1040:	c2 a1       	ldd	r28, Z+34	; 0x22
    1042:	1c 16       	cp	r1, r28
    1044:	ac f4       	brge	.+42     	; 0x1070 <prvUnlockQueue+0x44>
    1046:	83 89       	ldd	r24, Z+19	; 0x13
    1048:	81 11       	cpse	r24, r1
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <prvUnlockQueue+0x2c>
    104c:	11 c0       	rjmp	.+34     	; 0x1070 <prvUnlockQueue+0x44>
    104e:	f8 01       	movw	r30, r16
    1050:	83 89       	ldd	r24, Z+19	; 0x13
    1052:	81 11       	cpse	r24, r1
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <prvUnlockQueue+0x34>
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <prvUnlockQueue+0x44>
    1058:	78 01       	movw	r14, r16
    105a:	f3 e1       	ldi	r31, 0x13	; 19
    105c:	ef 0e       	add	r14, r31
    105e:	f1 1c       	adc	r15, r1
    1060:	c7 01       	movw	r24, r14
    1062:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <xTaskRemoveFromEventList>
    1066:	81 11       	cpse	r24, r1
    1068:	0e 94 a6 12 	call	0x254c	; 0x254c <vTaskMissedYield>
    106c:	c1 50       	subi	r28, 0x01	; 1
    106e:	79 f7       	brne	.-34     	; 0x104e <prvUnlockQueue+0x22>
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	f8 01       	movw	r30, r16
    1074:	82 a3       	std	Z+34, r24	; 0x22
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	0f 92       	push	r0
    1080:	c1 a1       	ldd	r28, Z+33	; 0x21
    1082:	1c 16       	cp	r1, r28
    1084:	ac f4       	brge	.+42     	; 0x10b0 <prvUnlockQueue+0x84>
    1086:	80 85       	ldd	r24, Z+8	; 0x08
    1088:	81 11       	cpse	r24, r1
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <prvUnlockQueue+0x6c>
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <prvUnlockQueue+0x84>
    108e:	f8 01       	movw	r30, r16
    1090:	80 85       	ldd	r24, Z+8	; 0x08
    1092:	81 11       	cpse	r24, r1
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <prvUnlockQueue+0x74>
    1096:	0c c0       	rjmp	.+24     	; 0x10b0 <prvUnlockQueue+0x84>
    1098:	78 01       	movw	r14, r16
    109a:	f8 e0       	ldi	r31, 0x08	; 8
    109c:	ef 0e       	add	r14, r31
    109e:	f1 1c       	adc	r15, r1
    10a0:	c7 01       	movw	r24, r14
    10a2:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <xTaskRemoveFromEventList>
    10a6:	81 11       	cpse	r24, r1
    10a8:	0e 94 a6 12 	call	0x254c	; 0x254c <vTaskMissedYield>
    10ac:	c1 50       	subi	r28, 0x01	; 1
    10ae:	79 f7       	brne	.-34     	; 0x108e <prvUnlockQueue+0x62>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	f8 01       	movw	r30, r16
    10b4:	81 a3       	std	Z+33, r24	; 0x21
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	08 95       	ret

000010c6 <xQueueGenericReset>:
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	0f 92       	push	r0
    10d2:	e8 81       	ld	r30, Y
    10d4:	f9 81       	ldd	r31, Y+1	; 0x01
    10d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10d8:	28 a1       	ldd	r18, Y+32	; 0x20
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	82 9f       	mul	r24, r18
    10e0:	a0 01       	movw	r20, r0
    10e2:	83 9f       	mul	r24, r19
    10e4:	50 0d       	add	r21, r0
    10e6:	92 9f       	mul	r25, r18
    10e8:	50 0d       	add	r21, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	4e 0f       	add	r20, r30
    10ee:	5f 1f       	adc	r21, r31
    10f0:	5d 83       	std	Y+5, r21	; 0x05
    10f2:	4c 83       	std	Y+4, r20	; 0x04
    10f4:	1e 8e       	std	Y+30, r1	; 0x1e
    10f6:	fb 83       	std	Y+3, r31	; 0x03
    10f8:	ea 83       	std	Y+2, r30	; 0x02
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	82 9f       	mul	r24, r18
    10fe:	a0 01       	movw	r20, r0
    1100:	83 9f       	mul	r24, r19
    1102:	50 0d       	add	r21, r0
    1104:	92 9f       	mul	r25, r18
    1106:	50 0d       	add	r21, r0
    1108:	11 24       	eor	r1, r1
    110a:	cf 01       	movw	r24, r30
    110c:	84 0f       	add	r24, r20
    110e:	95 1f       	adc	r25, r21
    1110:	9f 83       	std	Y+7, r25	; 0x07
    1112:	8e 83       	std	Y+6, r24	; 0x06
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	89 a3       	std	Y+33, r24	; 0x21
    1118:	8a a3       	std	Y+34, r24	; 0x22
    111a:	61 11       	cpse	r22, r1
    111c:	0b c0       	rjmp	.+22     	; 0x1134 <xQueueGenericReset+0x6e>
    111e:	88 85       	ldd	r24, Y+8	; 0x08
    1120:	88 23       	and	r24, r24
    1122:	71 f0       	breq	.+28     	; 0x1140 <xQueueGenericReset+0x7a>
    1124:	ce 01       	movw	r24, r28
    1126:	08 96       	adiw	r24, 0x08	; 8
    1128:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <xTaskRemoveFromEventList>
    112c:	88 23       	and	r24, r24
    112e:	41 f0       	breq	.+16     	; 0x1140 <xQueueGenericReset+0x7a>
    1130:	31 de       	rcall	.-926    	; 0xd94 <vPortYield>
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <xQueueGenericReset+0x7a>
    1134:	ce 01       	movw	r24, r28
    1136:	08 96       	adiw	r24, 0x08	; 8
    1138:	e5 dc       	rcall	.-1590   	; 0xb04 <vListInitialise>
    113a:	ce 01       	movw	r24, r28
    113c:	43 96       	adiw	r24, 0x13	; 19
    113e:	e2 dc       	rcall	.-1596   	; 0xb04 <vListInitialise>
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <xQueueGenericCreate>:
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	08 2f       	mov	r16, r24
    1158:	16 2f       	mov	r17, r22
    115a:	f4 2e       	mov	r15, r20
    115c:	66 23       	and	r22, r22
    115e:	b9 f0       	breq	.+46     	; 0x118e <xQueueGenericCreate+0x42>
    1160:	86 9f       	mul	r24, r22
    1162:	c0 01       	movw	r24, r0
    1164:	11 24       	eor	r1, r1
    1166:	85 96       	adiw	r24, 0x25	; 37
    1168:	e3 db       	rcall	.-2106   	; 0x930 <pvPortMalloc>
    116a:	ec 01       	movw	r28, r24
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	41 f4       	brne	.+16     	; 0x1180 <xQueueGenericCreate+0x34>
    1170:	14 c0       	rjmp	.+40     	; 0x119a <xQueueGenericCreate+0x4e>
    1172:	0f 8f       	std	Y+31, r16	; 0x1f
    1174:	18 a3       	std	Y+32, r17	; 0x20
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	ce 01       	movw	r24, r28
    117a:	a5 df       	rcall	.-182    	; 0x10c6 <xQueueGenericReset>
    117c:	fc a2       	std	Y+36, r15	; 0x24
    117e:	0d c0       	rjmp	.+26     	; 0x119a <xQueueGenericCreate+0x4e>
    1180:	85 96       	adiw	r24, 0x25	; 37
    1182:	99 83       	std	Y+1, r25	; 0x01
    1184:	88 83       	st	Y, r24
    1186:	f5 cf       	rjmp	.-22     	; 0x1172 <xQueueGenericCreate+0x26>
    1188:	d9 83       	std	Y+1, r29	; 0x01
    118a:	c8 83       	st	Y, r28
    118c:	f2 cf       	rjmp	.-28     	; 0x1172 <xQueueGenericCreate+0x26>
    118e:	85 e2       	ldi	r24, 0x25	; 37
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	ce db       	rcall	.-2148   	; 0x930 <pvPortMalloc>
    1194:	ec 01       	movw	r28, r24
    1196:	89 2b       	or	r24, r25
    1198:	b9 f7       	brne	.-18     	; 0x1188 <xQueueGenericCreate+0x3c>
    119a:	ce 01       	movw	r24, r28
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	08 95       	ret

000011a8 <xQueueGenericSend>:
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	29 97       	sbiw	r28, 0x09	; 9
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	7c 01       	movw	r14, r24
    11d0:	5b 01       	movw	r10, r22
    11d2:	2e 83       	std	Y+6, r18	; 0x06
    11d4:	3f 83       	std	Y+7, r19	; 0x07
    11d6:	48 87       	std	Y+8, r20	; 0x08
    11d8:	59 87       	std	Y+9, r21	; 0x09
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	99 24       	eor	r9, r9
    11de:	93 94       	inc	r9
    11e0:	6c 01       	movw	r12, r24
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	c8 0e       	add	r12, r24
    11e6:	d1 1c       	adc	r13, r1
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	0f 92       	push	r0
    11ee:	f7 01       	movw	r30, r14
    11f0:	96 8d       	ldd	r25, Z+30	; 0x1e
    11f2:	87 8d       	ldd	r24, Z+31	; 0x1f
    11f4:	98 17       	cp	r25, r24
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <xQueueGenericSend+0x54>
    11f8:	02 30       	cpi	r16, 0x02	; 2
    11fa:	b1 f4       	brne	.+44     	; 0x1228 <xQueueGenericSend+0x80>
    11fc:	40 2f       	mov	r20, r16
    11fe:	b5 01       	movw	r22, r10
    1200:	c7 01       	movw	r24, r14
    1202:	9b de       	rcall	.-714    	; 0xf3a <prvCopyDataToQueue>
    1204:	f7 01       	movw	r30, r14
    1206:	93 89       	ldd	r25, Z+19	; 0x13
    1208:	99 23       	and	r25, r25
    120a:	41 f0       	breq	.+16     	; 0x121c <xQueueGenericSend+0x74>
    120c:	c7 01       	movw	r24, r14
    120e:	43 96       	adiw	r24, 0x13	; 19
    1210:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <xTaskRemoveFromEventList>
    1214:	88 23       	and	r24, r24
    1216:	21 f0       	breq	.+8      	; 0x1220 <xQueueGenericSend+0x78>
    1218:	bd dd       	rcall	.-1158   	; 0xd94 <vPortYield>
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <xQueueGenericSend+0x78>
    121c:	81 11       	cpse	r24, r1
    121e:	ba dd       	rcall	.-1164   	; 0xd94 <vPortYield>
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	4e c0       	rjmp	.+156    	; 0x12c4 <xQueueGenericSend+0x11c>
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
    122a:	9f 81       	ldd	r25, Y+7	; 0x07
    122c:	a8 85       	ldd	r26, Y+8	; 0x08
    122e:	b9 85       	ldd	r27, Y+9	; 0x09
    1230:	89 2b       	or	r24, r25
    1232:	8a 2b       	or	r24, r26
    1234:	8b 2b       	or	r24, r27
    1236:	21 f4       	brne	.+8      	; 0x1240 <xQueueGenericSend+0x98>
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	42 c0       	rjmp	.+132    	; 0x12c4 <xQueueGenericSend+0x11c>
    1240:	11 11       	cpse	r17, r1
    1242:	05 c0       	rjmp	.+10     	; 0x124e <xQueueGenericSend+0xa6>
    1244:	ce 01       	movw	r24, r28
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	0e 94 40 12 	call	0x2480	; 0x2480 <vTaskInternalSetTimeOutState>
    124c:	19 2d       	mov	r17, r9
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	2c d6       	rcall	.+3160   	; 0x1eac <vTaskSuspendAll>
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	0f 92       	push	r0
    125a:	f7 01       	movw	r30, r14
    125c:	81 a1       	ldd	r24, Z+33	; 0x21
    125e:	8f 3f       	cpi	r24, 0xFF	; 255
    1260:	09 f4       	brne	.+2      	; 0x1264 <xQueueGenericSend+0xbc>
    1262:	11 a2       	std	Z+33, r1	; 0x21
    1264:	f7 01       	movw	r30, r14
    1266:	82 a1       	ldd	r24, Z+34	; 0x22
    1268:	8f 3f       	cpi	r24, 0xFF	; 255
    126a:	09 f4       	brne	.+2      	; 0x126e <xQueueGenericSend+0xc6>
    126c:	12 a2       	std	Z+34, r1	; 0x22
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	be 01       	movw	r22, r28
    1274:	6a 5f       	subi	r22, 0xFA	; 250
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskCheckForTimeOut>
    1280:	81 11       	cpse	r24, r1
    1282:	1c c0       	rjmp	.+56     	; 0x12bc <xQueueGenericSend+0x114>
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	0f 92       	push	r0
    128a:	f7 01       	movw	r30, r14
    128c:	96 8d       	ldd	r25, Z+30	; 0x1e
    128e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	98 13       	cpse	r25, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <xQueueGenericSend+0x10c>
    1298:	4e 81       	ldd	r20, Y+6	; 0x06
    129a:	5f 81       	ldd	r21, Y+7	; 0x07
    129c:	68 85       	ldd	r22, Y+8	; 0x08
    129e:	79 85       	ldd	r23, Y+9	; 0x09
    12a0:	c6 01       	movw	r24, r12
    12a2:	0e 94 b1 11 	call	0x2362	; 0x2362 <vTaskPlaceOnEventList>
    12a6:	c7 01       	movw	r24, r14
    12a8:	c1 de       	rcall	.-638    	; 0x102c <prvUnlockQueue>
    12aa:	e9 d6       	rcall	.+3538   	; 0x207e <xTaskResumeAll>
    12ac:	81 11       	cpse	r24, r1
    12ae:	9c cf       	rjmp	.-200    	; 0x11e8 <xQueueGenericSend+0x40>
    12b0:	71 dd       	rcall	.-1310   	; 0xd94 <vPortYield>
    12b2:	9a cf       	rjmp	.-204    	; 0x11e8 <xQueueGenericSend+0x40>
    12b4:	c7 01       	movw	r24, r14
    12b6:	ba de       	rcall	.-652    	; 0x102c <prvUnlockQueue>
    12b8:	e2 d6       	rcall	.+3524   	; 0x207e <xTaskResumeAll>
    12ba:	96 cf       	rjmp	.-212    	; 0x11e8 <xQueueGenericSend+0x40>
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 de       	rcall	.-660    	; 0x102c <prvUnlockQueue>
    12c0:	de d6       	rcall	.+3516   	; 0x207e <xTaskResumeAll>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	29 96       	adiw	r28, 0x09	; 9
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	bf 90       	pop	r11
    12e2:	af 90       	pop	r10
    12e4:	9f 90       	pop	r9
    12e6:	08 95       	ret

000012e8 <xQueueCreateMutex>:
    12e8:	0f 93       	push	r16
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	48 2f       	mov	r20, r24
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	2b df       	rcall	.-426    	; 0x114c <xQueueGenericCreate>
    12f6:	ec 01       	movw	r28, r24
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	61 f0       	breq	.+24     	; 0x1314 <xQueueCreateMutex+0x2c>
    12fc:	1d 82       	std	Y+5, r1	; 0x05
    12fe:	1c 82       	std	Y+4, r1	; 0x04
    1300:	19 82       	std	Y+1, r1	; 0x01
    1302:	18 82       	st	Y, r1
    1304:	1e 82       	std	Y+6, r1	; 0x06
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	4a df       	rcall	.-364    	; 0x11a8 <xQueueGenericSend>
    1314:	ce 01       	movw	r24, r28
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <xQueueGenericSendFromISR>:
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	8a 01       	movw	r16, r20
    132c:	fc 01       	movw	r30, r24
    132e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1330:	37 8d       	ldd	r19, Z+31	; 0x1f
    1332:	53 17       	cp	r21, r19
    1334:	10 f0       	brcs	.+4      	; 0x133a <xQueueGenericSendFromISR+0x1c>
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	e9 f4       	brne	.+58     	; 0x1374 <xQueueGenericSendFromISR+0x56>
    133a:	42 2f       	mov	r20, r18
    133c:	78 01       	movw	r14, r16
    133e:	ec 01       	movw	r28, r24
    1340:	1a a1       	ldd	r17, Y+34	; 0x22
    1342:	fb dd       	rcall	.-1034   	; 0xf3a <prvCopyDataToQueue>
    1344:	1f 3f       	cpi	r17, 0xFF	; 255
    1346:	81 f4       	brne	.+32     	; 0x1368 <xQueueGenericSendFromISR+0x4a>
    1348:	8b 89       	ldd	r24, Y+19	; 0x13
    134a:	88 23       	and	r24, r24
    134c:	a9 f0       	breq	.+42     	; 0x1378 <xQueueGenericSendFromISR+0x5a>
    134e:	ce 01       	movw	r24, r28
    1350:	43 96       	adiw	r24, 0x13	; 19
    1352:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <xTaskRemoveFromEventList>
    1356:	88 23       	and	r24, r24
    1358:	89 f0       	breq	.+34     	; 0x137c <xQueueGenericSendFromISR+0x5e>
    135a:	e1 14       	cp	r14, r1
    135c:	f1 04       	cpc	r15, r1
    135e:	81 f0       	breq	.+32     	; 0x1380 <xQueueGenericSendFromISR+0x62>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	f7 01       	movw	r30, r14
    1364:	80 83       	st	Z, r24
    1366:	0d c0       	rjmp	.+26     	; 0x1382 <xQueueGenericSendFromISR+0x64>
    1368:	ff 24       	eor	r15, r15
    136a:	f3 94       	inc	r15
    136c:	f1 0e       	add	r15, r17
    136e:	fa a2       	std	Y+34, r15	; 0x22
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <xQueueGenericSendFromISR+0x64>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <xQueueGenericSendFromISR+0x64>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <xQueueGenericSendFromISR+0x64>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <xQueueGenericSendFromISR+0x64>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	08 95       	ret

00001390 <xQueueReceive>:
    1390:	9f 92       	push	r9
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	29 97       	sbiw	r28, 0x09	; 9
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	8c 01       	movw	r16, r24
    13b8:	5b 01       	movw	r10, r22
    13ba:	2e 83       	std	Y+6, r18	; 0x06
    13bc:	3f 83       	std	Y+7, r19	; 0x07
    13be:	48 87       	std	Y+8, r20	; 0x08
    13c0:	59 87       	std	Y+9, r21	; 0x09
    13c2:	e1 2c       	mov	r14, r1
    13c4:	99 24       	eor	r9, r9
    13c6:	93 94       	inc	r9
    13c8:	6c 01       	movw	r12, r24
    13ca:	83 e1       	ldi	r24, 0x13	; 19
    13cc:	c8 0e       	add	r12, r24
    13ce:	d1 1c       	adc	r13, r1
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	0f 92       	push	r0
    13d6:	f8 01       	movw	r30, r16
    13d8:	f6 8c       	ldd	r15, Z+30	; 0x1e
    13da:	ff 20       	and	r15, r15
    13dc:	91 f0       	breq	.+36     	; 0x1402 <xQueueReceive+0x72>
    13de:	b5 01       	movw	r22, r10
    13e0:	c8 01       	movw	r24, r16
    13e2:	0a de       	rcall	.-1004   	; 0xff8 <prvCopyDataFromQueue>
    13e4:	fa 94       	dec	r15
    13e6:	f8 01       	movw	r30, r16
    13e8:	f6 8e       	std	Z+30, r15	; 0x1e
    13ea:	80 85       	ldd	r24, Z+8	; 0x08
    13ec:	88 23       	and	r24, r24
    13ee:	29 f0       	breq	.+10     	; 0x13fa <xQueueReceive+0x6a>
    13f0:	c8 01       	movw	r24, r16
    13f2:	08 96       	adiw	r24, 0x08	; 8
    13f4:	ed d7       	rcall	.+4058   	; 0x23d0 <xTaskRemoveFromEventList>
    13f6:	81 11       	cpse	r24, r1
    13f8:	cd dc       	rcall	.-1638   	; 0xd94 <vPortYield>
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	4c c0       	rjmp	.+152    	; 0x149a <xQueueReceive+0x10a>
    1402:	8e 81       	ldd	r24, Y+6	; 0x06
    1404:	9f 81       	ldd	r25, Y+7	; 0x07
    1406:	a8 85       	ldd	r26, Y+8	; 0x08
    1408:	b9 85       	ldd	r27, Y+9	; 0x09
    140a:	89 2b       	or	r24, r25
    140c:	8a 2b       	or	r24, r26
    140e:	8b 2b       	or	r24, r27
    1410:	21 f4       	brne	.+8      	; 0x141a <xQueueReceive+0x8a>
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	40 c0       	rjmp	.+128    	; 0x149a <xQueueReceive+0x10a>
    141a:	e1 10       	cpse	r14, r1
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <xQueueReceive+0x98>
    141e:	ce 01       	movw	r24, r28
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	0e 94 40 12 	call	0x2480	; 0x2480 <vTaskInternalSetTimeOutState>
    1426:	e9 2c       	mov	r14, r9
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	3f d5       	rcall	.+2686   	; 0x1eac <vTaskSuspendAll>
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	0f 92       	push	r0
    1434:	f8 01       	movw	r30, r16
    1436:	81 a1       	ldd	r24, Z+33	; 0x21
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	09 f4       	brne	.+2      	; 0x143e <xQueueReceive+0xae>
    143c:	11 a2       	std	Z+33, r1	; 0x21
    143e:	f8 01       	movw	r30, r16
    1440:	82 a1       	ldd	r24, Z+34	; 0x22
    1442:	8f 3f       	cpi	r24, 0xFF	; 255
    1444:	09 f4       	brne	.+2      	; 0x1448 <xQueueReceive+0xb8>
    1446:	12 a2       	std	Z+34, r1	; 0x22
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	be 01       	movw	r22, r28
    144e:	6a 5f       	subi	r22, 0xFA	; 250
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskCheckForTimeOut>
    145a:	81 11       	cpse	r24, r1
    145c:	15 c0       	rjmp	.+42     	; 0x1488 <xQueueReceive+0xf8>
    145e:	c8 01       	movw	r24, r16
    1460:	61 dd       	rcall	.-1342   	; 0xf24 <prvIsQueueEmpty>
    1462:	88 23       	and	r24, r24
    1464:	69 f0       	breq	.+26     	; 0x1480 <xQueueReceive+0xf0>
    1466:	4e 81       	ldd	r20, Y+6	; 0x06
    1468:	5f 81       	ldd	r21, Y+7	; 0x07
    146a:	68 85       	ldd	r22, Y+8	; 0x08
    146c:	79 85       	ldd	r23, Y+9	; 0x09
    146e:	c6 01       	movw	r24, r12
    1470:	78 d7       	rcall	.+3824   	; 0x2362 <vTaskPlaceOnEventList>
    1472:	c8 01       	movw	r24, r16
    1474:	db dd       	rcall	.-1098   	; 0x102c <prvUnlockQueue>
    1476:	03 d6       	rcall	.+3078   	; 0x207e <xTaskResumeAll>
    1478:	81 11       	cpse	r24, r1
    147a:	aa cf       	rjmp	.-172    	; 0x13d0 <xQueueReceive+0x40>
    147c:	8b dc       	rcall	.-1770   	; 0xd94 <vPortYield>
    147e:	a8 cf       	rjmp	.-176    	; 0x13d0 <xQueueReceive+0x40>
    1480:	c8 01       	movw	r24, r16
    1482:	d4 dd       	rcall	.-1112   	; 0x102c <prvUnlockQueue>
    1484:	fc d5       	rcall	.+3064   	; 0x207e <xTaskResumeAll>
    1486:	a4 cf       	rjmp	.-184    	; 0x13d0 <xQueueReceive+0x40>
    1488:	c8 01       	movw	r24, r16
    148a:	d0 dd       	rcall	.-1120   	; 0x102c <prvUnlockQueue>
    148c:	f8 d5       	rcall	.+3056   	; 0x207e <xTaskResumeAll>
    148e:	c8 01       	movw	r24, r16
    1490:	49 dd       	rcall	.-1390   	; 0xf24 <prvIsQueueEmpty>
    1492:	88 23       	and	r24, r24
    1494:	09 f4       	brne	.+2      	; 0x1498 <xQueueReceive+0x108>
    1496:	9c cf       	rjmp	.-200    	; 0x13d0 <xQueueReceive+0x40>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	29 96       	adiw	r28, 0x09	; 9
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	bf 90       	pop	r11
    14b8:	af 90       	pop	r10
    14ba:	9f 90       	pop	r9
    14bc:	08 95       	ret

000014be <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	0f 92       	push	r0
    14ca:	89 a1       	ldd	r24, Y+33	; 0x21
    14cc:	8f 3f       	cpi	r24, 0xFF	; 255
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <vQueueWaitForMessageRestricted+0x14>
    14d0:	19 a2       	std	Y+33, r1	; 0x21
    14d2:	8a a1       	ldd	r24, Y+34	; 0x22
    14d4:	8f 3f       	cpi	r24, 0xFF	; 255
    14d6:	09 f4       	brne	.+2      	; 0x14da <vQueueWaitForMessageRestricted+0x1c>
    14d8:	1a a2       	std	Y+34, r1	; 0x22
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e0:	81 11       	cpse	r24, r1
    14e2:	03 c0       	rjmp	.+6      	; 0x14ea <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    14e4:	ce 01       	movw	r24, r28
    14e6:	43 96       	adiw	r24, 0x13	; 19
    14e8:	53 d7       	rcall	.+3750   	; 0x2390 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    14ea:	ce 01       	movw	r24, r28
    14ec:	9f dd       	rcall	.-1218   	; 0x102c <prvUnlockQueue>
    }
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    14f4:	fc 01       	movw	r30, r24
    14f6:	44 81       	ldd	r20, Z+4	; 0x04
    14f8:	55 81       	ldd	r21, Z+5	; 0x05
    14fa:	22 81       	ldd	r18, Z+2	; 0x02
    14fc:	33 81       	ldd	r19, Z+3	; 0x03
    14fe:	24 0f       	add	r18, r20
    1500:	35 1f       	adc	r19, r21
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	b9 01       	movw	r22, r18
    1508:	68 1b       	sub	r22, r24
    150a:	79 0b       	sbc	r23, r25
    150c:	cb 01       	movw	r24, r22
    150e:	64 17       	cp	r22, r20
    1510:	75 07       	cpc	r23, r21
    1512:	10 f0       	brcs	.+4      	; 0x1518 <prvBytesInBuffer+0x24>
    1514:	84 1b       	sub	r24, r20
    1516:	95 0b       	sbc	r25, r21
    1518:	08 95       	ret

0000151a <prvWriteBytesToBuffer>:
    151a:	af 92       	push	r10
    151c:	bf 92       	push	r11
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	6c 01       	movw	r12, r24
    1530:	5b 01       	movw	r10, r22
    1532:	7a 01       	movw	r14, r20
    1534:	fc 01       	movw	r30, r24
    1536:	c2 81       	ldd	r28, Z+2	; 0x02
    1538:	d3 81       	ldd	r29, Z+3	; 0x03
    153a:	04 81       	ldd	r16, Z+4	; 0x04
    153c:	15 81       	ldd	r17, Z+5	; 0x05
    153e:	0c 1b       	sub	r16, r28
    1540:	1d 0b       	sbc	r17, r29
    1542:	40 17       	cp	r20, r16
    1544:	51 07       	cpc	r21, r17
    1546:	08 f4       	brcc	.+2      	; 0x154a <prvWriteBytesToBuffer+0x30>
    1548:	8a 01       	movw	r16, r20
    154a:	f6 01       	movw	r30, r12
    154c:	84 85       	ldd	r24, Z+12	; 0x0c
    154e:	95 85       	ldd	r25, Z+13	; 0x0d
    1550:	a8 01       	movw	r20, r16
    1552:	b5 01       	movw	r22, r10
    1554:	8c 0f       	add	r24, r28
    1556:	9d 1f       	adc	r25, r29
    1558:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <memcpy>
    155c:	0e 15       	cp	r16, r14
    155e:	1f 05       	cpc	r17, r15
    1560:	58 f4       	brcc	.+22     	; 0x1578 <prvWriteBytesToBuffer+0x5e>
    1562:	a7 01       	movw	r20, r14
    1564:	40 1b       	sub	r20, r16
    1566:	51 0b       	sbc	r21, r17
    1568:	b5 01       	movw	r22, r10
    156a:	60 0f       	add	r22, r16
    156c:	71 1f       	adc	r23, r17
    156e:	f6 01       	movw	r30, r12
    1570:	84 85       	ldd	r24, Z+12	; 0x0c
    1572:	95 85       	ldd	r25, Z+13	; 0x0d
    1574:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <memcpy>
    1578:	ce 01       	movw	r24, r28
    157a:	8e 0d       	add	r24, r14
    157c:	9f 1d       	adc	r25, r15
    157e:	f6 01       	movw	r30, r12
    1580:	24 81       	ldd	r18, Z+4	; 0x04
    1582:	35 81       	ldd	r19, Z+5	; 0x05
    1584:	82 17       	cp	r24, r18
    1586:	93 07       	cpc	r25, r19
    1588:	10 f0       	brcs	.+4      	; 0x158e <prvWriteBytesToBuffer+0x74>
    158a:	82 1b       	sub	r24, r18
    158c:	93 0b       	sbc	r25, r19
    158e:	f6 01       	movw	r30, r12
    1590:	93 83       	std	Z+3, r25	; 0x03
    1592:	82 83       	std	Z+2, r24	; 0x02
    1594:	c7 01       	movw	r24, r14
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	bf 90       	pop	r11
    15a8:	af 90       	pop	r10
    15aa:	08 95       	ret

000015ac <prvWriteMessageToBuffer>:
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	1f 92       	push	r1
    15be:	1f 92       	push	r1
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	5a 83       	std	Y+2, r21	; 0x02
    15c6:	49 83       	std	Y+1, r20	; 0x01
    15c8:	21 15       	cp	r18, r1
    15ca:	31 05       	cpc	r19, r1
    15cc:	c9 f0       	breq	.+50     	; 0x1600 <prvWriteMessageToBuffer+0x54>
    15ce:	6b 01       	movw	r12, r22
    15d0:	7c 01       	movw	r14, r24
    15d2:	fc 01       	movw	r30, r24
    15d4:	86 85       	ldd	r24, Z+14	; 0x0e
    15d6:	80 fd       	sbrc	r24, 0
    15d8:	08 c0       	rjmp	.+16     	; 0x15ea <prvWriteMessageToBuffer+0x3e>
    15da:	ca 01       	movw	r24, r20
    15dc:	24 17       	cp	r18, r20
    15de:	35 07       	cpc	r19, r21
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <prvWriteMessageToBuffer+0x38>
    15e2:	c9 01       	movw	r24, r18
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	11 c0       	rjmp	.+34     	; 0x160c <prvWriteMessageToBuffer+0x60>
    15ea:	20 17       	cp	r18, r16
    15ec:	31 07       	cpc	r19, r17
    15ee:	58 f0       	brcs	.+22     	; 0x1606 <prvWriteMessageToBuffer+0x5a>
    15f0:	42 e0       	ldi	r20, 0x02	; 2
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	be 01       	movw	r22, r28
    15f6:	6f 5f       	subi	r22, 0xFF	; 255
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	c7 01       	movw	r24, r14
    15fc:	8e df       	rcall	.-228    	; 0x151a <prvWriteBytesToBuffer>
    15fe:	06 c0       	rjmp	.+12     	; 0x160c <prvWriteMessageToBuffer+0x60>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	08 c0       	rjmp	.+16     	; 0x1616 <prvWriteMessageToBuffer+0x6a>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <prvWriteMessageToBuffer+0x6a>
    160c:	49 81       	ldd	r20, Y+1	; 0x01
    160e:	5a 81       	ldd	r21, Y+2	; 0x02
    1610:	b6 01       	movw	r22, r12
    1612:	c7 01       	movw	r24, r14
    1614:	82 df       	rcall	.-252    	; 0x151a <prvWriteBytesToBuffer>
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	08 95       	ret

0000162c <prvReadBytesFromBuffer>:
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	7c 01       	movw	r14, r24
    1642:	5b 01       	movw	r10, r22
    1644:	e9 01       	movw	r28, r18
    1646:	42 17       	cp	r20, r18
    1648:	53 07       	cpc	r21, r19
    164a:	08 f4       	brcc	.+2      	; 0x164e <prvReadBytesFromBuffer+0x22>
    164c:	ea 01       	movw	r28, r20
    164e:	20 97       	sbiw	r28, 0x00	; 0
    1650:	79 f1       	breq	.+94     	; 0x16b0 <prvReadBytesFromBuffer+0x84>
    1652:	f7 01       	movw	r30, r14
    1654:	00 81       	ld	r16, Z
    1656:	11 81       	ldd	r17, Z+1	; 0x01
    1658:	c4 80       	ldd	r12, Z+4	; 0x04
    165a:	d5 80       	ldd	r13, Z+5	; 0x05
    165c:	c0 1a       	sub	r12, r16
    165e:	d1 0a       	sbc	r13, r17
    1660:	cc 15       	cp	r28, r12
    1662:	dd 05       	cpc	r29, r13
    1664:	08 f4       	brcc	.+2      	; 0x1668 <prvReadBytesFromBuffer+0x3c>
    1666:	6e 01       	movw	r12, r28
    1668:	f7 01       	movw	r30, r14
    166a:	64 85       	ldd	r22, Z+12	; 0x0c
    166c:	75 85       	ldd	r23, Z+13	; 0x0d
    166e:	60 0f       	add	r22, r16
    1670:	71 1f       	adc	r23, r17
    1672:	a6 01       	movw	r20, r12
    1674:	c5 01       	movw	r24, r10
    1676:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <memcpy>
    167a:	cc 16       	cp	r12, r28
    167c:	dd 06       	cpc	r13, r29
    167e:	58 f4       	brcc	.+22     	; 0x1696 <prvReadBytesFromBuffer+0x6a>
    1680:	ae 01       	movw	r20, r28
    1682:	4c 19       	sub	r20, r12
    1684:	5d 09       	sbc	r21, r13
    1686:	f7 01       	movw	r30, r14
    1688:	64 85       	ldd	r22, Z+12	; 0x0c
    168a:	75 85       	ldd	r23, Z+13	; 0x0d
    168c:	c5 01       	movw	r24, r10
    168e:	8c 0d       	add	r24, r12
    1690:	9d 1d       	adc	r25, r13
    1692:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <memcpy>
    1696:	0c 0f       	add	r16, r28
    1698:	1d 1f       	adc	r17, r29
    169a:	f7 01       	movw	r30, r14
    169c:	84 81       	ldd	r24, Z+4	; 0x04
    169e:	95 81       	ldd	r25, Z+5	; 0x05
    16a0:	08 17       	cp	r16, r24
    16a2:	19 07       	cpc	r17, r25
    16a4:	10 f0       	brcs	.+4      	; 0x16aa <prvReadBytesFromBuffer+0x7e>
    16a6:	08 1b       	sub	r16, r24
    16a8:	19 0b       	sbc	r17, r25
    16aa:	f7 01       	movw	r30, r14
    16ac:	11 83       	std	Z+1, r17	; 0x01
    16ae:	00 83       	st	Z, r16
    16b0:	ce 01       	movw	r24, r28
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	08 95       	ret

000016c8 <xStreamBufferGenericCreate>:
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	eb 01       	movw	r28, r22
    16d4:	11 e0       	ldi	r17, 0x01	; 1
    16d6:	41 30       	cpi	r20, 0x01	; 1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <xStreamBufferGenericCreate+0x14>
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	20 97       	sbiw	r28, 0x00	; 0
    16de:	11 f4       	brne	.+4      	; 0x16e4 <xStreamBufferGenericCreate+0x1c>
    16e0:	c1 e0       	ldi	r28, 0x01	; 1
    16e2:	d0 e0       	ldi	r29, 0x00	; 0
    16e4:	7c 01       	movw	r14, r24
    16e6:	2f ef       	ldi	r18, 0xFF	; 255
    16e8:	e2 1a       	sub	r14, r18
    16ea:	f2 0a       	sbc	r15, r18
    16ec:	41 96       	adiw	r24, 0x11	; 17
    16ee:	20 d9       	rcall	.-3520   	; 0x930 <pvPortMalloc>
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	81 f0       	breq	.+32     	; 0x1714 <xStreamBufferGenericCreate+0x4c>
    16f4:	20 e1       	ldi	r18, 0x10	; 16
    16f6:	fc 01       	movw	r30, r24
    16f8:	11 92       	st	Z+, r1
    16fa:	2a 95       	dec	r18
    16fc:	e9 f7       	brne	.-6      	; 0x16f8 <xStreamBufferGenericCreate+0x30>
    16fe:	9c 01       	movw	r18, r24
    1700:	20 5f       	subi	r18, 0xF0	; 240
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	fc 01       	movw	r30, r24
    1706:	35 87       	std	Z+13, r19	; 0x0d
    1708:	24 87       	std	Z+12, r18	; 0x0c
    170a:	f5 82       	std	Z+5, r15	; 0x05
    170c:	e4 82       	std	Z+4, r14	; 0x04
    170e:	d7 83       	std	Z+7, r29	; 0x07
    1710:	c6 83       	std	Z+6, r28	; 0x06
    1712:	16 87       	std	Z+14, r17	; 0x0e
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	08 95       	ret

00001720 <xStreamBufferReset>:
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	fc 01       	movw	r30, r24
    1726:	27 85       	ldd	r18, Z+15	; 0x0f
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	0f 92       	push	r0
    172e:	80 85       	ldd	r24, Z+8	; 0x08
    1730:	91 85       	ldd	r25, Z+9	; 0x09
    1732:	89 2b       	or	r24, r25
    1734:	d1 f4       	brne	.+52     	; 0x176a <xStreamBufferReset+0x4a>
    1736:	82 85       	ldd	r24, Z+10	; 0x0a
    1738:	93 85       	ldd	r25, Z+11	; 0x0b
    173a:	89 2b       	or	r24, r25
    173c:	c1 f4       	brne	.+48     	; 0x176e <xStreamBufferReset+0x4e>
    173e:	86 85       	ldd	r24, Z+14	; 0x0e
    1740:	46 81       	ldd	r20, Z+6	; 0x06
    1742:	57 81       	ldd	r21, Z+7	; 0x07
    1744:	64 81       	ldd	r22, Z+4	; 0x04
    1746:	75 81       	ldd	r23, Z+5	; 0x05
    1748:	a4 85       	ldd	r26, Z+12	; 0x0c
    174a:	b5 85       	ldd	r27, Z+13	; 0x0d
    174c:	90 e1       	ldi	r25, 0x10	; 16
    174e:	ef 01       	movw	r28, r30
    1750:	19 92       	st	Y+, r1
    1752:	9a 95       	dec	r25
    1754:	e9 f7       	brne	.-6      	; 0x1750 <xStreamBufferReset+0x30>
    1756:	b5 87       	std	Z+13, r27	; 0x0d
    1758:	a4 87       	std	Z+12, r26	; 0x0c
    175a:	75 83       	std	Z+5, r23	; 0x05
    175c:	64 83       	std	Z+4, r22	; 0x04
    175e:	57 83       	std	Z+7, r21	; 0x07
    1760:	46 83       	std	Z+6, r20	; 0x06
    1762:	86 87       	std	Z+14, r24	; 0x0e
    1764:	27 87       	std	Z+15, r18	; 0x0f
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <xStreamBufferReset+0x50>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <xStreamBufferReset+0x50>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <xStreamBufferSpacesAvailable>:
    177a:	fc 01       	movw	r30, r24
    177c:	24 81       	ldd	r18, Z+4	; 0x04
    177e:	35 81       	ldd	r19, Z+5	; 0x05
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	42 81       	ldd	r20, Z+2	; 0x02
    1786:	53 81       	ldd	r21, Z+3	; 0x03
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	84 1b       	sub	r24, r20
    1790:	95 0b       	sbc	r25, r21
    1792:	82 17       	cp	r24, r18
    1794:	93 07       	cpc	r25, r19
    1796:	10 f0       	brcs	.+4      	; 0x179c <xStreamBufferSpacesAvailable+0x22>
    1798:	82 1b       	sub	r24, r18
    179a:	93 0b       	sbc	r25, r19
    179c:	08 95       	ret

0000179e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    179e:	2f 92       	push	r2
    17a0:	3f 92       	push	r3
    17a2:	4f 92       	push	r4
    17a4:	5f 92       	push	r5
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	29 97       	sbiw	r28, 0x09	; 9
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	5c 01       	movw	r10, r24
    17d4:	1b 01       	movw	r2, r22
    17d6:	2a 01       	movw	r4, r20
    17d8:	0e 83       	std	Y+6, r16	; 0x06
    17da:	1f 83       	std	Y+7, r17	; 0x07
    17dc:	28 87       	std	Y+8, r18	; 0x08
    17de:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17e0:	fc 01       	movw	r30, r24
    17e2:	86 85       	ldd	r24, Z+14	; 0x0e
    17e4:	80 ff       	sbrs	r24, 0
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17e8:	3a 01       	movw	r6, r20
    17ea:	f2 e0       	ldi	r31, 0x02	; 2
    17ec:	6f 0e       	add	r6, r31
    17ee:	71 1c       	adc	r7, r1
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    17f2:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    17f4:	8e 81       	ldd	r24, Y+6	; 0x06
    17f6:	9f 81       	ldd	r25, Y+7	; 0x07
    17f8:	a8 85       	ldd	r26, Y+8	; 0x08
    17fa:	b9 85       	ldd	r27, Y+9	; 0x09
    17fc:	89 2b       	or	r24, r25
    17fe:	8a 2b       	or	r24, r26
    1800:	8b 2b       	or	r24, r27
    1802:	09 f4       	brne	.+2      	; 0x1806 <xStreamBufferSend+0x68>
    1804:	34 c0       	rjmp	.+104    	; 0x186e <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	24 d6       	rcall	.+3144   	; 0x2454 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1812:	c5 01       	movw	r24, r10
    1814:	b2 df       	rcall	.-156    	; 0x177a <xStreamBufferSpacesAvailable>
    1816:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1818:	86 15       	cp	r24, r6
    181a:	97 05       	cpc	r25, r7
    181c:	18 f5       	brcc	.+70     	; 0x1864 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 88 14 	call	0x2910	; 0x2910 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1826:	96 d6       	rcall	.+3372   	; 0x2554 <xTaskGetCurrentTaskHandle>
    1828:	f5 01       	movw	r30, r10
    182a:	93 87       	std	Z+11, r25	; 0x0b
    182c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1832:	ce 80       	ldd	r12, Y+6	; 0x06
    1834:	df 80       	ldd	r13, Y+7	; 0x07
    1836:	e8 84       	ldd	r14, Y+8	; 0x08
    1838:	f9 84       	ldd	r15, Y+9	; 0x09
    183a:	00 e0       	ldi	r16, 0x00	; 0
    183c:	10 e0       	ldi	r17, 0x00	; 0
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	a9 01       	movw	r20, r18
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	cb 01       	movw	r24, r22
    184a:	d7 d6       	rcall	.+3502   	; 0x25fa <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    184c:	f5 01       	movw	r30, r10
    184e:	13 86       	std	Z+11, r1	; 0x0b
    1850:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1852:	be 01       	movw	r22, r28
    1854:	6a 5f       	subi	r22, 0xFA	; 250
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	22 d6       	rcall	.+3140   	; 0x24a2 <xTaskCheckForTimeOut>
    185e:	88 23       	and	r24, r24
    1860:	a9 f2       	breq	.-86     	; 0x180c <xStreamBufferSend+0x6e>
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1864:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	81 14       	cp	r8, r1
    186a:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    186c:	19 f4       	brne	.+6      	; 0x1874 <xStreamBufferSend+0xd6>
    186e:	c5 01       	movw	r24, r10
    1870:	84 df       	rcall	.-248    	; 0x177a <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1872:	4c 01       	movw	r8, r24
    1874:	83 01       	movw	r16, r6
    1876:	94 01       	movw	r18, r8
    1878:	a2 01       	movw	r20, r4
    187a:	b1 01       	movw	r22, r2
    187c:	c5 01       	movw	r24, r10
    187e:	96 de       	rcall	.-724    	; 0x15ac <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1880:	7c 01       	movw	r14, r24
    1882:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1884:	d9 f0       	breq	.+54     	; 0x18bc <xStreamBufferSend+0x11e>
    1886:	c5 01       	movw	r24, r10
    1888:	35 de       	rcall	.-918    	; 0x14f4 <prvBytesInBuffer>
    188a:	f5 01       	movw	r30, r10
    188c:	26 81       	ldd	r18, Z+6	; 0x06
    188e:	37 81       	ldd	r19, Z+7	; 0x07
    1890:	82 17       	cp	r24, r18
    1892:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1894:	98 f0       	brcs	.+38     	; 0x18bc <xStreamBufferSend+0x11e>
    1896:	0a d3       	rcall	.+1556   	; 0x1eac <vTaskSuspendAll>
    1898:	f5 01       	movw	r30, r10
    189a:	80 85       	ldd	r24, Z+8	; 0x08
    189c:	91 85       	ldd	r25, Z+9	; 0x09
    189e:	89 2b       	or	r24, r25
    18a0:	61 f0       	breq	.+24     	; 0x18ba <xStreamBufferSend+0x11c>
    18a2:	80 85       	ldd	r24, Z+8	; 0x08
    18a4:	91 85       	ldd	r25, Z+9	; 0x09
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	ba 01       	movw	r22, r20
    18b2:	2d d7       	rcall	.+3674   	; 0x270e <xTaskGenericNotify>
    18b4:	f5 01       	movw	r30, r10
    18b6:	11 86       	std	Z+9, r1	; 0x09
    18b8:	10 86       	std	Z+8, r1	; 0x08
    18ba:	e1 d3       	rcall	.+1986   	; 0x207e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    18bc:	c7 01       	movw	r24, r14
    18be:	29 96       	adiw	r28, 0x09	; 9
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	7f 90       	pop	r7
    18e4:	6f 90       	pop	r6
    18e6:	5f 90       	pop	r5
    18e8:	4f 90       	pop	r4
    18ea:	3f 90       	pop	r3
    18ec:	2f 90       	pop	r2
    18ee:	08 95       	ret

000018f0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
    1906:	5b 01       	movw	r10, r22
    1908:	6a 01       	movw	r12, r20
    190a:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    190c:	8e 85       	ldd	r24, Y+14	; 0x0e
    190e:	80 ff       	sbrs	r24, 0
    1910:	04 c0       	rjmp	.+8      	; 0x191a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1912:	8a 01       	movw	r16, r20
    1914:	0e 5f       	subi	r16, 0xFE	; 254
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
    1918:	01 c0       	rjmp	.+2      	; 0x191c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    191a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    191c:	ce 01       	movw	r24, r28
    191e:	2d df       	rcall	.-422    	; 0x177a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1920:	9c 01       	movw	r18, r24
    1922:	a6 01       	movw	r20, r12
    1924:	b5 01       	movw	r22, r10
    1926:	ce 01       	movw	r24, r28
    1928:	41 de       	rcall	.-894    	; 0x15ac <prvWriteMessageToBuffer>
    192a:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    192c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    192e:	b1 f0       	breq	.+44     	; 0x195c <xStreamBufferSendFromISR+0x6c>
    1930:	ce 01       	movw	r24, r28
    1932:	e0 dd       	rcall	.-1088   	; 0x14f4 <prvBytesInBuffer>
    1934:	2e 81       	ldd	r18, Y+6	; 0x06
    1936:	3f 81       	ldd	r19, Y+7	; 0x07
    1938:	82 17       	cp	r24, r18
    193a:	93 07       	cpc	r25, r19
    193c:	78 f0       	brcs	.+30     	; 0x195c <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    193e:	88 85       	ldd	r24, Y+8	; 0x08
    1940:	99 85       	ldd	r25, Y+9	; 0x09
    1942:	89 2b       	or	r24, r25
    1944:	59 f0       	breq	.+22     	; 0x195c <xStreamBufferSendFromISR+0x6c>
    1946:	88 85       	ldd	r24, Y+8	; 0x08
    1948:	99 85       	ldd	r25, Y+9	; 0x09
    194a:	00 e0       	ldi	r16, 0x00	; 0
    194c:	10 e0       	ldi	r17, 0x00	; 0
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	ba 01       	movw	r22, r20
    1956:	53 d7       	rcall	.+3750   	; 0x27fe <xTaskGenericNotifyFromISR>
    1958:	19 86       	std	Y+9, r1	; 0x09
    195a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    195c:	c6 01       	movw	r24, r12
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	08 95       	ret

00001974 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1974:	4f 92       	push	r4
    1976:	5f 92       	push	r5
    1978:	6f 92       	push	r6
    197a:	7f 92       	push	r7
    197c:	8f 92       	push	r8
    197e:	9f 92       	push	r9
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	1f 92       	push	r1
    1996:	1f 92       	push	r1
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	5c 01       	movw	r10, r24
    199e:	2b 01       	movw	r4, r22
    19a0:	3a 01       	movw	r6, r20
    19a2:	68 01       	movw	r12, r16
    19a4:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19a6:	fc 01       	movw	r30, r24
    19a8:	86 85       	ldd	r24, Z+14	; 0x0e
    19aa:	80 fd       	sbrc	r24, 0
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    19ae:	81 2c       	mov	r8, r1
    19b0:	91 2c       	mov	r9, r1
    19b2:	04 c0       	rjmp	.+8      	; 0x19bc <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19b4:	68 94       	set
    19b6:	88 24       	eor	r8, r8
    19b8:	81 f8       	bld	r8, 1
    19ba:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19bc:	c1 14       	cp	r12, r1
    19be:	d1 04       	cpc	r13, r1
    19c0:	e1 04       	cpc	r14, r1
    19c2:	f1 04       	cpc	r15, r1
    19c4:	29 f1       	breq	.+74     	; 0x1a10 <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    19cc:	c5 01       	movw	r24, r10
    19ce:	92 dd       	rcall	.-1244   	; 0x14f4 <prvBytesInBuffer>
    19d0:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    19d2:	88 16       	cp	r8, r24
    19d4:	99 06       	cpc	r9, r25
    19d6:	38 f0       	brcs	.+14     	; 0x19e6 <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    19dc:	99 d7       	rcall	.+3890   	; 0x2910 <xTaskNotifyStateClear>
    19de:	ba d5       	rcall	.+2932   	; 0x2554 <xTaskGetCurrentTaskHandle>
    19e0:	f5 01       	movw	r30, r10
    19e2:	91 87       	std	Z+9, r25	; 0x09
    19e4:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    19ea:	80 16       	cp	r8, r16
    19ec:	91 06       	cpc	r9, r17
    19ee:	b0 f0       	brcs	.+44     	; 0x1a1c <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    19f0:	00 e0       	ldi	r16, 0x00	; 0
    19f2:	10 e0       	ldi	r17, 0x00	; 0
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	a9 01       	movw	r20, r18
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	cb 01       	movw	r24, r22
    1a00:	fc d5       	rcall	.+3064   	; 0x25fa <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1a02:	f5 01       	movw	r30, r10
    1a04:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a06:	10 86       	std	Z+8, r1	; 0x08
    1a08:	c5 01       	movw	r24, r10
    1a0a:	74 dd       	rcall	.-1304   	; 0x14f4 <prvBytesInBuffer>
    1a0c:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <xStreamBufferReceive+0xa2>
    1a10:	c5 01       	movw	r24, r10
    1a12:	70 dd       	rcall	.-1312   	; 0x14f4 <prvBytesInBuffer>
    1a14:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a16:	80 16       	cp	r8, r16
    1a18:	91 06       	cpc	r9, r17
    1a1a:	b8 f5       	brcc	.+110    	; 0x1a8a <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1a1c:	81 14       	cp	r8, r1
    1a1e:	91 04       	cpc	r9, r1
    1a20:	c1 f0       	breq	.+48     	; 0x1a52 <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1a22:	f5 01       	movw	r30, r10
    1a24:	e0 80       	ld	r14, Z
    1a26:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1a28:	98 01       	movw	r18, r16
    1a2a:	a4 01       	movw	r20, r8
    1a2c:	be 01       	movw	r22, r28
    1a2e:	6f 5f       	subi	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	c5 01       	movw	r24, r10
    1a34:	fb dd       	rcall	.-1034   	; 0x162c <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1a3a:	08 19       	sub	r16, r8
    1a3c:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1a3e:	68 16       	cp	r6, r24
    1a40:	79 06       	cpc	r7, r25
    1a42:	30 f4       	brcc	.+12     	; 0x1a50 <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1a44:	f5 01       	movw	r30, r10
    1a46:	f1 82       	std	Z+1, r15	; 0x01
    1a48:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1a4a:	61 2c       	mov	r6, r1
    1a4c:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1a50:	3c 01       	movw	r6, r24
    1a52:	98 01       	movw	r18, r16
    1a54:	a3 01       	movw	r20, r6
    1a56:	b2 01       	movw	r22, r4
    1a58:	c5 01       	movw	r24, r10
    1a5a:	e8 dd       	rcall	.-1072   	; 0x162c <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1a5c:	7c 01       	movw	r14, r24
    1a5e:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1a60:	b1 f0       	breq	.+44     	; 0x1a8e <xStreamBufferReceive+0x11a>
    1a62:	24 d2       	rcall	.+1096   	; 0x1eac <vTaskSuspendAll>
    1a64:	f5 01       	movw	r30, r10
    1a66:	82 85       	ldd	r24, Z+10	; 0x0a
    1a68:	93 85       	ldd	r25, Z+11	; 0x0b
    1a6a:	89 2b       	or	r24, r25
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <xStreamBufferReceive+0x112>
    1a6e:	82 85       	ldd	r24, Z+10	; 0x0a
    1a70:	93 85       	ldd	r25, Z+11	; 0x0b
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	ba 01       	movw	r22, r20
    1a7e:	47 d6       	rcall	.+3214   	; 0x270e <xTaskGenericNotify>
    1a80:	f5 01       	movw	r30, r10
    1a82:	13 86       	std	Z+11, r1	; 0x0b
    1a84:	12 86       	std	Z+10, r1	; 0x0a
    1a86:	fb d2       	rcall	.+1526   	; 0x207e <xTaskResumeAll>
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1a8a:	e1 2c       	mov	r14, r1
    1a8c:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1a8e:	c7 01       	movw	r24, r14
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	bf 90       	pop	r11
    1aa6:	af 90       	pop	r10
    1aa8:	9f 90       	pop	r9
    1aaa:	8f 90       	pop	r8
    1aac:	7f 90       	pop	r7
    1aae:	6f 90       	pop	r6
    1ab0:	5f 90       	pop	r5
    1ab2:	4f 90       	pop	r4
    1ab4:	08 95       	ret

00001ab6 <prvResetNextTaskUnblockTime>:
    1ab6:	e0 91 3a 17 	lds	r30, 0x173A	; 0x80173a <pxDelayedTaskList>
    1aba:	f0 91 3b 17 	lds	r31, 0x173B	; 0x80173b <pxDelayedTaskList+0x1>
    1abe:	80 81       	ld	r24, Z
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	0c c0       	rjmp	.+24     	; 0x1adc <prvResetNextTaskUnblockTime+0x26>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	dc 01       	movw	r26, r24
    1aca:	80 93 07 17 	sts	0x1707, r24	; 0x801707 <xNextTaskUnblockTime>
    1ace:	90 93 08 17 	sts	0x1708, r25	; 0x801708 <xNextTaskUnblockTime+0x1>
    1ad2:	a0 93 09 17 	sts	0x1709, r26	; 0x801709 <xNextTaskUnblockTime+0x2>
    1ad6:	b0 93 0a 17 	sts	0x170A, r27	; 0x80170a <xNextTaskUnblockTime+0x3>
    1ada:	08 95       	ret
    1adc:	e0 91 3a 17 	lds	r30, 0x173A	; 0x80173a <pxDelayedTaskList>
    1ae0:	f0 91 3b 17 	lds	r31, 0x173B	; 0x80173b <pxDelayedTaskList+0x1>
    1ae4:	07 80       	ldd	r0, Z+7	; 0x07
    1ae6:	f0 85       	ldd	r31, Z+8	; 0x08
    1ae8:	e0 2d       	mov	r30, r0
    1aea:	00 84       	ldd	r0, Z+8	; 0x08
    1aec:	f1 85       	ldd	r31, Z+9	; 0x09
    1aee:	e0 2d       	mov	r30, r0
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	a4 81       	ldd	r26, Z+4	; 0x04
    1af6:	b5 81       	ldd	r27, Z+5	; 0x05
    1af8:	80 93 07 17 	sts	0x1707, r24	; 0x801707 <xNextTaskUnblockTime>
    1afc:	90 93 08 17 	sts	0x1708, r25	; 0x801708 <xNextTaskUnblockTime+0x1>
    1b00:	a0 93 09 17 	sts	0x1709, r26	; 0x801709 <xNextTaskUnblockTime+0x2>
    1b04:	b0 93 0a 17 	sts	0x170A, r27	; 0x80170a <xNextTaskUnblockTime+0x3>
    1b08:	08 95       	ret

00001b0a <prvAddCurrentTaskToDelayedList>:
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	cf 93       	push	r28
    1b1c:	6b 01       	movw	r12, r22
    1b1e:	7c 01       	movw	r14, r24
    1b20:	c4 2f       	mov	r28, r20
    1b22:	80 90 11 17 	lds	r8, 0x1711	; 0x801711 <xTickCount>
    1b26:	90 90 12 17 	lds	r9, 0x1712	; 0x801712 <xTickCount+0x1>
    1b2a:	a0 90 13 17 	lds	r10, 0x1713	; 0x801713 <xTickCount+0x2>
    1b2e:	b0 90 14 17 	lds	r11, 0x1714	; 0x801714 <xTickCount+0x3>
    1b32:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <pxCurrentTCB>
    1b36:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1b3a:	02 96       	adiw	r24, 0x02	; 2
    1b3c:	56 d8       	rcall	.-3924   	; 0xbea <uxListRemove>
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	c8 16       	cp	r12, r24
    1b42:	d8 06       	cpc	r13, r24
    1b44:	e8 06       	cpc	r14, r24
    1b46:	f8 06       	cpc	r15, r24
    1b48:	69 f4       	brne	.+26     	; 0x1b64 <prvAddCurrentTaskToDelayedList+0x5a>
    1b4a:	cc 23       	and	r28, r28
    1b4c:	59 f0       	breq	.+22     	; 0x1b64 <prvAddCurrentTaskToDelayedList+0x5a>
    1b4e:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <pxCurrentTCB>
    1b52:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1b56:	6e 5f       	subi	r22, 0xFE	; 254
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	86 e1       	ldi	r24, 0x16	; 22
    1b5c:	97 e1       	ldi	r25, 0x17	; 23
    1b5e:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    1b62:	3f c0       	rjmp	.+126    	; 0x1be2 <prvAddCurrentTaskToDelayedList+0xd8>
    1b64:	c8 0c       	add	r12, r8
    1b66:	d9 1c       	adc	r13, r9
    1b68:	ea 1c       	adc	r14, r10
    1b6a:	fb 1c       	adc	r15, r11
    1b6c:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    1b70:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1b74:	c2 82       	std	Z+2, r12	; 0x02
    1b76:	d3 82       	std	Z+3, r13	; 0x03
    1b78:	e4 82       	std	Z+4, r14	; 0x04
    1b7a:	f5 82       	std	Z+5, r15	; 0x05
    1b7c:	c8 14       	cp	r12, r8
    1b7e:	d9 04       	cpc	r13, r9
    1b80:	ea 04       	cpc	r14, r10
    1b82:	fb 04       	cpc	r15, r11
    1b84:	68 f4       	brcc	.+26     	; 0x1ba0 <prvAddCurrentTaskToDelayedList+0x96>
    1b86:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <pxCurrentTCB>
    1b8a:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1b8e:	80 91 38 17 	lds	r24, 0x1738	; 0x801738 <pxOverflowDelayedTaskList>
    1b92:	90 91 39 17 	lds	r25, 0x1739	; 0x801739 <pxOverflowDelayedTaskList+0x1>
    1b96:	6e 5f       	subi	r22, 0xFE	; 254
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	0e 94 b8 05 	call	0xb70	; 0xb70 <vListInsert>
    1b9e:	21 c0       	rjmp	.+66     	; 0x1be2 <prvAddCurrentTaskToDelayedList+0xd8>
    1ba0:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <pxCurrentTCB>
    1ba4:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1ba8:	80 91 3a 17 	lds	r24, 0x173A	; 0x80173a <pxDelayedTaskList>
    1bac:	90 91 3b 17 	lds	r25, 0x173B	; 0x80173b <pxDelayedTaskList+0x1>
    1bb0:	6e 5f       	subi	r22, 0xFE	; 254
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	0e 94 b8 05 	call	0xb70	; 0xb70 <vListInsert>
    1bb8:	80 91 07 17 	lds	r24, 0x1707	; 0x801707 <xNextTaskUnblockTime>
    1bbc:	90 91 08 17 	lds	r25, 0x1708	; 0x801708 <xNextTaskUnblockTime+0x1>
    1bc0:	a0 91 09 17 	lds	r26, 0x1709	; 0x801709 <xNextTaskUnblockTime+0x2>
    1bc4:	b0 91 0a 17 	lds	r27, 0x170A	; 0x80170a <xNextTaskUnblockTime+0x3>
    1bc8:	c8 16       	cp	r12, r24
    1bca:	d9 06       	cpc	r13, r25
    1bcc:	ea 06       	cpc	r14, r26
    1bce:	fb 06       	cpc	r15, r27
    1bd0:	40 f4       	brcc	.+16     	; 0x1be2 <prvAddCurrentTaskToDelayedList+0xd8>
    1bd2:	c0 92 07 17 	sts	0x1707, r12	; 0x801707 <xNextTaskUnblockTime>
    1bd6:	d0 92 08 17 	sts	0x1708, r13	; 0x801708 <xNextTaskUnblockTime+0x1>
    1bda:	e0 92 09 17 	sts	0x1709, r14	; 0x801709 <xNextTaskUnblockTime+0x2>
    1bde:	f0 92 0a 17 	sts	0x170A, r15	; 0x80170a <xNextTaskUnblockTime+0x3>
    1be2:	cf 91       	pop	r28
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	bf 90       	pop	r11
    1bee:	af 90       	pop	r10
    1bf0:	9f 90       	pop	r9
    1bf2:	8f 90       	pop	r8
    1bf4:	08 95       	ret

00001bf6 <xTaskCreate>:
    1bf6:	4f 92       	push	r4
    1bf8:	5f 92       	push	r5
    1bfa:	6f 92       	push	r6
    1bfc:	7f 92       	push	r7
    1bfe:	8f 92       	push	r8
    1c00:	9f 92       	push	r9
    1c02:	af 92       	push	r10
    1c04:	bf 92       	push	r11
    1c06:	cf 92       	push	r12
    1c08:	df 92       	push	r13
    1c0a:	ef 92       	push	r14
    1c0c:	ff 92       	push	r15
    1c0e:	0f 93       	push	r16
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	4c 01       	movw	r8, r24
    1c16:	6b 01       	movw	r12, r22
    1c18:	5a 01       	movw	r10, r20
    1c1a:	29 01       	movw	r4, r18
    1c1c:	ca 01       	movw	r24, r20
    1c1e:	0e 94 98 04 	call	0x930	; 0x930 <pvPortMalloc>
    1c22:	3c 01       	movw	r6, r24
    1c24:	89 2b       	or	r24, r25
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <xTaskCreate+0x34>
    1c28:	f4 c0       	rjmp	.+488    	; 0x1e12 <xTaskCreate+0x21c>
    1c2a:	80 e3       	ldi	r24, 0x30	; 48
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 98 04 	call	0x930	; 0x930 <pvPortMalloc>
    1c32:	ec 01       	movw	r28, r24
    1c34:	89 2b       	or	r24, r25
    1c36:	99 f0       	breq	.+38     	; 0x1c5e <xTaskCreate+0x68>
    1c38:	7c 8e       	std	Y+28, r7	; 0x1c
    1c3a:	6b 8e       	std	Y+27, r6	; 0x1b
    1c3c:	a5 01       	movw	r20, r10
    1c3e:	65 ea       	ldi	r22, 0xA5	; 165
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	c3 01       	movw	r24, r6
    1c44:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <memset>
    1c48:	21 e0       	ldi	r18, 0x01	; 1
    1c4a:	a2 1a       	sub	r10, r18
    1c4c:	b1 08       	sbc	r11, r1
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	a8 0e       	add	r10, r24
    1c54:	b9 1e       	adc	r11, r25
    1c56:	c1 14       	cp	r12, r1
    1c58:	d1 04       	cpc	r13, r1
    1c5a:	29 f4       	brne	.+10     	; 0x1c66 <xTaskCreate+0x70>
    1c5c:	20 c0       	rjmp	.+64     	; 0x1c9e <xTaskCreate+0xa8>
    1c5e:	c3 01       	movw	r24, r6
    1c60:	0e 94 51 05 	call	0xaa2	; 0xaa2 <vPortFree>
    1c64:	d6 c0       	rjmp	.+428    	; 0x1e12 <xTaskCreate+0x21c>
    1c66:	d6 01       	movw	r26, r12
    1c68:	8c 91       	ld	r24, X
    1c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6c:	8c 91       	ld	r24, X
    1c6e:	88 23       	and	r24, r24
    1c70:	a1 f0       	breq	.+40     	; 0x1c9a <xTaskCreate+0xa4>
    1c72:	ae 01       	movw	r20, r28
    1c74:	42 5e       	subi	r20, 0xE2	; 226
    1c76:	5f 4f       	sbci	r21, 0xFF	; 255
    1c78:	f6 01       	movw	r30, r12
    1c7a:	31 96       	adiw	r30, 0x01	; 1
    1c7c:	b8 e0       	ldi	r27, 0x08	; 8
    1c7e:	cb 0e       	add	r12, r27
    1c80:	d1 1c       	adc	r13, r1
    1c82:	cf 01       	movw	r24, r30
    1c84:	21 91       	ld	r18, Z+
    1c86:	da 01       	movw	r26, r20
    1c88:	2d 93       	st	X+, r18
    1c8a:	ad 01       	movw	r20, r26
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	8c 91       	ld	r24, X
    1c90:	88 23       	and	r24, r24
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <xTaskCreate+0xa4>
    1c94:	ec 15       	cp	r30, r12
    1c96:	fd 05       	cpc	r31, r13
    1c98:	a1 f7       	brne	.-24     	; 0x1c82 <xTaskCreate+0x8c>
    1c9a:	1c a2       	std	Y+36, r1	; 0x24
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xTaskCreate+0xaa>
    1c9e:	1d 8e       	std	Y+29, r1	; 0x1d
    1ca0:	04 30       	cpi	r16, 0x04	; 4
    1ca2:	08 f0       	brcs	.+2      	; 0x1ca6 <xTaskCreate+0xb0>
    1ca4:	03 e0       	ldi	r16, 0x03	; 3
    1ca6:	0a 8f       	std	Y+26, r16	; 0x1a
    1ca8:	0f a3       	std	Y+39, r16	; 0x27
    1caa:	18 a6       	std	Y+40, r1	; 0x28
    1cac:	6e 01       	movw	r12, r28
    1cae:	b2 e0       	ldi	r27, 0x02	; 2
    1cb0:	cb 0e       	add	r12, r27
    1cb2:	d1 1c       	adc	r13, r1
    1cb4:	c6 01       	movw	r24, r12
    1cb6:	0e 94 93 05 	call	0xb26	; 0xb26 <vListInitialiseItem>
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 96       	adiw	r24, 0x0e	; 14
    1cbe:	0e 94 93 05 	call	0xb26	; 0xb26 <vListInitialiseItem>
    1cc2:	db 87       	std	Y+11, r29	; 0x0b
    1cc4:	ca 87       	std	Y+10, r28	; 0x0a
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e0       	ldi	r26, 0x00	; 0
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	80 1b       	sub	r24, r16
    1cd0:	91 09       	sbc	r25, r1
    1cd2:	a1 09       	sbc	r26, r1
    1cd4:	b1 09       	sbc	r27, r1
    1cd6:	8e 87       	std	Y+14, r24	; 0x0e
    1cd8:	9f 87       	std	Y+15, r25	; 0x0f
    1cda:	a8 8b       	std	Y+16, r26	; 0x10
    1cdc:	b9 8b       	std	Y+17, r27	; 0x11
    1cde:	df 8b       	std	Y+23, r29	; 0x17
    1ce0:	ce 8b       	std	Y+22, r28	; 0x16
    1ce2:	1a a6       	std	Y+42, r1	; 0x2a
    1ce4:	19 a6       	std	Y+41, r1	; 0x29
    1ce6:	1b a6       	std	Y+43, r1	; 0x2b
    1ce8:	1c a6       	std	Y+44, r1	; 0x2c
    1cea:	1d a6       	std	Y+45, r1	; 0x2d
    1cec:	1e a6       	std	Y+46, r1	; 0x2e
    1cee:	1f a6       	std	Y+47, r1	; 0x2f
    1cf0:	a2 01       	movw	r20, r4
    1cf2:	b4 01       	movw	r22, r8
    1cf4:	c5 01       	movw	r24, r10
    1cf6:	0e 94 1c 06 	call	0xc38	; 0xc38 <pxPortInitialiseStack>
    1cfa:	99 83       	std	Y+1, r25	; 0x01
    1cfc:	88 83       	st	Y, r24
    1cfe:	e1 14       	cp	r14, r1
    1d00:	f1 04       	cpc	r15, r1
    1d02:	19 f0       	breq	.+6      	; 0x1d0a <xTaskCreate+0x114>
    1d04:	f7 01       	movw	r30, r14
    1d06:	d1 83       	std	Z+1, r29	; 0x01
    1d08:	c0 83       	st	Z, r28
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	0f 92       	push	r0
    1d10:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <uxCurrentNumberOfTasks>
    1d14:	8f 5f       	subi	r24, 0xFF	; 255
    1d16:	80 93 15 17 	sts	0x1715, r24	; 0x801715 <uxCurrentNumberOfTasks>
    1d1a:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <pxCurrentTCB>
    1d1e:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1d22:	89 2b       	or	r24, r25
    1d24:	d1 f5       	brne	.+116    	; 0x1d9a <xTaskCreate+0x1a4>
    1d26:	d0 93 7f 17 	sts	0x177F, r29	; 0x80177f <pxCurrentTCB+0x1>
    1d2a:	c0 93 7e 17 	sts	0x177E, r28	; 0x80177e <pxCurrentTCB>
    1d2e:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <uxCurrentNumberOfTasks>
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <xTaskCreate+0x142>
    1d36:	41 c0       	rjmp	.+130    	; 0x1dba <xTaskCreate+0x1c4>
    1d38:	82 e5       	ldi	r24, 0x52	; 82
    1d3a:	97 e1       	ldi	r25, 0x17	; 23
    1d3c:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d40:	8d e5       	ldi	r24, 0x5D	; 93
    1d42:	97 e1       	ldi	r25, 0x17	; 23
    1d44:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d48:	88 e6       	ldi	r24, 0x68	; 104
    1d4a:	97 e1       	ldi	r25, 0x17	; 23
    1d4c:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d50:	83 e7       	ldi	r24, 0x73	; 115
    1d52:	97 e1       	ldi	r25, 0x17	; 23
    1d54:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d58:	87 e4       	ldi	r24, 0x47	; 71
    1d5a:	97 e1       	ldi	r25, 0x17	; 23
    1d5c:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d60:	8c e3       	ldi	r24, 0x3C	; 60
    1d62:	97 e1       	ldi	r25, 0x17	; 23
    1d64:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d68:	8d e2       	ldi	r24, 0x2D	; 45
    1d6a:	97 e1       	ldi	r25, 0x17	; 23
    1d6c:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d70:	82 e2       	ldi	r24, 0x22	; 34
    1d72:	97 e1       	ldi	r25, 0x17	; 23
    1d74:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d78:	86 e1       	ldi	r24, 0x16	; 22
    1d7a:	97 e1       	ldi	r25, 0x17	; 23
    1d7c:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    1d80:	87 e4       	ldi	r24, 0x47	; 71
    1d82:	97 e1       	ldi	r25, 0x17	; 23
    1d84:	90 93 3b 17 	sts	0x173B, r25	; 0x80173b <pxDelayedTaskList+0x1>
    1d88:	80 93 3a 17 	sts	0x173A, r24	; 0x80173a <pxDelayedTaskList>
    1d8c:	8c e3       	ldi	r24, 0x3C	; 60
    1d8e:	97 e1       	ldi	r25, 0x17	; 23
    1d90:	90 93 39 17 	sts	0x1739, r25	; 0x801739 <pxOverflowDelayedTaskList+0x1>
    1d94:	80 93 38 17 	sts	0x1738, r24	; 0x801738 <pxOverflowDelayedTaskList>
    1d98:	10 c0       	rjmp	.+32     	; 0x1dba <xTaskCreate+0x1c4>
    1d9a:	80 91 0f 17 	lds	r24, 0x170F	; 0x80170f <xSchedulerRunning>
    1d9e:	81 11       	cpse	r24, r1
    1da0:	0c c0       	rjmp	.+24     	; 0x1dba <xTaskCreate+0x1c4>
    1da2:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    1da6:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1daa:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dae:	89 17       	cp	r24, r25
    1db0:	20 f0       	brcs	.+8      	; 0x1dba <xTaskCreate+0x1c4>
    1db2:	d0 93 7f 17 	sts	0x177F, r29	; 0x80177f <pxCurrentTCB+0x1>
    1db6:	c0 93 7e 17 	sts	0x177E, r28	; 0x80177e <pxCurrentTCB>
    1dba:	80 91 0b 17 	lds	r24, 0x170B	; 0x80170b <uxTaskNumber>
    1dbe:	8f 5f       	subi	r24, 0xFF	; 255
    1dc0:	80 93 0b 17 	sts	0x170B, r24	; 0x80170b <uxTaskNumber>
    1dc4:	8d a3       	std	Y+37, r24	; 0x25
    1dc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dc8:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxTopReadyPriority>
    1dcc:	98 17       	cp	r25, r24
    1dce:	10 f4       	brcc	.+4      	; 0x1dd4 <xTaskCreate+0x1de>
    1dd0:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    1dd4:	fb e0       	ldi	r31, 0x0B	; 11
    1dd6:	8f 9f       	mul	r24, r31
    1dd8:	c0 01       	movw	r24, r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	b6 01       	movw	r22, r12
    1dde:	8e 5a       	subi	r24, 0xAE	; 174
    1de0:	98 4e       	sbci	r25, 0xE8	; 232
    1de2:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	80 91 0f 17 	lds	r24, 0x170F	; 0x80170f <xSchedulerRunning>
    1dee:	88 23       	and	r24, r24
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <xTaskCreate+0x214>
    1df2:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    1df6:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1dfa:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dfe:	98 17       	cp	r25, r24
    1e00:	30 f4       	brcc	.+12     	; 0x1e0e <xTaskCreate+0x218>
    1e02:	0e 94 ca 06 	call	0xd94	; 0xd94 <vPortYield>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <xTaskCreate+0x21e>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <xTaskCreate+0x21e>
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <xTaskCreate+0x21e>
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	9f 90       	pop	r9
    1e28:	8f 90       	pop	r8
    1e2a:	7f 90       	pop	r7
    1e2c:	6f 90       	pop	r6
    1e2e:	5f 90       	pop	r5
    1e30:	4f 90       	pop	r4
    1e32:	08 95       	ret

00001e34 <vTaskStartScheduler>:
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	0f 2e       	mov	r0, r31
    1e3c:	f5 e0       	ldi	r31, 0x05	; 5
    1e3e:	ef 2e       	mov	r14, r31
    1e40:	f7 e1       	ldi	r31, 0x17	; 23
    1e42:	ff 2e       	mov	r15, r31
    1e44:	f0 2d       	mov	r31, r0
    1e46:	00 e0       	ldi	r16, 0x00	; 0
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 ec       	ldi	r20, 0xC0	; 192
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	67 eb       	ldi	r22, 0xB7	; 183
    1e52:	73 e0       	ldi	r23, 0x03	; 3
    1e54:	8d ec       	ldi	r24, 0xCD	; 205
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	ce de       	rcall	.-612    	; 0x1bf6 <xTaskCreate>
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	19 f5       	brne	.+70     	; 0x1ea4 <vTaskStartScheduler+0x70>
    1e5e:	de d5       	rcall	.+3004   	; 0x2a1c <xTimerCreateTimerTask>
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	01 f5       	brne	.+64     	; 0x1ea4 <vTaskStartScheduler+0x70>
    1e64:	f8 94       	cli
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	9f ef       	ldi	r25, 0xFF	; 255
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	80 93 07 17 	sts	0x1707, r24	; 0x801707 <xNextTaskUnblockTime>
    1e70:	90 93 08 17 	sts	0x1708, r25	; 0x801708 <xNextTaskUnblockTime+0x1>
    1e74:	a0 93 09 17 	sts	0x1709, r26	; 0x801709 <xNextTaskUnblockTime+0x2>
    1e78:	b0 93 0a 17 	sts	0x170A, r27	; 0x80170a <xNextTaskUnblockTime+0x3>
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	80 93 0f 17 	sts	0x170F, r24	; 0x80170f <xSchedulerRunning>
    1e82:	10 92 11 17 	sts	0x1711, r1	; 0x801711 <xTickCount>
    1e86:	10 92 12 17 	sts	0x1712, r1	; 0x801712 <xTickCount+0x1>
    1e8a:	10 92 13 17 	sts	0x1713, r1	; 0x801713 <xTickCount+0x2>
    1e8e:	10 92 14 17 	sts	0x1714, r1	; 0x801714 <xTickCount+0x3>
    1e92:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    1e96:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    1e9a:	81 a5       	ldd	r24, Z+41	; 0x29
    1e9c:	0e 94 3b 04 	call	0x876	; 0x876 <task_switch_in>
    1ea0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xPortStartScheduler>
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	08 95       	ret

00001eac <vTaskSuspendAll>:
    1eac:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	80 93 04 17 	sts	0x1704, r24	; 0x801704 <uxSchedulerSuspended>
    1eb6:	08 95       	ret

00001eb8 <xTaskGetTickCount>:
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	0f 92       	push	r0
    1ebe:	60 91 11 17 	lds	r22, 0x1711	; 0x801711 <xTickCount>
    1ec2:	70 91 12 17 	lds	r23, 0x1712	; 0x801712 <xTickCount+0x1>
    1ec6:	80 91 13 17 	lds	r24, 0x1713	; 0x801713 <xTickCount+0x2>
    1eca:	90 91 14 17 	lds	r25, 0x1714	; 0x801714 <xTickCount+0x3>
    1ece:	0f 90       	pop	r0
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	08 95       	ret

00001ed4 <xTaskIncrementTick>:
    1ed4:	9f 92       	push	r9
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    1eee:	81 11       	cpse	r24, r1
    1ef0:	ad c0       	rjmp	.+346    	; 0x204c <xTaskIncrementTick+0x178>
    1ef2:	c0 90 11 17 	lds	r12, 0x1711	; 0x801711 <xTickCount>
    1ef6:	d0 90 12 17 	lds	r13, 0x1712	; 0x801712 <xTickCount+0x1>
    1efa:	e0 90 13 17 	lds	r14, 0x1713	; 0x801713 <xTickCount+0x2>
    1efe:	f0 90 14 17 	lds	r15, 0x1714	; 0x801714 <xTickCount+0x3>
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	c8 1a       	sub	r12, r24
    1f06:	d8 0a       	sbc	r13, r24
    1f08:	e8 0a       	sbc	r14, r24
    1f0a:	f8 0a       	sbc	r15, r24
    1f0c:	c0 92 11 17 	sts	0x1711, r12	; 0x801711 <xTickCount>
    1f10:	d0 92 12 17 	sts	0x1712, r13	; 0x801712 <xTickCount+0x1>
    1f14:	e0 92 13 17 	sts	0x1713, r14	; 0x801713 <xTickCount+0x2>
    1f18:	f0 92 14 17 	sts	0x1714, r15	; 0x801714 <xTickCount+0x3>
    1f1c:	c1 14       	cp	r12, r1
    1f1e:	d1 04       	cpc	r13, r1
    1f20:	e1 04       	cpc	r14, r1
    1f22:	f1 04       	cpc	r15, r1
    1f24:	b1 f4       	brne	.+44     	; 0x1f52 <xTaskIncrementTick+0x7e>
    1f26:	80 91 3a 17 	lds	r24, 0x173A	; 0x80173a <pxDelayedTaskList>
    1f2a:	90 91 3b 17 	lds	r25, 0x173B	; 0x80173b <pxDelayedTaskList+0x1>
    1f2e:	20 91 38 17 	lds	r18, 0x1738	; 0x801738 <pxOverflowDelayedTaskList>
    1f32:	30 91 39 17 	lds	r19, 0x1739	; 0x801739 <pxOverflowDelayedTaskList+0x1>
    1f36:	30 93 3b 17 	sts	0x173B, r19	; 0x80173b <pxDelayedTaskList+0x1>
    1f3a:	20 93 3a 17 	sts	0x173A, r18	; 0x80173a <pxDelayedTaskList>
    1f3e:	90 93 39 17 	sts	0x1739, r25	; 0x801739 <pxOverflowDelayedTaskList+0x1>
    1f42:	80 93 38 17 	sts	0x1738, r24	; 0x801738 <pxOverflowDelayedTaskList>
    1f46:	80 91 0c 17 	lds	r24, 0x170C	; 0x80170c <xNumOfOverflows>
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	80 93 0c 17 	sts	0x170C, r24	; 0x80170c <xNumOfOverflows>
    1f50:	b2 dd       	rcall	.-1180   	; 0x1ab6 <prvResetNextTaskUnblockTime>
    1f52:	80 91 07 17 	lds	r24, 0x1707	; 0x801707 <xNextTaskUnblockTime>
    1f56:	90 91 08 17 	lds	r25, 0x1708	; 0x801708 <xNextTaskUnblockTime+0x1>
    1f5a:	a0 91 09 17 	lds	r26, 0x1709	; 0x801709 <xNextTaskUnblockTime+0x2>
    1f5e:	b0 91 0a 17 	lds	r27, 0x170A	; 0x80170a <xNextTaskUnblockTime+0x3>
    1f62:	c8 16       	cp	r12, r24
    1f64:	d9 06       	cpc	r13, r25
    1f66:	ea 06       	cpc	r14, r26
    1f68:	fb 06       	cpc	r15, r27
    1f6a:	10 f4       	brcc	.+4      	; 0x1f70 <xTaskIncrementTick+0x9c>
    1f6c:	b1 2c       	mov	r11, r1
    1f6e:	5d c0       	rjmp	.+186    	; 0x202a <xTaskIncrementTick+0x156>
    1f70:	b1 2c       	mov	r11, r1
    1f72:	0f 2e       	mov	r0, r31
    1f74:	fb e0       	ldi	r31, 0x0B	; 11
    1f76:	af 2e       	mov	r10, r31
    1f78:	f0 2d       	mov	r31, r0
    1f7a:	99 24       	eor	r9, r9
    1f7c:	93 94       	inc	r9
    1f7e:	e0 91 3a 17 	lds	r30, 0x173A	; 0x80173a <pxDelayedTaskList>
    1f82:	f0 91 3b 17 	lds	r31, 0x173B	; 0x80173b <pxDelayedTaskList+0x1>
    1f86:	80 81       	ld	r24, Z
    1f88:	81 11       	cpse	r24, r1
    1f8a:	0c c0       	rjmp	.+24     	; 0x1fa4 <xTaskIncrementTick+0xd0>
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	9f ef       	ldi	r25, 0xFF	; 255
    1f90:	dc 01       	movw	r26, r24
    1f92:	80 93 07 17 	sts	0x1707, r24	; 0x801707 <xNextTaskUnblockTime>
    1f96:	90 93 08 17 	sts	0x1708, r25	; 0x801708 <xNextTaskUnblockTime+0x1>
    1f9a:	a0 93 09 17 	sts	0x1709, r26	; 0x801709 <xNextTaskUnblockTime+0x2>
    1f9e:	b0 93 0a 17 	sts	0x170A, r27	; 0x80170a <xNextTaskUnblockTime+0x3>
    1fa2:	43 c0       	rjmp	.+134    	; 0x202a <xTaskIncrementTick+0x156>
    1fa4:	e0 91 3a 17 	lds	r30, 0x173A	; 0x80173a <pxDelayedTaskList>
    1fa8:	f0 91 3b 17 	lds	r31, 0x173B	; 0x80173b <pxDelayedTaskList+0x1>
    1fac:	07 80       	ldd	r0, Z+7	; 0x07
    1fae:	f0 85       	ldd	r31, Z+8	; 0x08
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	c0 85       	ldd	r28, Z+8	; 0x08
    1fb4:	d1 85       	ldd	r29, Z+9	; 0x09
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	ac 81       	ldd	r26, Y+4	; 0x04
    1fbc:	bd 81       	ldd	r27, Y+5	; 0x05
    1fbe:	c8 16       	cp	r12, r24
    1fc0:	d9 06       	cpc	r13, r25
    1fc2:	ea 06       	cpc	r14, r26
    1fc4:	fb 06       	cpc	r15, r27
    1fc6:	48 f4       	brcc	.+18     	; 0x1fda <xTaskIncrementTick+0x106>
    1fc8:	80 93 07 17 	sts	0x1707, r24	; 0x801707 <xNextTaskUnblockTime>
    1fcc:	90 93 08 17 	sts	0x1708, r25	; 0x801708 <xNextTaskUnblockTime+0x1>
    1fd0:	a0 93 09 17 	sts	0x1709, r26	; 0x801709 <xNextTaskUnblockTime+0x2>
    1fd4:	b0 93 0a 17 	sts	0x170A, r27	; 0x80170a <xNextTaskUnblockTime+0x3>
    1fd8:	28 c0       	rjmp	.+80     	; 0x202a <xTaskIncrementTick+0x156>
    1fda:	8e 01       	movw	r16, r28
    1fdc:	0e 5f       	subi	r16, 0xFE	; 254
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    1fe6:	88 8d       	ldd	r24, Y+24	; 0x18
    1fe8:	99 8d       	ldd	r25, Y+25	; 0x19
    1fea:	89 2b       	or	r24, r25
    1fec:	21 f0       	breq	.+8      	; 0x1ff6 <xTaskIncrementTick+0x122>
    1fee:	ce 01       	movw	r24, r28
    1ff0:	0e 96       	adiw	r24, 0x0e	; 14
    1ff2:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    1ff6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ff8:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxTopReadyPriority>
    1ffc:	98 17       	cp	r25, r24
    1ffe:	10 f4       	brcc	.+4      	; 0x2004 <xTaskIncrementTick+0x130>
    2000:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    2004:	a8 9e       	mul	r10, r24
    2006:	c0 01       	movw	r24, r0
    2008:	11 24       	eor	r1, r1
    200a:	b8 01       	movw	r22, r16
    200c:	8e 5a       	subi	r24, 0xAE	; 174
    200e:	98 4e       	sbci	r25, 0xE8	; 232
    2010:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    2014:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    2018:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    201c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    201e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2020:	98 17       	cp	r25, r24
    2022:	08 f4       	brcc	.+2      	; 0x2026 <xTaskIncrementTick+0x152>
    2024:	ac cf       	rjmp	.-168    	; 0x1f7e <xTaskIncrementTick+0xaa>
    2026:	b9 2c       	mov	r11, r9
    2028:	aa cf       	rjmp	.-172    	; 0x1f7e <xTaskIncrementTick+0xaa>
    202a:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    202e:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2032:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2034:	8b e0       	ldi	r24, 0x0B	; 11
    2036:	e8 9f       	mul	r30, r24
    2038:	f0 01       	movw	r30, r0
    203a:	11 24       	eor	r1, r1
    203c:	ee 5a       	subi	r30, 0xAE	; 174
    203e:	f8 4e       	sbci	r31, 0xE8	; 232
    2040:	80 81       	ld	r24, Z
    2042:	82 30       	cpi	r24, 0x02	; 2
    2044:	48 f0       	brcs	.+18     	; 0x2058 <xTaskIncrementTick+0x184>
    2046:	bb 24       	eor	r11, r11
    2048:	b3 94       	inc	r11
    204a:	06 c0       	rjmp	.+12     	; 0x2058 <xTaskIncrementTick+0x184>
    204c:	80 91 0e 17 	lds	r24, 0x170E	; 0x80170e <uxPendedTicks>
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	80 93 0e 17 	sts	0x170E, r24	; 0x80170e <uxPendedTicks>
    2056:	b1 2c       	mov	r11, r1
    2058:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <xYieldPending>
    205c:	88 23       	and	r24, r24
    205e:	11 f0       	breq	.+4      	; 0x2064 <xTaskIncrementTick+0x190>
    2060:	bb 24       	eor	r11, r11
    2062:	b3 94       	inc	r11
    2064:	8b 2d       	mov	r24, r11
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	df 90       	pop	r13
    2074:	cf 90       	pop	r12
    2076:	bf 90       	pop	r11
    2078:	af 90       	pop	r10
    207a:	9f 90       	pop	r9
    207c:	08 95       	ret

0000207e <xTaskResumeAll>:
    207e:	cf 92       	push	r12
    2080:	df 92       	push	r13
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	0f 92       	push	r0
    2094:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    2098:	81 50       	subi	r24, 0x01	; 1
    209a:	80 93 04 17 	sts	0x1704, r24	; 0x801704 <uxSchedulerSuspended>
    209e:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    20a2:	81 11       	cpse	r24, r1
    20a4:	5a c0       	rjmp	.+180    	; 0x215a <xTaskResumeAll+0xdc>
    20a6:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <uxCurrentNumberOfTasks>
    20aa:	81 11       	cpse	r24, r1
    20ac:	2c c0       	rjmp	.+88     	; 0x2106 <xTaskResumeAll+0x88>
    20ae:	58 c0       	rjmp	.+176    	; 0x2160 <xTaskResumeAll+0xe2>
    20b0:	d7 01       	movw	r26, r14
    20b2:	17 96       	adiw	r26, 0x07	; 7
    20b4:	ed 91       	ld	r30, X+
    20b6:	fc 91       	ld	r31, X
    20b8:	18 97       	sbiw	r26, 0x08	; 8
    20ba:	c0 85       	ldd	r28, Z+8	; 0x08
    20bc:	d1 85       	ldd	r29, Z+9	; 0x09
    20be:	ce 01       	movw	r24, r28
    20c0:	0e 96       	adiw	r24, 0x0e	; 14
    20c2:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    20c6:	8e 01       	movw	r16, r28
    20c8:	0e 5f       	subi	r16, 0xFE	; 254
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	c8 01       	movw	r24, r16
    20ce:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    20d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20d4:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxTopReadyPriority>
    20d8:	98 17       	cp	r25, r24
    20da:	10 f4       	brcc	.+4      	; 0x20e0 <xTaskResumeAll+0x62>
    20dc:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    20e0:	d8 9e       	mul	r13, r24
    20e2:	c0 01       	movw	r24, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	b8 01       	movw	r22, r16
    20e8:	8e 5a       	subi	r24, 0xAE	; 174
    20ea:	98 4e       	sbci	r25, 0xE8	; 232
    20ec:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    20f0:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    20f4:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    20f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    20fc:	98 17       	cp	r25, r24
    20fe:	88 f0       	brcs	.+34     	; 0x2122 <xTaskResumeAll+0xa4>
    2100:	c0 92 0d 17 	sts	0x170D, r12	; 0x80170d <xYieldPending>
    2104:	0e c0       	rjmp	.+28     	; 0x2122 <xTaskResumeAll+0xa4>
    2106:	c0 e0       	ldi	r28, 0x00	; 0
    2108:	d0 e0       	ldi	r29, 0x00	; 0
    210a:	0f 2e       	mov	r0, r31
    210c:	fd e2       	ldi	r31, 0x2D	; 45
    210e:	ef 2e       	mov	r14, r31
    2110:	f7 e1       	ldi	r31, 0x17	; 23
    2112:	ff 2e       	mov	r15, r31
    2114:	f0 2d       	mov	r31, r0
    2116:	0f 2e       	mov	r0, r31
    2118:	fb e0       	ldi	r31, 0x0B	; 11
    211a:	df 2e       	mov	r13, r31
    211c:	f0 2d       	mov	r31, r0
    211e:	cc 24       	eor	r12, r12
    2120:	c3 94       	inc	r12
    2122:	f7 01       	movw	r30, r14
    2124:	80 81       	ld	r24, Z
    2126:	81 11       	cpse	r24, r1
    2128:	c3 cf       	rjmp	.-122    	; 0x20b0 <xTaskResumeAll+0x32>
    212a:	cd 2b       	or	r28, r29
    212c:	09 f0       	breq	.+2      	; 0x2130 <xTaskResumeAll+0xb2>
    212e:	c3 dc       	rcall	.-1658   	; 0x1ab6 <prvResetNextTaskUnblockTime>
    2130:	c0 91 0e 17 	lds	r28, 0x170E	; 0x80170e <uxPendedTicks>
    2134:	cc 23       	and	r28, r28
    2136:	49 f0       	breq	.+18     	; 0x214a <xTaskResumeAll+0xcc>
    2138:	d1 e0       	ldi	r29, 0x01	; 1
    213a:	cc de       	rcall	.-616    	; 0x1ed4 <xTaskIncrementTick>
    213c:	81 11       	cpse	r24, r1
    213e:	d0 93 0d 17 	sts	0x170D, r29	; 0x80170d <xYieldPending>
    2142:	c1 50       	subi	r28, 0x01	; 1
    2144:	d1 f7       	brne	.-12     	; 0x213a <xTaskResumeAll+0xbc>
    2146:	10 92 0e 17 	sts	0x170E, r1	; 0x80170e <uxPendedTicks>
    214a:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <xYieldPending>
    214e:	88 23       	and	r24, r24
    2150:	31 f0       	breq	.+12     	; 0x215e <xTaskResumeAll+0xe0>
    2152:	0e 94 ca 06 	call	0xd94	; 0xd94 <vPortYield>
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	03 c0       	rjmp	.+6      	; 0x2160 <xTaskResumeAll+0xe2>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <xTaskResumeAll+0xe2>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	08 95       	ret

00002176 <vTaskDelayUntil>:
    2176:	cf 92       	push	r12
    2178:	df 92       	push	r13
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	ec 01       	movw	r28, r24
    2188:	6a 01       	movw	r12, r20
    218a:	7b 01       	movw	r14, r22
    218c:	8f de       	rcall	.-738    	; 0x1eac <vTaskSuspendAll>
    218e:	00 91 11 17 	lds	r16, 0x1711	; 0x801711 <xTickCount>
    2192:	10 91 12 17 	lds	r17, 0x1712	; 0x801712 <xTickCount+0x1>
    2196:	20 91 13 17 	lds	r18, 0x1713	; 0x801713 <xTickCount+0x2>
    219a:	30 91 14 17 	lds	r19, 0x1714	; 0x801714 <xTickCount+0x3>
    219e:	88 81       	ld	r24, Y
    21a0:	99 81       	ldd	r25, Y+1	; 0x01
    21a2:	aa 81       	ldd	r26, Y+2	; 0x02
    21a4:	bb 81       	ldd	r27, Y+3	; 0x03
    21a6:	ac 01       	movw	r20, r24
    21a8:	bd 01       	movw	r22, r26
    21aa:	4c 0d       	add	r20, r12
    21ac:	5d 1d       	adc	r21, r13
    21ae:	6e 1d       	adc	r22, r14
    21b0:	7f 1d       	adc	r23, r15
    21b2:	08 17       	cp	r16, r24
    21b4:	19 07       	cpc	r17, r25
    21b6:	2a 07       	cpc	r18, r26
    21b8:	3b 07       	cpc	r19, r27
    21ba:	78 f4       	brcc	.+30     	; 0x21da <vTaskDelayUntil+0x64>
    21bc:	48 17       	cp	r20, r24
    21be:	59 07       	cpc	r21, r25
    21c0:	6a 07       	cpc	r22, r26
    21c2:	7b 07       	cpc	r23, r27
    21c4:	40 f5       	brcc	.+80     	; 0x2216 <__stack+0x17>
    21c6:	48 83       	st	Y, r20
    21c8:	59 83       	std	Y+1, r21	; 0x01
    21ca:	6a 83       	std	Y+2, r22	; 0x02
    21cc:	7b 83       	std	Y+3, r23	; 0x03
    21ce:	04 17       	cp	r16, r20
    21d0:	15 07       	cpc	r17, r21
    21d2:	26 07       	cpc	r18, r22
    21d4:	37 07       	cpc	r19, r23
    21d6:	a0 f4       	brcc	.+40     	; 0x2200 <__stack+0x1>
    21d8:	0b c0       	rjmp	.+22     	; 0x21f0 <vTaskDelayUntil+0x7a>
    21da:	48 17       	cp	r20, r24
    21dc:	59 07       	cpc	r21, r25
    21de:	6a 07       	cpc	r22, r26
    21e0:	7b 07       	cpc	r23, r27
    21e2:	a0 f0       	brcs	.+40     	; 0x220c <__stack+0xd>
    21e4:	04 17       	cp	r16, r20
    21e6:	15 07       	cpc	r17, r21
    21e8:	26 07       	cpc	r18, r22
    21ea:	37 07       	cpc	r19, r23
    21ec:	78 f0       	brcs	.+30     	; 0x220c <__stack+0xd>
    21ee:	13 c0       	rjmp	.+38     	; 0x2216 <__stack+0x17>
    21f0:	cb 01       	movw	r24, r22
    21f2:	ba 01       	movw	r22, r20
    21f4:	60 1b       	sub	r22, r16
    21f6:	71 0b       	sbc	r23, r17
    21f8:	82 0b       	sbc	r24, r18
    21fa:	93 0b       	sbc	r25, r19
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	85 dc       	rcall	.-1782   	; 0x1b0a <prvAddCurrentTaskToDelayedList>
    2200:	3e df       	rcall	.-388    	; 0x207e <xTaskResumeAll>
    2202:	81 11       	cpse	r24, r1
    2204:	0d c0       	rjmp	.+26     	; 0x2220 <__stack+0x21>
    2206:	0e 94 ca 06 	call	0xd94	; 0xd94 <vPortYield>
    220a:	0a c0       	rjmp	.+20     	; 0x2220 <__stack+0x21>
    220c:	48 83       	st	Y, r20
    220e:	59 83       	std	Y+1, r21	; 0x01
    2210:	6a 83       	std	Y+2, r22	; 0x02
    2212:	7b 83       	std	Y+3, r23	; 0x03
    2214:	ed cf       	rjmp	.-38     	; 0x21f0 <vTaskDelayUntil+0x7a>
    2216:	48 83       	st	Y, r20
    2218:	59 83       	std	Y+1, r21	; 0x01
    221a:	6a 83       	std	Y+2, r22	; 0x02
    221c:	7b 83       	std	Y+3, r23	; 0x03
    221e:	f0 cf       	rjmp	.-32     	; 0x2200 <__stack+0x1>
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	08 95       	ret

00002232 <vTaskDelay>:
    2232:	cf 92       	push	r12
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	6b 01       	movw	r12, r22
    223c:	7c 01       	movw	r14, r24
    223e:	67 2b       	or	r22, r23
    2240:	68 2b       	or	r22, r24
    2242:	69 2b       	or	r22, r25
    2244:	41 f0       	breq	.+16     	; 0x2256 <vTaskDelay+0x24>
    2246:	32 de       	rcall	.-924    	; 0x1eac <vTaskSuspendAll>
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	c7 01       	movw	r24, r14
    224c:	b6 01       	movw	r22, r12
    224e:	5d dc       	rcall	.-1862   	; 0x1b0a <prvAddCurrentTaskToDelayedList>
    2250:	16 df       	rcall	.-468    	; 0x207e <xTaskResumeAll>
    2252:	81 11       	cpse	r24, r1
    2254:	02 c0       	rjmp	.+4      	; 0x225a <vTaskDelay+0x28>
    2256:	0e 94 ca 06 	call	0xd94	; 0xd94 <vPortYield>
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	df 90       	pop	r13
    2260:	cf 90       	pop	r12
    2262:	08 95       	ret

00002264 <vTaskSwitchContext>:
    2264:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    2268:	88 23       	and	r24, r24
    226a:	21 f0       	breq	.+8      	; 0x2274 <vTaskSwitchContext+0x10>
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 0d 17 	sts	0x170D, r24	; 0x80170d <xYieldPending>
    2272:	08 95       	ret
    2274:	10 92 0d 17 	sts	0x170D, r1	; 0x80170d <xYieldPending>
    2278:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    227c:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2280:	81 a5       	ldd	r24, Z+41	; 0x29
    2282:	0e 94 45 04 	call	0x88a	; 0x88a <task_switch_out>
    2286:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <pxCurrentTCB>
    228a:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    228e:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    2292:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2296:	2d 91       	ld	r18, X+
    2298:	3c 91       	ld	r19, X
    229a:	83 8d       	ldd	r24, Z+27	; 0x1b
    229c:	94 8d       	ldd	r25, Z+28	; 0x1c
    229e:	82 17       	cp	r24, r18
    22a0:	93 07       	cpc	r25, r19
    22a2:	58 f0       	brcs	.+22     	; 0x22ba <vTaskSwitchContext+0x56>
    22a4:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <pxCurrentTCB>
    22a8:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    22ac:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <pxCurrentTCB>
    22b0:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    22b4:	63 5e       	subi	r22, 0xE3	; 227
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	d3 d4       	rcall	.+2470   	; 0x2c60 <vApplicationStackOverflowHook>
    22ba:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxTopReadyPriority>
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	9b e0       	ldi	r25, 0x0B	; 11
    22c4:	89 9f       	mul	r24, r25
    22c6:	f0 01       	movw	r30, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	ee 5a       	subi	r30, 0xAE	; 174
    22cc:	f8 4e       	sbci	r31, 0xE8	; 232
    22ce:	90 81       	ld	r25, Z
    22d0:	91 11       	cpse	r25, r1
    22d2:	0e c0       	rjmp	.+28     	; 0x22f0 <vTaskSwitchContext+0x8c>
    22d4:	4b e0       	ldi	r20, 0x0B	; 11
    22d6:	81 50       	subi	r24, 0x01	; 1
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	42 9f       	mul	r20, r18
    22de:	f0 01       	movw	r30, r0
    22e0:	43 9f       	mul	r20, r19
    22e2:	f0 0d       	add	r31, r0
    22e4:	11 24       	eor	r1, r1
    22e6:	ee 5a       	subi	r30, 0xAE	; 174
    22e8:	f8 4e       	sbci	r31, 0xE8	; 232
    22ea:	90 81       	ld	r25, Z
    22ec:	99 23       	and	r25, r25
    22ee:	99 f3       	breq	.-26     	; 0x22d6 <vTaskSwitchContext+0x72>
    22f0:	9b e0       	ldi	r25, 0x0B	; 11
    22f2:	92 9f       	mul	r25, r18
    22f4:	a0 01       	movw	r20, r0
    22f6:	93 9f       	mul	r25, r19
    22f8:	50 0d       	add	r21, r0
    22fa:	11 24       	eor	r1, r1
    22fc:	da 01       	movw	r26, r20
    22fe:	ae 5a       	subi	r26, 0xAE	; 174
    2300:	b8 4e       	sbci	r27, 0xE8	; 232
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	ed 91       	ld	r30, X+
    2306:	fc 91       	ld	r31, X
    2308:	12 97       	sbiw	r26, 0x02	; 2
    230a:	04 80       	ldd	r0, Z+4	; 0x04
    230c:	f5 81       	ldd	r31, Z+5	; 0x05
    230e:	e0 2d       	mov	r30, r0
    2310:	12 96       	adiw	r26, 0x02	; 2
    2312:	fc 93       	st	X, r31
    2314:	ee 93       	st	-X, r30
    2316:	11 97       	sbiw	r26, 0x01	; 1
    2318:	4b 5a       	subi	r20, 0xAB	; 171
    231a:	58 4e       	sbci	r21, 0xE8	; 232
    231c:	e4 17       	cp	r30, r20
    231e:	f5 07       	cpc	r31, r21
    2320:	29 f4       	brne	.+10     	; 0x232c <vTaskSwitchContext+0xc8>
    2322:	44 81       	ldd	r20, Z+4	; 0x04
    2324:	55 81       	ldd	r21, Z+5	; 0x05
    2326:	fd 01       	movw	r30, r26
    2328:	52 83       	std	Z+2, r21	; 0x02
    232a:	41 83       	std	Z+1, r20	; 0x01
    232c:	9b e0       	ldi	r25, 0x0B	; 11
    232e:	92 9f       	mul	r25, r18
    2330:	f0 01       	movw	r30, r0
    2332:	93 9f       	mul	r25, r19
    2334:	f0 0d       	add	r31, r0
    2336:	11 24       	eor	r1, r1
    2338:	ee 5a       	subi	r30, 0xAE	; 174
    233a:	f8 4e       	sbci	r31, 0xE8	; 232
    233c:	01 80       	ldd	r0, Z+1	; 0x01
    233e:	f2 81       	ldd	r31, Z+2	; 0x02
    2340:	e0 2d       	mov	r30, r0
    2342:	20 85       	ldd	r18, Z+8	; 0x08
    2344:	31 85       	ldd	r19, Z+9	; 0x09
    2346:	30 93 7f 17 	sts	0x177F, r19	; 0x80177f <pxCurrentTCB+0x1>
    234a:	20 93 7e 17 	sts	0x177E, r18	; 0x80177e <pxCurrentTCB>
    234e:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    2352:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    2356:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    235a:	81 a5       	ldd	r24, Z+41	; 0x29
    235c:	0c 94 3b 04 	jmp	0x876	; 0x876 <task_switch_in>
    2360:	08 95       	ret

00002362 <vTaskPlaceOnEventList>:
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	6a 01       	movw	r12, r20
    236c:	7b 01       	movw	r14, r22
    236e:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <pxCurrentTCB>
    2372:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2376:	62 5f       	subi	r22, 0xF2	; 242
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	0e 94 b8 05 	call	0xb70	; 0xb70 <vListInsert>
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	c7 01       	movw	r24, r14
    2382:	b6 01       	movw	r22, r12
    2384:	c2 db       	rcall	.-2172   	; 0x1b0a <prvAddCurrentTaskToDelayedList>
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	df 90       	pop	r13
    238c:	cf 90       	pop	r12
    238e:	08 95       	ret

00002390 <vTaskPlaceOnEventListRestricted>:
    2390:	cf 92       	push	r12
    2392:	df 92       	push	r13
    2394:	ef 92       	push	r14
    2396:	ff 92       	push	r15
    2398:	cf 93       	push	r28
    239a:	6a 01       	movw	r12, r20
    239c:	7b 01       	movw	r14, r22
    239e:	c2 2f       	mov	r28, r18
    23a0:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <pxCurrentTCB>
    23a4:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    23a8:	62 5f       	subi	r22, 0xF2	; 242
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    23b0:	cc 23       	and	r28, r28
    23b2:	21 f0       	breq	.+8      	; 0x23bc <vTaskPlaceOnEventListRestricted+0x2c>
    23b4:	cc 24       	eor	r12, r12
    23b6:	ca 94       	dec	r12
    23b8:	dc 2c       	mov	r13, r12
    23ba:	76 01       	movw	r14, r12
    23bc:	4c 2f       	mov	r20, r28
    23be:	c7 01       	movw	r24, r14
    23c0:	b6 01       	movw	r22, r12
    23c2:	a3 db       	rcall	.-2234   	; 0x1b0a <prvAddCurrentTaskToDelayedList>
    23c4:	cf 91       	pop	r28
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	cf 90       	pop	r12
    23ce:	08 95       	ret

000023d0 <xTaskRemoveFromEventList>:
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	dc 01       	movw	r26, r24
    23da:	17 96       	adiw	r26, 0x07	; 7
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	18 97       	sbiw	r26, 0x08	; 8
    23e2:	c0 85       	ldd	r28, Z+8	; 0x08
    23e4:	d1 85       	ldd	r29, Z+9	; 0x09
    23e6:	8e 01       	movw	r16, r28
    23e8:	02 5f       	subi	r16, 0xF2	; 242
    23ea:	1f 4f       	sbci	r17, 0xFF	; 255
    23ec:	c8 01       	movw	r24, r16
    23ee:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    23f2:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    23f6:	81 11       	cpse	r24, r1
    23f8:	16 c0       	rjmp	.+44     	; 0x2426 <xTaskRemoveFromEventList+0x56>
    23fa:	0c 50       	subi	r16, 0x0C	; 12
    23fc:	11 09       	sbc	r17, r1
    23fe:	c8 01       	movw	r24, r16
    2400:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    2404:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2406:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxTopReadyPriority>
    240a:	98 17       	cp	r25, r24
    240c:	10 f4       	brcc	.+4      	; 0x2412 <xTaskRemoveFromEventList+0x42>
    240e:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    2412:	bb e0       	ldi	r27, 0x0B	; 11
    2414:	8b 9f       	mul	r24, r27
    2416:	c0 01       	movw	r24, r0
    2418:	11 24       	eor	r1, r1
    241a:	b8 01       	movw	r22, r16
    241c:	8e 5a       	subi	r24, 0xAE	; 174
    241e:	98 4e       	sbci	r25, 0xE8	; 232
    2420:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <xTaskRemoveFromEventList+0x60>
    2426:	b8 01       	movw	r22, r16
    2428:	8d e2       	ldi	r24, 0x2D	; 45
    242a:	97 e1       	ldi	r25, 0x17	; 23
    242c:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    2430:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    2434:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2438:	9a 8d       	ldd	r25, Y+26	; 0x1a
    243a:	82 8d       	ldd	r24, Z+26	; 0x1a
    243c:	89 17       	cp	r24, r25
    243e:	20 f4       	brcc	.+8      	; 0x2448 <xTaskRemoveFromEventList+0x78>
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 0d 17 	sts	0x170D, r24	; 0x80170d <xYieldPending>
    2446:	01 c0       	rjmp	.+2      	; 0x244a <xTaskRemoveFromEventList+0x7a>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	08 95       	ret

00002454 <vTaskSetTimeOutState>:
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	0f 92       	push	r0
    245a:	20 91 0c 17 	lds	r18, 0x170C	; 0x80170c <xNumOfOverflows>
    245e:	fc 01       	movw	r30, r24
    2460:	20 83       	st	Z, r18
    2462:	40 91 11 17 	lds	r20, 0x1711	; 0x801711 <xTickCount>
    2466:	50 91 12 17 	lds	r21, 0x1712	; 0x801712 <xTickCount+0x1>
    246a:	60 91 13 17 	lds	r22, 0x1713	; 0x801713 <xTickCount+0x2>
    246e:	70 91 14 17 	lds	r23, 0x1714	; 0x801714 <xTickCount+0x3>
    2472:	41 83       	std	Z+1, r20	; 0x01
    2474:	52 83       	std	Z+2, r21	; 0x02
    2476:	63 83       	std	Z+3, r22	; 0x03
    2478:	74 83       	std	Z+4, r23	; 0x04
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	08 95       	ret

00002480 <vTaskInternalSetTimeOutState>:
    2480:	20 91 0c 17 	lds	r18, 0x170C	; 0x80170c <xNumOfOverflows>
    2484:	fc 01       	movw	r30, r24
    2486:	20 83       	st	Z, r18
    2488:	40 91 11 17 	lds	r20, 0x1711	; 0x801711 <xTickCount>
    248c:	50 91 12 17 	lds	r21, 0x1712	; 0x801712 <xTickCount+0x1>
    2490:	60 91 13 17 	lds	r22, 0x1713	; 0x801713 <xTickCount+0x2>
    2494:	70 91 14 17 	lds	r23, 0x1714	; 0x801714 <xTickCount+0x3>
    2498:	41 83       	std	Z+1, r20	; 0x01
    249a:	52 83       	std	Z+2, r21	; 0x02
    249c:	63 83       	std	Z+3, r22	; 0x03
    249e:	74 83       	std	Z+4, r23	; 0x04
    24a0:	08 95       	ret

000024a2 <xTaskCheckForTimeOut>:
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	fb 01       	movw	r30, r22
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	0f 92       	push	r0
    24ba:	40 91 11 17 	lds	r20, 0x1711	; 0x801711 <xTickCount>
    24be:	50 91 12 17 	lds	r21, 0x1712	; 0x801712 <xTickCount+0x1>
    24c2:	60 91 13 17 	lds	r22, 0x1713	; 0x801713 <xTickCount+0x2>
    24c6:	70 91 14 17 	lds	r23, 0x1714	; 0x801714 <xTickCount+0x3>
    24ca:	00 81       	ld	r16, Z
    24cc:	11 81       	ldd	r17, Z+1	; 0x01
    24ce:	22 81       	ldd	r18, Z+2	; 0x02
    24d0:	33 81       	ldd	r19, Z+3	; 0x03
    24d2:	0f 3f       	cpi	r16, 0xFF	; 255
    24d4:	af ef       	ldi	r26, 0xFF	; 255
    24d6:	1a 07       	cpc	r17, r26
    24d8:	2a 07       	cpc	r18, r26
    24da:	3a 07       	cpc	r19, r26
    24dc:	49 f1       	breq	.+82     	; 0x2530 <xTaskCheckForTimeOut+0x8e>
    24de:	ec 01       	movw	r28, r24
    24e0:	c9 80       	ldd	r12, Y+1	; 0x01
    24e2:	da 80       	ldd	r13, Y+2	; 0x02
    24e4:	eb 80       	ldd	r14, Y+3	; 0x03
    24e6:	fc 80       	ldd	r15, Y+4	; 0x04
    24e8:	a0 91 0c 17 	lds	r26, 0x170C	; 0x80170c <xNumOfOverflows>
    24ec:	b8 81       	ld	r27, Y
    24ee:	ba 17       	cp	r27, r26
    24f0:	29 f0       	breq	.+10     	; 0x24fc <xTaskCheckForTimeOut+0x5a>
    24f2:	4c 15       	cp	r20, r12
    24f4:	5d 05       	cpc	r21, r13
    24f6:	6e 05       	cpc	r22, r14
    24f8:	7f 05       	cpc	r23, r15
    24fa:	e0 f4       	brcc	.+56     	; 0x2534 <xTaskCheckForTimeOut+0x92>
    24fc:	4c 19       	sub	r20, r12
    24fe:	5d 09       	sbc	r21, r13
    2500:	6e 09       	sbc	r22, r14
    2502:	7f 09       	sbc	r23, r15
    2504:	40 17       	cp	r20, r16
    2506:	51 07       	cpc	r21, r17
    2508:	62 07       	cpc	r22, r18
    250a:	73 07       	cpc	r23, r19
    250c:	58 f4       	brcc	.+22     	; 0x2524 <xTaskCheckForTimeOut+0x82>
    250e:	04 1b       	sub	r16, r20
    2510:	15 0b       	sbc	r17, r21
    2512:	26 0b       	sbc	r18, r22
    2514:	37 0b       	sbc	r19, r23
    2516:	00 83       	st	Z, r16
    2518:	11 83       	std	Z+1, r17	; 0x01
    251a:	22 83       	std	Z+2, r18	; 0x02
    251c:	33 83       	std	Z+3, r19	; 0x03
    251e:	b0 df       	rcall	.-160    	; 0x2480 <vTaskInternalSetTimeOutState>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	09 c0       	rjmp	.+18     	; 0x2536 <xTaskCheckForTimeOut+0x94>
    2524:	10 82       	st	Z, r1
    2526:	11 82       	std	Z+1, r1	; 0x01
    2528:	12 82       	std	Z+2, r1	; 0x02
    252a:	13 82       	std	Z+3, r1	; 0x03
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	03 c0       	rjmp	.+6      	; 0x2536 <xTaskCheckForTimeOut+0x94>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <xTaskCheckForTimeOut+0x94>
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	0f 90       	pop	r0
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	08 95       	ret

0000254c <vTaskMissedYield>:
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	80 93 0d 17 	sts	0x170D, r24	; 0x80170d <xYieldPending>
    2552:	08 95       	ret

00002554 <xTaskGetCurrentTaskHandle>:
    2554:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <pxCurrentTCB>
    2558:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    255c:	08 95       	ret

0000255e <xTaskGetSchedulerState>:
    255e:	80 91 0f 17 	lds	r24, 0x170F	; 0x80170f <xSchedulerRunning>
    2562:	88 23       	and	r24, r24
    2564:	31 f0       	breq	.+12     	; 0x2572 <xTaskGetSchedulerState+0x14>
    2566:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    256a:	88 23       	and	r24, r24
    256c:	21 f0       	breq	.+8      	; 0x2576 <xTaskGetSchedulerState+0x18>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	08 95       	ret
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	08 95       	ret
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	08 95       	ret

0000257a <xTaskPriorityDisinherit>:
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	fc 01       	movw	r30, r24
    2584:	89 2b       	or	r24, r25
    2586:	79 f1       	breq	.+94     	; 0x25e6 <xTaskPriorityDisinherit+0x6c>
    2588:	80 a5       	ldd	r24, Z+40	; 0x28
    258a:	81 50       	subi	r24, 0x01	; 1
    258c:	80 a7       	std	Z+40, r24	; 0x28
    258e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2590:	97 a1       	ldd	r25, Z+39	; 0x27
    2592:	29 17       	cp	r18, r25
    2594:	51 f1       	breq	.+84     	; 0x25ea <xTaskPriorityDisinherit+0x70>
    2596:	81 11       	cpse	r24, r1
    2598:	2a c0       	rjmp	.+84     	; 0x25ee <xTaskPriorityDisinherit+0x74>
    259a:	ef 01       	movw	r28, r30
    259c:	8f 01       	movw	r16, r30
    259e:	0e 5f       	subi	r16, 0xFE	; 254
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	c8 01       	movw	r24, r16
    25a4:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    25a8:	8f a1       	ldd	r24, Y+39	; 0x27
    25aa:	8a 8f       	std	Y+26, r24	; 0x1a
    25ac:	44 e0       	ldi	r20, 0x04	; 4
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	48 1b       	sub	r20, r24
    25b6:	51 09       	sbc	r21, r1
    25b8:	61 09       	sbc	r22, r1
    25ba:	71 09       	sbc	r23, r1
    25bc:	4e 87       	std	Y+14, r20	; 0x0e
    25be:	5f 87       	std	Y+15, r21	; 0x0f
    25c0:	68 8b       	std	Y+16, r22	; 0x10
    25c2:	79 8b       	std	Y+17, r23	; 0x11
    25c4:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxTopReadyPriority>
    25c8:	98 17       	cp	r25, r24
    25ca:	10 f4       	brcc	.+4      	; 0x25d0 <xTaskPriorityDisinherit+0x56>
    25cc:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    25d0:	2b e0       	ldi	r18, 0x0B	; 11
    25d2:	82 9f       	mul	r24, r18
    25d4:	c0 01       	movw	r24, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	b8 01       	movw	r22, r16
    25da:	8e 5a       	subi	r24, 0xAE	; 174
    25dc:	98 4e       	sbci	r25, 0xE8	; 232
    25de:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	05 c0       	rjmp	.+10     	; 0x25f0 <xTaskPriorityDisinherit+0x76>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <xTaskPriorityDisinherit+0x76>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <xTaskPriorityDisinherit+0x76>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	08 95       	ret

000025fa <xTaskNotifyWait>:
    25fa:	4f 92       	push	r4
    25fc:	5f 92       	push	r5
    25fe:	6f 92       	push	r6
    2600:	7f 92       	push	r7
    2602:	8f 92       	push	r8
    2604:	9f 92       	push	r9
    2606:	af 92       	push	r10
    2608:	bf 92       	push	r11
    260a:	cf 92       	push	r12
    260c:	df 92       	push	r13
    260e:	ef 92       	push	r14
    2610:	ff 92       	push	r15
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	49 01       	movw	r8, r18
    2618:	5a 01       	movw	r10, r20
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	0f 92       	push	r0
    2620:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    2624:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2628:	27 a5       	ldd	r18, Z+47	; 0x2f
    262a:	22 30       	cpi	r18, 0x02	; 2
    262c:	39 f1       	breq	.+78     	; 0x267c <xTaskNotifyWait+0x82>
    262e:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    2632:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2636:	43 a4       	ldd	r4, Z+43	; 0x2b
    2638:	54 a4       	ldd	r5, Z+44	; 0x2c
    263a:	65 a4       	ldd	r6, Z+45	; 0x2d
    263c:	76 a4       	ldd	r7, Z+46	; 0x2e
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	80 95       	com	r24
    2644:	90 95       	com	r25
    2646:	a0 95       	com	r26
    2648:	b0 95       	com	r27
    264a:	84 21       	and	r24, r4
    264c:	95 21       	and	r25, r5
    264e:	a6 21       	and	r26, r6
    2650:	b7 21       	and	r27, r7
    2652:	83 a7       	std	Z+43, r24	; 0x2b
    2654:	94 a7       	std	Z+44, r25	; 0x2c
    2656:	a5 a7       	std	Z+45, r26	; 0x2d
    2658:	b6 a7       	std	Z+46, r27	; 0x2e
    265a:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    265e:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	87 a7       	std	Z+47, r24	; 0x2f
    2666:	c1 14       	cp	r12, r1
    2668:	d1 04       	cpc	r13, r1
    266a:	e1 04       	cpc	r14, r1
    266c:	f1 04       	cpc	r15, r1
    266e:	31 f0       	breq	.+12     	; 0x267c <xTaskNotifyWait+0x82>
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	c7 01       	movw	r24, r14
    2674:	b6 01       	movw	r22, r12
    2676:	49 da       	rcall	.-2926   	; 0x1b0a <prvAddCurrentTaskToDelayedList>
    2678:	0e 94 ca 06 	call	0xd94	; 0xd94 <vPortYield>
    267c:	0f 90       	pop	r0
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	0f 92       	push	r0
    2686:	01 15       	cp	r16, r1
    2688:	11 05       	cpc	r17, r1
    268a:	69 f0       	breq	.+26     	; 0x26a6 <xTaskNotifyWait+0xac>
    268c:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    2690:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    2694:	83 a5       	ldd	r24, Z+43	; 0x2b
    2696:	94 a5       	ldd	r25, Z+44	; 0x2c
    2698:	a5 a5       	ldd	r26, Z+45	; 0x2d
    269a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    269c:	f8 01       	movw	r30, r16
    269e:	80 83       	st	Z, r24
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	a2 83       	std	Z+2, r26	; 0x02
    26a4:	b3 83       	std	Z+3, r27	; 0x03
    26a6:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    26aa:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    26ae:	87 a5       	ldd	r24, Z+47	; 0x2f
    26b0:	82 30       	cpi	r24, 0x02	; 2
    26b2:	b1 f4       	brne	.+44     	; 0x26e0 <xTaskNotifyWait+0xe6>
    26b4:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    26b8:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    26bc:	83 a5       	ldd	r24, Z+43	; 0x2b
    26be:	94 a5       	ldd	r25, Z+44	; 0x2c
    26c0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    26c2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    26c4:	80 94       	com	r8
    26c6:	90 94       	com	r9
    26c8:	a0 94       	com	r10
    26ca:	b0 94       	com	r11
    26cc:	88 22       	and	r8, r24
    26ce:	99 22       	and	r9, r25
    26d0:	aa 22       	and	r10, r26
    26d2:	bb 22       	and	r11, r27
    26d4:	83 a6       	std	Z+43, r8	; 0x2b
    26d6:	94 a6       	std	Z+44, r9	; 0x2c
    26d8:	a5 a6       	std	Z+45, r10	; 0x2d
    26da:	b6 a6       	std	Z+46, r11	; 0x2e
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <xTaskNotifyWait+0xe8>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    26e6:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    26ea:	17 a6       	std	Z+47, r1	; 0x2f
    26ec:	0f 90       	pop	r0
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
    2700:	9f 90       	pop	r9
    2702:	8f 90       	pop	r8
    2704:	7f 90       	pop	r7
    2706:	6f 90       	pop	r6
    2708:	5f 90       	pop	r5
    270a:	4f 90       	pop	r4
    270c:	08 95       	ret

0000270e <xTaskGenericNotify>:
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	fc 01       	movw	r30, r24
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	0f 92       	push	r0
    271e:	01 15       	cp	r16, r1
    2720:	11 05       	cpc	r17, r1
    2722:	49 f0       	breq	.+18     	; 0x2736 <xTaskGenericNotify+0x28>
    2724:	83 a5       	ldd	r24, Z+43	; 0x2b
    2726:	94 a5       	ldd	r25, Z+44	; 0x2c
    2728:	a5 a5       	ldd	r26, Z+45	; 0x2d
    272a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    272c:	e8 01       	movw	r28, r16
    272e:	88 83       	st	Y, r24
    2730:	99 83       	std	Y+1, r25	; 0x01
    2732:	aa 83       	std	Y+2, r26	; 0x02
    2734:	bb 83       	std	Y+3, r27	; 0x03
    2736:	87 a5       	ldd	r24, Z+47	; 0x2f
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	97 a7       	std	Z+47, r25	; 0x2f
    273c:	22 30       	cpi	r18, 0x02	; 2
    273e:	b1 f0       	breq	.+44     	; 0x276c <xTaskGenericNotify+0x5e>
    2740:	18 f4       	brcc	.+6      	; 0x2748 <xTaskGenericNotify+0x3a>
    2742:	21 30       	cpi	r18, 0x01	; 1
    2744:	31 f0       	breq	.+12     	; 0x2752 <xTaskGenericNotify+0x44>
    2746:	2a c0       	rjmp	.+84     	; 0x279c <xTaskGenericNotify+0x8e>
    2748:	23 30       	cpi	r18, 0x03	; 3
    274a:	e9 f0       	breq	.+58     	; 0x2786 <xTaskGenericNotify+0x78>
    274c:	24 30       	cpi	r18, 0x04	; 4
    274e:	01 f1       	breq	.+64     	; 0x2790 <xTaskGenericNotify+0x82>
    2750:	25 c0       	rjmp	.+74     	; 0x279c <xTaskGenericNotify+0x8e>
    2752:	03 a5       	ldd	r16, Z+43	; 0x2b
    2754:	14 a5       	ldd	r17, Z+44	; 0x2c
    2756:	25 a5       	ldd	r18, Z+45	; 0x2d
    2758:	36 a5       	ldd	r19, Z+46	; 0x2e
    275a:	40 2b       	or	r20, r16
    275c:	51 2b       	or	r21, r17
    275e:	62 2b       	or	r22, r18
    2760:	73 2b       	or	r23, r19
    2762:	43 a7       	std	Z+43, r20	; 0x2b
    2764:	54 a7       	std	Z+44, r21	; 0x2c
    2766:	65 a7       	std	Z+45, r22	; 0x2d
    2768:	76 a7       	std	Z+46, r23	; 0x2e
    276a:	18 c0       	rjmp	.+48     	; 0x279c <xTaskGenericNotify+0x8e>
    276c:	43 a5       	ldd	r20, Z+43	; 0x2b
    276e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2770:	65 a5       	ldd	r22, Z+45	; 0x2d
    2772:	76 a5       	ldd	r23, Z+46	; 0x2e
    2774:	4f 5f       	subi	r20, 0xFF	; 255
    2776:	5f 4f       	sbci	r21, 0xFF	; 255
    2778:	6f 4f       	sbci	r22, 0xFF	; 255
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	43 a7       	std	Z+43, r20	; 0x2b
    277e:	54 a7       	std	Z+44, r21	; 0x2c
    2780:	65 a7       	std	Z+45, r22	; 0x2d
    2782:	76 a7       	std	Z+46, r23	; 0x2e
    2784:	0b c0       	rjmp	.+22     	; 0x279c <xTaskGenericNotify+0x8e>
    2786:	43 a7       	std	Z+43, r20	; 0x2b
    2788:	54 a7       	std	Z+44, r21	; 0x2c
    278a:	65 a7       	std	Z+45, r22	; 0x2d
    278c:	76 a7       	std	Z+46, r23	; 0x2e
    278e:	06 c0       	rjmp	.+12     	; 0x279c <xTaskGenericNotify+0x8e>
    2790:	82 30       	cpi	r24, 0x02	; 2
    2792:	49 f1       	breq	.+82     	; 0x27e6 <xTaskGenericNotify+0xd8>
    2794:	43 a7       	std	Z+43, r20	; 0x2b
    2796:	54 a7       	std	Z+44, r21	; 0x2c
    2798:	65 a7       	std	Z+45, r22	; 0x2d
    279a:	76 a7       	std	Z+46, r23	; 0x2e
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	29 f5       	brne	.+74     	; 0x27ea <xTaskGenericNotify+0xdc>
    27a0:	ef 01       	movw	r28, r30
    27a2:	8f 01       	movw	r16, r30
    27a4:	0e 5f       	subi	r16, 0xFE	; 254
    27a6:	1f 4f       	sbci	r17, 0xFF	; 255
    27a8:	c8 01       	movw	r24, r16
    27aa:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    27ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27b0:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxTopReadyPriority>
    27b4:	98 17       	cp	r25, r24
    27b6:	10 f4       	brcc	.+4      	; 0x27bc <xTaskGenericNotify+0xae>
    27b8:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    27bc:	2b e0       	ldi	r18, 0x0B	; 11
    27be:	82 9f       	mul	r24, r18
    27c0:	c0 01       	movw	r24, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	b8 01       	movw	r22, r16
    27c6:	8e 5a       	subi	r24, 0xAE	; 174
    27c8:	98 4e       	sbci	r25, 0xE8	; 232
    27ca:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    27ce:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    27d2:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    27d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    27da:	89 17       	cp	r24, r25
    27dc:	40 f4       	brcc	.+16     	; 0x27ee <xTaskGenericNotify+0xe0>
    27de:	0e 94 ca 06 	call	0xd94	; 0xd94 <vPortYield>
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	05 c0       	rjmp	.+10     	; 0x27f0 <xTaskGenericNotify+0xe2>
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <xTaskGenericNotify+0xe2>
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	01 c0       	rjmp	.+2      	; 0x27f0 <xTaskGenericNotify+0xe2>
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <xTaskGenericNotifyFromISR>:
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	fc 01       	movw	r30, r24
    280c:	01 15       	cp	r16, r1
    280e:	11 05       	cpc	r17, r1
    2810:	49 f0       	breq	.+18     	; 0x2824 <xTaskGenericNotifyFromISR+0x26>
    2812:	83 a5       	ldd	r24, Z+43	; 0x2b
    2814:	94 a5       	ldd	r25, Z+44	; 0x2c
    2816:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2818:	b6 a5       	ldd	r27, Z+46	; 0x2e
    281a:	e8 01       	movw	r28, r16
    281c:	88 83       	st	Y, r24
    281e:	99 83       	std	Y+1, r25	; 0x01
    2820:	aa 83       	std	Y+2, r26	; 0x02
    2822:	bb 83       	std	Y+3, r27	; 0x03
    2824:	87 a5       	ldd	r24, Z+47	; 0x2f
    2826:	92 e0       	ldi	r25, 0x02	; 2
    2828:	97 a7       	std	Z+47, r25	; 0x2f
    282a:	22 30       	cpi	r18, 0x02	; 2
    282c:	b1 f0       	breq	.+44     	; 0x285a <xTaskGenericNotifyFromISR+0x5c>
    282e:	18 f4       	brcc	.+6      	; 0x2836 <xTaskGenericNotifyFromISR+0x38>
    2830:	21 30       	cpi	r18, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <xTaskGenericNotifyFromISR+0x42>
    2834:	2a c0       	rjmp	.+84     	; 0x288a <xTaskGenericNotifyFromISR+0x8c>
    2836:	23 30       	cpi	r18, 0x03	; 3
    2838:	e9 f0       	breq	.+58     	; 0x2874 <xTaskGenericNotifyFromISR+0x76>
    283a:	24 30       	cpi	r18, 0x04	; 4
    283c:	01 f1       	breq	.+64     	; 0x287e <xTaskGenericNotifyFromISR+0x80>
    283e:	25 c0       	rjmp	.+74     	; 0x288a <xTaskGenericNotifyFromISR+0x8c>
    2840:	03 a5       	ldd	r16, Z+43	; 0x2b
    2842:	14 a5       	ldd	r17, Z+44	; 0x2c
    2844:	25 a5       	ldd	r18, Z+45	; 0x2d
    2846:	36 a5       	ldd	r19, Z+46	; 0x2e
    2848:	40 2b       	or	r20, r16
    284a:	51 2b       	or	r21, r17
    284c:	62 2b       	or	r22, r18
    284e:	73 2b       	or	r23, r19
    2850:	43 a7       	std	Z+43, r20	; 0x2b
    2852:	54 a7       	std	Z+44, r21	; 0x2c
    2854:	65 a7       	std	Z+45, r22	; 0x2d
    2856:	76 a7       	std	Z+46, r23	; 0x2e
    2858:	18 c0       	rjmp	.+48     	; 0x288a <xTaskGenericNotifyFromISR+0x8c>
    285a:	43 a5       	ldd	r20, Z+43	; 0x2b
    285c:	54 a5       	ldd	r21, Z+44	; 0x2c
    285e:	65 a5       	ldd	r22, Z+45	; 0x2d
    2860:	76 a5       	ldd	r23, Z+46	; 0x2e
    2862:	4f 5f       	subi	r20, 0xFF	; 255
    2864:	5f 4f       	sbci	r21, 0xFF	; 255
    2866:	6f 4f       	sbci	r22, 0xFF	; 255
    2868:	7f 4f       	sbci	r23, 0xFF	; 255
    286a:	43 a7       	std	Z+43, r20	; 0x2b
    286c:	54 a7       	std	Z+44, r21	; 0x2c
    286e:	65 a7       	std	Z+45, r22	; 0x2d
    2870:	76 a7       	std	Z+46, r23	; 0x2e
    2872:	0b c0       	rjmp	.+22     	; 0x288a <xTaskGenericNotifyFromISR+0x8c>
    2874:	43 a7       	std	Z+43, r20	; 0x2b
    2876:	54 a7       	std	Z+44, r21	; 0x2c
    2878:	65 a7       	std	Z+45, r22	; 0x2d
    287a:	76 a7       	std	Z+46, r23	; 0x2e
    287c:	06 c0       	rjmp	.+12     	; 0x288a <xTaskGenericNotifyFromISR+0x8c>
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	d9 f1       	breq	.+118    	; 0x28f8 <xTaskGenericNotifyFromISR+0xfa>
    2882:	43 a7       	std	Z+43, r20	; 0x2b
    2884:	54 a7       	std	Z+44, r21	; 0x2c
    2886:	65 a7       	std	Z+45, r22	; 0x2d
    2888:	76 a7       	std	Z+46, r23	; 0x2e
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	b9 f5       	brne	.+110    	; 0x28fc <xTaskGenericNotifyFromISR+0xfe>
    288e:	ef 01       	movw	r28, r30
    2890:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <uxSchedulerSuspended>
    2894:	81 11       	cpse	r24, r1
    2896:	17 c0       	rjmp	.+46     	; 0x28c6 <xTaskGenericNotifyFromISR+0xc8>
    2898:	8f 01       	movw	r16, r30
    289a:	0e 5f       	subi	r16, 0xFE	; 254
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	c8 01       	movw	r24, r16
    28a0:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
    28a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28a6:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxTopReadyPriority>
    28aa:	98 17       	cp	r25, r24
    28ac:	10 f4       	brcc	.+4      	; 0x28b2 <xTaskGenericNotifyFromISR+0xb4>
    28ae:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxTopReadyPriority>
    28b2:	eb e0       	ldi	r30, 0x0B	; 11
    28b4:	8e 9f       	mul	r24, r30
    28b6:	c0 01       	movw	r24, r0
    28b8:	11 24       	eor	r1, r1
    28ba:	b8 01       	movw	r22, r16
    28bc:	8e 5a       	subi	r24, 0xAE	; 174
    28be:	98 4e       	sbci	r25, 0xE8	; 232
    28c0:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    28c4:	07 c0       	rjmp	.+14     	; 0x28d4 <xTaskGenericNotifyFromISR+0xd6>
    28c6:	bf 01       	movw	r22, r30
    28c8:	62 5f       	subi	r22, 0xF2	; 242
    28ca:	7f 4f       	sbci	r23, 0xFF	; 255
    28cc:	8d e2       	ldi	r24, 0x2D	; 45
    28ce:	97 e1       	ldi	r25, 0x17	; 23
    28d0:	0e 94 97 05 	call	0xb2e	; 0xb2e <vListInsertEnd>
    28d4:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <pxCurrentTCB>
    28d8:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <pxCurrentTCB+0x1>
    28dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28de:	82 8d       	ldd	r24, Z+26	; 0x1a
    28e0:	89 17       	cp	r24, r25
    28e2:	70 f4       	brcc	.+28     	; 0x2900 <xTaskGenericNotifyFromISR+0x102>
    28e4:	e1 14       	cp	r14, r1
    28e6:	f1 04       	cpc	r15, r1
    28e8:	19 f0       	breq	.+6      	; 0x28f0 <xTaskGenericNotifyFromISR+0xf2>
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	e7 01       	movw	r28, r14
    28ee:	88 83       	st	Y, r24
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	80 93 0d 17 	sts	0x170D, r24	; 0x80170d <xYieldPending>
    28f6:	05 c0       	rjmp	.+10     	; 0x2902 <xTaskGenericNotifyFromISR+0x104>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	03 c0       	rjmp	.+6      	; 0x2902 <xTaskGenericNotifyFromISR+0x104>
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <xTaskGenericNotifyFromISR+0x104>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	08 95       	ret

00002910 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	21 f4       	brne	.+8      	; 0x291c <xTaskNotifyStateClear+0xc>
    2914:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <pxCurrentTCB>
    2918:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2922:	fc 01       	movw	r30, r24
    2924:	27 a5       	ldd	r18, Z+47	; 0x2f
    2926:	22 30       	cpi	r18, 0x02	; 2
    2928:	19 f4       	brne	.+6      	; 0x2930 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    292a:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2930:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2932:	0f 90       	pop	r0
    2934:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2936:	08 95       	ret

00002938 <prvInsertTimerInActiveList>:
    2938:	cf 92       	push	r12
    293a:	df 92       	push	r13
    293c:	ef 92       	push	r14
    293e:	ff 92       	push	r15
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	fc 01       	movw	r30, r24
    2946:	42 83       	std	Z+2, r20	; 0x02
    2948:	53 83       	std	Z+3, r21	; 0x03
    294a:	64 83       	std	Z+4, r22	; 0x04
    294c:	75 83       	std	Z+5, r23	; 0x05
    294e:	93 87       	std	Z+11, r25	; 0x0b
    2950:	82 87       	std	Z+10, r24	; 0x0a
    2952:	04 17       	cp	r16, r20
    2954:	15 07       	cpc	r17, r21
    2956:	26 07       	cpc	r18, r22
    2958:	37 07       	cpc	r19, r23
    295a:	c0 f0       	brcs	.+48     	; 0x298c <prvInsertTimerInActiveList+0x54>
    295c:	0c 19       	sub	r16, r12
    295e:	1d 09       	sbc	r17, r13
    2960:	2e 09       	sbc	r18, r14
    2962:	3f 09       	sbc	r19, r15
    2964:	86 85       	ldd	r24, Z+14	; 0x0e
    2966:	97 85       	ldd	r25, Z+15	; 0x0f
    2968:	a0 89       	ldd	r26, Z+16	; 0x10
    296a:	b1 89       	ldd	r27, Z+17	; 0x11
    296c:	08 17       	cp	r16, r24
    296e:	19 07       	cpc	r17, r25
    2970:	2a 07       	cpc	r18, r26
    2972:	3b 07       	cpc	r19, r27
    2974:	00 f5       	brcc	.+64     	; 0x29b6 <prvInsertTimerInActiveList+0x7e>
    2976:	bf 01       	movw	r22, r30
    2978:	6e 5f       	subi	r22, 0xFE	; 254
    297a:	7f 4f       	sbci	r23, 0xFF	; 255
    297c:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <pxOverflowTimerList>
    2980:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <pxOverflowTimerList+0x1>
    2984:	0e 94 b8 05 	call	0xb70	; 0xb70 <vListInsert>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	18 c0       	rjmp	.+48     	; 0x29bc <prvInsertTimerInActiveList+0x84>
    298c:	0c 15       	cp	r16, r12
    298e:	1d 05       	cpc	r17, r13
    2990:	2e 05       	cpc	r18, r14
    2992:	3f 05       	cpc	r19, r15
    2994:	28 f4       	brcc	.+10     	; 0x29a0 <prvInsertTimerInActiveList+0x68>
    2996:	4c 15       	cp	r20, r12
    2998:	5d 05       	cpc	r21, r13
    299a:	6e 05       	cpc	r22, r14
    299c:	7f 05       	cpc	r23, r15
    299e:	68 f4       	brcc	.+26     	; 0x29ba <prvInsertTimerInActiveList+0x82>
    29a0:	bf 01       	movw	r22, r30
    29a2:	6e 5f       	subi	r22, 0xFE	; 254
    29a4:	7f 4f       	sbci	r23, 0xFF	; 255
    29a6:	80 91 8a 17 	lds	r24, 0x178A	; 0x80178a <pxCurrentTimerList>
    29aa:	90 91 8b 17 	lds	r25, 0x178B	; 0x80178b <pxCurrentTimerList+0x1>
    29ae:	0e 94 b8 05 	call	0xb70	; 0xb70 <vListInsert>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	03 c0       	rjmp	.+6      	; 0x29bc <prvInsertTimerInActiveList+0x84>
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <prvInsertTimerInActiveList+0x84>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
    29c8:	08 95       	ret

000029ca <prvCheckForValidListAndQueue>:
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	0f 92       	push	r0
    29d0:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <xTimerQueue>
    29d4:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <xTimerQueue+0x1>
    29d8:	89 2b       	or	r24, r25
    29da:	e9 f4       	brne	.+58     	; 0x2a16 <prvCheckForValidListAndQueue+0x4c>
    29dc:	87 e9       	ldi	r24, 0x97	; 151
    29de:	97 e1       	ldi	r25, 0x17	; 23
    29e0:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    29e4:	8c e8       	ldi	r24, 0x8C	; 140
    29e6:	97 e1       	ldi	r25, 0x17	; 23
    29e8:	0e 94 82 05 	call	0xb04	; 0xb04 <vListInitialise>
    29ec:	87 e9       	ldi	r24, 0x97	; 151
    29ee:	97 e1       	ldi	r25, 0x17	; 23
    29f0:	90 93 8b 17 	sts	0x178B, r25	; 0x80178b <pxCurrentTimerList+0x1>
    29f4:	80 93 8a 17 	sts	0x178A, r24	; 0x80178a <pxCurrentTimerList>
    29f8:	8c e8       	ldi	r24, 0x8C	; 140
    29fa:	97 e1       	ldi	r25, 0x17	; 23
    29fc:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <pxOverflowTimerList+0x1>
    2a00:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <pxOverflowTimerList>
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	67 e0       	ldi	r22, 0x07	; 7
    2a08:	8a e0       	ldi	r24, 0x0A	; 10
    2a0a:	0e 94 a6 08 	call	0x114c	; 0x114c <xQueueGenericCreate>
    2a0e:	90 93 87 17 	sts	0x1787, r25	; 0x801787 <xTimerQueue+0x1>
    2a12:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <xTimerQueue>
    2a16:	0f 90       	pop	r0
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	08 95       	ret

00002a1c <xTimerCreateTimerTask>:
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	d3 df       	rcall	.-90     	; 0x29ca <prvCheckForValidListAndQueue>
    2a24:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <xTimerQueue>
    2a28:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <xTimerQueue+0x1>
    2a2c:	89 2b       	or	r24, r25
    2a2e:	89 f0       	breq	.+34     	; 0x2a52 <xTimerCreateTimerTask+0x36>
    2a30:	0f 2e       	mov	r0, r31
    2a32:	f4 e8       	ldi	r31, 0x84	; 132
    2a34:	ef 2e       	mov	r14, r31
    2a36:	f7 e1       	ldi	r31, 0x17	; 23
    2a38:	ff 2e       	mov	r15, r31
    2a3a:	f0 2d       	mov	r31, r0
    2a3c:	03 e0       	ldi	r16, 0x03	; 3
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	45 e5       	ldi	r20, 0x55	; 85
    2a44:	50 e0       	ldi	r21, 0x00	; 0
    2a46:	6c eb       	ldi	r22, 0xBC	; 188
    2a48:	73 e0       	ldi	r23, 0x03	; 3
    2a4a:	83 e0       	ldi	r24, 0x03	; 3
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	d3 d8       	rcall	.-3674   	; 0x1bf6 <xTaskCreate>
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <xTimerCreateTimerTask+0x38>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	0f 91       	pop	r16
    2a56:	ff 90       	pop	r15
    2a58:	ef 90       	pop	r14
    2a5a:	08 95       	ret

00002a5c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	27 97       	sbiw	r28, 0x07	; 7
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2a84:	e0 91 86 17 	lds	r30, 0x1786	; 0x801786 <xTimerQueue>
    2a88:	f0 91 87 17 	lds	r31, 0x1787	; 0x801787 <xTimerQueue+0x1>
    2a8c:	30 97       	sbiw	r30, 0x00	; 0
    2a8e:	81 f1       	breq	.+96     	; 0x2af0 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2a90:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a92:	2a 83       	std	Y+2, r18	; 0x02
    2a94:	3b 83       	std	Y+3, r19	; 0x03
    2a96:	4c 83       	std	Y+4, r20	; 0x04
    2a98:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a9a:	9f 83       	std	Y+7, r25	; 0x07
    2a9c:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a9e:	66 30       	cpi	r22, 0x06	; 6
    2aa0:	f4 f4       	brge	.+60     	; 0x2ade <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2aa2:	5d dd       	rcall	.-1350   	; 0x255e <xTaskGetSchedulerState>
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	69 f4       	brne	.+26     	; 0x2ac2 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2aa8:	00 e0       	ldi	r16, 0x00	; 0
    2aaa:	a7 01       	movw	r20, r14
    2aac:	96 01       	movw	r18, r12
    2aae:	be 01       	movw	r22, r28
    2ab0:	6f 5f       	subi	r22, 0xFF	; 255
    2ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab4:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <xTimerQueue>
    2ab8:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <xTimerQueue+0x1>
    2abc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <xQueueGenericSend>
    2ac0:	18 c0       	rjmp	.+48     	; 0x2af2 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ac2:	00 e0       	ldi	r16, 0x00	; 0
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	a9 01       	movw	r20, r18
    2aca:	be 01       	movw	r22, r28
    2acc:	6f 5f       	subi	r22, 0xFF	; 255
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <xTimerQueue>
    2ad4:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <xTimerQueue+0x1>
    2ad8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <xQueueGenericSend>
    2adc:	0a c0       	rjmp	.+20     	; 0x2af2 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	a8 01       	movw	r20, r16
    2ae2:	be 01       	movw	r22, r28
    2ae4:	6f 5f       	subi	r22, 0xFF	; 255
    2ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae8:	cf 01       	movw	r24, r30
    2aea:	0e 94 8f 09 	call	0x131e	; 0x131e <xQueueGenericSendFromISR>
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2af2:	27 96       	adiw	r28, 0x07	; 7
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	df 90       	pop	r13
    2b0c:	cf 90       	pop	r12
    2b0e:	bf 90       	pop	r11
    2b10:	af 90       	pop	r10
    2b12:	9f 90       	pop	r9
    2b14:	8f 90       	pop	r8
    2b16:	08 95       	ret

00002b18 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2b18:	2f 92       	push	r2
    2b1a:	3f 92       	push	r3
    2b1c:	4f 92       	push	r4
    2b1e:	5f 92       	push	r5
    2b20:	6f 92       	push	r6
    2b22:	7f 92       	push	r7
    2b24:	8f 92       	push	r8
    2b26:	9f 92       	push	r9
    2b28:	af 92       	push	r10
    2b2a:	bf 92       	push	r11
    2b2c:	cf 92       	push	r12
    2b2e:	df 92       	push	r13
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2b3e:	bc d9       	rcall	.-3208   	; 0x1eb8 <xTaskGetTickCount>
    2b40:	2b 01       	movw	r4, r22
    2b42:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    2b44:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <xLastTime.2432>
    2b48:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <xLastTime.2432+0x1>
    2b4c:	a0 91 82 17 	lds	r26, 0x1782	; 0x801782 <xLastTime.2432+0x2>
    2b50:	b0 91 83 17 	lds	r27, 0x1783	; 0x801783 <xLastTime.2432+0x3>
    2b54:	48 16       	cp	r4, r24
    2b56:	59 06       	cpc	r5, r25
    2b58:	6a 06       	cpc	r6, r26
    2b5a:	7b 06       	cpc	r7, r27
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <prvSampleTimeNow+0x48>
    2b5e:	53 c0       	rjmp	.+166    	; 0x2c06 <prvSampleTimeNow+0xee>
    2b60:	3b c0       	rjmp	.+118    	; 0x2bd8 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b62:	07 80       	ldd	r0, Z+7	; 0x07
    2b64:	f0 85       	ldd	r31, Z+8	; 0x08
    2b66:	e0 2d       	mov	r30, r0
    2b68:	80 80       	ld	r8, Z
    2b6a:	91 80       	ldd	r9, Z+1	; 0x01
    2b6c:	a2 80       	ldd	r10, Z+2	; 0x02
    2b6e:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b70:	c0 85       	ldd	r28, Z+8	; 0x08
    2b72:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b74:	8e 01       	movw	r16, r28
    2b76:	0e 5f       	subi	r16, 0xFE	; 254
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	0e 94 f5 05 	call	0xbea	; 0xbea <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b80:	ec 89       	ldd	r30, Y+20	; 0x14
    2b82:	fd 89       	ldd	r31, Y+21	; 0x15
    2b84:	ce 01       	movw	r24, r28
    2b86:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	82 ff       	sbrs	r24, 2
    2b8c:	25 c0       	rjmp	.+74     	; 0x2bd8 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b90:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b92:	a8 89       	ldd	r26, Y+16	; 0x10
    2b94:	b9 89       	ldd	r27, Y+17	; 0x11
    2b96:	88 0d       	add	r24, r8
    2b98:	99 1d       	adc	r25, r9
    2b9a:	aa 1d       	adc	r26, r10
    2b9c:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2b9e:	88 16       	cp	r8, r24
    2ba0:	99 06       	cpc	r9, r25
    2ba2:	aa 06       	cpc	r10, r26
    2ba4:	bb 06       	cpc	r11, r27
    2ba6:	70 f4       	brcc	.+28     	; 0x2bc4 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2ba8:	8a 83       	std	Y+2, r24	; 0x02
    2baa:	9b 83       	std	Y+3, r25	; 0x03
    2bac:	ac 83       	std	Y+4, r26	; 0x04
    2bae:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2bb0:	db 87       	std	Y+11, r29	; 0x0b
    2bb2:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2bb4:	b8 01       	movw	r22, r16
    2bb6:	80 91 8a 17 	lds	r24, 0x178A	; 0x80178a <pxCurrentTimerList>
    2bba:	90 91 8b 17 	lds	r25, 0x178B	; 0x80178b <pxCurrentTimerList+0x1>
    2bbe:	0e 94 b8 05 	call	0xb70	; 0xb70 <vListInsert>
    2bc2:	0a c0       	rjmp	.+20     	; 0x2bd8 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2bc4:	c1 2c       	mov	r12, r1
    2bc6:	d1 2c       	mov	r13, r1
    2bc8:	76 01       	movw	r14, r12
    2bca:	00 e0       	ldi	r16, 0x00	; 0
    2bcc:	10 e0       	ldi	r17, 0x00	; 0
    2bce:	a5 01       	movw	r20, r10
    2bd0:	94 01       	movw	r18, r8
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	42 df       	rcall	.-380    	; 0x2a5c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2bd8:	e0 91 8a 17 	lds	r30, 0x178A	; 0x80178a <pxCurrentTimerList>
    2bdc:	f0 91 8b 17 	lds	r31, 0x178B	; 0x80178b <pxCurrentTimerList+0x1>
    2be0:	80 81       	ld	r24, Z
    2be2:	81 11       	cpse	r24, r1
    2be4:	be cf       	rjmp	.-132    	; 0x2b62 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2be6:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <pxOverflowTimerList>
    2bea:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <pxOverflowTimerList+0x1>
    2bee:	90 93 8b 17 	sts	0x178B, r25	; 0x80178b <pxCurrentTimerList+0x1>
    2bf2:	80 93 8a 17 	sts	0x178A, r24	; 0x80178a <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2bf6:	f0 93 89 17 	sts	0x1789, r31	; 0x801789 <pxOverflowTimerList+0x1>
    2bfa:	e0 93 88 17 	sts	0x1788, r30	; 0x801788 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	f1 01       	movw	r30, r2
    2c02:	80 83       	st	Z, r24
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2c06:	f1 01       	movw	r30, r2
    2c08:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2c0a:	40 92 80 17 	sts	0x1780, r4	; 0x801780 <xLastTime.2432>
    2c0e:	50 92 81 17 	sts	0x1781, r5	; 0x801781 <xLastTime.2432+0x1>
    2c12:	60 92 82 17 	sts	0x1782, r6	; 0x801782 <xLastTime.2432+0x2>
    2c16:	70 92 83 17 	sts	0x1783, r7	; 0x801783 <xLastTime.2432+0x3>

    return xTimeNow;
}
    2c1a:	c3 01       	movw	r24, r6
    2c1c:	b2 01       	movw	r22, r4
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	bf 90       	pop	r11
    2c30:	af 90       	pop	r10
    2c32:	9f 90       	pop	r9
    2c34:	8f 90       	pop	r8
    2c36:	7f 90       	pop	r7
    2c38:	6f 90       	pop	r6
    2c3a:	5f 90       	pop	r5
    2c3c:	4f 90       	pop	r4
    2c3e:	3f 90       	pop	r3
    2c40:	2f 90       	pop	r2
    2c42:	08 95       	ret

00002c44 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2c44:	08 95       	ret

00002c46 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2c46:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2c48:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c4a:	2f ef       	ldi	r18, 0xFF	; 255
    2c4c:	80 e7       	ldi	r24, 0x70	; 112
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	21 50       	subi	r18, 0x01	; 1
    2c52:	80 40       	sbci	r24, 0x00	; 0
    2c54:	90 40       	sbci	r25, 0x00	; 0
    2c56:	e1 f7       	brne	.-8      	; 0x2c50 <vApplicationMallocFailedHook+0xa>
    2c58:	00 c0       	rjmp	.+0      	; 0x2c5a <vApplicationMallocFailedHook+0x14>
    2c5a:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2c5c:	1f 9a       	sbi	0x03, 7	; 3
    2c5e:	f5 cf       	rjmp	.-22     	; 0x2c4a <vApplicationMallocFailedHook+0x4>

00002c60 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2c60:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2c62:	2f 9a       	sbi	0x05, 7	; 5
    2c64:	2f ef       	ldi	r18, 0xFF	; 255
    2c66:	87 ea       	ldi	r24, 0xA7	; 167
    2c68:	91 e6       	ldi	r25, 0x61	; 97
    2c6a:	21 50       	subi	r18, 0x01	; 1
    2c6c:	80 40       	sbci	r24, 0x00	; 0
    2c6e:	90 40       	sbci	r25, 0x00	; 0
    2c70:	e1 f7       	brne	.-8      	; 0x2c6a <vApplicationStackOverflowHook+0xa>
    2c72:	00 c0       	rjmp	.+0      	; 0x2c74 <vApplicationStackOverflowHook+0x14>
    2c74:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2c76:	1f 9a       	sbi	0x03, 7	; 3
    2c78:	f5 cf       	rjmp	.-22     	; 0x2c64 <vApplicationStackOverflowHook+0x4>

00002c7a <create_tasks_and_semaphores>:

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2c7a:	ef 92       	push	r14
    2c7c:	ff 92       	push	r15
    2c7e:	0f 93       	push	r16
    2c80:	80 91 24 19 	lds	r24, 0x1924	; 0x801924 <xTestSemaphore>
    2c84:	90 91 25 19 	lds	r25, 0x1925	; 0x801925 <xTestSemaphore+0x1>
    2c88:	89 2b       	or	r24, r25
    2c8a:	89 f4       	brne	.+34     	; 0x2cae <create_tasks_and_semaphores+0x34>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <xQueueCreateMutex>
    2c92:	90 93 25 19 	sts	0x1925, r25	; 0x801925 <xTestSemaphore+0x1>
    2c96:	80 93 24 19 	sts	0x1924, r24	; 0x801924 <xTestSemaphore>
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	41 f0       	breq	.+16     	; 0x2cae <create_tasks_and_semaphores+0x34>
    2c9e:	00 e0       	ldi	r16, 0x00	; 0
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	a9 01       	movw	r20, r18
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <xQueueGenericSend>
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	66 e1       	ldi	r22, 0x16	; 22
    2cb2:	8a e0       	ldi	r24, 0x0A	; 10
    2cb4:	0e 94 a6 08 	call	0x114c	; 0x114c <xQueueGenericCreate>
    2cb8:	90 93 ff 18 	sts	0x18FF, r25	; 0x8018ff <xQueue+0x1>
    2cbc:	80 93 fe 18 	sts	0x18FE, r24	; 0x8018fe <xQueue>
    2cc0:	20 91 24 19 	lds	r18, 0x1924	; 0x801924 <xTestSemaphore>
    2cc4:	30 91 25 19 	lds	r19, 0x1925	; 0x801925 <xTestSemaphore+0x1>
    2cc8:	e1 2c       	mov	r14, r1
    2cca:	f1 2c       	mov	r15, r1
    2ccc:	03 e0       	ldi	r16, 0x03	; 3
    2cce:	40 ec       	ldi	r20, 0xC0	; 192
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	64 ec       	ldi	r22, 0xC4	; 196
    2cd4:	73 e0       	ldi	r23, 0x03	; 3
    2cd6:	81 ec       	ldi	r24, 0xC1	; 193
    2cd8:	93 e0       	ldi	r25, 0x03	; 3
    2cda:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xTaskCreate>
    2cde:	20 91 24 19 	lds	r18, 0x1924	; 0x801924 <xTestSemaphore>
    2ce2:	30 91 25 19 	lds	r19, 0x1925	; 0x801925 <xTestSemaphore+0x1>
    2ce6:	40 ec       	ldi	r20, 0xC0	; 192
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	6f ec       	ldi	r22, 0xCF	; 207
    2cec:	73 e0       	ldi	r23, 0x03	; 3
    2cee:	8a e0       	ldi	r24, 0x0A	; 10
    2cf0:	94 e0       	ldi	r25, 0x04	; 4
    2cf2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xTaskCreate>
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 ec       	ldi	r20, 0xC0	; 192
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	69 ed       	ldi	r22, 0xD9	; 217
    2d00:	73 e0       	ldi	r23, 0x03	; 3
    2d02:	89 e0       	ldi	r24, 0x09	; 9
    2d04:	94 e0       	ldi	r25, 0x04	; 4
    2d06:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xTaskCreate>
    2d0a:	20 91 fe 18 	lds	r18, 0x18FE	; 0x8018fe <xQueue>
    2d0e:	30 91 ff 18 	lds	r19, 0x18FF	; 0x8018ff <xQueue+0x1>
    2d12:	40 ec       	ldi	r20, 0xC0	; 192
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	67 ee       	ldi	r22, 0xE7	; 231
    2d18:	73 e0       	ldi	r23, 0x03	; 3
    2d1a:	8a ed       	ldi	r24, 0xDA	; 218
    2d1c:	93 e0       	ldi	r25, 0x03	; 3
    2d1e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xTaskCreate>
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	08 95       	ret

00002d2a <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	
	rcServoCreate();
    2d2a:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <rcServoCreate>
	
	mh_z19_create(ser_USART3, &my_co2_call_back);
    2d2e:	60 ed       	ldi	r22, 0xD0	; 208
    2d30:	73 e0       	ldi	r23, 0x03	; 3
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <mh_z19_create>
	
	if ( HIH8120_OK != hih8120Create() )
    2d38:	d9 d0       	rcall	.+434    	; 0x2eec <hih8120Create>
    2d3a:	88 23       	and	r24, r24
    2d3c:	29 f0       	breq	.+10     	; 0x2d48 <initialiseSystem+0x1e>
	{
		puts("driver not created OK");
    2d3e:	87 ef       	ldi	r24, 0xF7	; 247
    2d40:	93 e0       	ldi	r25, 0x03	; 3
    2d42:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <puts>
		return 1;
    2d46:	08 95       	ret
	}
	
	
	
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2d48:	81 b1       	in	r24, 0x01	; 1
    2d4a:	81 68       	ori	r24, 0x81	; 129
    2d4c:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    2d4e:	0e 94 35 04 	call	0x86a	; 0x86a <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0 );
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <stdioCreate>
	// Let's create some tasks
	create_tasks_and_semaphores();

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    2d58:	90 df       	rcall	.-224    	; 0x2c7a <create_tasks_and_semaphores>
    2d5a:	85 e0       	ldi	r24, 0x05	; 5
    2d5c:	68 d0       	rcall	.+208    	; 0x2e2e <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	02 d4       	rcall	.+2052   	; 0x356a <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3, xQueue);
    2d66:	60 91 fe 18 	lds	r22, 0x18FE	; 0x8018fe <xQueue>
    2d6a:	70 91 ff 18 	lds	r23, 0x18FF	; 0x8018ff <xQueue+0x1>
    2d6e:	83 e0       	ldi	r24, 0x03	; 3
    2d70:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <lora_handler_create>
    2d74:	08 95       	ret

00002d76 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2d76:	d9 df       	rcall	.-78     	; 0x2d2a <initialiseSystem>
	
	printf("Program Started!!\n");
    2d78:	8d e0       	ldi	r24, 0x0D	; 13
    2d7a:	94 e0       	ldi	r25, 0x04	; 4
    2d7c:	0e 94 3c 28 	call	0x5078	; 0x5078 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2d80:	59 d8       	rcall	.-3918   	; 0x1e34 <vTaskStartScheduler>
    2d82:	ff cf       	rjmp	.-2      	; 0x2d82 <main+0xc>

00002d84 <__fixunssfsi>:
    2d84:	33 d0       	rcall	.+102    	; 0x2dec <__fp_splitA>
    2d86:	88 f0       	brcs	.+34     	; 0x2daa <__fixunssfsi+0x26>
    2d88:	9f 57       	subi	r25, 0x7F	; 127
    2d8a:	90 f0       	brcs	.+36     	; 0x2db0 <__fixunssfsi+0x2c>
    2d8c:	b9 2f       	mov	r27, r25
    2d8e:	99 27       	eor	r25, r25
    2d90:	b7 51       	subi	r27, 0x17	; 23
    2d92:	a0 f0       	brcs	.+40     	; 0x2dbc <__fixunssfsi+0x38>
    2d94:	d1 f0       	breq	.+52     	; 0x2dca <__fixunssfsi+0x46>
    2d96:	66 0f       	add	r22, r22
    2d98:	77 1f       	adc	r23, r23
    2d9a:	88 1f       	adc	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	1a f0       	brmi	.+6      	; 0x2da6 <__fixunssfsi+0x22>
    2da0:	ba 95       	dec	r27
    2da2:	c9 f7       	brne	.-14     	; 0x2d96 <__fixunssfsi+0x12>
    2da4:	12 c0       	rjmp	.+36     	; 0x2dca <__fixunssfsi+0x46>
    2da6:	b1 30       	cpi	r27, 0x01	; 1
    2da8:	81 f0       	breq	.+32     	; 0x2dca <__fixunssfsi+0x46>
    2daa:	3a d0       	rcall	.+116    	; 0x2e20 <__fp_zero>
    2dac:	b1 e0       	ldi	r27, 0x01	; 1
    2dae:	08 95       	ret
    2db0:	37 c0       	rjmp	.+110    	; 0x2e20 <__fp_zero>
    2db2:	67 2f       	mov	r22, r23
    2db4:	78 2f       	mov	r23, r24
    2db6:	88 27       	eor	r24, r24
    2db8:	b8 5f       	subi	r27, 0xF8	; 248
    2dba:	39 f0       	breq	.+14     	; 0x2dca <__fixunssfsi+0x46>
    2dbc:	b9 3f       	cpi	r27, 0xF9	; 249
    2dbe:	cc f3       	brlt	.-14     	; 0x2db2 <__fixunssfsi+0x2e>
    2dc0:	86 95       	lsr	r24
    2dc2:	77 95       	ror	r23
    2dc4:	67 95       	ror	r22
    2dc6:	b3 95       	inc	r27
    2dc8:	d9 f7       	brne	.-10     	; 0x2dc0 <__fixunssfsi+0x3c>
    2dca:	3e f4       	brtc	.+14     	; 0x2dda <__fixunssfsi+0x56>
    2dcc:	90 95       	com	r25
    2dce:	80 95       	com	r24
    2dd0:	70 95       	com	r23
    2dd2:	61 95       	neg	r22
    2dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	08 95       	ret

00002ddc <__fp_split3>:
    2ddc:	57 fd       	sbrc	r21, 7
    2dde:	90 58       	subi	r25, 0x80	; 128
    2de0:	44 0f       	add	r20, r20
    2de2:	55 1f       	adc	r21, r21
    2de4:	59 f0       	breq	.+22     	; 0x2dfc <__fp_splitA+0x10>
    2de6:	5f 3f       	cpi	r21, 0xFF	; 255
    2de8:	71 f0       	breq	.+28     	; 0x2e06 <__fp_splitA+0x1a>
    2dea:	47 95       	ror	r20

00002dec <__fp_splitA>:
    2dec:	88 0f       	add	r24, r24
    2dee:	97 fb       	bst	r25, 7
    2df0:	99 1f       	adc	r25, r25
    2df2:	61 f0       	breq	.+24     	; 0x2e0c <__fp_splitA+0x20>
    2df4:	9f 3f       	cpi	r25, 0xFF	; 255
    2df6:	79 f0       	breq	.+30     	; 0x2e16 <__fp_splitA+0x2a>
    2df8:	87 95       	ror	r24
    2dfa:	08 95       	ret
    2dfc:	12 16       	cp	r1, r18
    2dfe:	13 06       	cpc	r1, r19
    2e00:	14 06       	cpc	r1, r20
    2e02:	55 1f       	adc	r21, r21
    2e04:	f2 cf       	rjmp	.-28     	; 0x2dea <__fp_split3+0xe>
    2e06:	46 95       	lsr	r20
    2e08:	f1 df       	rcall	.-30     	; 0x2dec <__fp_splitA>
    2e0a:	08 c0       	rjmp	.+16     	; 0x2e1c <__fp_splitA+0x30>
    2e0c:	16 16       	cp	r1, r22
    2e0e:	17 06       	cpc	r1, r23
    2e10:	18 06       	cpc	r1, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	f1 cf       	rjmp	.-30     	; 0x2df8 <__fp_splitA+0xc>
    2e16:	86 95       	lsr	r24
    2e18:	71 05       	cpc	r23, r1
    2e1a:	61 05       	cpc	r22, r1
    2e1c:	08 94       	sec
    2e1e:	08 95       	ret

00002e20 <__fp_zero>:
    2e20:	e8 94       	clt

00002e22 <__fp_szero>:
    2e22:	bb 27       	eor	r27, r27
    2e24:	66 27       	eor	r22, r22
    2e26:	77 27       	eor	r23, r23
    2e28:	cb 01       	movw	r24, r22
    2e2a:	97 f9       	bld	r25, 7
    2e2c:	08 95       	ret

00002e2e <hal_create>:
    2e2e:	e6 e2       	ldi	r30, 0x26	; 38
    2e30:	f9 e1       	ldi	r31, 0x19	; 25
    2e32:	2a e0       	ldi	r18, 0x0A	; 10
    2e34:	3e e1       	ldi	r19, 0x1E	; 30
    2e36:	31 83       	std	Z+1, r19	; 0x01
    2e38:	20 83       	st	Z, r18
    2e3a:	2d e0       	ldi	r18, 0x0D	; 13
    2e3c:	3e e1       	ldi	r19, 0x1E	; 30
    2e3e:	33 83       	std	Z+3, r19	; 0x03
    2e40:	22 83       	std	Z+2, r18	; 0x02
    2e42:	28 e1       	ldi	r18, 0x18	; 24
    2e44:	3e e1       	ldi	r19, 0x1E	; 30
    2e46:	35 83       	std	Z+5, r19	; 0x05
    2e48:	24 83       	std	Z+4, r18	; 0x04
    2e4a:	2c e1       	ldi	r18, 0x1C	; 28
    2e4c:	3e e1       	ldi	r19, 0x1E	; 30
    2e4e:	37 83       	std	Z+7, r19	; 0x07
    2e50:	26 83       	std	Z+6, r18	; 0x06
    2e52:	22 e2       	ldi	r18, 0x22	; 34
    2e54:	3e e1       	ldi	r19, 0x1E	; 30
    2e56:	31 87       	std	Z+9, r19	; 0x09
    2e58:	20 87       	std	Z+8, r18	; 0x08
    2e5a:	2e e2       	ldi	r18, 0x2E	; 46
    2e5c:	3e e1       	ldi	r19, 0x1E	; 30
    2e5e:	33 87       	std	Z+11, r19	; 0x0b
    2e60:	22 87       	std	Z+10, r18	; 0x0a
    2e62:	23 e3       	ldi	r18, 0x33	; 51
    2e64:	3e e1       	ldi	r19, 0x1E	; 30
    2e66:	35 87       	std	Z+13, r19	; 0x0d
    2e68:	24 87       	std	Z+12, r18	; 0x0c
    2e6a:	2f e3       	ldi	r18, 0x3F	; 63
    2e6c:	3e e1       	ldi	r19, 0x1E	; 30
    2e6e:	37 87       	std	Z+15, r19	; 0x0f
    2e70:	26 87       	std	Z+14, r18	; 0x0e
    2e72:	2f e1       	ldi	r18, 0x1F	; 31
    2e74:	3e e1       	ldi	r19, 0x1E	; 30
    2e76:	31 8b       	std	Z+17, r19	; 0x11
    2e78:	20 8b       	std	Z+16, r18	; 0x10
    2e7a:	24 e4       	ldi	r18, 0x44	; 68
    2e7c:	3e e1       	ldi	r19, 0x1E	; 30
    2e7e:	33 8b       	std	Z+19, r19	; 0x13
    2e80:	22 8b       	std	Z+18, r18	; 0x12
    2e82:	21 e5       	ldi	r18, 0x51	; 81
    2e84:	3e e1       	ldi	r19, 0x1E	; 30
    2e86:	35 8b       	std	Z+21, r19	; 0x15
    2e88:	24 8b       	std	Z+20, r18	; 0x14
    2e8a:	68 2f       	mov	r22, r24
    2e8c:	cf 01       	movw	r24, r30
    2e8e:	39 c1       	rjmp	.+626    	; 0x3102 <led_create>
    2e90:	08 95       	ret

00002e92 <_hihTwiCallback>:
    2e92:	65 30       	cpi	r22, 0x05	; 5
    2e94:	f1 f4       	brne	.+60     	; 0x2ed2 <_hihTwiCallback+0x40>
    2e96:	fa 01       	movw	r30, r20
    2e98:	80 81       	ld	r24, Z
    2e9a:	8f 73       	andi	r24, 0x3F	; 63
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	98 2f       	mov	r25, r24
    2ea0:	88 27       	eor	r24, r24
    2ea2:	21 81       	ldd	r18, Z+1	; 0x01
    2ea4:	82 2b       	or	r24, r18
    2ea6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2eaa:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	f0 e4       	ldi	r31, 0x40	; 64
    2eb2:	8f 9f       	mul	r24, r31
    2eb4:	c0 01       	movw	r24, r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	fa 01       	movw	r30, r20
    2eba:	23 81       	ldd	r18, Z+3	; 0x03
    2ebc:	26 95       	lsr	r18
    2ebe:	26 95       	lsr	r18
    2ec0:	82 2b       	or	r24, r18
    2ec2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2ec6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 a2 17 	sts	0x17A2, r24	; 0x8017a2 <_measuringIsReady>
    2ed0:	08 95       	ret
    2ed2:	64 30       	cpi	r22, 0x04	; 4
    2ed4:	51 f0       	breq	.+20     	; 0x2eea <_hihTwiCallback+0x58>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e4       	ldi	r25, 0x40	; 64
    2eda:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2ede:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2ee2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2ee6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2eea:	08 95       	ret

00002eec <hih8120Create>:
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	09 e4       	ldi	r16, 0x49	; 73
    2ef2:	17 e1       	ldi	r17, 0x17	; 23
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	34 e2       	ldi	r19, 0x24	; 36
    2ef8:	44 ef       	ldi	r20, 0xF4	; 244
    2efa:	50 e0       	ldi	r21, 0x00	; 0
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	87 e2       	ldi	r24, 0x27	; 39
    2f00:	0e 94 1b 23 	call	0x4636	; 0x4636 <twiCreate>
    2f04:	90 93 a4 17 	sts	0x17A4, r25	; 0x8017a4 <_hih8120Handler+0x1>
    2f08:	80 93 a3 17 	sts	0x17A3, r24	; 0x8017a3 <_hih8120Handler>
    2f0c:	21 e0       	ldi	r18, 0x01	; 1
    2f0e:	89 2b       	or	r24, r25
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <hih8120Create+0x28>
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	82 2f       	mov	r24, r18
    2f16:	1f 91       	pop	r17
    2f18:	0f 91       	pop	r16
    2f1a:	08 95       	ret

00002f1c <hih8120Wakeup>:
    2f1c:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <_hih8120Handler>
    2f20:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <_hih8120Handler+0x1>
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	59 f0       	breq	.+22     	; 0x2f3e <hih8120Wakeup+0x22>
    2f28:	40 e0       	ldi	r20, 0x00	; 0
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	70 e0       	ldi	r23, 0x00	; 0
    2f2e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <twiTransmit>
    2f32:	84 30       	cpi	r24, 0x04	; 4
    2f34:	31 f4       	brne	.+12     	; 0x2f42 <hih8120Wakeup+0x26>
    2f36:	10 92 a2 17 	sts	0x17A2, r1	; 0x8017a2 <_measuringIsReady>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	08 95       	ret
    2f3e:	82 e0       	ldi	r24, 0x02	; 2
    2f40:	08 95       	ret
    2f42:	83 e0       	ldi	r24, 0x03	; 3
    2f44:	08 95       	ret

00002f46 <hih8120Meassure>:
    2f46:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <_hih8120Handler>
    2f4a:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <_hih8120Handler+0x1>
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	39 f0       	breq	.+14     	; 0x2f60 <hih8120Meassure+0x1a>
    2f52:	64 e0       	ldi	r22, 0x04	; 4
    2f54:	0e 94 b8 23 	call	0x4770	; 0x4770 <twiReceive>
    2f58:	85 30       	cpi	r24, 0x05	; 5
    2f5a:	21 f0       	breq	.+8      	; 0x2f64 <hih8120Meassure+0x1e>
    2f5c:	83 e0       	ldi	r24, 0x03	; 3
    2f5e:	08 95       	ret
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	08 95       	ret
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	08 95       	ret

00002f68 <hih8120GetHumidity>:
    2f68:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2f6c:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__floatunsisf>
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	48 ec       	ldi	r20, 0xC8	; 200
    2f7e:	52 e4       	ldi	r21, 0x42	; 66
    2f80:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__mulsf3>
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	38 ef       	ldi	r19, 0xF8	; 248
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	56 e4       	ldi	r21, 0x46	; 70
    2f8c:	0c 94 2b 25 	jmp	0x4a56	; 0x4a56 <__divsf3>
    2f90:	08 95       	ret

00002f92 <hih8120GetTemperature>:
    2f92:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    2f96:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__floatunsisf>
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	45 e2       	ldi	r20, 0x25	; 37
    2fa8:	53 e4       	ldi	r21, 0x43	; 67
    2faa:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__mulsf3>
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	38 ef       	ldi	r19, 0xF8	; 248
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	56 e4       	ldi	r21, 0x46	; 70
    2fb6:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <__divsf3>
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	52 e4       	ldi	r21, 0x42	; 66
    2fc2:	0c 94 c4 24 	jmp	0x4988	; 0x4988 <__subsf3>
    2fc6:	08 95       	ret

00002fc8 <_turn_off>:
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	fc 01       	movw	r30, r24
    2fd0:	ee 0f       	add	r30, r30
    2fd2:	ff 1f       	adc	r31, r31
    2fd4:	e8 0f       	add	r30, r24
    2fd6:	f9 1f       	adc	r31, r25
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	eb 55       	subi	r30, 0x5B	; 91
    2fde:	f8 4e       	sbci	r31, 0xE8	; 232
    2fe0:	23 81       	ldd	r18, Z+3	; 0x03
    2fe2:	21 11       	cpse	r18, r1
    2fe4:	0a c0       	rjmp	.+20     	; 0x2ffa <_turn_off+0x32>
    2fe6:	ef 01       	movw	r28, r30
    2fe8:	e0 91 2e 19 	lds	r30, 0x192E	; 0x80192e <register_access+0x8>
    2fec:	f0 91 2f 19 	lds	r31, 0x192F	; 0x80192f <register_access+0x9>
    2ff0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ff2:	88 81       	ld	r24, Y
    2ff4:	99 81       	ldd	r25, Y+1	; 0x01
    2ff6:	19 95       	eicall
    2ff8:	12 c0       	rjmp	.+36     	; 0x301e <_turn_off+0x56>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	aa 0f       	add	r26, r26
    2ffe:	bb 1f       	adc	r27, r27
    3000:	ed 01       	movw	r28, r26
    3002:	c8 0f       	add	r28, r24
    3004:	d9 1f       	adc	r29, r25
    3006:	cc 0f       	add	r28, r28
    3008:	dd 1f       	adc	r29, r29
    300a:	cb 55       	subi	r28, 0x5B	; 91
    300c:	d8 4e       	sbci	r29, 0xE8	; 232
    300e:	e0 91 38 19 	lds	r30, 0x1938	; 0x801938 <register_access+0x12>
    3012:	f0 91 39 19 	lds	r31, 0x1939	; 0x801939 <register_access+0x13>
    3016:	6a 81       	ldd	r22, Y+2	; 0x02
    3018:	88 81       	ld	r24, Y
    301a:	99 81       	ldd	r25, Y+1	; 0x01
    301c:	19 95       	eicall
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	08 95       	ret

00003024 <_turn_on>:
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	fc 01       	movw	r30, r24
    302c:	ee 0f       	add	r30, r30
    302e:	ff 1f       	adc	r31, r31
    3030:	e8 0f       	add	r30, r24
    3032:	f9 1f       	adc	r31, r25
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	eb 55       	subi	r30, 0x5B	; 91
    303a:	f8 4e       	sbci	r31, 0xE8	; 232
    303c:	23 81       	ldd	r18, Z+3	; 0x03
    303e:	21 11       	cpse	r18, r1
    3040:	0a c0       	rjmp	.+20     	; 0x3056 <_turn_on+0x32>
    3042:	ef 01       	movw	r28, r30
    3044:	e0 91 38 19 	lds	r30, 0x1938	; 0x801938 <register_access+0x12>
    3048:	f0 91 39 19 	lds	r31, 0x1939	; 0x801939 <register_access+0x13>
    304c:	6a 81       	ldd	r22, Y+2	; 0x02
    304e:	88 81       	ld	r24, Y
    3050:	99 81       	ldd	r25, Y+1	; 0x01
    3052:	19 95       	eicall
    3054:	12 c0       	rjmp	.+36     	; 0x307a <_turn_on+0x56>
    3056:	dc 01       	movw	r26, r24
    3058:	aa 0f       	add	r26, r26
    305a:	bb 1f       	adc	r27, r27
    305c:	ed 01       	movw	r28, r26
    305e:	c8 0f       	add	r28, r24
    3060:	d9 1f       	adc	r29, r25
    3062:	cc 0f       	add	r28, r28
    3064:	dd 1f       	adc	r29, r29
    3066:	cb 55       	subi	r28, 0x5B	; 91
    3068:	d8 4e       	sbci	r29, 0xE8	; 232
    306a:	e0 91 2e 19 	lds	r30, 0x192E	; 0x80192e <register_access+0x8>
    306e:	f0 91 2f 19 	lds	r31, 0x192F	; 0x80192f <register_access+0x9>
    3072:	6a 81       	ldd	r22, Y+2	; 0x02
    3074:	88 81       	ld	r24, Y
    3076:	99 81       	ldd	r25, Y+1	; 0x01
    3078:	19 95       	eicall
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	08 95       	ret

00003080 <_hal_led_task>:
    3080:	0f 2e       	mov	r0, r31
    3082:	f6 e2       	ldi	r31, 0x26	; 38
    3084:	cf 2e       	mov	r12, r31
    3086:	f9 e1       	ldi	r31, 0x19	; 25
    3088:	df 2e       	mov	r13, r31
    308a:	f0 2d       	mov	r31, r0
    308c:	04 e0       	ldi	r16, 0x04	; 4
    308e:	c5 ea       	ldi	r28, 0xA5	; 165
    3090:	d7 e1       	ldi	r29, 0x17	; 23
    3092:	10 e0       	ldi	r17, 0x00	; 0
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	81 30       	cpi	r24, 0x01	; 1
    3098:	69 f0       	breq	.+26     	; 0x30b4 <_hal_led_task+0x34>
    309a:	e8 f0       	brcs	.+58     	; 0x30d6 <_hal_led_task+0x56>
    309c:	82 30       	cpi	r24, 0x02	; 2
    309e:	39 f5       	brne	.+78     	; 0x30ee <_hal_led_task+0x6e>
    30a0:	d6 01       	movw	r26, r12
    30a2:	1c 96       	adiw	r26, 0x0c	; 12
    30a4:	ed 91       	ld	r30, X+
    30a6:	fc 91       	ld	r31, X
    30a8:	1d 97       	sbiw	r26, 0x0d	; 13
    30aa:	6a 81       	ldd	r22, Y+2	; 0x02
    30ac:	88 81       	ld	r24, Y
    30ae:	99 81       	ldd	r25, Y+1	; 0x01
    30b0:	19 95       	eicall
    30b2:	1d c0       	rjmp	.+58     	; 0x30ee <_hal_led_task+0x6e>
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	8f 5f       	subi	r24, 0xFF	; 255
    30b8:	8a 30       	cpi	r24, 0x0A	; 10
    30ba:	10 f4       	brcc	.+4      	; 0x30c0 <_hal_led_task+0x40>
    30bc:	8d 83       	std	Y+5, r24	; 0x05
    30be:	17 c0       	rjmp	.+46     	; 0x30ee <_hal_led_task+0x6e>
    30c0:	1d 82       	std	Y+5, r1	; 0x05
    30c2:	d6 01       	movw	r26, r12
    30c4:	1c 96       	adiw	r26, 0x0c	; 12
    30c6:	ed 91       	ld	r30, X+
    30c8:	fc 91       	ld	r31, X
    30ca:	1d 97       	sbiw	r26, 0x0d	; 13
    30cc:	6a 81       	ldd	r22, Y+2	; 0x02
    30ce:	88 81       	ld	r24, Y
    30d0:	99 81       	ldd	r25, Y+1	; 0x01
    30d2:	19 95       	eicall
    30d4:	0c c0       	rjmp	.+24     	; 0x30ee <_hal_led_task+0x6e>
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	88 23       	and	r24, r24
    30da:	31 f0       	breq	.+12     	; 0x30e8 <_hal_led_task+0x68>
    30dc:	81 2f       	mov	r24, r17
    30de:	a2 df       	rcall	.-188    	; 0x3024 <_turn_on>
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	81 50       	subi	r24, 0x01	; 1
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	03 c0       	rjmp	.+6      	; 0x30ee <_hal_led_task+0x6e>
    30e8:	0c 83       	std	Y+4, r16	; 0x04
    30ea:	81 2f       	mov	r24, r17
    30ec:	6d df       	rcall	.-294    	; 0x2fc8 <_turn_off>
    30ee:	1f 5f       	subi	r17, 0xFF	; 255
    30f0:	26 96       	adiw	r28, 0x06	; 6
    30f2:	14 30       	cpi	r17, 0x04	; 4
    30f4:	79 f6       	brne	.-98     	; 0x3094 <_hal_led_task+0x14>
    30f6:	65 e0       	ldi	r22, 0x05	; 5
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	99 d8       	rcall	.-3790   	; 0x2232 <vTaskDelay>
    3100:	c6 cf       	rjmp	.-116    	; 0x308e <_hal_led_task+0xe>

00003102 <led_create>:
    3102:	cf 92       	push	r12
    3104:	df 92       	push	r13
    3106:	ef 92       	push	r14
    3108:	ff 92       	push	r15
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	06 2f       	mov	r16, r22
    3114:	0f 2e       	mov	r0, r31
    3116:	f6 e2       	ldi	r31, 0x26	; 38
    3118:	ef 2e       	mov	r14, r31
    311a:	f9 e1       	ldi	r31, 0x19	; 25
    311c:	ff 2e       	mov	r15, r31
    311e:	f0 2d       	mov	r31, r0
    3120:	d7 01       	movw	r26, r14
    3122:	18 96       	adiw	r26, 0x08	; 8
    3124:	ed 91       	ld	r30, X+
    3126:	fc 91       	ld	r31, X
    3128:	19 97       	sbiw	r26, 0x09	; 9
    312a:	66 e0       	ldi	r22, 0x06	; 6
    312c:	87 e2       	ldi	r24, 0x27	; 39
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	19 95       	eicall
    3132:	c5 ea       	ldi	r28, 0xA5	; 165
    3134:	d7 e1       	ldi	r29, 0x17	; 23
    3136:	0f 2e       	mov	r0, r31
    3138:	f8 e2       	ldi	r31, 0x28	; 40
    313a:	cf 2e       	mov	r12, r31
    313c:	d1 2c       	mov	r13, r1
    313e:	f0 2d       	mov	r31, r0
    3140:	d9 82       	std	Y+1, r13	; 0x01
    3142:	c8 82       	st	Y, r12
    3144:	86 e0       	ldi	r24, 0x06	; 6
    3146:	8a 83       	std	Y+2, r24	; 0x02
    3148:	1b 82       	std	Y+3, r1	; 0x03
    314a:	14 e0       	ldi	r17, 0x04	; 4
    314c:	1c 83       	std	Y+4, r17	; 0x04
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	3b df       	rcall	.-394    	; 0x2fc8 <_turn_off>
    3152:	d7 01       	movw	r26, r14
    3154:	18 96       	adiw	r26, 0x08	; 8
    3156:	ed 91       	ld	r30, X+
    3158:	fc 91       	ld	r31, X
    315a:	19 97       	sbiw	r26, 0x09	; 9
    315c:	67 e0       	ldi	r22, 0x07	; 7
    315e:	87 e2       	ldi	r24, 0x27	; 39
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	19 95       	eicall
    3164:	df 82       	std	Y+7, r13	; 0x07
    3166:	ce 82       	std	Y+6, r12	; 0x06
    3168:	87 e0       	ldi	r24, 0x07	; 7
    316a:	88 87       	std	Y+8, r24	; 0x08
    316c:	19 86       	std	Y+9, r1	; 0x09
    316e:	1a 87       	std	Y+10, r17	; 0x0a
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	2a df       	rcall	.-428    	; 0x2fc8 <_turn_off>
    3174:	d7 01       	movw	r26, r14
    3176:	18 96       	adiw	r26, 0x08	; 8
    3178:	ed 91       	ld	r30, X+
    317a:	fc 91       	ld	r31, X
    317c:	19 97       	sbiw	r26, 0x09	; 9
    317e:	65 e0       	ldi	r22, 0x05	; 5
    3180:	83 e3       	ldi	r24, 0x33	; 51
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	19 95       	eicall
    3186:	d7 01       	movw	r26, r14
    3188:	18 96       	adiw	r26, 0x08	; 8
    318a:	ed 91       	ld	r30, X+
    318c:	fc 91       	ld	r31, X
    318e:	19 97       	sbiw	r26, 0x09	; 9
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	84 e3       	ldi	r24, 0x34	; 52
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	19 95       	eicall
    3198:	84 e3       	ldi	r24, 0x34	; 52
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9d 87       	std	Y+13, r25	; 0x0d
    319e:	8c 87       	std	Y+12, r24	; 0x0c
    31a0:	85 e0       	ldi	r24, 0x05	; 5
    31a2:	8e 87       	std	Y+14, r24	; 0x0e
    31a4:	1f 86       	std	Y+15, r1	; 0x0f
    31a6:	18 8b       	std	Y+16, r17	; 0x10
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	0e df       	rcall	.-484    	; 0x2fc8 <_turn_off>
    31ac:	d7 01       	movw	r26, r14
    31ae:	18 96       	adiw	r26, 0x08	; 8
    31b0:	ed 91       	ld	r30, X+
    31b2:	fc 91       	ld	r31, X
    31b4:	19 97       	sbiw	r26, 0x09	; 9
    31b6:	64 e0       	ldi	r22, 0x04	; 4
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	19 95       	eicall
    31be:	d7 01       	movw	r26, r14
    31c0:	18 96       	adiw	r26, 0x08	; 8
    31c2:	ed 91       	ld	r30, X+
    31c4:	fc 91       	ld	r31, X
    31c6:	19 97       	sbiw	r26, 0x09	; 9
    31c8:	61 e0       	ldi	r22, 0x01	; 1
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	91 e0       	ldi	r25, 0x01	; 1
    31ce:	19 95       	eicall
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	91 e0       	ldi	r25, 0x01	; 1
    31d4:	9b 8b       	std	Y+19, r25	; 0x13
    31d6:	8a 8b       	std	Y+18, r24	; 0x12
    31d8:	1c 8b       	std	Y+20, r17	; 0x14
    31da:	1d 8a       	std	Y+21, r1	; 0x15
    31dc:	1e 8b       	std	Y+22, r17	; 0x16
    31de:	83 e0       	ldi	r24, 0x03	; 3
    31e0:	f3 de       	rcall	.-538    	; 0x2fc8 <_turn_off>
    31e2:	e1 2c       	mov	r14, r1
    31e4:	f1 2c       	mov	r15, r1
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 ec       	ldi	r20, 0xC0	; 192
    31ec:	50 e0       	ldi	r21, 0x00	; 0
    31ee:	6f e1       	ldi	r22, 0x1F	; 31
    31f0:	74 e0       	ldi	r23, 0x04	; 4
    31f2:	80 e4       	ldi	r24, 0x40	; 64
    31f4:	98 e1       	ldi	r25, 0x18	; 24
    31f6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xTaskCreate>
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	1f 91       	pop	r17
    3200:	0f 91       	pop	r16
    3202:	ff 90       	pop	r15
    3204:	ef 90       	pop	r14
    3206:	df 90       	pop	r13
    3208:	cf 90       	pop	r12
    320a:	08 95       	ret

0000320c <led_slow_blink>:
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	c8 2f       	mov	r28, r24
    3216:	d0 e0       	ldi	r29, 0x00	; 0
    3218:	8e 01       	movw	r16, r28
    321a:	00 0f       	add	r16, r16
    321c:	11 1f       	adc	r17, r17
    321e:	d8 01       	movw	r26, r16
    3220:	ac 0f       	add	r26, r28
    3222:	bd 1f       	adc	r27, r29
    3224:	aa 0f       	add	r26, r26
    3226:	bb 1f       	adc	r27, r27
    3228:	ab 55       	subi	r26, 0x5B	; 91
    322a:	b8 4e       	sbci	r27, 0xE8	; 232
    322c:	e0 91 32 19 	lds	r30, 0x1932	; 0x801932 <register_access+0xc>
    3230:	f0 91 33 19 	lds	r31, 0x1933	; 0x801933 <register_access+0xd>
    3234:	12 96       	adiw	r26, 0x02	; 2
    3236:	6c 91       	ld	r22, X
    3238:	12 97       	sbiw	r26, 0x02	; 2
    323a:	8d 91       	ld	r24, X+
    323c:	9c 91       	ld	r25, X
    323e:	19 95       	eicall
    3240:	c0 0f       	add	r28, r16
    3242:	d1 1f       	adc	r29, r17
    3244:	cc 0f       	add	r28, r28
    3246:	dd 1f       	adc	r29, r29
    3248:	cb 55       	subi	r28, 0x5B	; 91
    324a:	d8 4e       	sbci	r29, 0xE8	; 232
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	8c 83       	std	Y+4, r24	; 0x04
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	0f 91       	pop	r16
    3258:	08 95       	ret

0000325a <led_fast_blink>:
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	cf 93       	push	r28
    3260:	df 93       	push	r29
    3262:	c8 2f       	mov	r28, r24
    3264:	d0 e0       	ldi	r29, 0x00	; 0
    3266:	8e 01       	movw	r16, r28
    3268:	00 0f       	add	r16, r16
    326a:	11 1f       	adc	r17, r17
    326c:	d8 01       	movw	r26, r16
    326e:	ac 0f       	add	r26, r28
    3270:	bd 1f       	adc	r27, r29
    3272:	aa 0f       	add	r26, r26
    3274:	bb 1f       	adc	r27, r27
    3276:	ab 55       	subi	r26, 0x5B	; 91
    3278:	b8 4e       	sbci	r27, 0xE8	; 232
    327a:	e0 91 32 19 	lds	r30, 0x1932	; 0x801932 <register_access+0xc>
    327e:	f0 91 33 19 	lds	r31, 0x1933	; 0x801933 <register_access+0xd>
    3282:	12 96       	adiw	r26, 0x02	; 2
    3284:	6c 91       	ld	r22, X
    3286:	12 97       	sbiw	r26, 0x02	; 2
    3288:	8d 91       	ld	r24, X+
    328a:	9c 91       	ld	r25, X
    328c:	19 95       	eicall
    328e:	c0 0f       	add	r28, r16
    3290:	d1 1f       	adc	r29, r17
    3292:	cc 0f       	add	r28, r28
    3294:	dd 1f       	adc	r29, r29
    3296:	cb 55       	subi	r28, 0x5B	; 91
    3298:	d8 4e       	sbci	r29, 0xE8	; 232
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	8c 83       	std	Y+4, r24	; 0x04
    329e:	df 91       	pop	r29
    32a0:	cf 91       	pop	r28
    32a2:	1f 91       	pop	r17
    32a4:	0f 91       	pop	r16
    32a6:	08 95       	ret

000032a8 <led_led_on>:
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	f9 01       	movw	r30, r18
    32ae:	ee 0f       	add	r30, r30
    32b0:	ff 1f       	adc	r31, r31
    32b2:	e2 0f       	add	r30, r18
    32b4:	f3 1f       	adc	r31, r19
    32b6:	ee 0f       	add	r30, r30
    32b8:	ff 1f       	adc	r31, r31
    32ba:	eb 55       	subi	r30, 0x5B	; 91
    32bc:	f8 4e       	sbci	r31, 0xE8	; 232
    32be:	93 e0       	ldi	r25, 0x03	; 3
    32c0:	94 83       	std	Z+4, r25	; 0x04
    32c2:	b0 ce       	rjmp	.-672    	; 0x3024 <_turn_on>
    32c4:	08 95       	ret

000032c6 <led_led_off>:
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	f9 01       	movw	r30, r18
    32cc:	ee 0f       	add	r30, r30
    32ce:	ff 1f       	adc	r31, r31
    32d0:	e2 0f       	add	r30, r18
    32d2:	f3 1f       	adc	r31, r19
    32d4:	ee 0f       	add	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	eb 55       	subi	r30, 0x5B	; 91
    32da:	f8 4e       	sbci	r31, 0xE8	; 232
    32dc:	94 e0       	ldi	r25, 0x04	; 4
    32de:	94 83       	std	Z+4, r25	; 0x04
    32e0:	73 ce       	rjmp	.-794    	; 0x2fc8 <_turn_off>
    32e2:	08 95       	ret

000032e4 <led_long_puls>:
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	fc 01       	movw	r30, r24
    32e8:	ee 0f       	add	r30, r30
    32ea:	ff 1f       	adc	r31, r31
    32ec:	df 01       	movw	r26, r30
    32ee:	a8 0f       	add	r26, r24
    32f0:	b9 1f       	adc	r27, r25
    32f2:	aa 0f       	add	r26, r26
    32f4:	bb 1f       	adc	r27, r27
    32f6:	ab 55       	subi	r26, 0x5B	; 91
    32f8:	b8 4e       	sbci	r27, 0xE8	; 232
    32fa:	24 e0       	ldi	r18, 0x04	; 4
    32fc:	15 96       	adiw	r26, 0x05	; 5
    32fe:	2c 93       	st	X, r18
    3300:	15 97       	sbiw	r26, 0x05	; 5
    3302:	fd 01       	movw	r30, r26
    3304:	14 82       	std	Z+4, r1	; 0x04
    3306:	08 95       	ret

00003308 <led_short_puls>:
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	fc 01       	movw	r30, r24
    330c:	ee 0f       	add	r30, r30
    330e:	ff 1f       	adc	r31, r31
    3310:	df 01       	movw	r26, r30
    3312:	a8 0f       	add	r26, r24
    3314:	b9 1f       	adc	r27, r25
    3316:	aa 0f       	add	r26, r26
    3318:	bb 1f       	adc	r27, r27
    331a:	ab 55       	subi	r26, 0x5B	; 91
    331c:	b8 4e       	sbci	r27, 0xE8	; 232
    331e:	21 e0       	ldi	r18, 0x01	; 1
    3320:	15 96       	adiw	r26, 0x05	; 5
    3322:	2c 93       	st	X, r18
    3324:	15 97       	sbiw	r26, 0x05	; 5
    3326:	fd 01       	movw	r30, r26
    3328:	14 82       	std	Z+4, r1	; 0x04
    332a:	08 95       	ret

0000332c <_serial_call_back>:
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	1f 92       	push	r1
    3336:	1f 92       	push	r1
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	8c 01       	movw	r16, r24
    333e:	19 82       	std	Y+1, r1	; 0x01
    3340:	2d c0       	rjmp	.+90     	; 0x339c <_serial_call_back+0x70>
    3342:	e0 91 21 18 	lds	r30, 0x1821	; 0x801821 <rec_buf_inp.2947>
    3346:	ec 32       	cpi	r30, 0x2C	; 44
    3348:	50 f4       	brcc	.+20     	; 0x335e <_serial_call_back+0x32>
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	8e 0f       	add	r24, r30
    334e:	80 93 21 18 	sts	0x1821, r24	; 0x801821 <rec_buf_inp.2947>
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	ed 5a       	subi	r30, 0xAD	; 173
    3356:	f7 4e       	sbci	r31, 0xE7	; 231
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	80 83       	st	Z, r24
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <_serial_call_back+0x36>
    335e:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <rec_buf_inp.2947>
    3362:	8a 81       	ldd	r24, Y+2	; 0x02
    3364:	8a 30       	cpi	r24, 0x0A	; 10
    3366:	d1 f4       	brne	.+52     	; 0x339c <_serial_call_back+0x70>
    3368:	40 91 21 18 	lds	r20, 0x1821	; 0x801821 <rec_buf_inp.2947>
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	fa 01       	movw	r30, r20
    3370:	ef 5a       	subi	r30, 0xAF	; 175
    3372:	f7 4e       	sbci	r31, 0xE7	; 231
    3374:	10 82       	st	Z, r1
    3376:	41 50       	subi	r20, 0x01	; 1
    3378:	51 09       	sbc	r21, r1
    337a:	9e 01       	movw	r18, r28
    337c:	2f 5f       	subi	r18, 0xFF	; 255
    337e:	3f 4f       	sbci	r19, 0xFF	; 255
    3380:	63 e5       	ldi	r22, 0x53	; 83
    3382:	78 e1       	ldi	r23, 0x18	; 24
    3384:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_serial_reply_buffer_handle>
    3388:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_serial_reply_buffer_handle+0x1>
    338c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xStreamBufferSendFromISR>
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	81 11       	cpse	r24, r1
    3394:	0e 94 ca 06 	call	0xd94	; 0xd94 <vPortYield>
    3398:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <rec_buf_inp.2947>
    339c:	be 01       	movw	r22, r28
    339e:	6e 5f       	subi	r22, 0xFE	; 254
    33a0:	7f 4f       	sbci	r23, 0xFF	; 255
    33a2:	c8 01       	movw	r24, r16
    33a4:	7c d6       	rcall	.+3320   	; 0x409e <serial_get_byte>
    33a6:	88 23       	and	r24, r24
    33a8:	61 f2       	breq	.-104    	; 0x3342 <_serial_call_back+0x16>
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	08 95       	ret

000033b8 <_upload_message>:
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	8c 01       	movw	r16, r24
    33c2:	eb 01       	movw	r28, r22
    33c4:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_serial_reply_buffer_handle>
    33c8:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_serial_reply_buffer_handle+0x1>
    33cc:	0e 94 90 0b 	call	0x1720	; 0x1720 <xStreamBufferReset>
    33d0:	b8 01       	movw	r22, r16
    33d2:	8d eb       	ldi	r24, 0xBD	; 189
    33d4:	97 e1       	ldi	r25, 0x17	; 23
    33d6:	0e 94 0a 28 	call	0x5014	; 0x5014 <strcpy>
    33da:	20 97       	sbiw	r28, 0x00	; 0
    33dc:	79 f0       	breq	.+30     	; 0x33fc <_upload_message+0x44>
    33de:	ed eb       	ldi	r30, 0xBD	; 189
    33e0:	f7 e1       	ldi	r31, 0x17	; 23
    33e2:	01 90       	ld	r0, Z+
    33e4:	00 20       	and	r0, r0
    33e6:	e9 f7       	brne	.-6      	; 0x33e2 <_upload_message+0x2a>
    33e8:	31 97       	sbiw	r30, 0x01	; 1
    33ea:	80 e2       	ldi	r24, 0x20	; 32
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	be 01       	movw	r22, r28
    33f4:	8d eb       	ldi	r24, 0xBD	; 189
    33f6:	97 e1       	ldi	r25, 0x17	; 23
    33f8:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <strcat>
    33fc:	ed eb       	ldi	r30, 0xBD	; 189
    33fe:	f7 e1       	ldi	r31, 0x17	; 23
    3400:	df 01       	movw	r26, r30
    3402:	0d 90       	ld	r0, X+
    3404:	00 20       	and	r0, r0
    3406:	e9 f7       	brne	.-6      	; 0x3402 <_upload_message+0x4a>
    3408:	11 97       	sbiw	r26, 0x01	; 1
    340a:	8d e0       	ldi	r24, 0x0D	; 13
    340c:	9a e0       	ldi	r25, 0x0A	; 10
    340e:	11 96       	adiw	r26, 0x01	; 1
    3410:	9c 93       	st	X, r25
    3412:	8e 93       	st	-X, r24
    3414:	12 96       	adiw	r26, 0x02	; 2
    3416:	1c 92       	st	X, r1
    3418:	01 90       	ld	r0, Z+
    341a:	00 20       	and	r0, r0
    341c:	e9 f7       	brne	.-6      	; 0x3418 <_upload_message+0x60>
    341e:	31 97       	sbiw	r30, 0x01	; 1
    3420:	ed 5b       	subi	r30, 0xBD	; 189
    3422:	f7 41       	sbci	r31, 0x17	; 23
    3424:	ae 2f       	mov	r26, r30
    3426:	8d eb       	ldi	r24, 0xBD	; 189
    3428:	97 e1       	ldi	r25, 0x17	; 23
    342a:	ac 01       	movw	r20, r24
    342c:	6a 2f       	mov	r22, r26
    342e:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <_rn2483_serial>
    3432:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <_rn2483_serial+0x1>
    3436:	e3 d5       	rcall	.+3014   	; 0x3ffe <serial_send_bytes>
    3438:	81 11       	cpse	r24, r1
    343a:	11 c0       	rjmp	.+34     	; 0x345e <_upload_message+0xa6>
    343c:	08 e2       	ldi	r16, 0x28	; 40
    343e:	15 e0       	ldi	r17, 0x05	; 5
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	4d e2       	ldi	r20, 0x2D	; 45
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	6d ea       	ldi	r22, 0xAD	; 173
    344a:	78 e1       	ldi	r23, 0x18	; 24
    344c:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_serial_reply_buffer_handle>
    3450:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_serial_reply_buffer_handle+0x1>
    3454:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xStreamBufferReceive>
    3458:	8d ea       	ldi	r24, 0xAD	; 173
    345a:	98 e1       	ldi	r25, 0x18	; 24
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <_upload_message+0xaa>
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	08 95       	ret

0000346c <_reply2return_code>:
    346c:	2f 92       	push	r2
    346e:	3f 92       	push	r3
    3470:	4f 92       	push	r4
    3472:	5f 92       	push	r5
    3474:	6f 92       	push	r6
    3476:	7f 92       	push	r7
    3478:	8f 92       	push	r8
    347a:	9f 92       	push	r9
    347c:	af 92       	push	r10
    347e:	bf 92       	push	r11
    3480:	cf 92       	push	r12
    3482:	df 92       	push	r13
    3484:	ef 92       	push	r14
    3486:	ff 92       	push	r15
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	5c 01       	movw	r10, r24
    3492:	fc 01       	movw	r30, r24
    3494:	01 90       	ld	r0, Z+
    3496:	00 20       	and	r0, r0
    3498:	e9 f7       	brne	.-6      	; 0x3494 <_reply2return_code+0x28>
    349a:	31 97       	sbiw	r30, 0x01	; 1
    349c:	6f 01       	movw	r12, r30
    349e:	c8 1a       	sub	r12, r24
    34a0:	d9 0a       	sbc	r13, r25
    34a2:	5c 2c       	mov	r5, r12
    34a4:	0f 2e       	mov	r0, r31
    34a6:	f0 ec       	ldi	r31, 0xC0	; 192
    34a8:	8f 2e       	mov	r8, r31
    34aa:	f6 e0       	ldi	r31, 0x06	; 6
    34ac:	9f 2e       	mov	r9, r31
    34ae:	f0 2d       	mov	r31, r0
    34b0:	e1 2c       	mov	r14, r1
    34b2:	f1 2c       	mov	r15, r1
    34b4:	4c 2c       	mov	r4, r12
    34b6:	37 01       	movw	r6, r14
    34b8:	f4 01       	movw	r30, r8
    34ba:	01 81       	ldd	r16, Z+1	; 0x01
    34bc:	12 81       	ldd	r17, Z+2	; 0x02
    34be:	e8 01       	movw	r28, r16
    34c0:	09 90       	ld	r0, Y+
    34c2:	00 20       	and	r0, r0
    34c4:	e9 f7       	brne	.-6      	; 0x34c0 <_reply2return_code+0x54>
    34c6:	21 97       	sbiw	r28, 0x01	; 1
    34c8:	c0 1b       	sub	r28, r16
    34ca:	d1 0b       	sbc	r29, r17
    34cc:	3c 2e       	mov	r3, r28
    34ce:	f9 e0       	ldi	r31, 0x09	; 9
    34d0:	cf 16       	cp	r12, r31
    34d2:	d1 04       	cpc	r13, r1
    34d4:	58 f0       	brcs	.+22     	; 0x34ec <_reply2return_code+0x80>
    34d6:	f4 01       	movw	r30, r8
    34d8:	20 80       	ld	r2, Z
    34da:	fe e0       	ldi	r31, 0x0E	; 14
    34dc:	2f 12       	cpse	r2, r31
    34de:	06 c0       	rjmp	.+12     	; 0x34ec <_reply2return_code+0x80>
    34e0:	b8 01       	movw	r22, r16
    34e2:	c5 01       	movw	r24, r10
    34e4:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <strcasestr>
    34e8:	89 2b       	or	r24, r25
    34ea:	09 f5       	brne	.+66     	; 0x352e <_reply2return_code+0xc2>
    34ec:	44 2d       	mov	r20, r4
    34ee:	35 14       	cp	r3, r5
    34f0:	08 f4       	brcc	.+2      	; 0x34f4 <_reply2return_code+0x88>
    34f2:	4c 2f       	mov	r20, r28
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	b8 01       	movw	r22, r16
    34f8:	c5 01       	movw	r24, r10
    34fa:	0e 94 11 28 	call	0x5022	; 0x5022 <strncasecmp>
    34fe:	89 2b       	or	r24, r25
    3500:	49 f4       	brne	.+18     	; 0x3514 <_reply2return_code+0xa8>
    3502:	f3 01       	movw	r30, r6
    3504:	ee 0f       	add	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	e6 0d       	add	r30, r6
    350a:	f7 1d       	adc	r31, r7
    350c:	e0 54       	subi	r30, 0x40	; 64
    350e:	f9 4f       	sbci	r31, 0xF9	; 249
    3510:	20 80       	ld	r2, Z
    3512:	0d c0       	rjmp	.+26     	; 0x352e <_reply2return_code+0xc2>
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	e8 1a       	sub	r14, r24
    3518:	f8 0a       	sbc	r15, r24
    351a:	e3 e0       	ldi	r30, 0x03	; 3
    351c:	8e 0e       	add	r8, r30
    351e:	91 1c       	adc	r9, r1
    3520:	f1 e1       	ldi	r31, 0x11	; 17
    3522:	ef 16       	cp	r14, r31
    3524:	f1 04       	cpc	r15, r1
    3526:	39 f6       	brne	.-114    	; 0x34b6 <_reply2return_code+0x4a>
    3528:	68 94       	set
    352a:	22 24       	eor	r2, r2
    352c:	24 f8       	bld	r2, 4
    352e:	82 2d       	mov	r24, r2
    3530:	df 91       	pop	r29
    3532:	cf 91       	pop	r28
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	ff 90       	pop	r15
    353a:	ef 90       	pop	r14
    353c:	df 90       	pop	r13
    353e:	cf 90       	pop	r12
    3540:	bf 90       	pop	r11
    3542:	af 90       	pop	r10
    3544:	9f 90       	pop	r9
    3546:	8f 90       	pop	r8
    3548:	7f 90       	pop	r7
    354a:	6f 90       	pop	r6
    354c:	5f 90       	pop	r5
    354e:	4f 90       	pop	r4
    3550:	3f 90       	pop	r3
    3552:	2f 90       	pop	r2
    3554:	08 95       	ret

00003556 <_upload_message_rc>:
    3556:	30 df       	rcall	.-416    	; 0x33b8 <_upload_message>
    3558:	89 cf       	rjmp	.-238    	; 0x346c <_reply2return_code>
    355a:	08 95       	ret

0000355c <lora_driver_flush_buffers>:
    355c:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_serial_reply_buffer_handle>
    3560:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_serial_reply_buffer_handle+0x1>
    3564:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <xStreamBufferReset>
    3568:	08 95       	ret

0000356a <lora_driver_create>:
    356a:	8f 92       	push	r8
    356c:	9f 92       	push	r9
    356e:	af 92       	push	r10
    3570:	cf 92       	push	r12
    3572:	ef 92       	push	r14
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	c8 2f       	mov	r28, r24
    357c:	8b 01       	movw	r16, r22
    357e:	41 e0       	ldi	r20, 0x01	; 1
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	88 ec       	ldi	r24, 0xC8	; 200
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <xStreamBufferGenericCreate>
    358c:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <_serial_reply_buffer_handle+0x1>
    3590:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_serial_reply_buffer_handle>
    3594:	10 93 23 18 	sts	0x1823, r17	; 0x801823 <_downlinkMessageBuffer+0x1>
    3598:	00 93 22 18 	sts	0x1822, r16	; 0x801822 <_downlinkMessageBuffer>
    359c:	0f 2e       	mov	r0, r31
    359e:	f6 e9       	ldi	r31, 0x96	; 150
    35a0:	8f 2e       	mov	r8, r31
    35a2:	f9 e1       	ldi	r31, 0x19	; 25
    35a4:	9f 2e       	mov	r9, r31
    35a6:	f0 2d       	mov	r31, r0
    35a8:	68 94       	set
    35aa:	aa 24       	eor	r10, r10
    35ac:	a6 f8       	bld	r10, 6
    35ae:	68 94       	set
    35b0:	cc 24       	eor	r12, r12
    35b2:	c6 f8       	bld	r12, 6
    35b4:	e1 2c       	mov	r14, r1
    35b6:	00 e0       	ldi	r16, 0x00	; 0
    35b8:	23 e0       	ldi	r18, 0x03	; 3
    35ba:	40 e0       	ldi	r20, 0x00	; 0
    35bc:	51 ee       	ldi	r21, 0xE1	; 225
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	70 e0       	ldi	r23, 0x00	; 0
    35c2:	8c 2f       	mov	r24, r28
    35c4:	60 d4       	rcall	.+2240   	; 0x3e86 <serial_new_instance>
    35c6:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <_rn2483_serial+0x1>
    35ca:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_rn2483_serial>
    35ce:	e0 91 2e 19 	lds	r30, 0x192E	; 0x80192e <register_access+0x8>
    35d2:	f0 91 2f 19 	lds	r31, 0x192F	; 0x80192f <register_access+0x9>
    35d6:	64 e0       	ldi	r22, 0x04	; 4
    35d8:	87 e0       	ldi	r24, 0x07	; 7
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	19 95       	eicall
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
    35e4:	ef 90       	pop	r14
    35e6:	cf 90       	pop	r12
    35e8:	af 90       	pop	r10
    35ea:	9f 90       	pop	r9
    35ec:	8f 90       	pop	r8
    35ee:	08 95       	ret

000035f0 <lora_driver_reset_rn2483>:
    35f0:	88 23       	and	r24, r24
    35f2:	49 f0       	breq	.+18     	; 0x3606 <lora_driver_reset_rn2483+0x16>
    35f4:	e0 91 38 19 	lds	r30, 0x1938	; 0x801938 <register_access+0x12>
    35f8:	f0 91 39 19 	lds	r31, 0x1939	; 0x801939 <register_access+0x13>
    35fc:	64 e0       	ldi	r22, 0x04	; 4
    35fe:	88 e0       	ldi	r24, 0x08	; 8
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	19 95       	eicall
    3604:	08 95       	ret
    3606:	e0 91 2e 19 	lds	r30, 0x192E	; 0x80192e <register_access+0x8>
    360a:	f0 91 2f 19 	lds	r31, 0x192F	; 0x80192f <register_access+0x9>
    360e:	64 e0       	ldi	r22, 0x04	; 4
    3610:	88 e0       	ldi	r24, 0x08	; 8
    3612:	91 e0       	ldi	r25, 0x01	; 1
    3614:	19 95       	eicall
    3616:	08 95       	ret

00003618 <lora_driver_rn2483_factory_reset>:
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	86 e4       	ldi	r24, 0x46	; 70
    361e:	94 e0       	ldi	r25, 0x04	; 4
    3620:	cb de       	rcall	.-618    	; 0x33b8 <_upload_message>
    3622:	ed ea       	ldi	r30, 0xAD	; 173
    3624:	f8 e1       	ldi	r31, 0x18	; 24
    3626:	01 90       	ld	r0, Z+
    3628:	00 20       	and	r0, r0
    362a:	e9 f7       	brne	.-6      	; 0x3626 <lora_driver_rn2483_factory_reset+0xe>
    362c:	31 97       	sbiw	r30, 0x01	; 1
    362e:	ed 5a       	subi	r30, 0xAD	; 173
    3630:	f8 41       	sbci	r31, 0x18	; 24
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	75 97       	sbiw	r30, 0x15	; 21
    3636:	08 f0       	brcs	.+2      	; 0x363a <lora_driver_rn2483_factory_reset+0x22>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	08 95       	ret

0000363c <lora_driver_get_rn2483_hweui>:
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	ec 01       	movw	r28, r24
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	87 e5       	ldi	r24, 0x57	; 87
    3648:	94 e0       	ldi	r25, 0x04	; 4
    364a:	b6 de       	rcall	.-660    	; 0x33b8 <_upload_message>
    364c:	ed ea       	ldi	r30, 0xAD	; 173
    364e:	f8 e1       	ldi	r31, 0x18	; 24
    3650:	01 90       	ld	r0, Z+
    3652:	00 20       	and	r0, r0
    3654:	e9 f7       	brne	.-6      	; 0x3650 <lora_driver_get_rn2483_hweui+0x14>
    3656:	ee 5b       	subi	r30, 0xBE	; 190
    3658:	f8 41       	sbci	r31, 0x18	; 24
    365a:	39 f4       	brne	.+14     	; 0x366a <lora_driver_get_rn2483_hweui+0x2e>
    365c:	6d ea       	ldi	r22, 0xAD	; 173
    365e:	78 e1       	ldi	r23, 0x18	; 24
    3660:	ce 01       	movw	r24, r28
    3662:	0e 94 0a 28 	call	0x5014	; 0x5014 <strcpy>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	02 c0       	rjmp	.+4      	; 0x366e <lora_driver_get_rn2483_hweui+0x32>
    366a:	18 82       	st	Y, r1
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	df 91       	pop	r29
    3670:	cf 91       	pop	r28
    3672:	08 95       	ret

00003674 <lora_driver_set_device_identifier>:
    3674:	fc 01       	movw	r30, r24
    3676:	01 90       	ld	r0, Z+
    3678:	00 20       	and	r0, r0
    367a:	e9 f7       	brne	.-6      	; 0x3676 <lora_driver_set_device_identifier+0x2>
    367c:	9f 01       	movw	r18, r30
    367e:	21 51       	subi	r18, 0x11	; 17
    3680:	31 09       	sbc	r19, r1
    3682:	28 17       	cp	r18, r24
    3684:	39 07       	cpc	r19, r25
    3686:	29 f4       	brne	.+10     	; 0x3692 <lora_driver_set_device_identifier+0x1e>
    3688:	bc 01       	movw	r22, r24
    368a:	85 e8       	ldi	r24, 0x85	; 133
    368c:	94 e0       	ldi	r25, 0x04	; 4
    368e:	63 cf       	rjmp	.-314    	; 0x3556 <_upload_message_rc>
    3690:	08 95       	ret
    3692:	89 e0       	ldi	r24, 0x09	; 9
    3694:	08 95       	ret

00003696 <lora_driver_set_application_identifier>:
    3696:	fc 01       	movw	r30, r24
    3698:	01 90       	ld	r0, Z+
    369a:	00 20       	and	r0, r0
    369c:	e9 f7       	brne	.-6      	; 0x3698 <lora_driver_set_application_identifier+0x2>
    369e:	9f 01       	movw	r18, r30
    36a0:	21 51       	subi	r18, 0x11	; 17
    36a2:	31 09       	sbc	r19, r1
    36a4:	28 17       	cp	r18, r24
    36a6:	39 07       	cpc	r19, r25
    36a8:	29 f4       	brne	.+10     	; 0x36b4 <lora_driver_set_application_identifier+0x1e>
    36aa:	bc 01       	movw	r22, r24
    36ac:	84 e9       	ldi	r24, 0x94	; 148
    36ae:	94 e0       	ldi	r25, 0x04	; 4
    36b0:	52 cf       	rjmp	.-348    	; 0x3556 <_upload_message_rc>
    36b2:	08 95       	ret
    36b4:	89 e0       	ldi	r24, 0x09	; 9
    36b6:	08 95       	ret

000036b8 <lora_driver_set_application_key>:
    36b8:	fc 01       	movw	r30, r24
    36ba:	01 90       	ld	r0, Z+
    36bc:	00 20       	and	r0, r0
    36be:	e9 f7       	brne	.-6      	; 0x36ba <lora_driver_set_application_key+0x2>
    36c0:	9f 01       	movw	r18, r30
    36c2:	21 52       	subi	r18, 0x21	; 33
    36c4:	31 09       	sbc	r19, r1
    36c6:	28 17       	cp	r18, r24
    36c8:	39 07       	cpc	r19, r25
    36ca:	29 f4       	brne	.+10     	; 0x36d6 <lora_driver_set_application_key+0x1e>
    36cc:	bc 01       	movw	r22, r24
    36ce:	83 ea       	ldi	r24, 0xA3	; 163
    36d0:	94 e0       	ldi	r25, 0x04	; 4
    36d2:	41 cf       	rjmp	.-382    	; 0x3556 <_upload_message_rc>
    36d4:	08 95       	ret
    36d6:	89 e0       	ldi	r24, 0x09	; 9
    36d8:	08 95       	ret

000036da <lora_driver_save_mac>:
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	82 ee       	ldi	r24, 0xE2	; 226
    36e0:	94 e0       	ldi	r25, 0x04	; 4
    36e2:	39 cf       	rjmp	.-398    	; 0x3556 <_upload_message_rc>
    36e4:	08 95       	ret

000036e6 <lora_driver_join>:
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	e8 2f       	mov	r30, r24
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	ee 0f       	add	r30, r30
    36f0:	ff 1f       	adc	r31, r31
    36f2:	e4 54       	subi	r30, 0x44	; 68
    36f4:	f9 4f       	sbci	r31, 0xF9	; 249
    36f6:	60 81       	ld	r22, Z
    36f8:	71 81       	ldd	r23, Z+1	; 0x01
    36fa:	8b ee       	ldi	r24, 0xEB	; 235
    36fc:	94 e0       	ldi	r25, 0x04	; 4
    36fe:	2b df       	rcall	.-426    	; 0x3556 <_upload_message_rc>
    3700:	81 11       	cpse	r24, r1
    3702:	14 c0       	rjmp	.+40     	; 0x372c <lora_driver_join+0x46>
    3704:	08 e2       	ldi	r16, 0x28	; 40
    3706:	15 e0       	ldi	r17, 0x05	; 5
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	4d e2       	ldi	r20, 0x2D	; 45
    370e:	50 e0       	ldi	r21, 0x00	; 0
    3710:	6d ea       	ldi	r22, 0xAD	; 173
    3712:	78 e1       	ldi	r23, 0x18	; 24
    3714:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_serial_reply_buffer_handle>
    3718:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_serial_reply_buffer_handle+0x1>
    371c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xStreamBufferReceive>
    3720:	88 23       	and	r24, r24
    3722:	21 f0       	breq	.+8      	; 0x372c <lora_driver_join+0x46>
    3724:	8d ea       	ldi	r24, 0xAD	; 173
    3726:	98 e1       	ldi	r25, 0x18	; 24
    3728:	a1 de       	rcall	.-702    	; 0x346c <_reply2return_code>
    372a:	03 c0       	rjmp	.+6      	; 0x3732 <lora_driver_join+0x4c>
    372c:	8d ea       	ldi	r24, 0xAD	; 173
    372e:	98 e1       	ldi	r25, 0x18	; 24
    3730:	9d de       	rcall	.-710    	; 0x346c <_reply2return_code>
    3732:	1f 91       	pop	r17
    3734:	0f 91       	pop	r16
    3736:	08 95       	ret

00003738 <lora_driver_sent_upload_message>:
    3738:	0f 93       	push	r16
    373a:	1f 93       	push	r17
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
    3740:	1f 92       	push	r1
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	db 01       	movw	r26, r22
    3748:	11 96       	adiw	r26, 0x01	; 1
    374a:	9c 91       	ld	r25, X
    374c:	11 97       	sbiw	r26, 0x01	; 1
    374e:	95 31       	cpi	r25, 0x15	; 21
    3750:	08 f0       	brcs	.+2      	; 0x3754 <lora_driver_sent_upload_message+0x1c>
    3752:	b4 c0       	rjmp	.+360    	; 0x38bc <lora_driver_sent_upload_message+0x184>
    3754:	99 23       	and	r25, r25
    3756:	81 f1       	breq	.+96     	; 0x37b8 <lora_driver_sent_upload_message+0x80>
    3758:	60 e0       	ldi	r22, 0x00	; 0
    375a:	70 e0       	ldi	r23, 0x00	; 0
    375c:	27 2f       	mov	r18, r23
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	46 2f       	mov	r20, r22
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	fd 01       	movw	r30, r26
    3766:	e4 0f       	add	r30, r20
    3768:	f5 1f       	adc	r31, r21
    376a:	92 81       	ldd	r25, Z+2	; 0x02
    376c:	92 95       	swap	r25
    376e:	9f 70       	andi	r25, 0x0F	; 15
    3770:	9a 30       	cpi	r25, 0x0A	; 10
    3772:	10 f0       	brcs	.+4      	; 0x3778 <lora_driver_sent_upload_message+0x40>
    3774:	99 5c       	subi	r25, 0xC9	; 201
    3776:	01 c0       	rjmp	.+2      	; 0x377a <lora_driver_sent_upload_message+0x42>
    3778:	90 5d       	subi	r25, 0xD0	; 208
    377a:	f9 01       	movw	r30, r18
    377c:	e2 5c       	subi	r30, 0xC2	; 194
    377e:	f7 4e       	sbci	r31, 0xE7	; 231
    3780:	90 83       	st	Z, r25
    3782:	2f 5f       	subi	r18, 0xFF	; 255
    3784:	3f 4f       	sbci	r19, 0xFF	; 255
    3786:	fd 01       	movw	r30, r26
    3788:	e4 0f       	add	r30, r20
    378a:	f5 1f       	adc	r31, r21
    378c:	92 81       	ldd	r25, Z+2	; 0x02
    378e:	9f 70       	andi	r25, 0x0F	; 15
    3790:	49 2f       	mov	r20, r25
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	4a 30       	cpi	r20, 0x0A	; 10
    3796:	51 05       	cpc	r21, r1
    3798:	14 f0       	brlt	.+4      	; 0x379e <lora_driver_sent_upload_message+0x66>
    379a:	99 5c       	subi	r25, 0xC9	; 201
    379c:	01 c0       	rjmp	.+2      	; 0x37a0 <lora_driver_sent_upload_message+0x68>
    379e:	90 5d       	subi	r25, 0xD0	; 208
    37a0:	f9 01       	movw	r30, r18
    37a2:	e2 5c       	subi	r30, 0xC2	; 194
    37a4:	f7 4e       	sbci	r31, 0xE7	; 231
    37a6:	90 83       	st	Z, r25
    37a8:	7e 5f       	subi	r23, 0xFE	; 254
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	11 96       	adiw	r26, 0x01	; 1
    37ae:	9c 91       	ld	r25, X
    37b0:	11 97       	sbiw	r26, 0x01	; 1
    37b2:	69 17       	cp	r22, r25
    37b4:	98 f2       	brcs	.-90     	; 0x375c <lora_driver_sent_upload_message+0x24>
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <lora_driver_sent_upload_message+0x82>
    37b8:	70 e0       	ldi	r23, 0x00	; 0
    37ba:	e7 2f       	mov	r30, r23
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	e2 5c       	subi	r30, 0xC2	; 194
    37c0:	f7 4e       	sbci	r31, 0xE7	; 231
    37c2:	10 82       	st	Z, r1
    37c4:	4c 91       	ld	r20, X
    37c6:	81 11       	cpse	r24, r1
    37c8:	03 c0       	rjmp	.+6      	; 0x37d0 <lora_driver_sent_upload_message+0x98>
    37ca:	84 ef       	ldi	r24, 0xF4	; 244
    37cc:	94 e0       	ldi	r25, 0x04	; 4
    37ce:	02 c0       	rjmp	.+4      	; 0x37d4 <lora_driver_sent_upload_message+0x9c>
    37d0:	86 ef       	ldi	r24, 0xF6	; 246
    37d2:	94 e0       	ldi	r25, 0x04	; 4
    37d4:	2e e3       	ldi	r18, 0x3E	; 62
    37d6:	38 e1       	ldi	r19, 0x18	; 24
    37d8:	3f 93       	push	r19
    37da:	2f 93       	push	r18
    37dc:	1f 92       	push	r1
    37de:	4f 93       	push	r20
    37e0:	9f 93       	push	r25
    37e2:	8f 93       	push	r24
    37e4:	8a ef       	ldi	r24, 0xFA	; 250
    37e6:	94 e0       	ldi	r25, 0x04	; 4
    37e8:	9f 93       	push	r25
    37ea:	8f 93       	push	r24
    37ec:	80 e8       	ldi	r24, 0x80	; 128
    37ee:	98 e1       	ldi	r25, 0x18	; 24
    37f0:	9f 93       	push	r25
    37f2:	8f 93       	push	r24
    37f4:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <sprintf>
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	80 e8       	ldi	r24, 0x80	; 128
    37fe:	98 e1       	ldi	r25, 0x18	; 24
    3800:	aa de       	rcall	.-684    	; 0x3556 <_upload_message_rc>
    3802:	0f b6       	in	r0, 0x3f	; 63
    3804:	f8 94       	cli
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	cd bf       	out	0x3d, r28	; 61
    380c:	81 11       	cpse	r24, r1
    380e:	59 c0       	rjmp	.+178    	; 0x38c2 <lora_driver_sent_upload_message+0x18a>
    3810:	08 e2       	ldi	r16, 0x28	; 40
    3812:	15 e0       	ldi	r17, 0x05	; 5
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	4d e2       	ldi	r20, 0x2D	; 45
    381a:	50 e0       	ldi	r21, 0x00	; 0
    381c:	6d ea       	ldi	r22, 0xAD	; 173
    381e:	78 e1       	ldi	r23, 0x18	; 24
    3820:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_serial_reply_buffer_handle>
    3824:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_serial_reply_buffer_handle+0x1>
    3828:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xStreamBufferReceive>
    382c:	88 23       	and	r24, r24
    382e:	09 f4       	brne	.+2      	; 0x3832 <lora_driver_sent_upload_message+0xfa>
    3830:	47 c0       	rjmp	.+142    	; 0x38c0 <lora_driver_sent_upload_message+0x188>
    3832:	8d ea       	ldi	r24, 0xAD	; 173
    3834:	98 e1       	ldi	r25, 0x18	; 24
    3836:	1a de       	rcall	.-972    	; 0x346c <_reply2return_code>
    3838:	8e 30       	cpi	r24, 0x0E	; 14
    383a:	09 f0       	breq	.+2      	; 0x383e <lora_driver_sent_upload_message+0x106>
    383c:	42 c0       	rjmp	.+132    	; 0x38c2 <lora_driver_sent_upload_message+0x18a>
    383e:	87 e0       	ldi	r24, 0x07	; 7
    3840:	89 83       	std	Y+1, r24	; 0x01
    3842:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_downlinkMessageBuffer>
    3846:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <_downlinkMessageBuffer+0x1>
    384a:	89 2b       	or	r24, r25
    384c:	a9 f1       	breq	.+106    	; 0x38b8 <lora_driver_sent_upload_message+0x180>
    384e:	be 01       	movw	r22, r28
    3850:	6f 5f       	subi	r22, 0xFF	; 255
    3852:	7f 4f       	sbci	r23, 0xFF	; 255
    3854:	8d ea       	ldi	r24, 0xAD	; 173
    3856:	98 e1       	ldi	r25, 0x18	; 24
    3858:	68 d1       	rcall	.+720    	; 0x3b2a <decode_port_no>
    385a:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_downlink_payload>
    385e:	e9 81       	ldd	r30, Y+1	; 0x01
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	e3 55       	subi	r30, 0x53	; 83
    3864:	f7 4e       	sbci	r31, 0xE7	; 231
    3866:	df 01       	movw	r26, r30
    3868:	0d 90       	ld	r0, X+
    386a:	00 20       	and	r0, r0
    386c:	e9 f7       	brne	.-6      	; 0x3868 <lora_driver_sent_upload_message+0x130>
    386e:	11 97       	sbiw	r26, 0x01	; 1
    3870:	ae 1b       	sub	r26, r30
    3872:	bf 0b       	sbc	r27, r31
    3874:	aa 23       	and	r26, r26
    3876:	91 f0       	breq	.+36     	; 0x389c <lora_driver_sent_upload_message+0x164>
    3878:	bb 27       	eor	r27, r27
    387a:	cd 01       	movw	r24, r26
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	9c 01       	movw	r18, r24
    3880:	12 f4       	brpl	.+4      	; 0x3886 <lora_driver_sent_upload_message+0x14e>
    3882:	2f 5f       	subi	r18, 0xFF	; 255
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	35 95       	asr	r19
    3888:	27 95       	ror	r18
    388a:	20 93 29 18 	sts	0x1829, r18	; 0x801829 <_downlink_payload+0x1>
    388e:	af 01       	movw	r20, r30
    3890:	4f 5f       	subi	r20, 0xFF	; 255
    3892:	5f 4f       	sbci	r21, 0xFF	; 255
    3894:	64 e1       	ldi	r22, 0x14	; 20
    3896:	8a e2       	ldi	r24, 0x2A	; 42
    3898:	98 e1       	ldi	r25, 0x18	; 24
    389a:	73 d1       	rcall	.+742    	; 0x3b82 <decode_hexadecimal_string_bytes>
    389c:	01 e0       	ldi	r16, 0x01	; 1
    389e:	10 e0       	ldi	r17, 0x00	; 0
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	46 e1       	ldi	r20, 0x16	; 22
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	68 e2       	ldi	r22, 0x28	; 40
    38aa:	78 e1       	ldi	r23, 0x18	; 24
    38ac:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_downlinkMessageBuffer>
    38b0:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <_downlinkMessageBuffer+0x1>
    38b4:	0e 94 cf 0b 	call	0x179e	; 0x179e <xStreamBufferSend>
    38b8:	8e e0       	ldi	r24, 0x0E	; 14
    38ba:	03 c0       	rjmp	.+6      	; 0x38c2 <lora_driver_sent_upload_message+0x18a>
    38bc:	84 e1       	ldi	r24, 0x14	; 20
    38be:	01 c0       	rjmp	.+2      	; 0x38c2 <lora_driver_sent_upload_message+0x18a>
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	0f 90       	pop	r0
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	08 95       	ret

000038ce <lora_driver_set_adaptive_data_rate>:
    38ce:	81 30       	cpi	r24, 0x01	; 1
    38d0:	19 f0       	breq	.+6      	; 0x38d8 <lora_driver_set_adaptive_data_rate+0xa>
    38d2:	6a e0       	ldi	r22, 0x0A	; 10
    38d4:	75 e0       	ldi	r23, 0x05	; 5
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <lora_driver_set_adaptive_data_rate+0xe>
    38d8:	63 ee       	ldi	r22, 0xE3	; 227
    38da:	75 e0       	ldi	r23, 0x05	; 5
    38dc:	8e e0       	ldi	r24, 0x0E	; 14
    38de:	95 e0       	ldi	r25, 0x05	; 5
    38e0:	3a ce       	rjmp	.-908    	; 0x3556 <_upload_message_rc>
    38e2:	08 95       	ret

000038e4 <lora_driver_set_receive_delay>:
    38e4:	9f 93       	push	r25
    38e6:	8f 93       	push	r24
    38e8:	8f e3       	ldi	r24, 0x3F	; 63
    38ea:	95 e0       	ldi	r25, 0x05	; 5
    38ec:	9f 93       	push	r25
    38ee:	8f 93       	push	r24
    38f0:	80 e8       	ldi	r24, 0x80	; 128
    38f2:	98 e1       	ldi	r25, 0x18	; 24
    38f4:	9f 93       	push	r25
    38f6:	8f 93       	push	r24
    38f8:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <sprintf>
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	70 e0       	ldi	r23, 0x00	; 0
    3900:	80 e8       	ldi	r24, 0x80	; 128
    3902:	98 e1       	ldi	r25, 0x18	; 24
    3904:	28 de       	rcall	.-944    	; 0x3556 <_upload_message_rc>
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	08 95       	ret

00003914 <lora_driver_configure_to_eu868>:
    3914:	2f 92       	push	r2
    3916:	3f 92       	push	r3
    3918:	4f 92       	push	r4
    391a:	5f 92       	push	r5
    391c:	6f 92       	push	r6
    391e:	7f 92       	push	r7
    3920:	8f 92       	push	r8
    3922:	9f 92       	push	r9
    3924:	af 92       	push	r10
    3926:	bf 92       	push	r11
    3928:	cf 92       	push	r12
    392a:	df 92       	push	r13
    392c:	ef 92       	push	r14
    392e:	ff 92       	push	r15
    3930:	0f 93       	push	r16
    3932:	1f 93       	push	r17
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
    393c:	a0 97       	sbiw	r28, 0x20	; 32
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	6c e6       	ldi	r22, 0x6C	; 108
    394a:	75 e0       	ldi	r23, 0x05	; 5
    394c:	88 e7       	ldi	r24, 0x78	; 120
    394e:	95 e0       	ldi	r25, 0x05	; 5
    3950:	33 dd       	rcall	.-1434   	; 0x33b8 <_upload_message>
    3952:	8c dd       	rcall	.-1256   	; 0x346c <_reply2return_code>
    3954:	81 11       	cpse	r24, r1
    3956:	a3 c0       	rjmp	.+326    	; 0x3a9e <lora_driver_configure_to_eu868+0x18a>
    3958:	80 e2       	ldi	r24, 0x20	; 32
    395a:	e1 e2       	ldi	r30, 0x21	; 33
    395c:	f2 e0       	ldi	r31, 0x02	; 2
    395e:	de 01       	movw	r26, r28
    3960:	11 96       	adiw	r26, 0x01	; 1
    3962:	01 90       	ld	r0, Z+
    3964:	0d 92       	st	X+, r0
    3966:	8a 95       	dec	r24
    3968:	e1 f7       	brne	.-8      	; 0x3962 <lora_driver_configure_to_eu868+0x4e>
    396a:	9e 01       	movw	r18, r28
    396c:	2f 5f       	subi	r18, 0xFF	; 255
    396e:	3f 4f       	sbci	r19, 0xFF	; 255
    3970:	69 01       	movw	r12, r18
    3972:	e1 2c       	mov	r14, r1
    3974:	f1 2c       	mov	r15, r1
    3976:	0f 2e       	mov	r0, r31
    3978:	f4 e8       	ldi	r31, 0x84	; 132
    397a:	af 2e       	mov	r10, r31
    397c:	f5 e0       	ldi	r31, 0x05	; 5
    397e:	bf 2e       	mov	r11, r31
    3980:	f0 2d       	mov	r31, r0
    3982:	00 e8       	ldi	r16, 0x80	; 128
    3984:	18 e1       	ldi	r17, 0x18	; 24
    3986:	0f 2e       	mov	r0, r31
    3988:	fd e9       	ldi	r31, 0x9D	; 157
    398a:	4f 2e       	mov	r4, r31
    398c:	f5 e0       	ldi	r31, 0x05	; 5
    398e:	5f 2e       	mov	r5, r31
    3990:	f0 2d       	mov	r31, r0
    3992:	0f 2e       	mov	r0, r31
    3994:	f4 eb       	ldi	r31, 0xB4	; 180
    3996:	8f 2e       	mov	r8, r31
    3998:	f5 e0       	ldi	r31, 0x05	; 5
    399a:	9f 2e       	mov	r9, r31
    399c:	f0 2d       	mov	r31, r0
    399e:	0f 2e       	mov	r0, r31
    39a0:	fe ec       	ldi	r31, 0xCE	; 206
    39a2:	6f 2e       	mov	r6, r31
    39a4:	f5 e0       	ldi	r31, 0x05	; 5
    39a6:	7f 2e       	mov	r7, r31
    39a8:	f0 2d       	mov	r31, r0
    39aa:	3e 2c       	mov	r3, r14
    39ac:	2f 2c       	mov	r2, r15
    39ae:	ff 92       	push	r15
    39b0:	ef 92       	push	r14
    39b2:	bf 92       	push	r11
    39b4:	af 92       	push	r10
    39b6:	1f 93       	push	r17
    39b8:	0f 93       	push	r16
    39ba:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <sprintf>
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	c8 01       	movw	r24, r16
    39c4:	f9 dc       	rcall	.-1550   	; 0x33b8 <_upload_message>
    39c6:	52 dd       	rcall	.-1372   	; 0x346c <_reply2return_code>
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	81 11       	cpse	r24, r1
    39d6:	63 c0       	rjmp	.+198    	; 0x3a9e <lora_driver_configure_to_eu868+0x18a>
    39d8:	32 e0       	ldi	r19, 0x02	; 2
    39da:	3e 15       	cp	r19, r14
    39dc:	e8 f4       	brcc	.+58     	; 0x3a18 <lora_driver_configure_to_eu868+0x104>
    39de:	f6 01       	movw	r30, r12
    39e0:	83 81       	ldd	r24, Z+3	; 0x03
    39e2:	8f 93       	push	r24
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	8f 93       	push	r24
    39e8:	81 81       	ldd	r24, Z+1	; 0x01
    39ea:	8f 93       	push	r24
    39ec:	80 81       	ld	r24, Z
    39ee:	8f 93       	push	r24
    39f0:	ff 92       	push	r15
    39f2:	ef 92       	push	r14
    39f4:	5f 92       	push	r5
    39f6:	4f 92       	push	r4
    39f8:	1f 93       	push	r17
    39fa:	0f 93       	push	r16
    39fc:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <sprintf>
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	c8 01       	movw	r24, r16
    3a06:	d8 dc       	rcall	.-1616   	; 0x33b8 <_upload_message>
    3a08:	31 dd       	rcall	.-1438   	; 0x346c <_reply2return_code>
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	81 11       	cpse	r24, r1
    3a16:	43 c0       	rjmp	.+134    	; 0x3a9e <lora_driver_configure_to_eu868+0x18a>
    3a18:	2f 92       	push	r2
    3a1a:	3f 92       	push	r3
    3a1c:	9f 92       	push	r9
    3a1e:	8f 92       	push	r8
    3a20:	1f 93       	push	r17
    3a22:	0f 93       	push	r16
    3a24:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <sprintf>
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	70 e0       	ldi	r23, 0x00	; 0
    3a2c:	c8 01       	movw	r24, r16
    3a2e:	c4 dc       	rcall	.-1656   	; 0x33b8 <_upload_message>
    3a30:	1d dd       	rcall	.-1478   	; 0x346c <_reply2return_code>
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	81 11       	cpse	r24, r1
    3a40:	2e c0       	rjmp	.+92     	; 0x3a9e <lora_driver_configure_to_eu868+0x18a>
    3a42:	2f 92       	push	r2
    3a44:	3f 92       	push	r3
    3a46:	7f 92       	push	r7
    3a48:	6f 92       	push	r6
    3a4a:	1f 93       	push	r17
    3a4c:	0f 93       	push	r16
    3a4e:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <sprintf>
    3a52:	60 e0       	ldi	r22, 0x00	; 0
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	c8 01       	movw	r24, r16
    3a58:	af dc       	rcall	.-1698   	; 0x33b8 <_upload_message>
    3a5a:	08 dd       	rcall	.-1520   	; 0x346c <_reply2return_code>
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	81 11       	cpse	r24, r1
    3a6a:	19 c0       	rjmp	.+50     	; 0x3a9e <lora_driver_configure_to_eu868+0x18a>
    3a6c:	3f ef       	ldi	r19, 0xFF	; 255
    3a6e:	e3 1a       	sub	r14, r19
    3a70:	f3 0a       	sbc	r15, r19
    3a72:	84 e0       	ldi	r24, 0x04	; 4
    3a74:	c8 0e       	add	r12, r24
    3a76:	d1 1c       	adc	r13, r1
    3a78:	98 e0       	ldi	r25, 0x08	; 8
    3a7a:	e9 16       	cp	r14, r25
    3a7c:	f1 04       	cpc	r15, r1
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <lora_driver_configure_to_eu868+0x16e>
    3a80:	94 cf       	rjmp	.-216    	; 0x39aa <lora_driver_configure_to_eu868+0x96>
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	86 ee       	ldi	r24, 0xE6	; 230
    3a88:	95 e0       	ldi	r25, 0x05	; 5
    3a8a:	96 dc       	rcall	.-1748   	; 0x33b8 <_upload_message>
    3a8c:	ef dc       	rcall	.-1570   	; 0x346c <_reply2return_code>
    3a8e:	81 11       	cpse	r24, r1
    3a90:	06 c0       	rjmp	.+12     	; 0x3a9e <lora_driver_configure_to_eu868+0x18a>
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	70 e0       	ldi	r23, 0x00	; 0
    3a96:	87 ef       	ldi	r24, 0xF7	; 247
    3a98:	95 e0       	ldi	r25, 0x05	; 5
    3a9a:	8e dc       	rcall	.-1764   	; 0x33b8 <_upload_message>
    3a9c:	e7 dc       	rcall	.-1586   	; 0x346c <_reply2return_code>
    3a9e:	a0 96       	adiw	r28, 0x20	; 32
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	ff 90       	pop	r15
    3ab4:	ef 90       	pop	r14
    3ab6:	df 90       	pop	r13
    3ab8:	cf 90       	pop	r12
    3aba:	bf 90       	pop	r11
    3abc:	af 90       	pop	r10
    3abe:	9f 90       	pop	r9
    3ac0:	8f 90       	pop	r8
    3ac2:	7f 90       	pop	r7
    3ac4:	6f 90       	pop	r6
    3ac6:	5f 90       	pop	r5
    3ac8:	4f 90       	pop	r4
    3aca:	3f 90       	pop	r3
    3acc:	2f 90       	pop	r2
    3ace:	08 95       	ret

00003ad0 <lora_driver_set_otaa_identity>:
    3ad0:	ef 92       	push	r14
    3ad2:	ff 92       	push	r15
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	ec 01       	movw	r28, r24
    3ade:	8b 01       	movw	r16, r22
    3ae0:	7a 01       	movw	r14, r20
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	f4 de       	rcall	.-536    	; 0x38ce <lora_driver_set_adaptive_data_rate>
    3ae6:	81 11       	cpse	r24, r1
    3ae8:	0d c0       	rjmp	.+26     	; 0x3b04 <lora_driver_set_otaa_identity+0x34>
    3aea:	ce 01       	movw	r24, r28
    3aec:	d4 dd       	rcall	.-1112   	; 0x3696 <lora_driver_set_application_identifier>
    3aee:	81 11       	cpse	r24, r1
    3af0:	09 c0       	rjmp	.+18     	; 0x3b04 <lora_driver_set_otaa_identity+0x34>
    3af2:	c8 01       	movw	r24, r16
    3af4:	e1 dd       	rcall	.-1086   	; 0x36b8 <lora_driver_set_application_key>
    3af6:	81 11       	cpse	r24, r1
    3af8:	05 c0       	rjmp	.+10     	; 0x3b04 <lora_driver_set_otaa_identity+0x34>
    3afa:	c7 01       	movw	r24, r14
    3afc:	bb dd       	rcall	.-1162   	; 0x3674 <lora_driver_set_device_identifier>
    3afe:	81 11       	cpse	r24, r1
    3b00:	01 c0       	rjmp	.+2      	; 0x3b04 <lora_driver_set_otaa_identity+0x34>
    3b02:	eb dd       	rcall	.-1066   	; 0x36da <lora_driver_save_mac>
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	08 95       	ret

00003b12 <lora_driver_map_return_code_to_text>:
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	fc 01       	movw	r30, r24
    3b16:	ee 0f       	add	r30, r30
    3b18:	ff 1f       	adc	r31, r31
    3b1a:	8e 0f       	add	r24, r30
    3b1c:	9f 1f       	adc	r25, r31
    3b1e:	fc 01       	movw	r30, r24
    3b20:	e0 54       	subi	r30, 0x40	; 64
    3b22:	f9 4f       	sbci	r31, 0xF9	; 249
    3b24:	81 81       	ldd	r24, Z+1	; 0x01
    3b26:	92 81       	ldd	r25, Z+2	; 0x02
    3b28:	08 95       	ret

00003b2a <decode_port_no>:
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	29 f1       	breq	.+74     	; 0x3b7a <decode_port_no+0x50>
    3b30:	fb 01       	movw	r30, r22
    3b32:	20 81       	ld	r18, Z
    3b34:	fc 01       	movw	r30, r24
    3b36:	01 90       	ld	r0, Z+
    3b38:	00 20       	and	r0, r0
    3b3a:	e9 f7       	brne	.-6      	; 0x3b36 <decode_port_no+0xc>
    3b3c:	31 97       	sbiw	r30, 0x01	; 1
    3b3e:	e8 1b       	sub	r30, r24
    3b40:	f9 0b       	sbc	r31, r25
    3b42:	82 2f       	mov	r24, r18
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	e8 17       	cp	r30, r24
    3b48:	f9 07       	cpc	r31, r25
    3b4a:	c8 f0       	brcs	.+50     	; 0x3b7e <decode_port_no+0x54>
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	08 c0       	rjmp	.+16     	; 0x3b60 <decode_port_no+0x36>
    3b50:	88 0f       	add	r24, r24
    3b52:	38 2f       	mov	r19, r24
    3b54:	33 0f       	add	r19, r19
    3b56:	33 0f       	add	r19, r19
    3b58:	83 0f       	add	r24, r19
    3b5a:	80 53       	subi	r24, 0x30	; 48
    3b5c:	89 0f       	add	r24, r25
    3b5e:	2f 5f       	subi	r18, 0xFF	; 255
    3b60:	fd 01       	movw	r30, r26
    3b62:	e2 0f       	add	r30, r18
    3b64:	f1 1d       	adc	r31, r1
    3b66:	90 81       	ld	r25, Z
    3b68:	30 ed       	ldi	r19, 0xD0	; 208
    3b6a:	39 0f       	add	r19, r25
    3b6c:	3a 30       	cpi	r19, 0x0A	; 10
    3b6e:	10 f4       	brcc	.+4      	; 0x3b74 <decode_port_no+0x4a>
    3b70:	91 11       	cpse	r25, r1
    3b72:	ee cf       	rjmp	.-36     	; 0x3b50 <decode_port_no+0x26>
    3b74:	fb 01       	movw	r30, r22
    3b76:	20 83       	st	Z, r18
    3b78:	08 95       	ret
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	08 95       	ret
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	08 95       	ret

00003b82 <decode_hexadecimal_string_bytes>:
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	ea 01       	movw	r28, r20
    3b8e:	20 97       	sbiw	r28, 0x00	; 0
    3b90:	e1 f1       	breq	.+120    	; 0x3c0a <decode_hexadecimal_string_bytes+0x88>
    3b92:	fa 01       	movw	r30, r20
    3b94:	01 90       	ld	r0, Z+
    3b96:	00 20       	and	r0, r0
    3b98:	e9 f7       	brne	.-6      	; 0x3b94 <decode_hexadecimal_string_bytes+0x12>
    3b9a:	31 97       	sbiw	r30, 0x01	; 1
    3b9c:	e4 1b       	sub	r30, r20
    3b9e:	f5 0b       	sbc	r31, r21
    3ba0:	32 97       	sbiw	r30, 0x02	; 2
    3ba2:	10 f5       	brcc	.+68     	; 0x3be8 <decode_hexadecimal_string_bytes+0x66>
    3ba4:	32 c0       	rjmp	.+100    	; 0x3c0a <decode_hexadecimal_string_bytes+0x88>
    3ba6:	8d 01       	movw	r16, r26
    3ba8:	04 0f       	add	r16, r20
    3baa:	15 1f       	adc	r17, r21
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	ae 01       	movw	r20, r28
    3bb0:	42 0f       	add	r20, r18
    3bb2:	53 1f       	adc	r21, r19
    3bb4:	fa 01       	movw	r30, r20
    3bb6:	90 81       	ld	r25, Z
    3bb8:	91 34       	cpi	r25, 0x41	; 65
    3bba:	28 f0       	brcs	.+10     	; 0x3bc6 <decode_hexadecimal_string_bytes+0x44>
    3bbc:	97 53       	subi	r25, 0x37	; 55
    3bbe:	59 2f       	mov	r21, r25
    3bc0:	52 95       	swap	r21
    3bc2:	50 7f       	andi	r21, 0xF0	; 240
    3bc4:	03 c0       	rjmp	.+6      	; 0x3bcc <decode_hexadecimal_string_bytes+0x4a>
    3bc6:	59 2f       	mov	r21, r25
    3bc8:	52 95       	swap	r21
    3bca:	50 7f       	andi	r21, 0xF0	; 240
    3bcc:	2c 0f       	add	r18, r28
    3bce:	3d 1f       	adc	r19, r29
    3bd0:	f9 01       	movw	r30, r18
    3bd2:	91 81       	ldd	r25, Z+1	; 0x01
    3bd4:	91 34       	cpi	r25, 0x41	; 65
    3bd6:	10 f0       	brcs	.+4      	; 0x3bdc <decode_hexadecimal_string_bytes+0x5a>
    3bd8:	97 53       	subi	r25, 0x37	; 55
    3bda:	01 c0       	rjmp	.+2      	; 0x3bde <decode_hexadecimal_string_bytes+0x5c>
    3bdc:	90 53       	subi	r25, 0x30	; 48
    3bde:	95 0f       	add	r25, r21
    3be0:	f8 01       	movw	r30, r16
    3be2:	90 83       	st	Z, r25
    3be4:	8f 5f       	subi	r24, 0xFF	; 255
    3be6:	01 c0       	rjmp	.+2      	; 0x3bea <decode_hexadecimal_string_bytes+0x68>
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	28 2f       	mov	r18, r24
    3bec:	22 0f       	add	r18, r18
    3bee:	48 2f       	mov	r20, r24
    3bf0:	50 e0       	ldi	r21, 0x00	; 0
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	01 90       	ld	r0, Z+
    3bf6:	00 20       	and	r0, r0
    3bf8:	e9 f7       	brne	.-6      	; 0x3bf4 <decode_hexadecimal_string_bytes+0x72>
    3bfa:	31 97       	sbiw	r30, 0x01	; 1
    3bfc:	ec 1b       	sub	r30, r28
    3bfe:	fd 0b       	sbc	r31, r29
    3c00:	4e 17       	cp	r20, r30
    3c02:	5f 07       	cpc	r21, r31
    3c04:	10 f4       	brcc	.+4      	; 0x3c0a <decode_hexadecimal_string_bytes+0x88>
    3c06:	86 13       	cpse	r24, r22
    3c08:	ce cf       	rjmp	.-100    	; 0x3ba6 <decode_hexadecimal_string_bytes+0x24>
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	1f 91       	pop	r17
    3c10:	0f 91       	pop	r16
    3c12:	08 95       	ret

00003c14 <reg_read_register>:
    3c14:	fc 01       	movw	r30, r24
    3c16:	80 81       	ld	r24, Z
    3c18:	08 95       	ret

00003c1a <reg_read_bit>:
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	20 81       	ld	r18, Z
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	02 c0       	rjmp	.+4      	; 0x3c28 <reg_read_bit+0xe>
    3c24:	88 0f       	add	r24, r24
    3c26:	99 1f       	adc	r25, r25
    3c28:	6a 95       	dec	r22
    3c2a:	e2 f7       	brpl	.-8      	; 0x3c24 <reg_read_bit+0xa>
    3c2c:	82 23       	and	r24, r18
    3c2e:	08 95       	ret

00003c30 <reg_read_bits>:
    3c30:	fc 01       	movw	r30, r24
    3c32:	80 81       	ld	r24, Z
    3c34:	86 23       	and	r24, r22
    3c36:	08 95       	ret

00003c38 <reg_set_register>:
    3c38:	fc 01       	movw	r30, r24
    3c3a:	60 83       	st	Z, r22
    3c3c:	08 95       	ret

00003c3e <reg_clear_register>:
    3c3e:	fc 01       	movw	r30, r24
    3c40:	10 82       	st	Z, r1
    3c42:	08 95       	ret

00003c44 <reg_set_bit>:
    3c44:	fc 01       	movw	r30, r24
    3c46:	40 81       	ld	r20, Z
    3c48:	21 e0       	ldi	r18, 0x01	; 1
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <reg_set_bit+0xe>
    3c4e:	22 0f       	add	r18, r18
    3c50:	33 1f       	adc	r19, r19
    3c52:	6a 95       	dec	r22
    3c54:	e2 f7       	brpl	.-8      	; 0x3c4e <reg_set_bit+0xa>
    3c56:	24 2b       	or	r18, r20
    3c58:	20 83       	st	Z, r18
    3c5a:	08 95       	ret

00003c5c <reg_set_bits>:
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	20 81       	ld	r18, Z
    3c60:	62 2b       	or	r22, r18
    3c62:	60 83       	st	Z, r22
    3c64:	08 95       	ret

00003c66 <reg_toggle_bit>:
    3c66:	fc 01       	movw	r30, r24
    3c68:	40 81       	ld	r20, Z
    3c6a:	21 e0       	ldi	r18, 0x01	; 1
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <reg_toggle_bit+0xe>
    3c70:	22 0f       	add	r18, r18
    3c72:	33 1f       	adc	r19, r19
    3c74:	6a 95       	dec	r22
    3c76:	e2 f7       	brpl	.-8      	; 0x3c70 <reg_toggle_bit+0xa>
    3c78:	24 27       	eor	r18, r20
    3c7a:	20 83       	st	Z, r18
    3c7c:	08 95       	ret

00003c7e <reg_toggle_bits>:
    3c7e:	fc 01       	movw	r30, r24
    3c80:	20 81       	ld	r18, Z
    3c82:	62 27       	eor	r22, r18
    3c84:	60 83       	st	Z, r22
    3c86:	08 95       	ret

00003c88 <reg_clear_bit>:
    3c88:	fc 01       	movw	r30, r24
    3c8a:	90 81       	ld	r25, Z
    3c8c:	21 e0       	ldi	r18, 0x01	; 1
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	02 c0       	rjmp	.+4      	; 0x3c96 <reg_clear_bit+0xe>
    3c92:	22 0f       	add	r18, r18
    3c94:	33 1f       	adc	r19, r19
    3c96:	6a 95       	dec	r22
    3c98:	e2 f7       	brpl	.-8      	; 0x3c92 <reg_clear_bit+0xa>
    3c9a:	20 95       	com	r18
    3c9c:	29 23       	and	r18, r25
    3c9e:	20 83       	st	Z, r18
    3ca0:	08 95       	ret

00003ca2 <reg_clear_bits>:
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	90 81       	ld	r25, Z
    3ca6:	60 95       	com	r22
    3ca8:	69 23       	and	r22, r25
    3caa:	60 83       	st	Z, r22
    3cac:	08 95       	ret

00003cae <_serial_call_back>:
    3cae:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <crc_sum.1941>
    3cb2:	86 0f       	add	r24, r22
    3cb4:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <crc_sum.1941>
    3cb8:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <_mh_state>
    3cbc:	91 30       	cpi	r25, 0x01	; 1
    3cbe:	79 f0       	breq	.+30     	; 0x3cde <_serial_call_back+0x30>
    3cc0:	28 f0       	brcs	.+10     	; 0x3ccc <_serial_call_back+0x1e>
    3cc2:	92 30       	cpi	r25, 0x02	; 2
    3cc4:	a9 f0       	breq	.+42     	; 0x3cf0 <_serial_call_back+0x42>
    3cc6:	93 30       	cpi	r25, 0x03	; 3
    3cc8:	19 f1       	breq	.+70     	; 0x3d10 <_serial_call_back+0x62>
    3cca:	08 95       	ret
    3ccc:	6f 3f       	cpi	r22, 0xFF	; 255
    3cce:	09 f0       	breq	.+2      	; 0x3cd2 <_serial_call_back+0x24>
    3cd0:	48 c0       	rjmp	.+144    	; 0x3d62 <_serial_call_back+0xb4>
    3cd2:	10 92 dd 18 	sts	0x18DD, r1	; 0x8018dd <crc_sum.1941>
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	80 93 e0 18 	sts	0x18E0, r24	; 0x8018e0 <_mh_state>
    3cdc:	08 95       	ret
    3cde:	66 38       	cpi	r22, 0x86	; 134
    3ce0:	09 f0       	breq	.+2      	; 0x3ce4 <_serial_call_back+0x36>
    3ce2:	3f c0       	rjmp	.+126    	; 0x3d62 <_serial_call_back+0xb4>
    3ce4:	10 92 dc 18 	sts	0x18DC, r1	; 0x8018dc <inDex.1939>
    3ce8:	82 e0       	ldi	r24, 0x02	; 2
    3cea:	80 93 e0 18 	sts	0x18E0, r24	; 0x8018e0 <_mh_state>
    3cee:	08 95       	ret
    3cf0:	e0 91 dc 18 	lds	r30, 0x18DC	; 0x8018dc <inDex.1939>
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	8e 0f       	add	r24, r30
    3cf8:	80 93 dc 18 	sts	0x18DC, r24	; 0x8018dc <inDex.1939>
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	e6 52       	subi	r30, 0x26	; 38
    3d00:	f7 4e       	sbci	r31, 0xE7	; 231
    3d02:	60 83       	st	Z, r22
    3d04:	82 30       	cpi	r24, 0x02	; 2
    3d06:	69 f5       	brne	.+90     	; 0x3d62 <_serial_call_back+0xb4>
    3d08:	83 e0       	ldi	r24, 0x03	; 3
    3d0a:	80 93 e0 18 	sts	0x18E0, r24	; 0x8018e0 <_mh_state>
    3d0e:	08 95       	ret
    3d10:	90 91 dc 18 	lds	r25, 0x18DC	; 0x8018dc <inDex.1939>
    3d14:	21 e0       	ldi	r18, 0x01	; 1
    3d16:	29 0f       	add	r18, r25
    3d18:	20 93 dc 18 	sts	0x18DC, r18	; 0x8018dc <inDex.1939>
    3d1c:	96 30       	cpi	r25, 0x06	; 6
    3d1e:	09 f5       	brne	.+66     	; 0x3d62 <_serial_call_back+0xb4>
    3d20:	81 11       	cpse	r24, r1
    3d22:	0e c0       	rjmp	.+28     	; 0x3d40 <_serial_call_back+0x92>
    3d24:	ea ed       	ldi	r30, 0xDA	; 218
    3d26:	f8 e1       	ldi	r31, 0x18	; 24
    3d28:	80 81       	ld	r24, Z
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	98 2f       	mov	r25, r24
    3d2e:	88 27       	eor	r24, r24
    3d30:	21 81       	ldd	r18, Z+1	; 0x01
    3d32:	82 0f       	add	r24, r18
    3d34:	91 1d       	adc	r25, r1
    3d36:	90 93 e2 18 	sts	0x18E2, r25	; 0x8018e2 <_ppm+0x1>
    3d3a:	80 93 e1 18 	sts	0x18E1, r24	; 0x8018e1 <_ppm>
    3d3e:	04 c0       	rjmp	.+8      	; 0x3d48 <_serial_call_back+0x9a>
    3d40:	10 92 e2 18 	sts	0x18E2, r1	; 0x8018e2 <_ppm+0x1>
    3d44:	10 92 e1 18 	sts	0x18E1, r1	; 0x8018e1 <_ppm>
    3d48:	10 92 e0 18 	sts	0x18E0, r1	; 0x8018e0 <_mh_state>
    3d4c:	e0 91 de 18 	lds	r30, 0x18DE	; 0x8018de <_app_call_back>
    3d50:	f0 91 df 18 	lds	r31, 0x18DF	; 0x8018df <_app_call_back+0x1>
    3d54:	30 97       	sbiw	r30, 0x00	; 0
    3d56:	29 f0       	breq	.+10     	; 0x3d62 <_serial_call_back+0xb4>
    3d58:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <_ppm>
    3d5c:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <_ppm+0x1>
    3d60:	19 95       	eicall
    3d62:	08 95       	ret

00003d64 <mh_z19_create>:
    3d64:	8f 92       	push	r8
    3d66:	9f 92       	push	r9
    3d68:	af 92       	push	r10
    3d6a:	cf 92       	push	r12
    3d6c:	ef 92       	push	r14
    3d6e:	0f 93       	push	r16
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	eb 01       	movw	r28, r22
    3d76:	0f 2e       	mov	r0, r31
    3d78:	f7 e5       	ldi	r31, 0x57	; 87
    3d7a:	8f 2e       	mov	r8, r31
    3d7c:	fe e1       	ldi	r31, 0x1E	; 30
    3d7e:	9f 2e       	mov	r9, r31
    3d80:	f0 2d       	mov	r31, r0
    3d82:	68 94       	set
    3d84:	aa 24       	eor	r10, r10
    3d86:	a4 f8       	bld	r10, 4
    3d88:	68 94       	set
    3d8a:	cc 24       	eor	r12, r12
    3d8c:	c4 f8       	bld	r12, 4
    3d8e:	e1 2c       	mov	r14, r1
    3d90:	00 e0       	ldi	r16, 0x00	; 0
    3d92:	23 e0       	ldi	r18, 0x03	; 3
    3d94:	40 e8       	ldi	r20, 0x80	; 128
    3d96:	55 e2       	ldi	r21, 0x25	; 37
    3d98:	60 e0       	ldi	r22, 0x00	; 0
    3d9a:	70 e0       	ldi	r23, 0x00	; 0
    3d9c:	74 d0       	rcall	.+232    	; 0x3e86 <serial_new_instance>
    3d9e:	90 93 e4 18 	sts	0x18E4, r25	; 0x8018e4 <_serial+0x1>
    3da2:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <_serial>
    3da6:	d0 93 df 18 	sts	0x18DF, r29	; 0x8018df <_app_call_back+0x1>
    3daa:	c0 93 de 18 	sts	0x18DE, r28	; 0x8018de <_app_call_back>
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	0f 91       	pop	r16
    3db4:	ef 90       	pop	r14
    3db6:	cf 90       	pop	r12
    3db8:	af 90       	pop	r10
    3dba:	9f 90       	pop	r9
    3dbc:	8f 90       	pop	r8
    3dbe:	08 95       	ret

00003dc0 <mh_z19_take_meassuring>:
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	29 97       	sbiw	r28, 0x09	; 9
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	89 e0       	ldi	r24, 0x09	; 9
    3dd6:	e1 e4       	ldi	r30, 0x41	; 65
    3dd8:	f2 e0       	ldi	r31, 0x02	; 2
    3dda:	9e 01       	movw	r18, r28
    3ddc:	2f 5f       	subi	r18, 0xFF	; 255
    3dde:	3f 4f       	sbci	r19, 0xFF	; 255
    3de0:	d9 01       	movw	r26, r18
    3de2:	01 90       	ld	r0, Z+
    3de4:	0d 92       	st	X+, r0
    3de6:	8a 95       	dec	r24
    3de8:	e1 f7       	brne	.-8      	; 0x3de2 <mh_z19_take_meassuring+0x22>
    3dea:	10 92 e2 18 	sts	0x18E2, r1	; 0x8018e2 <_ppm+0x1>
    3dee:	10 92 e1 18 	sts	0x18E1, r1	; 0x8018e1 <_ppm>
    3df2:	80 91 e3 18 	lds	r24, 0x18E3	; 0x8018e3 <_serial>
    3df6:	90 91 e4 18 	lds	r25, 0x18E4	; 0x8018e4 <_serial+0x1>
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	31 f0       	breq	.+12     	; 0x3e0a <mh_z19_take_meassuring+0x4a>
    3dfe:	42 2f       	mov	r20, r18
    3e00:	53 2f       	mov	r21, r19
    3e02:	69 e0       	ldi	r22, 0x09	; 9
    3e04:	fc d0       	rcall	.+504    	; 0x3ffe <serial_send_bytes>
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	01 c0       	rjmp	.+2      	; 0x3e0c <mh_z19_take_meassuring+0x4c>
    3e0a:	82 e0       	ldi	r24, 0x02	; 2
    3e0c:	29 96       	adiw	r28, 0x09	; 9
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	08 95       	ret

00003e1e <rcServoSet>:
    3e1e:	65 36       	cpi	r22, 0x65	; 101
    3e20:	0c f0       	brlt	.+2      	; 0x3e24 <rcServoSet+0x6>
    3e22:	64 e6       	ldi	r22, 0x64	; 100
    3e24:	6c 39       	cpi	r22, 0x9C	; 156
    3e26:	0c f4       	brge	.+2      	; 0x3e2a <rcServoSet+0xc>
    3e28:	6c e9       	ldi	r22, 0x9C	; 156
    3e2a:	96 ef       	ldi	r25, 0xF6	; 246
    3e2c:	69 02       	muls	r22, r25
    3e2e:	b0 01       	movw	r22, r0
    3e30:	11 24       	eor	r1, r1
    3e32:	68 54       	subi	r22, 0x48	; 72
    3e34:	74 4f       	sbci	r23, 0xF4	; 244
    3e36:	81 11       	cpse	r24, r1
    3e38:	05 c0       	rjmp	.+10     	; 0x3e44 <rcServoSet+0x26>
    3e3a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    3e3e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    3e42:	08 95       	ret
    3e44:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    3e48:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    3e4c:	08 95       	ret

00003e4e <rcServoCreate>:
    3e4e:	ea e0       	ldi	r30, 0x0A	; 10
    3e50:	f1 e0       	ldi	r31, 0x01	; 1
    3e52:	80 81       	ld	r24, Z
    3e54:	88 61       	ori	r24, 0x18	; 24
    3e56:	80 83       	st	Z, r24
    3e58:	8f e3       	ldi	r24, 0x3F	; 63
    3e5a:	9c e9       	ldi	r25, 0x9C	; 156
    3e5c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    3e60:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	da df       	rcall	.-76     	; 0x3e1e <rcServoSet>
    3e6a:	60 e0       	ldi	r22, 0x00	; 0
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	d7 df       	rcall	.-82     	; 0x3e1e <rcServoSet>
    3e70:	e0 e2       	ldi	r30, 0x20	; 32
    3e72:	f1 e0       	ldi	r31, 0x01	; 1
    3e74:	80 81       	ld	r24, Z
    3e76:	82 6a       	ori	r24, 0xA2	; 162
    3e78:	80 83       	st	Z, r24
    3e7a:	e1 e2       	ldi	r30, 0x21	; 33
    3e7c:	f1 e0       	ldi	r31, 0x01	; 1
    3e7e:	80 81       	ld	r24, Z
    3e80:	8a 61       	ori	r24, 0x1A	; 26
    3e82:	80 83       	st	Z, r24
    3e84:	08 95       	ret

00003e86 <serial_new_instance>:
    3e86:	2f 92       	push	r2
    3e88:	3f 92       	push	r3
    3e8a:	4f 92       	push	r4
    3e8c:	5f 92       	push	r5
    3e8e:	6f 92       	push	r6
    3e90:	7f 92       	push	r7
    3e92:	8f 92       	push	r8
    3e94:	9f 92       	push	r9
    3e96:	af 92       	push	r10
    3e98:	cf 92       	push	r12
    3e9a:	ef 92       	push	r14
    3e9c:	ff 92       	push	r15
    3e9e:	0f 93       	push	r16
    3ea0:	1f 93       	push	r17
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	f8 2e       	mov	r15, r24
    3eac:	2a 01       	movw	r4, r20
    3eae:	3b 01       	movw	r6, r22
    3eb0:	88 e0       	ldi	r24, 0x08	; 8
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	4a d7       	rcall	.+3732   	; 0x4d4a <malloc>
    3eb6:	8c 01       	movw	r16, r24
    3eb8:	8f 2d       	mov	r24, r15
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	88 0f       	add	r24, r24
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	eb 51       	subi	r30, 0x1B	; 27
    3ec4:	f7 4e       	sbci	r31, 0xE7	; 231
    3ec6:	11 83       	std	Z+1, r17	; 0x01
    3ec8:	00 83       	st	Z, r16
    3eca:	fc 01       	movw	r30, r24
    3ecc:	e6 5f       	subi	r30, 0xF6	; 246
    3ece:	fd 4f       	sbci	r31, 0xFD	; 253
    3ed0:	80 81       	ld	r24, Z
    3ed2:	91 81       	ldd	r25, Z+1	; 0x01
    3ed4:	d8 01       	movw	r26, r16
    3ed6:	8d 93       	st	X+, r24
    3ed8:	9c 93       	st	X, r25
    3eda:	6c 2d       	mov	r22, r12
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	84 e0       	ldi	r24, 0x04	; 4
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	19 d7       	rcall	.+3634   	; 0x4d16 <calloc>
    3ee4:	1c 01       	movw	r2, r24
    3ee6:	61 e0       	ldi	r22, 0x01	; 1
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	86 e0       	ldi	r24, 0x06	; 6
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	13 d7       	rcall	.+3622   	; 0x4d16 <calloc>
    3ef0:	7c 01       	movw	r14, r24
    3ef2:	4c 2d       	mov	r20, r12
    3ef4:	b1 01       	movw	r22, r2
    3ef6:	2c d5       	rcall	.+2648   	; 0x4950 <fifo_init>
    3ef8:	f8 01       	movw	r30, r16
    3efa:	f5 82       	std	Z+5, r15	; 0x05
    3efc:	e4 82       	std	Z+4, r14	; 0x04
    3efe:	6a 2d       	mov	r22, r10
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	84 e0       	ldi	r24, 0x04	; 4
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	07 d7       	rcall	.+3598   	; 0x4d16 <calloc>
    3f08:	1c 01       	movw	r2, r24
    3f0a:	61 e0       	ldi	r22, 0x01	; 1
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	86 e0       	ldi	r24, 0x06	; 6
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	01 d7       	rcall	.+3586   	; 0x4d16 <calloc>
    3f14:	7c 01       	movw	r14, r24
    3f16:	4a 2d       	mov	r20, r10
    3f18:	b1 01       	movw	r22, r2
    3f1a:	1a d5       	rcall	.+2612   	; 0x4950 <fifo_init>
    3f1c:	d8 01       	movw	r26, r16
    3f1e:	13 96       	adiw	r26, 0x03	; 3
    3f20:	fc 92       	st	X, r15
    3f22:	ee 92       	st	-X, r14
    3f24:	12 97       	sbiw	r26, 0x02	; 2
    3f26:	17 96       	adiw	r26, 0x07	; 7
    3f28:	9c 92       	st	X, r9
    3f2a:	8e 92       	st	-X, r8
    3f2c:	16 97       	sbiw	r26, 0x06	; 6
    3f2e:	ff b6       	in	r15, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	ed 91       	ld	r30, X+
    3f34:	fc 91       	ld	r31, X
    3f36:	11 97       	sbiw	r26, 0x01	; 1
    3f38:	36 97       	sbiw	r30, 0x06	; 6
    3f3a:	80 81       	ld	r24, Z
    3f3c:	82 60       	ori	r24, 0x02	; 2
    3f3e:	80 83       	st	Z, r24
    3f40:	8d 90       	ld	r8, X+
    3f42:	9c 90       	ld	r9, X
    3f44:	c3 01       	movw	r24, r6
    3f46:	b2 01       	movw	r22, r4
    3f48:	f1 d5       	rcall	.+3042   	; 0x4b2c <__floatunsisf>
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	40 e0       	ldi	r20, 0x00	; 0
    3f50:	51 e4       	ldi	r21, 0x41	; 65
    3f52:	51 d6       	rcall	.+3234   	; 0x4bf6 <__mulsf3>
    3f54:	9b 01       	movw	r18, r22
    3f56:	ac 01       	movw	r20, r24
    3f58:	60 e0       	ldi	r22, 0x00	; 0
    3f5a:	74 e2       	ldi	r23, 0x24	; 36
    3f5c:	84 e7       	ldi	r24, 0x74	; 116
    3f5e:	9b e4       	ldi	r25, 0x4B	; 75
    3f60:	7a d5       	rcall	.+2804   	; 0x4a56 <__divsf3>
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	40 e8       	ldi	r20, 0x80	; 128
    3f68:	5f e3       	ldi	r21, 0x3F	; 63
    3f6a:	0e d5       	rcall	.+2588   	; 0x4988 <__subsf3>
    3f6c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__fixunssfsi>
    3f70:	f4 01       	movw	r30, r8
    3f72:	32 97       	sbiw	r30, 0x02	; 2
    3f74:	60 83       	st	Z, r22
    3f76:	d8 01       	movw	r26, r16
    3f78:	ed 91       	ld	r30, X+
    3f7a:	fc 91       	ld	r31, X
    3f7c:	11 97       	sbiw	r26, 0x01	; 1
    3f7e:	35 97       	sbiw	r30, 0x05	; 5
    3f80:	88 e9       	ldi	r24, 0x98	; 152
    3f82:	80 83       	st	Z, r24
    3f84:	ed 91       	ld	r30, X+
    3f86:	fc 91       	ld	r31, X
    3f88:	34 97       	sbiw	r30, 0x04	; 4
    3f8a:	86 e0       	ldi	r24, 0x06	; 6
    3f8c:	80 83       	st	Z, r24
    3f8e:	ff be       	out	0x3f, r15	; 63
    3f90:	c8 01       	movw	r24, r16
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	1f 91       	pop	r17
    3f98:	0f 91       	pop	r16
    3f9a:	ff 90       	pop	r15
    3f9c:	ef 90       	pop	r14
    3f9e:	cf 90       	pop	r12
    3fa0:	af 90       	pop	r10
    3fa2:	9f 90       	pop	r9
    3fa4:	8f 90       	pop	r8
    3fa6:	7f 90       	pop	r7
    3fa8:	6f 90       	pop	r6
    3faa:	5f 90       	pop	r5
    3fac:	4f 90       	pop	r4
    3fae:	3f 90       	pop	r3
    3fb0:	2f 90       	pop	r2
    3fb2:	08 95       	ret

00003fb4 <serial_send_byte>:
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	ec 01       	movw	r28, r24
    3fba:	ea 81       	ldd	r30, Y+2	; 0x02
    3fbc:	fb 81       	ldd	r31, Y+3	; 0x03
    3fbe:	93 81       	ldd	r25, Z+3	; 0x03
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	25 81       	ldd	r18, Z+5	; 0x05
    3fc4:	98 1b       	sub	r25, r24
    3fc6:	92 23       	and	r25, r18
    3fc8:	84 81       	ldd	r24, Z+4	; 0x04
    3fca:	98 17       	cp	r25, r24
    3fcc:	a1 f0       	breq	.+40     	; 0x3ff6 <serial_send_byte+0x42>
    3fce:	93 81       	ldd	r25, Z+3	; 0x03
    3fd0:	26 95       	lsr	r18
    3fd2:	29 23       	and	r18, r25
    3fd4:	a0 81       	ld	r26, Z
    3fd6:	b1 81       	ldd	r27, Z+1	; 0x01
    3fd8:	a2 0f       	add	r26, r18
    3fda:	b1 1d       	adc	r27, r1
    3fdc:	6c 93       	st	X, r22
    3fde:	9f 5f       	subi	r25, 0xFF	; 255
    3fe0:	25 81       	ldd	r18, Z+5	; 0x05
    3fe2:	92 23       	and	r25, r18
    3fe4:	93 83       	std	Z+3, r25	; 0x03
    3fe6:	e8 81       	ld	r30, Y
    3fe8:	f9 81       	ldd	r31, Y+1	; 0x01
    3fea:	35 97       	sbiw	r30, 0x05	; 5
    3fec:	80 81       	ld	r24, Z
    3fee:	80 62       	ori	r24, 0x20	; 32
    3ff0:	80 83       	st	Z, r24
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	01 c0       	rjmp	.+2      	; 0x3ff8 <serial_send_byte+0x44>
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <serial_send_bytes>:
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	7c 01       	movw	r14, r24
    400c:	dc 01       	movw	r26, r24
    400e:	12 96       	adiw	r26, 0x02	; 2
    4010:	ed 91       	ld	r30, X+
    4012:	fc 91       	ld	r31, X
    4014:	13 97       	sbiw	r26, 0x03	; 3
    4016:	93 81       	ldd	r25, Z+3	; 0x03
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	98 1b       	sub	r25, r24
    401c:	85 81       	ldd	r24, Z+5	; 0x05
    401e:	98 23       	and	r25, r24
    4020:	84 81       	ldd	r24, Z+4	; 0x04
    4022:	89 1b       	sub	r24, r25
    4024:	86 17       	cp	r24, r22
    4026:	98 f1       	brcs	.+102    	; 0x408e <serial_send_bytes+0x90>
    4028:	66 23       	and	r22, r22
    402a:	41 f1       	breq	.+80     	; 0x407c <serial_send_bytes+0x7e>
    402c:	84 2f       	mov	r24, r20
    402e:	95 2f       	mov	r25, r21
    4030:	dc 01       	movw	r26, r24
    4032:	61 50       	subi	r22, 0x01	; 1
    4034:	46 2f       	mov	r20, r22
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	4f 5f       	subi	r20, 0xFF	; 255
    403a:	5f 4f       	sbci	r21, 0xFF	; 255
    403c:	48 0f       	add	r20, r24
    403e:	59 1f       	adc	r21, r25
    4040:	e7 01       	movw	r28, r14
    4042:	ea 81       	ldd	r30, Y+2	; 0x02
    4044:	fb 81       	ldd	r31, Y+3	; 0x03
    4046:	93 81       	ldd	r25, Z+3	; 0x03
    4048:	82 81       	ldd	r24, Z+2	; 0x02
    404a:	25 81       	ldd	r18, Z+5	; 0x05
    404c:	98 1b       	sub	r25, r24
    404e:	92 23       	and	r25, r18
    4050:	84 81       	ldd	r24, Z+4	; 0x04
    4052:	98 17       	cp	r25, r24
    4054:	79 f0       	breq	.+30     	; 0x4074 <serial_send_bytes+0x76>
    4056:	8c 91       	ld	r24, X
    4058:	93 81       	ldd	r25, Z+3	; 0x03
    405a:	26 95       	lsr	r18
    405c:	29 23       	and	r18, r25
    405e:	60 81       	ld	r22, Z
    4060:	71 81       	ldd	r23, Z+1	; 0x01
    4062:	8b 01       	movw	r16, r22
    4064:	02 0f       	add	r16, r18
    4066:	11 1d       	adc	r17, r1
    4068:	e8 01       	movw	r28, r16
    406a:	88 83       	st	Y, r24
    406c:	9f 5f       	subi	r25, 0xFF	; 255
    406e:	85 81       	ldd	r24, Z+5	; 0x05
    4070:	98 23       	and	r25, r24
    4072:	93 83       	std	Z+3, r25	; 0x03
    4074:	11 96       	adiw	r26, 0x01	; 1
    4076:	a4 17       	cp	r26, r20
    4078:	b5 07       	cpc	r27, r21
    407a:	11 f7       	brne	.-60     	; 0x4040 <serial_send_bytes+0x42>
    407c:	d7 01       	movw	r26, r14
    407e:	ed 91       	ld	r30, X+
    4080:	fc 91       	ld	r31, X
    4082:	35 97       	sbiw	r30, 0x05	; 5
    4084:	80 81       	ld	r24, Z
    4086:	80 62       	ori	r24, 0x20	; 32
    4088:	80 83       	st	Z, r24
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	01 c0       	rjmp	.+2      	; 0x4090 <serial_send_bytes+0x92>
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	ff 90       	pop	r15
    409a:	ef 90       	pop	r14
    409c:	08 95       	ret

0000409e <serial_get_byte>:
    409e:	dc 01       	movw	r26, r24
    40a0:	14 96       	adiw	r26, 0x04	; 4
    40a2:	ed 91       	ld	r30, X+
    40a4:	fc 91       	ld	r31, X
    40a6:	15 97       	sbiw	r26, 0x05	; 5
    40a8:	93 81       	ldd	r25, Z+3	; 0x03
    40aa:	82 81       	ldd	r24, Z+2	; 0x02
    40ac:	98 17       	cp	r25, r24
    40ae:	89 f0       	breq	.+34     	; 0x40d2 <serial_get_byte+0x34>
    40b0:	92 81       	ldd	r25, Z+2	; 0x02
    40b2:	85 81       	ldd	r24, Z+5	; 0x05
    40b4:	86 95       	lsr	r24
    40b6:	89 23       	and	r24, r25
    40b8:	a0 81       	ld	r26, Z
    40ba:	b1 81       	ldd	r27, Z+1	; 0x01
    40bc:	a8 0f       	add	r26, r24
    40be:	b1 1d       	adc	r27, r1
    40c0:	8c 91       	ld	r24, X
    40c2:	db 01       	movw	r26, r22
    40c4:	8c 93       	st	X, r24
    40c6:	9f 5f       	subi	r25, 0xFF	; 255
    40c8:	85 81       	ldd	r24, Z+5	; 0x05
    40ca:	98 23       	and	r25, r24
    40cc:	92 83       	std	Z+2, r25	; 0x02
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	08 95       	ret
    40d2:	83 e0       	ldi	r24, 0x03	; 3
    40d4:	08 95       	ret

000040d6 <__vector_25>:
    40d6:	1f 92       	push	r1
    40d8:	0f 92       	push	r0
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	0f 92       	push	r0
    40de:	11 24       	eor	r1, r1
    40e0:	0b b6       	in	r0, 0x3b	; 59
    40e2:	0f 92       	push	r0
    40e4:	2f 93       	push	r18
    40e6:	3f 93       	push	r19
    40e8:	4f 93       	push	r20
    40ea:	5f 93       	push	r21
    40ec:	6f 93       	push	r22
    40ee:	7f 93       	push	r23
    40f0:	8f 93       	push	r24
    40f2:	9f 93       	push	r25
    40f4:	af 93       	push	r26
    40f6:	bf 93       	push	r27
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	ef 93       	push	r30
    40fe:	ff 93       	push	r31
    4100:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <_ser_handle>
    4104:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <_ser_handle+0x1>
    4108:	10 97       	sbiw	r26, 0x00	; 0
    410a:	11 f1       	breq	.+68     	; 0x4150 <__vector_25+0x7a>
    410c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4110:	14 96       	adiw	r26, 0x04	; 4
    4112:	ed 91       	ld	r30, X+
    4114:	fc 91       	ld	r31, X
    4116:	15 97       	sbiw	r26, 0x05	; 5
    4118:	93 81       	ldd	r25, Z+3	; 0x03
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	25 81       	ldd	r18, Z+5	; 0x05
    411e:	98 1b       	sub	r25, r24
    4120:	92 23       	and	r25, r18
    4122:	84 81       	ldd	r24, Z+4	; 0x04
    4124:	98 17       	cp	r25, r24
    4126:	61 f0       	breq	.+24     	; 0x4140 <__vector_25+0x6a>
    4128:	83 81       	ldd	r24, Z+3	; 0x03
    412a:	26 95       	lsr	r18
    412c:	28 23       	and	r18, r24
    412e:	c0 81       	ld	r28, Z
    4130:	d1 81       	ldd	r29, Z+1	; 0x01
    4132:	c2 0f       	add	r28, r18
    4134:	d1 1d       	adc	r29, r1
    4136:	68 83       	st	Y, r22
    4138:	8f 5f       	subi	r24, 0xFF	; 255
    413a:	95 81       	ldd	r25, Z+5	; 0x05
    413c:	89 23       	and	r24, r25
    413e:	83 83       	std	Z+3, r24	; 0x03
    4140:	16 96       	adiw	r26, 0x06	; 6
    4142:	ed 91       	ld	r30, X+
    4144:	fc 91       	ld	r31, X
    4146:	17 97       	sbiw	r26, 0x07	; 7
    4148:	30 97       	sbiw	r30, 0x00	; 0
    414a:	11 f0       	breq	.+4      	; 0x4150 <__vector_25+0x7a>
    414c:	cd 01       	movw	r24, r26
    414e:	19 95       	eicall
    4150:	ff 91       	pop	r31
    4152:	ef 91       	pop	r30
    4154:	df 91       	pop	r29
    4156:	cf 91       	pop	r28
    4158:	bf 91       	pop	r27
    415a:	af 91       	pop	r26
    415c:	9f 91       	pop	r25
    415e:	8f 91       	pop	r24
    4160:	7f 91       	pop	r23
    4162:	6f 91       	pop	r22
    4164:	5f 91       	pop	r21
    4166:	4f 91       	pop	r20
    4168:	3f 91       	pop	r19
    416a:	2f 91       	pop	r18
    416c:	0f 90       	pop	r0
    416e:	0b be       	out	0x3b, r0	; 59
    4170:	0f 90       	pop	r0
    4172:	0f be       	out	0x3f, r0	; 63
    4174:	0f 90       	pop	r0
    4176:	1f 90       	pop	r1
    4178:	18 95       	reti

0000417a <__vector_26>:
    417a:	1f 92       	push	r1
    417c:	0f 92       	push	r0
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	0f 92       	push	r0
    4182:	11 24       	eor	r1, r1
    4184:	0b b6       	in	r0, 0x3b	; 59
    4186:	0f 92       	push	r0
    4188:	2f 93       	push	r18
    418a:	8f 93       	push	r24
    418c:	9f 93       	push	r25
    418e:	af 93       	push	r26
    4190:	bf 93       	push	r27
    4192:	ef 93       	push	r30
    4194:	ff 93       	push	r31
    4196:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <_ser_handle>
    419a:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <_ser_handle+0x1>
    419e:	30 97       	sbiw	r30, 0x00	; 0
    41a0:	b9 f0       	breq	.+46     	; 0x41d0 <__vector_26+0x56>
    41a2:	02 80       	ldd	r0, Z+2	; 0x02
    41a4:	f3 81       	ldd	r31, Z+3	; 0x03
    41a6:	e0 2d       	mov	r30, r0
    41a8:	93 81       	ldd	r25, Z+3	; 0x03
    41aa:	82 81       	ldd	r24, Z+2	; 0x02
    41ac:	98 17       	cp	r25, r24
    41ae:	b1 f0       	breq	.+44     	; 0x41dc <__vector_26+0x62>
    41b0:	92 81       	ldd	r25, Z+2	; 0x02
    41b2:	85 81       	ldd	r24, Z+5	; 0x05
    41b4:	28 2f       	mov	r18, r24
    41b6:	26 95       	lsr	r18
    41b8:	29 23       	and	r18, r25
    41ba:	a0 81       	ld	r26, Z
    41bc:	b1 81       	ldd	r27, Z+1	; 0x01
    41be:	a2 0f       	add	r26, r18
    41c0:	b1 1d       	adc	r27, r1
    41c2:	2c 91       	ld	r18, X
    41c4:	9f 5f       	subi	r25, 0xFF	; 255
    41c6:	89 23       	and	r24, r25
    41c8:	82 83       	std	Z+2, r24	; 0x02
    41ca:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    41ce:	0b c0       	rjmp	.+22     	; 0x41e6 <__vector_26+0x6c>
    41d0:	e1 ec       	ldi	r30, 0xC1	; 193
    41d2:	f0 e0       	ldi	r31, 0x00	; 0
    41d4:	80 81       	ld	r24, Z
    41d6:	8f 7d       	andi	r24, 0xDF	; 223
    41d8:	80 83       	st	Z, r24
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <__vector_26+0x6c>
    41dc:	e1 ec       	ldi	r30, 0xC1	; 193
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	8f 7d       	andi	r24, 0xDF	; 223
    41e4:	80 83       	st	Z, r24
    41e6:	ff 91       	pop	r31
    41e8:	ef 91       	pop	r30
    41ea:	bf 91       	pop	r27
    41ec:	af 91       	pop	r26
    41ee:	9f 91       	pop	r25
    41f0:	8f 91       	pop	r24
    41f2:	2f 91       	pop	r18
    41f4:	0f 90       	pop	r0
    41f6:	0b be       	out	0x3b, r0	; 59
    41f8:	0f 90       	pop	r0
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	0f 90       	pop	r0
    41fe:	1f 90       	pop	r1
    4200:	18 95       	reti

00004202 <__vector_36>:
    4202:	1f 92       	push	r1
    4204:	0f 92       	push	r0
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	0f 92       	push	r0
    420a:	11 24       	eor	r1, r1
    420c:	0b b6       	in	r0, 0x3b	; 59
    420e:	0f 92       	push	r0
    4210:	2f 93       	push	r18
    4212:	3f 93       	push	r19
    4214:	4f 93       	push	r20
    4216:	5f 93       	push	r21
    4218:	6f 93       	push	r22
    421a:	7f 93       	push	r23
    421c:	8f 93       	push	r24
    421e:	9f 93       	push	r25
    4220:	af 93       	push	r26
    4222:	bf 93       	push	r27
    4224:	cf 93       	push	r28
    4226:	df 93       	push	r29
    4228:	ef 93       	push	r30
    422a:	ff 93       	push	r31
    422c:	a0 91 e7 18 	lds	r26, 0x18E7	; 0x8018e7 <_ser_handle+0x2>
    4230:	b0 91 e8 18 	lds	r27, 0x18E8	; 0x8018e8 <_ser_handle+0x3>
    4234:	10 97       	sbiw	r26, 0x00	; 0
    4236:	11 f1       	breq	.+68     	; 0x427c <__vector_36+0x7a>
    4238:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    423c:	14 96       	adiw	r26, 0x04	; 4
    423e:	ed 91       	ld	r30, X+
    4240:	fc 91       	ld	r31, X
    4242:	15 97       	sbiw	r26, 0x05	; 5
    4244:	93 81       	ldd	r25, Z+3	; 0x03
    4246:	82 81       	ldd	r24, Z+2	; 0x02
    4248:	25 81       	ldd	r18, Z+5	; 0x05
    424a:	98 1b       	sub	r25, r24
    424c:	92 23       	and	r25, r18
    424e:	84 81       	ldd	r24, Z+4	; 0x04
    4250:	98 17       	cp	r25, r24
    4252:	61 f0       	breq	.+24     	; 0x426c <__vector_36+0x6a>
    4254:	83 81       	ldd	r24, Z+3	; 0x03
    4256:	26 95       	lsr	r18
    4258:	28 23       	and	r18, r24
    425a:	c0 81       	ld	r28, Z
    425c:	d1 81       	ldd	r29, Z+1	; 0x01
    425e:	c2 0f       	add	r28, r18
    4260:	d1 1d       	adc	r29, r1
    4262:	68 83       	st	Y, r22
    4264:	8f 5f       	subi	r24, 0xFF	; 255
    4266:	95 81       	ldd	r25, Z+5	; 0x05
    4268:	89 23       	and	r24, r25
    426a:	83 83       	std	Z+3, r24	; 0x03
    426c:	16 96       	adiw	r26, 0x06	; 6
    426e:	ed 91       	ld	r30, X+
    4270:	fc 91       	ld	r31, X
    4272:	17 97       	sbiw	r26, 0x07	; 7
    4274:	30 97       	sbiw	r30, 0x00	; 0
    4276:	11 f0       	breq	.+4      	; 0x427c <__vector_36+0x7a>
    4278:	cd 01       	movw	r24, r26
    427a:	19 95       	eicall
    427c:	ff 91       	pop	r31
    427e:	ef 91       	pop	r30
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	bf 91       	pop	r27
    4286:	af 91       	pop	r26
    4288:	9f 91       	pop	r25
    428a:	8f 91       	pop	r24
    428c:	7f 91       	pop	r23
    428e:	6f 91       	pop	r22
    4290:	5f 91       	pop	r21
    4292:	4f 91       	pop	r20
    4294:	3f 91       	pop	r19
    4296:	2f 91       	pop	r18
    4298:	0f 90       	pop	r0
    429a:	0b be       	out	0x3b, r0	; 59
    429c:	0f 90       	pop	r0
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	0f 90       	pop	r0
    42a2:	1f 90       	pop	r1
    42a4:	18 95       	reti

000042a6 <__vector_37>:
    42a6:	1f 92       	push	r1
    42a8:	0f 92       	push	r0
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	0f 92       	push	r0
    42ae:	11 24       	eor	r1, r1
    42b0:	0b b6       	in	r0, 0x3b	; 59
    42b2:	0f 92       	push	r0
    42b4:	2f 93       	push	r18
    42b6:	8f 93       	push	r24
    42b8:	9f 93       	push	r25
    42ba:	af 93       	push	r26
    42bc:	bf 93       	push	r27
    42be:	ef 93       	push	r30
    42c0:	ff 93       	push	r31
    42c2:	e0 91 e7 18 	lds	r30, 0x18E7	; 0x8018e7 <_ser_handle+0x2>
    42c6:	f0 91 e8 18 	lds	r31, 0x18E8	; 0x8018e8 <_ser_handle+0x3>
    42ca:	30 97       	sbiw	r30, 0x00	; 0
    42cc:	b9 f0       	breq	.+46     	; 0x42fc <__vector_37+0x56>
    42ce:	02 80       	ldd	r0, Z+2	; 0x02
    42d0:	f3 81       	ldd	r31, Z+3	; 0x03
    42d2:	e0 2d       	mov	r30, r0
    42d4:	93 81       	ldd	r25, Z+3	; 0x03
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	98 17       	cp	r25, r24
    42da:	b1 f0       	breq	.+44     	; 0x4308 <__vector_37+0x62>
    42dc:	92 81       	ldd	r25, Z+2	; 0x02
    42de:	85 81       	ldd	r24, Z+5	; 0x05
    42e0:	28 2f       	mov	r18, r24
    42e2:	26 95       	lsr	r18
    42e4:	29 23       	and	r18, r25
    42e6:	a0 81       	ld	r26, Z
    42e8:	b1 81       	ldd	r27, Z+1	; 0x01
    42ea:	a2 0f       	add	r26, r18
    42ec:	b1 1d       	adc	r27, r1
    42ee:	2c 91       	ld	r18, X
    42f0:	9f 5f       	subi	r25, 0xFF	; 255
    42f2:	89 23       	and	r24, r25
    42f4:	82 83       	std	Z+2, r24	; 0x02
    42f6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    42fa:	0b c0       	rjmp	.+22     	; 0x4312 <__vector_37+0x6c>
    42fc:	e9 ec       	ldi	r30, 0xC9	; 201
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	8f 7d       	andi	r24, 0xDF	; 223
    4304:	80 83       	st	Z, r24
    4306:	05 c0       	rjmp	.+10     	; 0x4312 <__vector_37+0x6c>
    4308:	e9 ec       	ldi	r30, 0xC9	; 201
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	80 81       	ld	r24, Z
    430e:	8f 7d       	andi	r24, 0xDF	; 223
    4310:	80 83       	st	Z, r24
    4312:	ff 91       	pop	r31
    4314:	ef 91       	pop	r30
    4316:	bf 91       	pop	r27
    4318:	af 91       	pop	r26
    431a:	9f 91       	pop	r25
    431c:	8f 91       	pop	r24
    431e:	2f 91       	pop	r18
    4320:	0f 90       	pop	r0
    4322:	0b be       	out	0x3b, r0	; 59
    4324:	0f 90       	pop	r0
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	0f 90       	pop	r0
    432a:	1f 90       	pop	r1
    432c:	18 95       	reti

0000432e <__vector_51>:
    432e:	1f 92       	push	r1
    4330:	0f 92       	push	r0
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	0f 92       	push	r0
    4336:	11 24       	eor	r1, r1
    4338:	0b b6       	in	r0, 0x3b	; 59
    433a:	0f 92       	push	r0
    433c:	2f 93       	push	r18
    433e:	3f 93       	push	r19
    4340:	4f 93       	push	r20
    4342:	5f 93       	push	r21
    4344:	6f 93       	push	r22
    4346:	7f 93       	push	r23
    4348:	8f 93       	push	r24
    434a:	9f 93       	push	r25
    434c:	af 93       	push	r26
    434e:	bf 93       	push	r27
    4350:	cf 93       	push	r28
    4352:	df 93       	push	r29
    4354:	ef 93       	push	r30
    4356:	ff 93       	push	r31
    4358:	a0 91 e9 18 	lds	r26, 0x18E9	; 0x8018e9 <_ser_handle+0x4>
    435c:	b0 91 ea 18 	lds	r27, 0x18EA	; 0x8018ea <_ser_handle+0x5>
    4360:	10 97       	sbiw	r26, 0x00	; 0
    4362:	11 f1       	breq	.+68     	; 0x43a8 <__vector_51+0x7a>
    4364:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4368:	14 96       	adiw	r26, 0x04	; 4
    436a:	ed 91       	ld	r30, X+
    436c:	fc 91       	ld	r31, X
    436e:	15 97       	sbiw	r26, 0x05	; 5
    4370:	93 81       	ldd	r25, Z+3	; 0x03
    4372:	82 81       	ldd	r24, Z+2	; 0x02
    4374:	25 81       	ldd	r18, Z+5	; 0x05
    4376:	98 1b       	sub	r25, r24
    4378:	92 23       	and	r25, r18
    437a:	84 81       	ldd	r24, Z+4	; 0x04
    437c:	98 17       	cp	r25, r24
    437e:	61 f0       	breq	.+24     	; 0x4398 <__vector_51+0x6a>
    4380:	83 81       	ldd	r24, Z+3	; 0x03
    4382:	26 95       	lsr	r18
    4384:	28 23       	and	r18, r24
    4386:	c0 81       	ld	r28, Z
    4388:	d1 81       	ldd	r29, Z+1	; 0x01
    438a:	c2 0f       	add	r28, r18
    438c:	d1 1d       	adc	r29, r1
    438e:	68 83       	st	Y, r22
    4390:	8f 5f       	subi	r24, 0xFF	; 255
    4392:	95 81       	ldd	r25, Z+5	; 0x05
    4394:	89 23       	and	r24, r25
    4396:	83 83       	std	Z+3, r24	; 0x03
    4398:	16 96       	adiw	r26, 0x06	; 6
    439a:	ed 91       	ld	r30, X+
    439c:	fc 91       	ld	r31, X
    439e:	17 97       	sbiw	r26, 0x07	; 7
    43a0:	30 97       	sbiw	r30, 0x00	; 0
    43a2:	11 f0       	breq	.+4      	; 0x43a8 <__vector_51+0x7a>
    43a4:	cd 01       	movw	r24, r26
    43a6:	19 95       	eicall
    43a8:	ff 91       	pop	r31
    43aa:	ef 91       	pop	r30
    43ac:	df 91       	pop	r29
    43ae:	cf 91       	pop	r28
    43b0:	bf 91       	pop	r27
    43b2:	af 91       	pop	r26
    43b4:	9f 91       	pop	r25
    43b6:	8f 91       	pop	r24
    43b8:	7f 91       	pop	r23
    43ba:	6f 91       	pop	r22
    43bc:	5f 91       	pop	r21
    43be:	4f 91       	pop	r20
    43c0:	3f 91       	pop	r19
    43c2:	2f 91       	pop	r18
    43c4:	0f 90       	pop	r0
    43c6:	0b be       	out	0x3b, r0	; 59
    43c8:	0f 90       	pop	r0
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	0f 90       	pop	r0
    43ce:	1f 90       	pop	r1
    43d0:	18 95       	reti

000043d2 <__vector_52>:
    43d2:	1f 92       	push	r1
    43d4:	0f 92       	push	r0
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	0f 92       	push	r0
    43da:	11 24       	eor	r1, r1
    43dc:	0b b6       	in	r0, 0x3b	; 59
    43de:	0f 92       	push	r0
    43e0:	2f 93       	push	r18
    43e2:	8f 93       	push	r24
    43e4:	9f 93       	push	r25
    43e6:	af 93       	push	r26
    43e8:	bf 93       	push	r27
    43ea:	ef 93       	push	r30
    43ec:	ff 93       	push	r31
    43ee:	e0 91 e9 18 	lds	r30, 0x18E9	; 0x8018e9 <_ser_handle+0x4>
    43f2:	f0 91 ea 18 	lds	r31, 0x18EA	; 0x8018ea <_ser_handle+0x5>
    43f6:	30 97       	sbiw	r30, 0x00	; 0
    43f8:	b9 f0       	breq	.+46     	; 0x4428 <__vector_52+0x56>
    43fa:	02 80       	ldd	r0, Z+2	; 0x02
    43fc:	f3 81       	ldd	r31, Z+3	; 0x03
    43fe:	e0 2d       	mov	r30, r0
    4400:	93 81       	ldd	r25, Z+3	; 0x03
    4402:	82 81       	ldd	r24, Z+2	; 0x02
    4404:	98 17       	cp	r25, r24
    4406:	b1 f0       	breq	.+44     	; 0x4434 <__vector_52+0x62>
    4408:	92 81       	ldd	r25, Z+2	; 0x02
    440a:	85 81       	ldd	r24, Z+5	; 0x05
    440c:	28 2f       	mov	r18, r24
    440e:	26 95       	lsr	r18
    4410:	29 23       	and	r18, r25
    4412:	a0 81       	ld	r26, Z
    4414:	b1 81       	ldd	r27, Z+1	; 0x01
    4416:	a2 0f       	add	r26, r18
    4418:	b1 1d       	adc	r27, r1
    441a:	2c 91       	ld	r18, X
    441c:	9f 5f       	subi	r25, 0xFF	; 255
    441e:	89 23       	and	r24, r25
    4420:	82 83       	std	Z+2, r24	; 0x02
    4422:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4426:	0b c0       	rjmp	.+22     	; 0x443e <__vector_52+0x6c>
    4428:	e1 ed       	ldi	r30, 0xD1	; 209
    442a:	f0 e0       	ldi	r31, 0x00	; 0
    442c:	80 81       	ld	r24, Z
    442e:	8f 7d       	andi	r24, 0xDF	; 223
    4430:	80 83       	st	Z, r24
    4432:	05 c0       	rjmp	.+10     	; 0x443e <__vector_52+0x6c>
    4434:	e1 ed       	ldi	r30, 0xD1	; 209
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	80 81       	ld	r24, Z
    443a:	8f 7d       	andi	r24, 0xDF	; 223
    443c:	80 83       	st	Z, r24
    443e:	ff 91       	pop	r31
    4440:	ef 91       	pop	r30
    4442:	bf 91       	pop	r27
    4444:	af 91       	pop	r26
    4446:	9f 91       	pop	r25
    4448:	8f 91       	pop	r24
    444a:	2f 91       	pop	r18
    444c:	0f 90       	pop	r0
    444e:	0b be       	out	0x3b, r0	; 59
    4450:	0f 90       	pop	r0
    4452:	0f be       	out	0x3f, r0	; 63
    4454:	0f 90       	pop	r0
    4456:	1f 90       	pop	r1
    4458:	18 95       	reti

0000445a <__vector_54>:
    445a:	1f 92       	push	r1
    445c:	0f 92       	push	r0
    445e:	0f b6       	in	r0, 0x3f	; 63
    4460:	0f 92       	push	r0
    4462:	11 24       	eor	r1, r1
    4464:	0b b6       	in	r0, 0x3b	; 59
    4466:	0f 92       	push	r0
    4468:	2f 93       	push	r18
    446a:	3f 93       	push	r19
    446c:	4f 93       	push	r20
    446e:	5f 93       	push	r21
    4470:	6f 93       	push	r22
    4472:	7f 93       	push	r23
    4474:	8f 93       	push	r24
    4476:	9f 93       	push	r25
    4478:	af 93       	push	r26
    447a:	bf 93       	push	r27
    447c:	cf 93       	push	r28
    447e:	df 93       	push	r29
    4480:	ef 93       	push	r30
    4482:	ff 93       	push	r31
    4484:	a0 91 eb 18 	lds	r26, 0x18EB	; 0x8018eb <_ser_handle+0x6>
    4488:	b0 91 ec 18 	lds	r27, 0x18EC	; 0x8018ec <_ser_handle+0x7>
    448c:	10 97       	sbiw	r26, 0x00	; 0
    448e:	11 f1       	breq	.+68     	; 0x44d4 <__vector_54+0x7a>
    4490:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4494:	14 96       	adiw	r26, 0x04	; 4
    4496:	ed 91       	ld	r30, X+
    4498:	fc 91       	ld	r31, X
    449a:	15 97       	sbiw	r26, 0x05	; 5
    449c:	93 81       	ldd	r25, Z+3	; 0x03
    449e:	82 81       	ldd	r24, Z+2	; 0x02
    44a0:	25 81       	ldd	r18, Z+5	; 0x05
    44a2:	98 1b       	sub	r25, r24
    44a4:	92 23       	and	r25, r18
    44a6:	84 81       	ldd	r24, Z+4	; 0x04
    44a8:	98 17       	cp	r25, r24
    44aa:	61 f0       	breq	.+24     	; 0x44c4 <__vector_54+0x6a>
    44ac:	83 81       	ldd	r24, Z+3	; 0x03
    44ae:	26 95       	lsr	r18
    44b0:	28 23       	and	r18, r24
    44b2:	c0 81       	ld	r28, Z
    44b4:	d1 81       	ldd	r29, Z+1	; 0x01
    44b6:	c2 0f       	add	r28, r18
    44b8:	d1 1d       	adc	r29, r1
    44ba:	68 83       	st	Y, r22
    44bc:	8f 5f       	subi	r24, 0xFF	; 255
    44be:	95 81       	ldd	r25, Z+5	; 0x05
    44c0:	89 23       	and	r24, r25
    44c2:	83 83       	std	Z+3, r24	; 0x03
    44c4:	16 96       	adiw	r26, 0x06	; 6
    44c6:	ed 91       	ld	r30, X+
    44c8:	fc 91       	ld	r31, X
    44ca:	17 97       	sbiw	r26, 0x07	; 7
    44cc:	30 97       	sbiw	r30, 0x00	; 0
    44ce:	11 f0       	breq	.+4      	; 0x44d4 <__vector_54+0x7a>
    44d0:	cd 01       	movw	r24, r26
    44d2:	19 95       	eicall
    44d4:	ff 91       	pop	r31
    44d6:	ef 91       	pop	r30
    44d8:	df 91       	pop	r29
    44da:	cf 91       	pop	r28
    44dc:	bf 91       	pop	r27
    44de:	af 91       	pop	r26
    44e0:	9f 91       	pop	r25
    44e2:	8f 91       	pop	r24
    44e4:	7f 91       	pop	r23
    44e6:	6f 91       	pop	r22
    44e8:	5f 91       	pop	r21
    44ea:	4f 91       	pop	r20
    44ec:	3f 91       	pop	r19
    44ee:	2f 91       	pop	r18
    44f0:	0f 90       	pop	r0
    44f2:	0b be       	out	0x3b, r0	; 59
    44f4:	0f 90       	pop	r0
    44f6:	0f be       	out	0x3f, r0	; 63
    44f8:	0f 90       	pop	r0
    44fa:	1f 90       	pop	r1
    44fc:	18 95       	reti

000044fe <__vector_55>:
    44fe:	1f 92       	push	r1
    4500:	0f 92       	push	r0
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	0f 92       	push	r0
    4506:	11 24       	eor	r1, r1
    4508:	0b b6       	in	r0, 0x3b	; 59
    450a:	0f 92       	push	r0
    450c:	2f 93       	push	r18
    450e:	8f 93       	push	r24
    4510:	9f 93       	push	r25
    4512:	af 93       	push	r26
    4514:	bf 93       	push	r27
    4516:	ef 93       	push	r30
    4518:	ff 93       	push	r31
    451a:	e0 91 eb 18 	lds	r30, 0x18EB	; 0x8018eb <_ser_handle+0x6>
    451e:	f0 91 ec 18 	lds	r31, 0x18EC	; 0x8018ec <_ser_handle+0x7>
    4522:	30 97       	sbiw	r30, 0x00	; 0
    4524:	b9 f0       	breq	.+46     	; 0x4554 <__vector_55+0x56>
    4526:	02 80       	ldd	r0, Z+2	; 0x02
    4528:	f3 81       	ldd	r31, Z+3	; 0x03
    452a:	e0 2d       	mov	r30, r0
    452c:	93 81       	ldd	r25, Z+3	; 0x03
    452e:	82 81       	ldd	r24, Z+2	; 0x02
    4530:	98 17       	cp	r25, r24
    4532:	b1 f0       	breq	.+44     	; 0x4560 <__vector_55+0x62>
    4534:	92 81       	ldd	r25, Z+2	; 0x02
    4536:	85 81       	ldd	r24, Z+5	; 0x05
    4538:	28 2f       	mov	r18, r24
    453a:	26 95       	lsr	r18
    453c:	29 23       	and	r18, r25
    453e:	a0 81       	ld	r26, Z
    4540:	b1 81       	ldd	r27, Z+1	; 0x01
    4542:	a2 0f       	add	r26, r18
    4544:	b1 1d       	adc	r27, r1
    4546:	2c 91       	ld	r18, X
    4548:	9f 5f       	subi	r25, 0xFF	; 255
    454a:	89 23       	and	r24, r25
    454c:	82 83       	std	Z+2, r24	; 0x02
    454e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4552:	0b c0       	rjmp	.+22     	; 0x456a <__vector_55+0x6c>
    4554:	e1 e3       	ldi	r30, 0x31	; 49
    4556:	f1 e0       	ldi	r31, 0x01	; 1
    4558:	80 81       	ld	r24, Z
    455a:	8f 7d       	andi	r24, 0xDF	; 223
    455c:	80 83       	st	Z, r24
    455e:	05 c0       	rjmp	.+10     	; 0x456a <__vector_55+0x6c>
    4560:	e1 e3       	ldi	r30, 0x31	; 49
    4562:	f1 e0       	ldi	r31, 0x01	; 1
    4564:	80 81       	ld	r24, Z
    4566:	8f 7d       	andi	r24, 0xDF	; 223
    4568:	80 83       	st	Z, r24
    456a:	ff 91       	pop	r31
    456c:	ef 91       	pop	r30
    456e:	bf 91       	pop	r27
    4570:	af 91       	pop	r26
    4572:	9f 91       	pop	r25
    4574:	8f 91       	pop	r24
    4576:	2f 91       	pop	r18
    4578:	0f 90       	pop	r0
    457a:	0b be       	out	0x3b, r0	; 59
    457c:	0f 90       	pop	r0
    457e:	0f be       	out	0x3f, r0	; 63
    4580:	0f 90       	pop	r0
    4582:	1f 90       	pop	r1
    4584:	18 95       	reti

00004586 <usart_getchar>:
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	1f 92       	push	r1
    458c:	cd b7       	in	r28, 0x3d	; 61
    458e:	de b7       	in	r29, 0x3e	; 62
    4590:	be 01       	movw	r22, r28
    4592:	6f 5f       	subi	r22, 0xFF	; 255
    4594:	7f 4f       	sbci	r23, 0xFF	; 255
    4596:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <_com_serial_instance>
    459a:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <_com_serial_instance+0x1>
    459e:	7f dd       	rcall	.-1282   	; 0x409e <serial_get_byte>
    45a0:	81 11       	cpse	r24, r1
    45a2:	f6 cf       	rjmp	.-20     	; 0x4590 <usart_getchar+0xa>
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	0f 90       	pop	r0
    45aa:	df 91       	pop	r29
    45ac:	cf 91       	pop	r28
    45ae:	08 95       	ret

000045b0 <usart_putchar>:
    45b0:	68 2f       	mov	r22, r24
    45b2:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <_com_serial_instance>
    45b6:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <_com_serial_instance+0x1>
    45ba:	fc dc       	rcall	.-1544   	; 0x3fb4 <serial_send_byte>
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	08 95       	ret

000045c2 <stdioCreate>:
    45c2:	8f 92       	push	r8
    45c4:	9f 92       	push	r9
    45c6:	af 92       	push	r10
    45c8:	cf 92       	push	r12
    45ca:	ef 92       	push	r14
    45cc:	0f 93       	push	r16
    45ce:	81 2c       	mov	r8, r1
    45d0:	91 2c       	mov	r9, r1
    45d2:	68 94       	set
    45d4:	aa 24       	eor	r10, r10
    45d6:	a7 f8       	bld	r10, 7
    45d8:	68 94       	set
    45da:	cc 24       	eor	r12, r12
    45dc:	c7 f8       	bld	r12, 7
    45de:	e1 2c       	mov	r14, r1
    45e0:	00 e0       	ldi	r16, 0x00	; 0
    45e2:	23 e0       	ldi	r18, 0x03	; 3
    45e4:	40 e0       	ldi	r20, 0x00	; 0
    45e6:	51 ee       	ldi	r21, 0xE1	; 225
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	70 e0       	ldi	r23, 0x00	; 0
    45ec:	4c dc       	rcall	.-1896   	; 0x3e86 <serial_new_instance>
    45ee:	90 93 ee 18 	sts	0x18EE, r25	; 0x8018ee <_com_serial_instance+0x1>
    45f2:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <_com_serial_instance>
    45f6:	e0 e4       	ldi	r30, 0x40	; 64
    45f8:	f9 e1       	ldi	r31, 0x19	; 25
    45fa:	82 e1       	ldi	r24, 0x12	; 18
    45fc:	92 e0       	ldi	r25, 0x02	; 2
    45fe:	91 83       	std	Z+1, r25	; 0x01
    4600:	80 83       	st	Z, r24
    4602:	93 83       	std	Z+3, r25	; 0x03
    4604:	82 83       	std	Z+2, r24	; 0x02
    4606:	0f 91       	pop	r16
    4608:	ef 90       	pop	r14
    460a:	cf 90       	pop	r12
    460c:	af 90       	pop	r10
    460e:	9f 90       	pop	r9
    4610:	8f 90       	pop	r8
    4612:	08 95       	ret

00004614 <_initTwiInterface>:
    4614:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <_twiIsInitiated>
    4618:	81 11       	cpse	r24, r1
    461a:	0c c0       	rjmp	.+24     	; 0x4634 <_initTwiInterface+0x20>
    461c:	8c e0       	ldi	r24, 0x0C	; 12
    461e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4622:	8f ef       	ldi	r24, 0xFF	; 255
    4624:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4628:	84 e0       	ldi	r24, 0x04	; 4
    462a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <_twiIsInitiated>
    4634:	08 95       	ret

00004636 <twiCreate>:
    4636:	af 92       	push	r10
    4638:	bf 92       	push	r11
    463a:	cf 92       	push	r12
    463c:	df 92       	push	r13
    463e:	ef 92       	push	r14
    4640:	ff 92       	push	r15
    4642:	0f 93       	push	r16
    4644:	1f 93       	push	r17
    4646:	cf 93       	push	r28
    4648:	df 93       	push	r29
    464a:	a8 2e       	mov	r10, r24
    464c:	b6 2e       	mov	r11, r22
    464e:	69 01       	movw	r12, r18
    4650:	7a 01       	movw	r14, r20
    4652:	84 e0       	ldi	r24, 0x04	; 4
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	79 d3       	rcall	.+1778   	; 0x4d4a <malloc>
    4658:	ec 01       	movw	r28, r24
    465a:	89 2b       	or	r24, r25
    465c:	61 f1       	breq	.+88     	; 0x46b6 <twiCreate+0x80>
    465e:	a8 82       	st	Y, r10
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	b8 12       	cpse	r11, r24
    4664:	12 c0       	rjmp	.+36     	; 0x468a <twiCreate+0x54>
    4666:	c7 01       	movw	r24, r14
    4668:	b6 01       	movw	r22, r12
    466a:	20 ea       	ldi	r18, 0xA0	; 160
    466c:	36 e8       	ldi	r19, 0x86	; 134
    466e:	41 e0       	ldi	r20, 0x01	; 1
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	27 d3       	rcall	.+1614   	; 0x4cc2 <__udivmodsi4>
    4674:	da 01       	movw	r26, r20
    4676:	c9 01       	movw	r24, r18
    4678:	40 97       	sbiw	r24, 0x10	; 16
    467a:	a1 09       	sbc	r26, r1
    467c:	b1 09       	sbc	r27, r1
    467e:	b6 95       	lsr	r27
    4680:	a7 95       	ror	r26
    4682:	97 95       	ror	r25
    4684:	87 95       	ror	r24
    4686:	89 83       	std	Y+1, r24	; 0x01
    4688:	11 c0       	rjmp	.+34     	; 0x46ac <twiCreate+0x76>
    468a:	c7 01       	movw	r24, r14
    468c:	b6 01       	movw	r22, r12
    468e:	20 e8       	ldi	r18, 0x80	; 128
    4690:	3a e1       	ldi	r19, 0x1A	; 26
    4692:	46 e0       	ldi	r20, 0x06	; 6
    4694:	50 e0       	ldi	r21, 0x00	; 0
    4696:	15 d3       	rcall	.+1578   	; 0x4cc2 <__udivmodsi4>
    4698:	da 01       	movw	r26, r20
    469a:	c9 01       	movw	r24, r18
    469c:	40 97       	sbiw	r24, 0x10	; 16
    469e:	a1 09       	sbc	r26, r1
    46a0:	b1 09       	sbc	r27, r1
    46a2:	b6 95       	lsr	r27
    46a4:	a7 95       	ror	r26
    46a6:	97 95       	ror	r25
    46a8:	87 95       	ror	r24
    46aa:	89 83       	std	Y+1, r24	; 0x01
    46ac:	1b 83       	std	Y+3, r17	; 0x03
    46ae:	0a 83       	std	Y+2, r16	; 0x02
    46b0:	8c 2f       	mov	r24, r28
    46b2:	9d 2f       	mov	r25, r29
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <twiCreate+0x84>
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	df 91       	pop	r29
    46bc:	cf 91       	pop	r28
    46be:	1f 91       	pop	r17
    46c0:	0f 91       	pop	r16
    46c2:	ff 90       	pop	r15
    46c4:	ef 90       	pop	r14
    46c6:	df 90       	pop	r13
    46c8:	cf 90       	pop	r12
    46ca:	bf 90       	pop	r11
    46cc:	af 90       	pop	r10
    46ce:	08 95       	ret

000046d0 <twiIsBusy>:
    46d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46d4:	81 70       	andi	r24, 0x01	; 1
    46d6:	08 95       	ret

000046d8 <twiTransmit>:
    46d8:	ff 92       	push	r15
    46da:	0f 93       	push	r16
    46dc:	1f 93       	push	r17
    46de:	cf 93       	push	r28
    46e0:	df 93       	push	r29
    46e2:	00 97       	sbiw	r24, 0x00	; 0
    46e4:	d1 f1       	breq	.+116    	; 0x475a <twiTransmit+0x82>
    46e6:	4a 30       	cpi	r20, 0x0A	; 10
    46e8:	d0 f5       	brcc	.+116    	; 0x475e <twiTransmit+0x86>
    46ea:	f4 2e       	mov	r15, r20
    46ec:	8b 01       	movw	r16, r22
    46ee:	ec 01       	movw	r28, r24
    46f0:	ef df       	rcall	.-34     	; 0x46d0 <twiIsBusy>
    46f2:	81 11       	cpse	r24, r1
    46f4:	36 c0       	rjmp	.+108    	; 0x4762 <twiTransmit+0x8a>
    46f6:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <_twiCurrentHandler>
    46fa:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <_twiCurrentHandler+0x1>
    46fe:	c8 17       	cp	r28, r24
    4700:	d9 07       	cpc	r29, r25
    4702:	41 f0       	breq	.+16     	; 0x4714 <twiTransmit+0x3c>
    4704:	87 df       	rcall	.-242    	; 0x4614 <_initTwiInterface>
    4706:	89 81       	ldd	r24, Y+1	; 0x01
    4708:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    470c:	d0 93 f1 18 	sts	0x18F1, r29	; 0x8018f1 <_twiCurrentHandler+0x1>
    4710:	c0 93 f0 18 	sts	0x18F0, r28	; 0x8018f0 <_twiCurrentHandler>
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	8f 0d       	add	r24, r15
    4718:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <_twiMessageLen>
    471c:	88 81       	ld	r24, Y
    471e:	88 0f       	add	r24, r24
    4720:	80 93 f3 18 	sts	0x18F3, r24	; 0x8018f3 <_twiMessageBuffer>
    4724:	ff 20       	and	r15, r15
    4726:	89 f0       	breq	.+34     	; 0x474a <twiTransmit+0x72>
    4728:	f8 01       	movw	r30, r16
    472a:	a4 ef       	ldi	r26, 0xF4	; 244
    472c:	b8 e1       	ldi	r27, 0x18	; 24
    472e:	4f ef       	ldi	r20, 0xFF	; 255
    4730:	4f 0d       	add	r20, r15
    4732:	64 2f       	mov	r22, r20
    4734:	70 e0       	ldi	r23, 0x00	; 0
    4736:	cb 01       	movw	r24, r22
    4738:	01 96       	adiw	r24, 0x01	; 1
    473a:	b8 01       	movw	r22, r16
    473c:	68 0f       	add	r22, r24
    473e:	79 1f       	adc	r23, r25
    4740:	81 91       	ld	r24, Z+
    4742:	8d 93       	st	X+, r24
    4744:	e6 17       	cp	r30, r22
    4746:	f7 07       	cpc	r31, r23
    4748:	d9 f7       	brne	.-10     	; 0x4740 <twiTransmit+0x68>
    474a:	88 ef       	ldi	r24, 0xF8	; 248
    474c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4750:	85 ea       	ldi	r24, 0xA5	; 165
    4752:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4756:	84 e0       	ldi	r24, 0x04	; 4
    4758:	05 c0       	rjmp	.+10     	; 0x4764 <twiTransmit+0x8c>
    475a:	86 e0       	ldi	r24, 0x06	; 6
    475c:	03 c0       	rjmp	.+6      	; 0x4764 <twiTransmit+0x8c>
    475e:	87 e0       	ldi	r24, 0x07	; 7
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <twiTransmit+0x8c>
    4762:	82 e0       	ldi	r24, 0x02	; 2
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	1f 91       	pop	r17
    476a:	0f 91       	pop	r16
    476c:	ff 90       	pop	r15
    476e:	08 95       	ret

00004770 <twiReceive>:
    4770:	1f 93       	push	r17
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	00 97       	sbiw	r24, 0x00	; 0
    4778:	29 f1       	breq	.+74     	; 0x47c4 <twiReceive+0x54>
    477a:	6b 30       	cpi	r22, 0x0B	; 11
    477c:	28 f5       	brcc	.+74     	; 0x47c8 <twiReceive+0x58>
    477e:	16 2f       	mov	r17, r22
    4780:	ec 01       	movw	r28, r24
    4782:	a6 df       	rcall	.-180    	; 0x46d0 <twiIsBusy>
    4784:	81 11       	cpse	r24, r1
    4786:	22 c0       	rjmp	.+68     	; 0x47cc <twiReceive+0x5c>
    4788:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <_twiCurrentHandler>
    478c:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <_twiCurrentHandler+0x1>
    4790:	c8 17       	cp	r28, r24
    4792:	d9 07       	cpc	r29, r25
    4794:	41 f0       	breq	.+16     	; 0x47a6 <twiReceive+0x36>
    4796:	3e df       	rcall	.-388    	; 0x4614 <_initTwiInterface>
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    479e:	d0 93 f1 18 	sts	0x18F1, r29	; 0x8018f1 <_twiCurrentHandler+0x1>
    47a2:	c0 93 f0 18 	sts	0x18F0, r28	; 0x8018f0 <_twiCurrentHandler>
    47a6:	10 93 f2 18 	sts	0x18F2, r17	; 0x8018f2 <_twiMessageLen>
    47aa:	88 81       	ld	r24, Y
    47ac:	88 0f       	add	r24, r24
    47ae:	81 60       	ori	r24, 0x01	; 1
    47b0:	80 93 f3 18 	sts	0x18F3, r24	; 0x8018f3 <_twiMessageBuffer>
    47b4:	88 ef       	ldi	r24, 0xF8	; 248
    47b6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    47ba:	85 ea       	ldi	r24, 0xA5	; 165
    47bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    47c0:	85 e0       	ldi	r24, 0x05	; 5
    47c2:	05 c0       	rjmp	.+10     	; 0x47ce <twiReceive+0x5e>
    47c4:	86 e0       	ldi	r24, 0x06	; 6
    47c6:	03 c0       	rjmp	.+6      	; 0x47ce <twiReceive+0x5e>
    47c8:	87 e0       	ldi	r24, 0x07	; 7
    47ca:	01 c0       	rjmp	.+2      	; 0x47ce <twiReceive+0x5e>
    47cc:	82 e0       	ldi	r24, 0x02	; 2
    47ce:	df 91       	pop	r29
    47d0:	cf 91       	pop	r28
    47d2:	1f 91       	pop	r17
    47d4:	08 95       	ret

000047d6 <__vector_39>:
    47d6:	1f 92       	push	r1
    47d8:	0f 92       	push	r0
    47da:	0f b6       	in	r0, 0x3f	; 63
    47dc:	0f 92       	push	r0
    47de:	11 24       	eor	r1, r1
    47e0:	0b b6       	in	r0, 0x3b	; 59
    47e2:	0f 92       	push	r0
    47e4:	2f 93       	push	r18
    47e6:	3f 93       	push	r19
    47e8:	4f 93       	push	r20
    47ea:	5f 93       	push	r21
    47ec:	6f 93       	push	r22
    47ee:	7f 93       	push	r23
    47f0:	8f 93       	push	r24
    47f2:	9f 93       	push	r25
    47f4:	af 93       	push	r26
    47f6:	bf 93       	push	r27
    47f8:	ef 93       	push	r30
    47fa:	ff 93       	push	r31
    47fc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4800:	8e 2f       	mov	r24, r30
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	fc 01       	movw	r30, r24
    4806:	38 97       	sbiw	r30, 0x08	; 8
    4808:	e1 35       	cpi	r30, 0x51	; 81
    480a:	f1 05       	cpc	r31, r1
    480c:	08 f0       	brcs	.+2      	; 0x4810 <__vector_39+0x3a>
    480e:	75 c0       	rjmp	.+234    	; 0x48fa <__vector_39+0x124>
    4810:	88 27       	eor	r24, r24
    4812:	e4 58       	subi	r30, 0x84	; 132
    4814:	ff 4f       	sbci	r31, 0xFF	; 255
    4816:	8f 4f       	sbci	r24, 0xFF	; 255
    4818:	76 c2       	rjmp	.+1260   	; 0x4d06 <__tablejump2__>
    481a:	10 92 ef 18 	sts	0x18EF, r1	; 0x8018ef <_index.1885>
    481e:	e0 91 ef 18 	lds	r30, 0x18EF	; 0x8018ef <_index.1885>
    4822:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <_twiMessageLen>
    4826:	e8 17       	cp	r30, r24
    4828:	70 f4       	brcc	.+28     	; 0x4846 <__vector_39+0x70>
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	8e 0f       	add	r24, r30
    482e:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <_index.1885>
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	ed 50       	subi	r30, 0x0D	; 13
    4836:	f7 4e       	sbci	r31, 0xE7	; 231
    4838:	80 81       	ld	r24, Z
    483a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    483e:	85 e8       	ldi	r24, 0x85	; 133
    4840:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4844:	72 c0       	rjmp	.+228    	; 0x492a <__vector_39+0x154>
    4846:	84 e9       	ldi	r24, 0x94	; 148
    4848:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    484c:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <_twiCurrentHandler>
    4850:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <_twiCurrentHandler+0x1>
    4854:	dc 01       	movw	r26, r24
    4856:	12 96       	adiw	r26, 0x02	; 2
    4858:	ed 91       	ld	r30, X+
    485a:	fc 91       	ld	r31, X
    485c:	13 97       	sbiw	r26, 0x03	; 3
    485e:	30 97       	sbiw	r30, 0x00	; 0
    4860:	09 f4       	brne	.+2      	; 0x4864 <__vector_39+0x8e>
    4862:	63 c0       	rjmp	.+198    	; 0x492a <__vector_39+0x154>
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	50 e0       	ldi	r21, 0x00	; 0
    486a:	64 e0       	ldi	r22, 0x04	; 4
    486c:	19 95       	eicall
    486e:	5d c0       	rjmp	.+186    	; 0x492a <__vector_39+0x154>
    4870:	e0 91 ef 18 	lds	r30, 0x18EF	; 0x8018ef <_index.1885>
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	8e 0f       	add	r24, r30
    4878:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <_index.1885>
    487c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	ed 50       	subi	r30, 0x0D	; 13
    4884:	f7 4e       	sbci	r31, 0xE7	; 231
    4886:	80 83       	st	Z, r24
    4888:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    488c:	80 34       	cpi	r24, 0x40	; 64
    488e:	11 f4       	brne	.+4      	; 0x4894 <__vector_39+0xbe>
    4890:	10 92 ef 18 	sts	0x18EF, r1	; 0x8018ef <_index.1885>
    4894:	20 91 ef 18 	lds	r18, 0x18EF	; 0x8018ef <_index.1885>
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <_twiMessageLen>
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	28 17       	cp	r18, r24
    48a4:	39 07       	cpc	r19, r25
    48a6:	24 f4       	brge	.+8      	; 0x48b0 <__vector_39+0xda>
    48a8:	85 ec       	ldi	r24, 0xC5	; 197
    48aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48ae:	3d c0       	rjmp	.+122    	; 0x492a <__vector_39+0x154>
    48b0:	85 e8       	ldi	r24, 0x85	; 133
    48b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48b6:	39 c0       	rjmp	.+114    	; 0x492a <__vector_39+0x154>
    48b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    48bc:	e0 91 ef 18 	lds	r30, 0x18EF	; 0x8018ef <_index.1885>
    48c0:	f0 e0       	ldi	r31, 0x00	; 0
    48c2:	ed 50       	subi	r30, 0x0D	; 13
    48c4:	f7 4e       	sbci	r31, 0xE7	; 231
    48c6:	80 83       	st	Z, r24
    48c8:	84 e9       	ldi	r24, 0x94	; 148
    48ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48ce:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <_twiCurrentHandler>
    48d2:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <_twiCurrentHandler+0x1>
    48d6:	dc 01       	movw	r26, r24
    48d8:	12 96       	adiw	r26, 0x02	; 2
    48da:	ed 91       	ld	r30, X+
    48dc:	fc 91       	ld	r31, X
    48de:	13 97       	sbiw	r26, 0x03	; 3
    48e0:	30 97       	sbiw	r30, 0x00	; 0
    48e2:	19 f1       	breq	.+70     	; 0x492a <__vector_39+0x154>
    48e4:	20 91 f2 18 	lds	r18, 0x18F2	; 0x8018f2 <_twiMessageLen>
    48e8:	43 ef       	ldi	r20, 0xF3	; 243
    48ea:	58 e1       	ldi	r21, 0x18	; 24
    48ec:	65 e0       	ldi	r22, 0x05	; 5
    48ee:	19 95       	eicall
    48f0:	1c c0       	rjmp	.+56     	; 0x492a <__vector_39+0x154>
    48f2:	85 ea       	ldi	r24, 0xA5	; 165
    48f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48f8:	18 c0       	rjmp	.+48     	; 0x492a <__vector_39+0x154>
    48fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    48fe:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4902:	84 e0       	ldi	r24, 0x04	; 4
    4904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4908:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <_twiCurrentHandler>
    490c:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <_twiCurrentHandler+0x1>
    4910:	dc 01       	movw	r26, r24
    4912:	12 96       	adiw	r26, 0x02	; 2
    4914:	ed 91       	ld	r30, X+
    4916:	fc 91       	ld	r31, X
    4918:	13 97       	sbiw	r26, 0x03	; 3
    491a:	30 97       	sbiw	r30, 0x00	; 0
    491c:	31 f0       	breq	.+12     	; 0x492a <__vector_39+0x154>
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	40 e0       	ldi	r20, 0x00	; 0
    4922:	50 e0       	ldi	r21, 0x00	; 0
    4924:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    4928:	19 95       	eicall
    492a:	ff 91       	pop	r31
    492c:	ef 91       	pop	r30
    492e:	bf 91       	pop	r27
    4930:	af 91       	pop	r26
    4932:	9f 91       	pop	r25
    4934:	8f 91       	pop	r24
    4936:	7f 91       	pop	r23
    4938:	6f 91       	pop	r22
    493a:	5f 91       	pop	r21
    493c:	4f 91       	pop	r20
    493e:	3f 91       	pop	r19
    4940:	2f 91       	pop	r18
    4942:	0f 90       	pop	r0
    4944:	0b be       	out	0x3b, r0	; 59
    4946:	0f 90       	pop	r0
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	0f 90       	pop	r0
    494c:	1f 90       	pop	r1
    494e:	18 95       	reti

00004950 <fifo_init>:
    4950:	fc 01       	movw	r30, r24
    4952:	41 11       	cpse	r20, r1
    4954:	01 c0       	rjmp	.+2      	; 0x4958 <fifo_init+0x8>
    4956:	1a d3       	rcall	.+1588   	; 0x4f8c <abort>
    4958:	84 2f       	mov	r24, r20
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	9c 01       	movw	r18, r24
    495e:	21 50       	subi	r18, 0x01	; 1
    4960:	31 09       	sbc	r19, r1
    4962:	82 23       	and	r24, r18
    4964:	93 23       	and	r25, r19
    4966:	89 2b       	or	r24, r25
    4968:	09 f0       	breq	.+2      	; 0x496c <fifo_init+0x1c>
    496a:	10 d3       	rcall	.+1568   	; 0x4f8c <abort>
    496c:	41 38       	cpi	r20, 0x81	; 129
    496e:	08 f0       	brcs	.+2      	; 0x4972 <fifo_init+0x22>
    4970:	0d d3       	rcall	.+1562   	; 0x4f8c <abort>
    4972:	12 82       	std	Z+2, r1	; 0x02
    4974:	13 82       	std	Z+3, r1	; 0x03
    4976:	44 83       	std	Z+4, r20	; 0x04
    4978:	44 0f       	add	r20, r20
    497a:	41 50       	subi	r20, 0x01	; 1
    497c:	45 83       	std	Z+5, r20	; 0x05
    497e:	71 83       	std	Z+1, r23	; 0x01
    4980:	60 83       	st	Z, r22
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	08 95       	ret

00004988 <__subsf3>:
    4988:	50 58       	subi	r21, 0x80	; 128

0000498a <__addsf3>:
    498a:	bb 27       	eor	r27, r27
    498c:	aa 27       	eor	r26, r26
    498e:	0e d0       	rcall	.+28     	; 0x49ac <__addsf3x>
    4990:	21 c1       	rjmp	.+578    	; 0x4bd4 <__fp_round>
    4992:	12 d1       	rcall	.+548    	; 0x4bb8 <__fp_pscA>
    4994:	30 f0       	brcs	.+12     	; 0x49a2 <__addsf3+0x18>
    4996:	17 d1       	rcall	.+558    	; 0x4bc6 <__fp_pscB>
    4998:	20 f0       	brcs	.+8      	; 0x49a2 <__addsf3+0x18>
    499a:	31 f4       	brne	.+12     	; 0x49a8 <__addsf3+0x1e>
    499c:	9f 3f       	cpi	r25, 0xFF	; 255
    499e:	11 f4       	brne	.+4      	; 0x49a4 <__addsf3+0x1a>
    49a0:	1e f4       	brtc	.+6      	; 0x49a8 <__addsf3+0x1e>
    49a2:	07 c1       	rjmp	.+526    	; 0x4bb2 <__fp_nan>
    49a4:	0e f4       	brtc	.+2      	; 0x49a8 <__addsf3+0x1e>
    49a6:	e0 95       	com	r30
    49a8:	e7 fb       	bst	r30, 7
    49aa:	fd c0       	rjmp	.+506    	; 0x4ba6 <__fp_inf>

000049ac <__addsf3x>:
    49ac:	e9 2f       	mov	r30, r25
    49ae:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__fp_split3>
    49b2:	78 f3       	brcs	.-34     	; 0x4992 <__addsf3+0x8>
    49b4:	ba 17       	cp	r27, r26
    49b6:	62 07       	cpc	r22, r18
    49b8:	73 07       	cpc	r23, r19
    49ba:	84 07       	cpc	r24, r20
    49bc:	95 07       	cpc	r25, r21
    49be:	20 f0       	brcs	.+8      	; 0x49c8 <__addsf3x+0x1c>
    49c0:	79 f4       	brne	.+30     	; 0x49e0 <__addsf3x+0x34>
    49c2:	a6 f5       	brtc	.+104    	; 0x4a2c <__addsf3x+0x80>
    49c4:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__fp_zero>
    49c8:	0e f4       	brtc	.+2      	; 0x49cc <__addsf3x+0x20>
    49ca:	e0 95       	com	r30
    49cc:	0b 2e       	mov	r0, r27
    49ce:	ba 2f       	mov	r27, r26
    49d0:	a0 2d       	mov	r26, r0
    49d2:	0b 01       	movw	r0, r22
    49d4:	b9 01       	movw	r22, r18
    49d6:	90 01       	movw	r18, r0
    49d8:	0c 01       	movw	r0, r24
    49da:	ca 01       	movw	r24, r20
    49dc:	a0 01       	movw	r20, r0
    49de:	11 24       	eor	r1, r1
    49e0:	ff 27       	eor	r31, r31
    49e2:	59 1b       	sub	r21, r25
    49e4:	99 f0       	breq	.+38     	; 0x4a0c <__addsf3x+0x60>
    49e6:	59 3f       	cpi	r21, 0xF9	; 249
    49e8:	50 f4       	brcc	.+20     	; 0x49fe <__addsf3x+0x52>
    49ea:	50 3e       	cpi	r21, 0xE0	; 224
    49ec:	68 f1       	brcs	.+90     	; 0x4a48 <__addsf3x+0x9c>
    49ee:	1a 16       	cp	r1, r26
    49f0:	f0 40       	sbci	r31, 0x00	; 0
    49f2:	a2 2f       	mov	r26, r18
    49f4:	23 2f       	mov	r18, r19
    49f6:	34 2f       	mov	r19, r20
    49f8:	44 27       	eor	r20, r20
    49fa:	58 5f       	subi	r21, 0xF8	; 248
    49fc:	f3 cf       	rjmp	.-26     	; 0x49e4 <__addsf3x+0x38>
    49fe:	46 95       	lsr	r20
    4a00:	37 95       	ror	r19
    4a02:	27 95       	ror	r18
    4a04:	a7 95       	ror	r26
    4a06:	f0 40       	sbci	r31, 0x00	; 0
    4a08:	53 95       	inc	r21
    4a0a:	c9 f7       	brne	.-14     	; 0x49fe <__addsf3x+0x52>
    4a0c:	7e f4       	brtc	.+30     	; 0x4a2c <__addsf3x+0x80>
    4a0e:	1f 16       	cp	r1, r31
    4a10:	ba 0b       	sbc	r27, r26
    4a12:	62 0b       	sbc	r22, r18
    4a14:	73 0b       	sbc	r23, r19
    4a16:	84 0b       	sbc	r24, r20
    4a18:	ba f0       	brmi	.+46     	; 0x4a48 <__addsf3x+0x9c>
    4a1a:	91 50       	subi	r25, 0x01	; 1
    4a1c:	a1 f0       	breq	.+40     	; 0x4a46 <__addsf3x+0x9a>
    4a1e:	ff 0f       	add	r31, r31
    4a20:	bb 1f       	adc	r27, r27
    4a22:	66 1f       	adc	r22, r22
    4a24:	77 1f       	adc	r23, r23
    4a26:	88 1f       	adc	r24, r24
    4a28:	c2 f7       	brpl	.-16     	; 0x4a1a <__addsf3x+0x6e>
    4a2a:	0e c0       	rjmp	.+28     	; 0x4a48 <__addsf3x+0x9c>
    4a2c:	ba 0f       	add	r27, r26
    4a2e:	62 1f       	adc	r22, r18
    4a30:	73 1f       	adc	r23, r19
    4a32:	84 1f       	adc	r24, r20
    4a34:	48 f4       	brcc	.+18     	; 0x4a48 <__addsf3x+0x9c>
    4a36:	87 95       	ror	r24
    4a38:	77 95       	ror	r23
    4a3a:	67 95       	ror	r22
    4a3c:	b7 95       	ror	r27
    4a3e:	f7 95       	ror	r31
    4a40:	9e 3f       	cpi	r25, 0xFE	; 254
    4a42:	08 f0       	brcs	.+2      	; 0x4a46 <__addsf3x+0x9a>
    4a44:	b1 cf       	rjmp	.-158    	; 0x49a8 <__addsf3+0x1e>
    4a46:	93 95       	inc	r25
    4a48:	88 0f       	add	r24, r24
    4a4a:	08 f0       	brcs	.+2      	; 0x4a4e <__addsf3x+0xa2>
    4a4c:	99 27       	eor	r25, r25
    4a4e:	ee 0f       	add	r30, r30
    4a50:	97 95       	ror	r25
    4a52:	87 95       	ror	r24
    4a54:	08 95       	ret

00004a56 <__divsf3>:
    4a56:	0d d0       	rcall	.+26     	; 0x4a72 <__divsf3x>
    4a58:	bd c0       	rjmp	.+378    	; 0x4bd4 <__fp_round>
    4a5a:	b5 d0       	rcall	.+362    	; 0x4bc6 <__fp_pscB>
    4a5c:	48 f0       	brcs	.+18     	; 0x4a70 <__divsf3+0x1a>
    4a5e:	ac d0       	rcall	.+344    	; 0x4bb8 <__fp_pscA>
    4a60:	38 f0       	brcs	.+14     	; 0x4a70 <__divsf3+0x1a>
    4a62:	21 f4       	brne	.+8      	; 0x4a6c <__divsf3+0x16>
    4a64:	5f 3f       	cpi	r21, 0xFF	; 255
    4a66:	21 f0       	breq	.+8      	; 0x4a70 <__divsf3+0x1a>
    4a68:	9e c0       	rjmp	.+316    	; 0x4ba6 <__fp_inf>
    4a6a:	51 11       	cpse	r21, r1
    4a6c:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__fp_szero>
    4a70:	a0 c0       	rjmp	.+320    	; 0x4bb2 <__fp_nan>

00004a72 <__divsf3x>:
    4a72:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__fp_split3>
    4a76:	88 f3       	brcs	.-30     	; 0x4a5a <__divsf3+0x4>

00004a78 <__divsf3_pse>:
    4a78:	99 23       	and	r25, r25
    4a7a:	b9 f3       	breq	.-18     	; 0x4a6a <__divsf3+0x14>
    4a7c:	55 23       	and	r21, r21
    4a7e:	a1 f3       	breq	.-24     	; 0x4a68 <__divsf3+0x12>
    4a80:	95 1b       	sub	r25, r21
    4a82:	55 0b       	sbc	r21, r21
    4a84:	bb 27       	eor	r27, r27
    4a86:	aa 27       	eor	r26, r26
    4a88:	62 17       	cp	r22, r18
    4a8a:	73 07       	cpc	r23, r19
    4a8c:	84 07       	cpc	r24, r20
    4a8e:	38 f0       	brcs	.+14     	; 0x4a9e <__divsf3_pse+0x26>
    4a90:	9f 5f       	subi	r25, 0xFF	; 255
    4a92:	5f 4f       	sbci	r21, 0xFF	; 255
    4a94:	22 0f       	add	r18, r18
    4a96:	33 1f       	adc	r19, r19
    4a98:	44 1f       	adc	r20, r20
    4a9a:	aa 1f       	adc	r26, r26
    4a9c:	a9 f3       	breq	.-22     	; 0x4a88 <__divsf3_pse+0x10>
    4a9e:	34 d0       	rcall	.+104    	; 0x4b08 <__divsf3_pse+0x90>
    4aa0:	0e 2e       	mov	r0, r30
    4aa2:	3a f0       	brmi	.+14     	; 0x4ab2 <__divsf3_pse+0x3a>
    4aa4:	e0 e8       	ldi	r30, 0x80	; 128
    4aa6:	31 d0       	rcall	.+98     	; 0x4b0a <__divsf3_pse+0x92>
    4aa8:	91 50       	subi	r25, 0x01	; 1
    4aaa:	50 40       	sbci	r21, 0x00	; 0
    4aac:	e6 95       	lsr	r30
    4aae:	00 1c       	adc	r0, r0
    4ab0:	ca f7       	brpl	.-14     	; 0x4aa4 <__divsf3_pse+0x2c>
    4ab2:	2a d0       	rcall	.+84     	; 0x4b08 <__divsf3_pse+0x90>
    4ab4:	fe 2f       	mov	r31, r30
    4ab6:	28 d0       	rcall	.+80     	; 0x4b08 <__divsf3_pse+0x90>
    4ab8:	66 0f       	add	r22, r22
    4aba:	77 1f       	adc	r23, r23
    4abc:	88 1f       	adc	r24, r24
    4abe:	bb 1f       	adc	r27, r27
    4ac0:	26 17       	cp	r18, r22
    4ac2:	37 07       	cpc	r19, r23
    4ac4:	48 07       	cpc	r20, r24
    4ac6:	ab 07       	cpc	r26, r27
    4ac8:	b0 e8       	ldi	r27, 0x80	; 128
    4aca:	09 f0       	breq	.+2      	; 0x4ace <__divsf3_pse+0x56>
    4acc:	bb 0b       	sbc	r27, r27
    4ace:	80 2d       	mov	r24, r0
    4ad0:	bf 01       	movw	r22, r30
    4ad2:	ff 27       	eor	r31, r31
    4ad4:	93 58       	subi	r25, 0x83	; 131
    4ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ad8:	32 f0       	brmi	.+12     	; 0x4ae6 <__divsf3_pse+0x6e>
    4ada:	9e 3f       	cpi	r25, 0xFE	; 254
    4adc:	51 05       	cpc	r21, r1
    4ade:	70 f0       	brcs	.+28     	; 0x4afc <__divsf3_pse+0x84>
    4ae0:	62 c0       	rjmp	.+196    	; 0x4ba6 <__fp_inf>
    4ae2:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__fp_szero>
    4ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    4ae8:	e4 f3       	brlt	.-8      	; 0x4ae2 <__divsf3_pse+0x6a>
    4aea:	98 3e       	cpi	r25, 0xE8	; 232
    4aec:	d4 f3       	brlt	.-12     	; 0x4ae2 <__divsf3_pse+0x6a>
    4aee:	86 95       	lsr	r24
    4af0:	77 95       	ror	r23
    4af2:	67 95       	ror	r22
    4af4:	b7 95       	ror	r27
    4af6:	f7 95       	ror	r31
    4af8:	9f 5f       	subi	r25, 0xFF	; 255
    4afa:	c9 f7       	brne	.-14     	; 0x4aee <__divsf3_pse+0x76>
    4afc:	88 0f       	add	r24, r24
    4afe:	91 1d       	adc	r25, r1
    4b00:	96 95       	lsr	r25
    4b02:	87 95       	ror	r24
    4b04:	97 f9       	bld	r25, 7
    4b06:	08 95       	ret
    4b08:	e1 e0       	ldi	r30, 0x01	; 1
    4b0a:	66 0f       	add	r22, r22
    4b0c:	77 1f       	adc	r23, r23
    4b0e:	88 1f       	adc	r24, r24
    4b10:	bb 1f       	adc	r27, r27
    4b12:	62 17       	cp	r22, r18
    4b14:	73 07       	cpc	r23, r19
    4b16:	84 07       	cpc	r24, r20
    4b18:	ba 07       	cpc	r27, r26
    4b1a:	20 f0       	brcs	.+8      	; 0x4b24 <__divsf3_pse+0xac>
    4b1c:	62 1b       	sub	r22, r18
    4b1e:	73 0b       	sbc	r23, r19
    4b20:	84 0b       	sbc	r24, r20
    4b22:	ba 0b       	sbc	r27, r26
    4b24:	ee 1f       	adc	r30, r30
    4b26:	88 f7       	brcc	.-30     	; 0x4b0a <__divsf3_pse+0x92>
    4b28:	e0 95       	com	r30
    4b2a:	08 95       	ret

00004b2c <__floatunsisf>:
    4b2c:	e8 94       	clt
    4b2e:	09 c0       	rjmp	.+18     	; 0x4b42 <__floatsisf+0x12>

00004b30 <__floatsisf>:
    4b30:	97 fb       	bst	r25, 7
    4b32:	3e f4       	brtc	.+14     	; 0x4b42 <__floatsisf+0x12>
    4b34:	90 95       	com	r25
    4b36:	80 95       	com	r24
    4b38:	70 95       	com	r23
    4b3a:	61 95       	neg	r22
    4b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    4b40:	9f 4f       	sbci	r25, 0xFF	; 255
    4b42:	99 23       	and	r25, r25
    4b44:	a9 f0       	breq	.+42     	; 0x4b70 <__floatsisf+0x40>
    4b46:	f9 2f       	mov	r31, r25
    4b48:	96 e9       	ldi	r25, 0x96	; 150
    4b4a:	bb 27       	eor	r27, r27
    4b4c:	93 95       	inc	r25
    4b4e:	f6 95       	lsr	r31
    4b50:	87 95       	ror	r24
    4b52:	77 95       	ror	r23
    4b54:	67 95       	ror	r22
    4b56:	b7 95       	ror	r27
    4b58:	f1 11       	cpse	r31, r1
    4b5a:	f8 cf       	rjmp	.-16     	; 0x4b4c <__floatsisf+0x1c>
    4b5c:	fa f4       	brpl	.+62     	; 0x4b9c <__floatsisf+0x6c>
    4b5e:	bb 0f       	add	r27, r27
    4b60:	11 f4       	brne	.+4      	; 0x4b66 <__floatsisf+0x36>
    4b62:	60 ff       	sbrs	r22, 0
    4b64:	1b c0       	rjmp	.+54     	; 0x4b9c <__floatsisf+0x6c>
    4b66:	6f 5f       	subi	r22, 0xFF	; 255
    4b68:	7f 4f       	sbci	r23, 0xFF	; 255
    4b6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6e:	16 c0       	rjmp	.+44     	; 0x4b9c <__floatsisf+0x6c>
    4b70:	88 23       	and	r24, r24
    4b72:	11 f0       	breq	.+4      	; 0x4b78 <__floatsisf+0x48>
    4b74:	96 e9       	ldi	r25, 0x96	; 150
    4b76:	11 c0       	rjmp	.+34     	; 0x4b9a <__floatsisf+0x6a>
    4b78:	77 23       	and	r23, r23
    4b7a:	21 f0       	breq	.+8      	; 0x4b84 <__floatsisf+0x54>
    4b7c:	9e e8       	ldi	r25, 0x8E	; 142
    4b7e:	87 2f       	mov	r24, r23
    4b80:	76 2f       	mov	r23, r22
    4b82:	05 c0       	rjmp	.+10     	; 0x4b8e <__floatsisf+0x5e>
    4b84:	66 23       	and	r22, r22
    4b86:	71 f0       	breq	.+28     	; 0x4ba4 <__floatsisf+0x74>
    4b88:	96 e8       	ldi	r25, 0x86	; 134
    4b8a:	86 2f       	mov	r24, r22
    4b8c:	70 e0       	ldi	r23, 0x00	; 0
    4b8e:	60 e0       	ldi	r22, 0x00	; 0
    4b90:	2a f0       	brmi	.+10     	; 0x4b9c <__floatsisf+0x6c>
    4b92:	9a 95       	dec	r25
    4b94:	66 0f       	add	r22, r22
    4b96:	77 1f       	adc	r23, r23
    4b98:	88 1f       	adc	r24, r24
    4b9a:	da f7       	brpl	.-10     	; 0x4b92 <__floatsisf+0x62>
    4b9c:	88 0f       	add	r24, r24
    4b9e:	96 95       	lsr	r25
    4ba0:	87 95       	ror	r24
    4ba2:	97 f9       	bld	r25, 7
    4ba4:	08 95       	ret

00004ba6 <__fp_inf>:
    4ba6:	97 f9       	bld	r25, 7
    4ba8:	9f 67       	ori	r25, 0x7F	; 127
    4baa:	80 e8       	ldi	r24, 0x80	; 128
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	60 e0       	ldi	r22, 0x00	; 0
    4bb0:	08 95       	ret

00004bb2 <__fp_nan>:
    4bb2:	9f ef       	ldi	r25, 0xFF	; 255
    4bb4:	80 ec       	ldi	r24, 0xC0	; 192
    4bb6:	08 95       	ret

00004bb8 <__fp_pscA>:
    4bb8:	00 24       	eor	r0, r0
    4bba:	0a 94       	dec	r0
    4bbc:	16 16       	cp	r1, r22
    4bbe:	17 06       	cpc	r1, r23
    4bc0:	18 06       	cpc	r1, r24
    4bc2:	09 06       	cpc	r0, r25
    4bc4:	08 95       	ret

00004bc6 <__fp_pscB>:
    4bc6:	00 24       	eor	r0, r0
    4bc8:	0a 94       	dec	r0
    4bca:	12 16       	cp	r1, r18
    4bcc:	13 06       	cpc	r1, r19
    4bce:	14 06       	cpc	r1, r20
    4bd0:	05 06       	cpc	r0, r21
    4bd2:	08 95       	ret

00004bd4 <__fp_round>:
    4bd4:	09 2e       	mov	r0, r25
    4bd6:	03 94       	inc	r0
    4bd8:	00 0c       	add	r0, r0
    4bda:	11 f4       	brne	.+4      	; 0x4be0 <__fp_round+0xc>
    4bdc:	88 23       	and	r24, r24
    4bde:	52 f0       	brmi	.+20     	; 0x4bf4 <__fp_round+0x20>
    4be0:	bb 0f       	add	r27, r27
    4be2:	40 f4       	brcc	.+16     	; 0x4bf4 <__fp_round+0x20>
    4be4:	bf 2b       	or	r27, r31
    4be6:	11 f4       	brne	.+4      	; 0x4bec <__fp_round+0x18>
    4be8:	60 ff       	sbrs	r22, 0
    4bea:	04 c0       	rjmp	.+8      	; 0x4bf4 <__fp_round+0x20>
    4bec:	6f 5f       	subi	r22, 0xFF	; 255
    4bee:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    4bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf4:	08 95       	ret

00004bf6 <__mulsf3>:
    4bf6:	0c d0       	rcall	.+24     	; 0x4c10 <__mulsf3x>
    4bf8:	ed cf       	rjmp	.-38     	; 0x4bd4 <__fp_round>
    4bfa:	de df       	rcall	.-68     	; 0x4bb8 <__fp_pscA>
    4bfc:	28 f0       	brcs	.+10     	; 0x4c08 <__mulsf3+0x12>
    4bfe:	e3 df       	rcall	.-58     	; 0x4bc6 <__fp_pscB>
    4c00:	18 f0       	brcs	.+6      	; 0x4c08 <__mulsf3+0x12>
    4c02:	95 23       	and	r25, r21
    4c04:	09 f0       	breq	.+2      	; 0x4c08 <__mulsf3+0x12>
    4c06:	cf cf       	rjmp	.-98     	; 0x4ba6 <__fp_inf>
    4c08:	d4 cf       	rjmp	.-88     	; 0x4bb2 <__fp_nan>
    4c0a:	11 24       	eor	r1, r1
    4c0c:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__fp_szero>

00004c10 <__mulsf3x>:
    4c10:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__fp_split3>
    4c14:	90 f3       	brcs	.-28     	; 0x4bfa <__mulsf3+0x4>

00004c16 <__mulsf3_pse>:
    4c16:	95 9f       	mul	r25, r21
    4c18:	c1 f3       	breq	.-16     	; 0x4c0a <__mulsf3+0x14>
    4c1a:	95 0f       	add	r25, r21
    4c1c:	50 e0       	ldi	r21, 0x00	; 0
    4c1e:	55 1f       	adc	r21, r21
    4c20:	62 9f       	mul	r22, r18
    4c22:	f0 01       	movw	r30, r0
    4c24:	72 9f       	mul	r23, r18
    4c26:	bb 27       	eor	r27, r27
    4c28:	f0 0d       	add	r31, r0
    4c2a:	b1 1d       	adc	r27, r1
    4c2c:	63 9f       	mul	r22, r19
    4c2e:	aa 27       	eor	r26, r26
    4c30:	f0 0d       	add	r31, r0
    4c32:	b1 1d       	adc	r27, r1
    4c34:	aa 1f       	adc	r26, r26
    4c36:	64 9f       	mul	r22, r20
    4c38:	66 27       	eor	r22, r22
    4c3a:	b0 0d       	add	r27, r0
    4c3c:	a1 1d       	adc	r26, r1
    4c3e:	66 1f       	adc	r22, r22
    4c40:	82 9f       	mul	r24, r18
    4c42:	22 27       	eor	r18, r18
    4c44:	b0 0d       	add	r27, r0
    4c46:	a1 1d       	adc	r26, r1
    4c48:	62 1f       	adc	r22, r18
    4c4a:	73 9f       	mul	r23, r19
    4c4c:	b0 0d       	add	r27, r0
    4c4e:	a1 1d       	adc	r26, r1
    4c50:	62 1f       	adc	r22, r18
    4c52:	83 9f       	mul	r24, r19
    4c54:	a0 0d       	add	r26, r0
    4c56:	61 1d       	adc	r22, r1
    4c58:	22 1f       	adc	r18, r18
    4c5a:	74 9f       	mul	r23, r20
    4c5c:	33 27       	eor	r19, r19
    4c5e:	a0 0d       	add	r26, r0
    4c60:	61 1d       	adc	r22, r1
    4c62:	23 1f       	adc	r18, r19
    4c64:	84 9f       	mul	r24, r20
    4c66:	60 0d       	add	r22, r0
    4c68:	21 1d       	adc	r18, r1
    4c6a:	82 2f       	mov	r24, r18
    4c6c:	76 2f       	mov	r23, r22
    4c6e:	6a 2f       	mov	r22, r26
    4c70:	11 24       	eor	r1, r1
    4c72:	9f 57       	subi	r25, 0x7F	; 127
    4c74:	50 40       	sbci	r21, 0x00	; 0
    4c76:	92 f0       	brmi	.+36     	; 0x4c9c <__mulsf3_pse+0x86>
    4c78:	e9 f0       	breq	.+58     	; 0x4cb4 <__mulsf3_pse+0x9e>
    4c7a:	88 23       	and	r24, r24
    4c7c:	4a f0       	brmi	.+18     	; 0x4c90 <__mulsf3_pse+0x7a>
    4c7e:	ee 0f       	add	r30, r30
    4c80:	ff 1f       	adc	r31, r31
    4c82:	bb 1f       	adc	r27, r27
    4c84:	66 1f       	adc	r22, r22
    4c86:	77 1f       	adc	r23, r23
    4c88:	88 1f       	adc	r24, r24
    4c8a:	91 50       	subi	r25, 0x01	; 1
    4c8c:	50 40       	sbci	r21, 0x00	; 0
    4c8e:	a9 f7       	brne	.-22     	; 0x4c7a <__mulsf3_pse+0x64>
    4c90:	9e 3f       	cpi	r25, 0xFE	; 254
    4c92:	51 05       	cpc	r21, r1
    4c94:	78 f0       	brcs	.+30     	; 0x4cb4 <__mulsf3_pse+0x9e>
    4c96:	87 cf       	rjmp	.-242    	; 0x4ba6 <__fp_inf>
    4c98:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__fp_szero>
    4c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    4c9e:	e4 f3       	brlt	.-8      	; 0x4c98 <__mulsf3_pse+0x82>
    4ca0:	98 3e       	cpi	r25, 0xE8	; 232
    4ca2:	d4 f3       	brlt	.-12     	; 0x4c98 <__mulsf3_pse+0x82>
    4ca4:	86 95       	lsr	r24
    4ca6:	77 95       	ror	r23
    4ca8:	67 95       	ror	r22
    4caa:	b7 95       	ror	r27
    4cac:	f7 95       	ror	r31
    4cae:	e7 95       	ror	r30
    4cb0:	9f 5f       	subi	r25, 0xFF	; 255
    4cb2:	c1 f7       	brne	.-16     	; 0x4ca4 <__mulsf3_pse+0x8e>
    4cb4:	fe 2b       	or	r31, r30
    4cb6:	88 0f       	add	r24, r24
    4cb8:	91 1d       	adc	r25, r1
    4cba:	96 95       	lsr	r25
    4cbc:	87 95       	ror	r24
    4cbe:	97 f9       	bld	r25, 7
    4cc0:	08 95       	ret

00004cc2 <__udivmodsi4>:
    4cc2:	a1 e2       	ldi	r26, 0x21	; 33
    4cc4:	1a 2e       	mov	r1, r26
    4cc6:	aa 1b       	sub	r26, r26
    4cc8:	bb 1b       	sub	r27, r27
    4cca:	fd 01       	movw	r30, r26
    4ccc:	0d c0       	rjmp	.+26     	; 0x4ce8 <__udivmodsi4_ep>

00004cce <__udivmodsi4_loop>:
    4cce:	aa 1f       	adc	r26, r26
    4cd0:	bb 1f       	adc	r27, r27
    4cd2:	ee 1f       	adc	r30, r30
    4cd4:	ff 1f       	adc	r31, r31
    4cd6:	a2 17       	cp	r26, r18
    4cd8:	b3 07       	cpc	r27, r19
    4cda:	e4 07       	cpc	r30, r20
    4cdc:	f5 07       	cpc	r31, r21
    4cde:	20 f0       	brcs	.+8      	; 0x4ce8 <__udivmodsi4_ep>
    4ce0:	a2 1b       	sub	r26, r18
    4ce2:	b3 0b       	sbc	r27, r19
    4ce4:	e4 0b       	sbc	r30, r20
    4ce6:	f5 0b       	sbc	r31, r21

00004ce8 <__udivmodsi4_ep>:
    4ce8:	66 1f       	adc	r22, r22
    4cea:	77 1f       	adc	r23, r23
    4cec:	88 1f       	adc	r24, r24
    4cee:	99 1f       	adc	r25, r25
    4cf0:	1a 94       	dec	r1
    4cf2:	69 f7       	brne	.-38     	; 0x4cce <__udivmodsi4_loop>
    4cf4:	60 95       	com	r22
    4cf6:	70 95       	com	r23
    4cf8:	80 95       	com	r24
    4cfa:	90 95       	com	r25
    4cfc:	9b 01       	movw	r18, r22
    4cfe:	ac 01       	movw	r20, r24
    4d00:	bd 01       	movw	r22, r26
    4d02:	cf 01       	movw	r24, r30
    4d04:	08 95       	ret

00004d06 <__tablejump2__>:
    4d06:	ee 0f       	add	r30, r30
    4d08:	ff 1f       	adc	r31, r31
    4d0a:	88 1f       	adc	r24, r24
    4d0c:	8b bf       	out	0x3b, r24	; 59
    4d0e:	07 90       	elpm	r0, Z+
    4d10:	f6 91       	elpm	r31, Z
    4d12:	e0 2d       	mov	r30, r0
    4d14:	19 94       	eijmp

00004d16 <calloc>:
    4d16:	0f 93       	push	r16
    4d18:	1f 93       	push	r17
    4d1a:	cf 93       	push	r28
    4d1c:	df 93       	push	r29
    4d1e:	86 9f       	mul	r24, r22
    4d20:	80 01       	movw	r16, r0
    4d22:	87 9f       	mul	r24, r23
    4d24:	10 0d       	add	r17, r0
    4d26:	96 9f       	mul	r25, r22
    4d28:	10 0d       	add	r17, r0
    4d2a:	11 24       	eor	r1, r1
    4d2c:	c8 01       	movw	r24, r16
    4d2e:	0d d0       	rcall	.+26     	; 0x4d4a <malloc>
    4d30:	ec 01       	movw	r28, r24
    4d32:	00 97       	sbiw	r24, 0x00	; 0
    4d34:	21 f0       	breq	.+8      	; 0x4d3e <calloc+0x28>
    4d36:	a8 01       	movw	r20, r16
    4d38:	60 e0       	ldi	r22, 0x00	; 0
    4d3a:	70 e0       	ldi	r23, 0x00	; 0
    4d3c:	34 d1       	rcall	.+616    	; 0x4fa6 <memset>
    4d3e:	ce 01       	movw	r24, r28
    4d40:	df 91       	pop	r29
    4d42:	cf 91       	pop	r28
    4d44:	1f 91       	pop	r17
    4d46:	0f 91       	pop	r16
    4d48:	08 95       	ret

00004d4a <malloc>:
    4d4a:	0f 93       	push	r16
    4d4c:	1f 93       	push	r17
    4d4e:	cf 93       	push	r28
    4d50:	df 93       	push	r29
    4d52:	82 30       	cpi	r24, 0x02	; 2
    4d54:	91 05       	cpc	r25, r1
    4d56:	10 f4       	brcc	.+4      	; 0x4d5c <malloc+0x12>
    4d58:	82 e0       	ldi	r24, 0x02	; 2
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	e0 91 3e 19 	lds	r30, 0x193E	; 0x80193e <__flp>
    4d60:	f0 91 3f 19 	lds	r31, 0x193F	; 0x80193f <__flp+0x1>
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	a0 e0       	ldi	r26, 0x00	; 0
    4d6a:	b0 e0       	ldi	r27, 0x00	; 0
    4d6c:	30 97       	sbiw	r30, 0x00	; 0
    4d6e:	19 f1       	breq	.+70     	; 0x4db6 <malloc+0x6c>
    4d70:	40 81       	ld	r20, Z
    4d72:	51 81       	ldd	r21, Z+1	; 0x01
    4d74:	02 81       	ldd	r16, Z+2	; 0x02
    4d76:	13 81       	ldd	r17, Z+3	; 0x03
    4d78:	48 17       	cp	r20, r24
    4d7a:	59 07       	cpc	r21, r25
    4d7c:	c8 f0       	brcs	.+50     	; 0x4db0 <malloc+0x66>
    4d7e:	84 17       	cp	r24, r20
    4d80:	95 07       	cpc	r25, r21
    4d82:	69 f4       	brne	.+26     	; 0x4d9e <malloc+0x54>
    4d84:	10 97       	sbiw	r26, 0x00	; 0
    4d86:	31 f0       	breq	.+12     	; 0x4d94 <malloc+0x4a>
    4d88:	12 96       	adiw	r26, 0x02	; 2
    4d8a:	0c 93       	st	X, r16
    4d8c:	12 97       	sbiw	r26, 0x02	; 2
    4d8e:	13 96       	adiw	r26, 0x03	; 3
    4d90:	1c 93       	st	X, r17
    4d92:	27 c0       	rjmp	.+78     	; 0x4de2 <malloc+0x98>
    4d94:	00 93 3e 19 	sts	0x193E, r16	; 0x80193e <__flp>
    4d98:	10 93 3f 19 	sts	0x193F, r17	; 0x80193f <__flp+0x1>
    4d9c:	22 c0       	rjmp	.+68     	; 0x4de2 <malloc+0x98>
    4d9e:	21 15       	cp	r18, r1
    4da0:	31 05       	cpc	r19, r1
    4da2:	19 f0       	breq	.+6      	; 0x4daa <malloc+0x60>
    4da4:	42 17       	cp	r20, r18
    4da6:	53 07       	cpc	r21, r19
    4da8:	18 f4       	brcc	.+6      	; 0x4db0 <malloc+0x66>
    4daa:	9a 01       	movw	r18, r20
    4dac:	bd 01       	movw	r22, r26
    4dae:	ef 01       	movw	r28, r30
    4db0:	df 01       	movw	r26, r30
    4db2:	f8 01       	movw	r30, r16
    4db4:	db cf       	rjmp	.-74     	; 0x4d6c <malloc+0x22>
    4db6:	21 15       	cp	r18, r1
    4db8:	31 05       	cpc	r19, r1
    4dba:	f9 f0       	breq	.+62     	; 0x4dfa <malloc+0xb0>
    4dbc:	28 1b       	sub	r18, r24
    4dbe:	39 0b       	sbc	r19, r25
    4dc0:	24 30       	cpi	r18, 0x04	; 4
    4dc2:	31 05       	cpc	r19, r1
    4dc4:	80 f4       	brcc	.+32     	; 0x4de6 <malloc+0x9c>
    4dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dca:	61 15       	cp	r22, r1
    4dcc:	71 05       	cpc	r23, r1
    4dce:	21 f0       	breq	.+8      	; 0x4dd8 <malloc+0x8e>
    4dd0:	fb 01       	movw	r30, r22
    4dd2:	93 83       	std	Z+3, r25	; 0x03
    4dd4:	82 83       	std	Z+2, r24	; 0x02
    4dd6:	04 c0       	rjmp	.+8      	; 0x4de0 <malloc+0x96>
    4dd8:	90 93 3f 19 	sts	0x193F, r25	; 0x80193f <__flp+0x1>
    4ddc:	80 93 3e 19 	sts	0x193E, r24	; 0x80193e <__flp>
    4de0:	fe 01       	movw	r30, r28
    4de2:	32 96       	adiw	r30, 0x02	; 2
    4de4:	44 c0       	rjmp	.+136    	; 0x4e6e <malloc+0x124>
    4de6:	fe 01       	movw	r30, r28
    4de8:	e2 0f       	add	r30, r18
    4dea:	f3 1f       	adc	r31, r19
    4dec:	81 93       	st	Z+, r24
    4dee:	91 93       	st	Z+, r25
    4df0:	22 50       	subi	r18, 0x02	; 2
    4df2:	31 09       	sbc	r19, r1
    4df4:	39 83       	std	Y+1, r19	; 0x01
    4df6:	28 83       	st	Y, r18
    4df8:	3a c0       	rjmp	.+116    	; 0x4e6e <malloc+0x124>
    4dfa:	20 91 3c 19 	lds	r18, 0x193C	; 0x80193c <__brkval>
    4dfe:	30 91 3d 19 	lds	r19, 0x193D	; 0x80193d <__brkval+0x1>
    4e02:	23 2b       	or	r18, r19
    4e04:	41 f4       	brne	.+16     	; 0x4e16 <malloc+0xcc>
    4e06:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4e0a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4e0e:	30 93 3d 19 	sts	0x193D, r19	; 0x80193d <__brkval+0x1>
    4e12:	20 93 3c 19 	sts	0x193C, r18	; 0x80193c <__brkval>
    4e16:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4e1a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4e1e:	21 15       	cp	r18, r1
    4e20:	31 05       	cpc	r19, r1
    4e22:	41 f4       	brne	.+16     	; 0x4e34 <malloc+0xea>
    4e24:	2d b7       	in	r18, 0x3d	; 61
    4e26:	3e b7       	in	r19, 0x3e	; 62
    4e28:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4e2c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4e30:	24 1b       	sub	r18, r20
    4e32:	35 0b       	sbc	r19, r21
    4e34:	e0 91 3c 19 	lds	r30, 0x193C	; 0x80193c <__brkval>
    4e38:	f0 91 3d 19 	lds	r31, 0x193D	; 0x80193d <__brkval+0x1>
    4e3c:	e2 17       	cp	r30, r18
    4e3e:	f3 07       	cpc	r31, r19
    4e40:	a0 f4       	brcc	.+40     	; 0x4e6a <malloc+0x120>
    4e42:	2e 1b       	sub	r18, r30
    4e44:	3f 0b       	sbc	r19, r31
    4e46:	28 17       	cp	r18, r24
    4e48:	39 07       	cpc	r19, r25
    4e4a:	78 f0       	brcs	.+30     	; 0x4e6a <malloc+0x120>
    4e4c:	ac 01       	movw	r20, r24
    4e4e:	4e 5f       	subi	r20, 0xFE	; 254
    4e50:	5f 4f       	sbci	r21, 0xFF	; 255
    4e52:	24 17       	cp	r18, r20
    4e54:	35 07       	cpc	r19, r21
    4e56:	48 f0       	brcs	.+18     	; 0x4e6a <malloc+0x120>
    4e58:	4e 0f       	add	r20, r30
    4e5a:	5f 1f       	adc	r21, r31
    4e5c:	50 93 3d 19 	sts	0x193D, r21	; 0x80193d <__brkval+0x1>
    4e60:	40 93 3c 19 	sts	0x193C, r20	; 0x80193c <__brkval>
    4e64:	81 93       	st	Z+, r24
    4e66:	91 93       	st	Z+, r25
    4e68:	02 c0       	rjmp	.+4      	; 0x4e6e <malloc+0x124>
    4e6a:	e0 e0       	ldi	r30, 0x00	; 0
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	cf 01       	movw	r24, r30
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	08 95       	ret

00004e7a <free>:
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
    4e7e:	00 97       	sbiw	r24, 0x00	; 0
    4e80:	09 f4       	brne	.+2      	; 0x4e84 <free+0xa>
    4e82:	81 c0       	rjmp	.+258    	; 0x4f86 <free+0x10c>
    4e84:	fc 01       	movw	r30, r24
    4e86:	32 97       	sbiw	r30, 0x02	; 2
    4e88:	13 82       	std	Z+3, r1	; 0x03
    4e8a:	12 82       	std	Z+2, r1	; 0x02
    4e8c:	a0 91 3e 19 	lds	r26, 0x193E	; 0x80193e <__flp>
    4e90:	b0 91 3f 19 	lds	r27, 0x193F	; 0x80193f <__flp+0x1>
    4e94:	10 97       	sbiw	r26, 0x00	; 0
    4e96:	81 f4       	brne	.+32     	; 0x4eb8 <free+0x3e>
    4e98:	20 81       	ld	r18, Z
    4e9a:	31 81       	ldd	r19, Z+1	; 0x01
    4e9c:	82 0f       	add	r24, r18
    4e9e:	93 1f       	adc	r25, r19
    4ea0:	20 91 3c 19 	lds	r18, 0x193C	; 0x80193c <__brkval>
    4ea4:	30 91 3d 19 	lds	r19, 0x193D	; 0x80193d <__brkval+0x1>
    4ea8:	28 17       	cp	r18, r24
    4eaa:	39 07       	cpc	r19, r25
    4eac:	51 f5       	brne	.+84     	; 0x4f02 <free+0x88>
    4eae:	f0 93 3d 19 	sts	0x193D, r31	; 0x80193d <__brkval+0x1>
    4eb2:	e0 93 3c 19 	sts	0x193C, r30	; 0x80193c <__brkval>
    4eb6:	67 c0       	rjmp	.+206    	; 0x4f86 <free+0x10c>
    4eb8:	ed 01       	movw	r28, r26
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	ce 17       	cp	r28, r30
    4ec0:	df 07       	cpc	r29, r31
    4ec2:	40 f4       	brcc	.+16     	; 0x4ed4 <free+0x5a>
    4ec4:	4a 81       	ldd	r20, Y+2	; 0x02
    4ec6:	5b 81       	ldd	r21, Y+3	; 0x03
    4ec8:	9e 01       	movw	r18, r28
    4eca:	41 15       	cp	r20, r1
    4ecc:	51 05       	cpc	r21, r1
    4ece:	f1 f0       	breq	.+60     	; 0x4f0c <free+0x92>
    4ed0:	ea 01       	movw	r28, r20
    4ed2:	f5 cf       	rjmp	.-22     	; 0x4ebe <free+0x44>
    4ed4:	d3 83       	std	Z+3, r29	; 0x03
    4ed6:	c2 83       	std	Z+2, r28	; 0x02
    4ed8:	40 81       	ld	r20, Z
    4eda:	51 81       	ldd	r21, Z+1	; 0x01
    4edc:	84 0f       	add	r24, r20
    4ede:	95 1f       	adc	r25, r21
    4ee0:	c8 17       	cp	r28, r24
    4ee2:	d9 07       	cpc	r29, r25
    4ee4:	59 f4       	brne	.+22     	; 0x4efc <free+0x82>
    4ee6:	88 81       	ld	r24, Y
    4ee8:	99 81       	ldd	r25, Y+1	; 0x01
    4eea:	84 0f       	add	r24, r20
    4eec:	95 1f       	adc	r25, r21
    4eee:	02 96       	adiw	r24, 0x02	; 2
    4ef0:	91 83       	std	Z+1, r25	; 0x01
    4ef2:	80 83       	st	Z, r24
    4ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ef8:	93 83       	std	Z+3, r25	; 0x03
    4efa:	82 83       	std	Z+2, r24	; 0x02
    4efc:	21 15       	cp	r18, r1
    4efe:	31 05       	cpc	r19, r1
    4f00:	29 f4       	brne	.+10     	; 0x4f0c <free+0x92>
    4f02:	f0 93 3f 19 	sts	0x193F, r31	; 0x80193f <__flp+0x1>
    4f06:	e0 93 3e 19 	sts	0x193E, r30	; 0x80193e <__flp>
    4f0a:	3d c0       	rjmp	.+122    	; 0x4f86 <free+0x10c>
    4f0c:	e9 01       	movw	r28, r18
    4f0e:	fb 83       	std	Y+3, r31	; 0x03
    4f10:	ea 83       	std	Y+2, r30	; 0x02
    4f12:	49 91       	ld	r20, Y+
    4f14:	59 91       	ld	r21, Y+
    4f16:	c4 0f       	add	r28, r20
    4f18:	d5 1f       	adc	r29, r21
    4f1a:	ec 17       	cp	r30, r28
    4f1c:	fd 07       	cpc	r31, r29
    4f1e:	61 f4       	brne	.+24     	; 0x4f38 <free+0xbe>
    4f20:	80 81       	ld	r24, Z
    4f22:	91 81       	ldd	r25, Z+1	; 0x01
    4f24:	84 0f       	add	r24, r20
    4f26:	95 1f       	adc	r25, r21
    4f28:	02 96       	adiw	r24, 0x02	; 2
    4f2a:	e9 01       	movw	r28, r18
    4f2c:	99 83       	std	Y+1, r25	; 0x01
    4f2e:	88 83       	st	Y, r24
    4f30:	82 81       	ldd	r24, Z+2	; 0x02
    4f32:	93 81       	ldd	r25, Z+3	; 0x03
    4f34:	9b 83       	std	Y+3, r25	; 0x03
    4f36:	8a 83       	std	Y+2, r24	; 0x02
    4f38:	e0 e0       	ldi	r30, 0x00	; 0
    4f3a:	f0 e0       	ldi	r31, 0x00	; 0
    4f3c:	12 96       	adiw	r26, 0x02	; 2
    4f3e:	8d 91       	ld	r24, X+
    4f40:	9c 91       	ld	r25, X
    4f42:	13 97       	sbiw	r26, 0x03	; 3
    4f44:	00 97       	sbiw	r24, 0x00	; 0
    4f46:	19 f0       	breq	.+6      	; 0x4f4e <free+0xd4>
    4f48:	fd 01       	movw	r30, r26
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	f7 cf       	rjmp	.-18     	; 0x4f3c <free+0xc2>
    4f4e:	8d 91       	ld	r24, X+
    4f50:	9c 91       	ld	r25, X
    4f52:	11 97       	sbiw	r26, 0x01	; 1
    4f54:	9d 01       	movw	r18, r26
    4f56:	2e 5f       	subi	r18, 0xFE	; 254
    4f58:	3f 4f       	sbci	r19, 0xFF	; 255
    4f5a:	82 0f       	add	r24, r18
    4f5c:	93 1f       	adc	r25, r19
    4f5e:	20 91 3c 19 	lds	r18, 0x193C	; 0x80193c <__brkval>
    4f62:	30 91 3d 19 	lds	r19, 0x193D	; 0x80193d <__brkval+0x1>
    4f66:	28 17       	cp	r18, r24
    4f68:	39 07       	cpc	r19, r25
    4f6a:	69 f4       	brne	.+26     	; 0x4f86 <free+0x10c>
    4f6c:	30 97       	sbiw	r30, 0x00	; 0
    4f6e:	29 f4       	brne	.+10     	; 0x4f7a <free+0x100>
    4f70:	10 92 3f 19 	sts	0x193F, r1	; 0x80193f <__flp+0x1>
    4f74:	10 92 3e 19 	sts	0x193E, r1	; 0x80193e <__flp>
    4f78:	02 c0       	rjmp	.+4      	; 0x4f7e <free+0x104>
    4f7a:	13 82       	std	Z+3, r1	; 0x03
    4f7c:	12 82       	std	Z+2, r1	; 0x02
    4f7e:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <__brkval+0x1>
    4f82:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <__brkval>
    4f86:	df 91       	pop	r29
    4f88:	cf 91       	pop	r28
    4f8a:	08 95       	ret

00004f8c <abort>:
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	f8 94       	cli
    4f92:	7d c3       	rjmp	.+1786   	; 0x568e <_exit>

00004f94 <memcpy>:
    4f94:	fb 01       	movw	r30, r22
    4f96:	dc 01       	movw	r26, r24
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <memcpy+0xa>
    4f9a:	01 90       	ld	r0, Z+
    4f9c:	0d 92       	st	X+, r0
    4f9e:	41 50       	subi	r20, 0x01	; 1
    4fa0:	50 40       	sbci	r21, 0x00	; 0
    4fa2:	d8 f7       	brcc	.-10     	; 0x4f9a <memcpy+0x6>
    4fa4:	08 95       	ret

00004fa6 <memset>:
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	01 c0       	rjmp	.+2      	; 0x4fac <memset+0x6>
    4faa:	6d 93       	st	X+, r22
    4fac:	41 50       	subi	r20, 0x01	; 1
    4fae:	50 40       	sbci	r21, 0x00	; 0
    4fb0:	e0 f7       	brcc	.-8      	; 0x4faa <memset+0x4>
    4fb2:	08 95       	ret

00004fb4 <strcasestr>:
    4fb4:	fb 01       	movw	r30, r22
    4fb6:	51 91       	ld	r21, Z+
    4fb8:	55 23       	and	r21, r21
    4fba:	b1 f0       	breq	.+44     	; 0x4fe8 <strcasestr+0x34>
    4fbc:	bf 01       	movw	r22, r30
    4fbe:	dc 01       	movw	r26, r24
    4fc0:	05 2e       	mov	r0, r21
    4fc2:	4d 91       	ld	r20, X+
    4fc4:	44 23       	and	r20, r20
    4fc6:	69 f0       	breq	.+26     	; 0x4fe2 <strcasestr+0x2e>
    4fc8:	10 d0       	rcall	.+32     	; 0x4fea <strcasestr+0x36>
    4fca:	d9 f7       	brne	.-10     	; 0x4fc2 <strcasestr+0xe>
    4fcc:	cd 01       	movw	r24, r26
    4fce:	01 90       	ld	r0, Z+
    4fd0:	00 20       	and	r0, r0
    4fd2:	49 f0       	breq	.+18     	; 0x4fe6 <strcasestr+0x32>
    4fd4:	4d 91       	ld	r20, X+
    4fd6:	41 11       	cpse	r20, r1
    4fd8:	08 d0       	rcall	.+16     	; 0x4fea <strcasestr+0x36>
    4fda:	c9 f3       	breq	.-14     	; 0x4fce <strcasestr+0x1a>
    4fdc:	fb 01       	movw	r30, r22
    4fde:	41 11       	cpse	r20, r1
    4fe0:	ee cf       	rjmp	.-36     	; 0x4fbe <strcasestr+0xa>
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	08 95       	ret
    4fea:	40 25       	eor	r20, r0
    4fec:	39 f0       	breq	.+14     	; 0x4ffc <strcasestr+0x48>
    4fee:	40 32       	cpi	r20, 0x20	; 32
    4ff0:	29 f4       	brne	.+10     	; 0x4ffc <strcasestr+0x48>
    4ff2:	40 29       	or	r20, r0
    4ff4:	4b 57       	subi	r20, 0x7B	; 123
    4ff6:	46 5e       	subi	r20, 0xE6	; 230
    4ff8:	08 f0       	brcs	.+2      	; 0x4ffc <strcasestr+0x48>
    4ffa:	18 94       	sez
    4ffc:	08 95       	ret

00004ffe <strcat>:
    4ffe:	fb 01       	movw	r30, r22
    5000:	dc 01       	movw	r26, r24
    5002:	0d 90       	ld	r0, X+
    5004:	00 20       	and	r0, r0
    5006:	e9 f7       	brne	.-6      	; 0x5002 <strcat+0x4>
    5008:	11 97       	sbiw	r26, 0x01	; 1
    500a:	01 90       	ld	r0, Z+
    500c:	0d 92       	st	X+, r0
    500e:	00 20       	and	r0, r0
    5010:	e1 f7       	brne	.-8      	; 0x500a <strcat+0xc>
    5012:	08 95       	ret

00005014 <strcpy>:
    5014:	fb 01       	movw	r30, r22
    5016:	dc 01       	movw	r26, r24
    5018:	01 90       	ld	r0, Z+
    501a:	0d 92       	st	X+, r0
    501c:	00 20       	and	r0, r0
    501e:	e1 f7       	brne	.-8      	; 0x5018 <strcpy+0x4>
    5020:	08 95       	ret

00005022 <strncasecmp>:
    5022:	fb 01       	movw	r30, r22
    5024:	dc 01       	movw	r26, r24
    5026:	41 50       	subi	r20, 0x01	; 1
    5028:	50 40       	sbci	r21, 0x00	; 0
    502a:	88 f0       	brcs	.+34     	; 0x504e <strncasecmp+0x2c>
    502c:	8d 91       	ld	r24, X+
    502e:	81 34       	cpi	r24, 0x41	; 65
    5030:	1c f0       	brlt	.+6      	; 0x5038 <strncasecmp+0x16>
    5032:	8b 35       	cpi	r24, 0x5B	; 91
    5034:	0c f4       	brge	.+2      	; 0x5038 <strncasecmp+0x16>
    5036:	80 5e       	subi	r24, 0xE0	; 224
    5038:	61 91       	ld	r22, Z+
    503a:	61 34       	cpi	r22, 0x41	; 65
    503c:	1c f0       	brlt	.+6      	; 0x5044 <strncasecmp+0x22>
    503e:	6b 35       	cpi	r22, 0x5B	; 91
    5040:	0c f4       	brge	.+2      	; 0x5044 <strncasecmp+0x22>
    5042:	60 5e       	subi	r22, 0xE0	; 224
    5044:	86 1b       	sub	r24, r22
    5046:	61 11       	cpse	r22, r1
    5048:	71 f3       	breq	.-36     	; 0x5026 <strncasecmp+0x4>
    504a:	99 0b       	sbc	r25, r25
    504c:	08 95       	ret
    504e:	88 1b       	sub	r24, r24
    5050:	fc cf       	rjmp	.-8      	; 0x504a <strncasecmp+0x28>

00005052 <printf>:
    5052:	cf 93       	push	r28
    5054:	df 93       	push	r29
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
    505a:	ae 01       	movw	r20, r28
    505c:	4a 5f       	subi	r20, 0xFA	; 250
    505e:	5f 4f       	sbci	r21, 0xFF	; 255
    5060:	fa 01       	movw	r30, r20
    5062:	61 91       	ld	r22, Z+
    5064:	71 91       	ld	r23, Z+
    5066:	af 01       	movw	r20, r30
    5068:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <__iob+0x2>
    506c:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <__iob+0x3>
    5070:	61 d0       	rcall	.+194    	; 0x5134 <vfprintf>
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	08 95       	ret

00005078 <puts>:
    5078:	0f 93       	push	r16
    507a:	1f 93       	push	r17
    507c:	cf 93       	push	r28
    507e:	df 93       	push	r29
    5080:	e0 91 42 19 	lds	r30, 0x1942	; 0x801942 <__iob+0x2>
    5084:	f0 91 43 19 	lds	r31, 0x1943	; 0x801943 <__iob+0x3>
    5088:	23 81       	ldd	r18, Z+3	; 0x03
    508a:	21 ff       	sbrs	r18, 1
    508c:	1b c0       	rjmp	.+54     	; 0x50c4 <puts+0x4c>
    508e:	8c 01       	movw	r16, r24
    5090:	d0 e0       	ldi	r29, 0x00	; 0
    5092:	c0 e0       	ldi	r28, 0x00	; 0
    5094:	f8 01       	movw	r30, r16
    5096:	81 91       	ld	r24, Z+
    5098:	8f 01       	movw	r16, r30
    509a:	60 91 42 19 	lds	r22, 0x1942	; 0x801942 <__iob+0x2>
    509e:	70 91 43 19 	lds	r23, 0x1943	; 0x801943 <__iob+0x3>
    50a2:	db 01       	movw	r26, r22
    50a4:	18 96       	adiw	r26, 0x08	; 8
    50a6:	ed 91       	ld	r30, X+
    50a8:	fc 91       	ld	r31, X
    50aa:	19 97       	sbiw	r26, 0x09	; 9
    50ac:	88 23       	and	r24, r24
    50ae:	31 f0       	breq	.+12     	; 0x50bc <puts+0x44>
    50b0:	19 95       	eicall
    50b2:	89 2b       	or	r24, r25
    50b4:	79 f3       	breq	.-34     	; 0x5094 <puts+0x1c>
    50b6:	df ef       	ldi	r29, 0xFF	; 255
    50b8:	cf ef       	ldi	r28, 0xFF	; 255
    50ba:	ec cf       	rjmp	.-40     	; 0x5094 <puts+0x1c>
    50bc:	8a e0       	ldi	r24, 0x0A	; 10
    50be:	19 95       	eicall
    50c0:	89 2b       	or	r24, r25
    50c2:	19 f0       	breq	.+6      	; 0x50ca <puts+0x52>
    50c4:	8f ef       	ldi	r24, 0xFF	; 255
    50c6:	9f ef       	ldi	r25, 0xFF	; 255
    50c8:	02 c0       	rjmp	.+4      	; 0x50ce <puts+0x56>
    50ca:	8d 2f       	mov	r24, r29
    50cc:	9c 2f       	mov	r25, r28
    50ce:	df 91       	pop	r29
    50d0:	cf 91       	pop	r28
    50d2:	1f 91       	pop	r17
    50d4:	0f 91       	pop	r16
    50d6:	08 95       	ret

000050d8 <sprintf>:
    50d8:	0f 93       	push	r16
    50da:	1f 93       	push	r17
    50dc:	cf 93       	push	r28
    50de:	df 93       	push	r29
    50e0:	cd b7       	in	r28, 0x3d	; 61
    50e2:	de b7       	in	r29, 0x3e	; 62
    50e4:	2e 97       	sbiw	r28, 0x0e	; 14
    50e6:	0f b6       	in	r0, 0x3f	; 63
    50e8:	f8 94       	cli
    50ea:	de bf       	out	0x3e, r29	; 62
    50ec:	0f be       	out	0x3f, r0	; 63
    50ee:	cd bf       	out	0x3d, r28	; 61
    50f0:	0e 89       	ldd	r16, Y+22	; 0x16
    50f2:	1f 89       	ldd	r17, Y+23	; 0x17
    50f4:	86 e0       	ldi	r24, 0x06	; 6
    50f6:	8c 83       	std	Y+4, r24	; 0x04
    50f8:	1a 83       	std	Y+2, r17	; 0x02
    50fa:	09 83       	std	Y+1, r16	; 0x01
    50fc:	8f ef       	ldi	r24, 0xFF	; 255
    50fe:	9f e7       	ldi	r25, 0x7F	; 127
    5100:	9e 83       	std	Y+6, r25	; 0x06
    5102:	8d 83       	std	Y+5, r24	; 0x05
    5104:	ae 01       	movw	r20, r28
    5106:	46 5e       	subi	r20, 0xE6	; 230
    5108:	5f 4f       	sbci	r21, 0xFF	; 255
    510a:	68 8d       	ldd	r22, Y+24	; 0x18
    510c:	79 8d       	ldd	r23, Y+25	; 0x19
    510e:	ce 01       	movw	r24, r28
    5110:	01 96       	adiw	r24, 0x01	; 1
    5112:	10 d0       	rcall	.+32     	; 0x5134 <vfprintf>
    5114:	ef 81       	ldd	r30, Y+7	; 0x07
    5116:	f8 85       	ldd	r31, Y+8	; 0x08
    5118:	e0 0f       	add	r30, r16
    511a:	f1 1f       	adc	r31, r17
    511c:	10 82       	st	Z, r1
    511e:	2e 96       	adiw	r28, 0x0e	; 14
    5120:	0f b6       	in	r0, 0x3f	; 63
    5122:	f8 94       	cli
    5124:	de bf       	out	0x3e, r29	; 62
    5126:	0f be       	out	0x3f, r0	; 63
    5128:	cd bf       	out	0x3d, r28	; 61
    512a:	df 91       	pop	r29
    512c:	cf 91       	pop	r28
    512e:	1f 91       	pop	r17
    5130:	0f 91       	pop	r16
    5132:	08 95       	ret

00005134 <vfprintf>:
    5134:	2f 92       	push	r2
    5136:	3f 92       	push	r3
    5138:	4f 92       	push	r4
    513a:	5f 92       	push	r5
    513c:	6f 92       	push	r6
    513e:	7f 92       	push	r7
    5140:	8f 92       	push	r8
    5142:	9f 92       	push	r9
    5144:	af 92       	push	r10
    5146:	bf 92       	push	r11
    5148:	cf 92       	push	r12
    514a:	df 92       	push	r13
    514c:	ef 92       	push	r14
    514e:	ff 92       	push	r15
    5150:	0f 93       	push	r16
    5152:	1f 93       	push	r17
    5154:	cf 93       	push	r28
    5156:	df 93       	push	r29
    5158:	cd b7       	in	r28, 0x3d	; 61
    515a:	de b7       	in	r29, 0x3e	; 62
    515c:	2b 97       	sbiw	r28, 0x0b	; 11
    515e:	0f b6       	in	r0, 0x3f	; 63
    5160:	f8 94       	cli
    5162:	de bf       	out	0x3e, r29	; 62
    5164:	0f be       	out	0x3f, r0	; 63
    5166:	cd bf       	out	0x3d, r28	; 61
    5168:	6c 01       	movw	r12, r24
    516a:	7b 01       	movw	r14, r22
    516c:	8a 01       	movw	r16, r20
    516e:	fc 01       	movw	r30, r24
    5170:	17 82       	std	Z+7, r1	; 0x07
    5172:	16 82       	std	Z+6, r1	; 0x06
    5174:	83 81       	ldd	r24, Z+3	; 0x03
    5176:	81 ff       	sbrs	r24, 1
    5178:	bf c1       	rjmp	.+894    	; 0x54f8 <vfprintf+0x3c4>
    517a:	ce 01       	movw	r24, r28
    517c:	01 96       	adiw	r24, 0x01	; 1
    517e:	3c 01       	movw	r6, r24
    5180:	f6 01       	movw	r30, r12
    5182:	93 81       	ldd	r25, Z+3	; 0x03
    5184:	f7 01       	movw	r30, r14
    5186:	93 fd       	sbrc	r25, 3
    5188:	85 91       	lpm	r24, Z+
    518a:	93 ff       	sbrs	r25, 3
    518c:	81 91       	ld	r24, Z+
    518e:	7f 01       	movw	r14, r30
    5190:	88 23       	and	r24, r24
    5192:	09 f4       	brne	.+2      	; 0x5196 <vfprintf+0x62>
    5194:	ad c1       	rjmp	.+858    	; 0x54f0 <vfprintf+0x3bc>
    5196:	85 32       	cpi	r24, 0x25	; 37
    5198:	39 f4       	brne	.+14     	; 0x51a8 <vfprintf+0x74>
    519a:	93 fd       	sbrc	r25, 3
    519c:	85 91       	lpm	r24, Z+
    519e:	93 ff       	sbrs	r25, 3
    51a0:	81 91       	ld	r24, Z+
    51a2:	7f 01       	movw	r14, r30
    51a4:	85 32       	cpi	r24, 0x25	; 37
    51a6:	21 f4       	brne	.+8      	; 0x51b0 <vfprintf+0x7c>
    51a8:	b6 01       	movw	r22, r12
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	d6 d1       	rcall	.+940    	; 0x555a <fputc>
    51ae:	e8 cf       	rjmp	.-48     	; 0x5180 <vfprintf+0x4c>
    51b0:	91 2c       	mov	r9, r1
    51b2:	21 2c       	mov	r2, r1
    51b4:	31 2c       	mov	r3, r1
    51b6:	ff e1       	ldi	r31, 0x1F	; 31
    51b8:	f3 15       	cp	r31, r3
    51ba:	d8 f0       	brcs	.+54     	; 0x51f2 <vfprintf+0xbe>
    51bc:	8b 32       	cpi	r24, 0x2B	; 43
    51be:	79 f0       	breq	.+30     	; 0x51de <vfprintf+0xaa>
    51c0:	38 f4       	brcc	.+14     	; 0x51d0 <vfprintf+0x9c>
    51c2:	80 32       	cpi	r24, 0x20	; 32
    51c4:	79 f0       	breq	.+30     	; 0x51e4 <vfprintf+0xb0>
    51c6:	83 32       	cpi	r24, 0x23	; 35
    51c8:	a1 f4       	brne	.+40     	; 0x51f2 <vfprintf+0xbe>
    51ca:	23 2d       	mov	r18, r3
    51cc:	20 61       	ori	r18, 0x10	; 16
    51ce:	1d c0       	rjmp	.+58     	; 0x520a <vfprintf+0xd6>
    51d0:	8d 32       	cpi	r24, 0x2D	; 45
    51d2:	61 f0       	breq	.+24     	; 0x51ec <vfprintf+0xb8>
    51d4:	80 33       	cpi	r24, 0x30	; 48
    51d6:	69 f4       	brne	.+26     	; 0x51f2 <vfprintf+0xbe>
    51d8:	23 2d       	mov	r18, r3
    51da:	21 60       	ori	r18, 0x01	; 1
    51dc:	16 c0       	rjmp	.+44     	; 0x520a <vfprintf+0xd6>
    51de:	83 2d       	mov	r24, r3
    51e0:	82 60       	ori	r24, 0x02	; 2
    51e2:	38 2e       	mov	r3, r24
    51e4:	e3 2d       	mov	r30, r3
    51e6:	e4 60       	ori	r30, 0x04	; 4
    51e8:	3e 2e       	mov	r3, r30
    51ea:	2a c0       	rjmp	.+84     	; 0x5240 <vfprintf+0x10c>
    51ec:	f3 2d       	mov	r31, r3
    51ee:	f8 60       	ori	r31, 0x08	; 8
    51f0:	1d c0       	rjmp	.+58     	; 0x522c <vfprintf+0xf8>
    51f2:	37 fc       	sbrc	r3, 7
    51f4:	2d c0       	rjmp	.+90     	; 0x5250 <vfprintf+0x11c>
    51f6:	20 ed       	ldi	r18, 0xD0	; 208
    51f8:	28 0f       	add	r18, r24
    51fa:	2a 30       	cpi	r18, 0x0A	; 10
    51fc:	40 f0       	brcs	.+16     	; 0x520e <vfprintf+0xda>
    51fe:	8e 32       	cpi	r24, 0x2E	; 46
    5200:	b9 f4       	brne	.+46     	; 0x5230 <vfprintf+0xfc>
    5202:	36 fc       	sbrc	r3, 6
    5204:	75 c1       	rjmp	.+746    	; 0x54f0 <vfprintf+0x3bc>
    5206:	23 2d       	mov	r18, r3
    5208:	20 64       	ori	r18, 0x40	; 64
    520a:	32 2e       	mov	r3, r18
    520c:	19 c0       	rjmp	.+50     	; 0x5240 <vfprintf+0x10c>
    520e:	36 fe       	sbrs	r3, 6
    5210:	06 c0       	rjmp	.+12     	; 0x521e <vfprintf+0xea>
    5212:	8a e0       	ldi	r24, 0x0A	; 10
    5214:	98 9e       	mul	r9, r24
    5216:	20 0d       	add	r18, r0
    5218:	11 24       	eor	r1, r1
    521a:	92 2e       	mov	r9, r18
    521c:	11 c0       	rjmp	.+34     	; 0x5240 <vfprintf+0x10c>
    521e:	ea e0       	ldi	r30, 0x0A	; 10
    5220:	2e 9e       	mul	r2, r30
    5222:	20 0d       	add	r18, r0
    5224:	11 24       	eor	r1, r1
    5226:	22 2e       	mov	r2, r18
    5228:	f3 2d       	mov	r31, r3
    522a:	f0 62       	ori	r31, 0x20	; 32
    522c:	3f 2e       	mov	r3, r31
    522e:	08 c0       	rjmp	.+16     	; 0x5240 <vfprintf+0x10c>
    5230:	8c 36       	cpi	r24, 0x6C	; 108
    5232:	21 f4       	brne	.+8      	; 0x523c <vfprintf+0x108>
    5234:	83 2d       	mov	r24, r3
    5236:	80 68       	ori	r24, 0x80	; 128
    5238:	38 2e       	mov	r3, r24
    523a:	02 c0       	rjmp	.+4      	; 0x5240 <vfprintf+0x10c>
    523c:	88 36       	cpi	r24, 0x68	; 104
    523e:	41 f4       	brne	.+16     	; 0x5250 <vfprintf+0x11c>
    5240:	f7 01       	movw	r30, r14
    5242:	93 fd       	sbrc	r25, 3
    5244:	85 91       	lpm	r24, Z+
    5246:	93 ff       	sbrs	r25, 3
    5248:	81 91       	ld	r24, Z+
    524a:	7f 01       	movw	r14, r30
    524c:	81 11       	cpse	r24, r1
    524e:	b3 cf       	rjmp	.-154    	; 0x51b6 <vfprintf+0x82>
    5250:	98 2f       	mov	r25, r24
    5252:	9f 7d       	andi	r25, 0xDF	; 223
    5254:	95 54       	subi	r25, 0x45	; 69
    5256:	93 30       	cpi	r25, 0x03	; 3
    5258:	28 f4       	brcc	.+10     	; 0x5264 <vfprintf+0x130>
    525a:	0c 5f       	subi	r16, 0xFC	; 252
    525c:	1f 4f       	sbci	r17, 0xFF	; 255
    525e:	9f e3       	ldi	r25, 0x3F	; 63
    5260:	99 83       	std	Y+1, r25	; 0x01
    5262:	0d c0       	rjmp	.+26     	; 0x527e <vfprintf+0x14a>
    5264:	83 36       	cpi	r24, 0x63	; 99
    5266:	31 f0       	breq	.+12     	; 0x5274 <vfprintf+0x140>
    5268:	83 37       	cpi	r24, 0x73	; 115
    526a:	71 f0       	breq	.+28     	; 0x5288 <vfprintf+0x154>
    526c:	83 35       	cpi	r24, 0x53	; 83
    526e:	09 f0       	breq	.+2      	; 0x5272 <vfprintf+0x13e>
    5270:	55 c0       	rjmp	.+170    	; 0x531c <vfprintf+0x1e8>
    5272:	20 c0       	rjmp	.+64     	; 0x52b4 <vfprintf+0x180>
    5274:	f8 01       	movw	r30, r16
    5276:	80 81       	ld	r24, Z
    5278:	89 83       	std	Y+1, r24	; 0x01
    527a:	0e 5f       	subi	r16, 0xFE	; 254
    527c:	1f 4f       	sbci	r17, 0xFF	; 255
    527e:	88 24       	eor	r8, r8
    5280:	83 94       	inc	r8
    5282:	91 2c       	mov	r9, r1
    5284:	53 01       	movw	r10, r6
    5286:	12 c0       	rjmp	.+36     	; 0x52ac <vfprintf+0x178>
    5288:	28 01       	movw	r4, r16
    528a:	f2 e0       	ldi	r31, 0x02	; 2
    528c:	4f 0e       	add	r4, r31
    528e:	51 1c       	adc	r5, r1
    5290:	f8 01       	movw	r30, r16
    5292:	a0 80       	ld	r10, Z
    5294:	b1 80       	ldd	r11, Z+1	; 0x01
    5296:	36 fe       	sbrs	r3, 6
    5298:	03 c0       	rjmp	.+6      	; 0x52a0 <vfprintf+0x16c>
    529a:	69 2d       	mov	r22, r9
    529c:	70 e0       	ldi	r23, 0x00	; 0
    529e:	02 c0       	rjmp	.+4      	; 0x52a4 <vfprintf+0x170>
    52a0:	6f ef       	ldi	r22, 0xFF	; 255
    52a2:	7f ef       	ldi	r23, 0xFF	; 255
    52a4:	c5 01       	movw	r24, r10
    52a6:	4e d1       	rcall	.+668    	; 0x5544 <strnlen>
    52a8:	4c 01       	movw	r8, r24
    52aa:	82 01       	movw	r16, r4
    52ac:	f3 2d       	mov	r31, r3
    52ae:	ff 77       	andi	r31, 0x7F	; 127
    52b0:	3f 2e       	mov	r3, r31
    52b2:	15 c0       	rjmp	.+42     	; 0x52de <vfprintf+0x1aa>
    52b4:	28 01       	movw	r4, r16
    52b6:	22 e0       	ldi	r18, 0x02	; 2
    52b8:	42 0e       	add	r4, r18
    52ba:	51 1c       	adc	r5, r1
    52bc:	f8 01       	movw	r30, r16
    52be:	a0 80       	ld	r10, Z
    52c0:	b1 80       	ldd	r11, Z+1	; 0x01
    52c2:	36 fe       	sbrs	r3, 6
    52c4:	03 c0       	rjmp	.+6      	; 0x52cc <vfprintf+0x198>
    52c6:	69 2d       	mov	r22, r9
    52c8:	70 e0       	ldi	r23, 0x00	; 0
    52ca:	02 c0       	rjmp	.+4      	; 0x52d0 <vfprintf+0x19c>
    52cc:	6f ef       	ldi	r22, 0xFF	; 255
    52ce:	7f ef       	ldi	r23, 0xFF	; 255
    52d0:	c5 01       	movw	r24, r10
    52d2:	2d d1       	rcall	.+602    	; 0x552e <strnlen_P>
    52d4:	4c 01       	movw	r8, r24
    52d6:	f3 2d       	mov	r31, r3
    52d8:	f0 68       	ori	r31, 0x80	; 128
    52da:	3f 2e       	mov	r3, r31
    52dc:	82 01       	movw	r16, r4
    52de:	33 fc       	sbrc	r3, 3
    52e0:	19 c0       	rjmp	.+50     	; 0x5314 <vfprintf+0x1e0>
    52e2:	82 2d       	mov	r24, r2
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	88 16       	cp	r8, r24
    52e8:	99 06       	cpc	r9, r25
    52ea:	a0 f4       	brcc	.+40     	; 0x5314 <vfprintf+0x1e0>
    52ec:	b6 01       	movw	r22, r12
    52ee:	80 e2       	ldi	r24, 0x20	; 32
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	33 d1       	rcall	.+614    	; 0x555a <fputc>
    52f4:	2a 94       	dec	r2
    52f6:	f5 cf       	rjmp	.-22     	; 0x52e2 <vfprintf+0x1ae>
    52f8:	f5 01       	movw	r30, r10
    52fa:	37 fc       	sbrc	r3, 7
    52fc:	85 91       	lpm	r24, Z+
    52fe:	37 fe       	sbrs	r3, 7
    5300:	81 91       	ld	r24, Z+
    5302:	5f 01       	movw	r10, r30
    5304:	b6 01       	movw	r22, r12
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	28 d1       	rcall	.+592    	; 0x555a <fputc>
    530a:	21 10       	cpse	r2, r1
    530c:	2a 94       	dec	r2
    530e:	21 e0       	ldi	r18, 0x01	; 1
    5310:	82 1a       	sub	r8, r18
    5312:	91 08       	sbc	r9, r1
    5314:	81 14       	cp	r8, r1
    5316:	91 04       	cpc	r9, r1
    5318:	79 f7       	brne	.-34     	; 0x52f8 <vfprintf+0x1c4>
    531a:	e1 c0       	rjmp	.+450    	; 0x54de <vfprintf+0x3aa>
    531c:	84 36       	cpi	r24, 0x64	; 100
    531e:	11 f0       	breq	.+4      	; 0x5324 <vfprintf+0x1f0>
    5320:	89 36       	cpi	r24, 0x69	; 105
    5322:	39 f5       	brne	.+78     	; 0x5372 <vfprintf+0x23e>
    5324:	f8 01       	movw	r30, r16
    5326:	37 fe       	sbrs	r3, 7
    5328:	07 c0       	rjmp	.+14     	; 0x5338 <vfprintf+0x204>
    532a:	60 81       	ld	r22, Z
    532c:	71 81       	ldd	r23, Z+1	; 0x01
    532e:	82 81       	ldd	r24, Z+2	; 0x02
    5330:	93 81       	ldd	r25, Z+3	; 0x03
    5332:	0c 5f       	subi	r16, 0xFC	; 252
    5334:	1f 4f       	sbci	r17, 0xFF	; 255
    5336:	08 c0       	rjmp	.+16     	; 0x5348 <vfprintf+0x214>
    5338:	60 81       	ld	r22, Z
    533a:	71 81       	ldd	r23, Z+1	; 0x01
    533c:	07 2e       	mov	r0, r23
    533e:	00 0c       	add	r0, r0
    5340:	88 0b       	sbc	r24, r24
    5342:	99 0b       	sbc	r25, r25
    5344:	0e 5f       	subi	r16, 0xFE	; 254
    5346:	1f 4f       	sbci	r17, 0xFF	; 255
    5348:	f3 2d       	mov	r31, r3
    534a:	ff 76       	andi	r31, 0x6F	; 111
    534c:	3f 2e       	mov	r3, r31
    534e:	97 ff       	sbrs	r25, 7
    5350:	09 c0       	rjmp	.+18     	; 0x5364 <vfprintf+0x230>
    5352:	90 95       	com	r25
    5354:	80 95       	com	r24
    5356:	70 95       	com	r23
    5358:	61 95       	neg	r22
    535a:	7f 4f       	sbci	r23, 0xFF	; 255
    535c:	8f 4f       	sbci	r24, 0xFF	; 255
    535e:	9f 4f       	sbci	r25, 0xFF	; 255
    5360:	f0 68       	ori	r31, 0x80	; 128
    5362:	3f 2e       	mov	r3, r31
    5364:	2a e0       	ldi	r18, 0x0A	; 10
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	a3 01       	movw	r20, r6
    536a:	33 d1       	rcall	.+614    	; 0x55d2 <__ultoa_invert>
    536c:	88 2e       	mov	r8, r24
    536e:	86 18       	sub	r8, r6
    5370:	44 c0       	rjmp	.+136    	; 0x53fa <vfprintf+0x2c6>
    5372:	85 37       	cpi	r24, 0x75	; 117
    5374:	31 f4       	brne	.+12     	; 0x5382 <vfprintf+0x24e>
    5376:	23 2d       	mov	r18, r3
    5378:	2f 7e       	andi	r18, 0xEF	; 239
    537a:	b2 2e       	mov	r11, r18
    537c:	2a e0       	ldi	r18, 0x0A	; 10
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	25 c0       	rjmp	.+74     	; 0x53cc <vfprintf+0x298>
    5382:	93 2d       	mov	r25, r3
    5384:	99 7f       	andi	r25, 0xF9	; 249
    5386:	b9 2e       	mov	r11, r25
    5388:	8f 36       	cpi	r24, 0x6F	; 111
    538a:	c1 f0       	breq	.+48     	; 0x53bc <vfprintf+0x288>
    538c:	18 f4       	brcc	.+6      	; 0x5394 <vfprintf+0x260>
    538e:	88 35       	cpi	r24, 0x58	; 88
    5390:	79 f0       	breq	.+30     	; 0x53b0 <vfprintf+0x27c>
    5392:	ae c0       	rjmp	.+348    	; 0x54f0 <vfprintf+0x3bc>
    5394:	80 37       	cpi	r24, 0x70	; 112
    5396:	19 f0       	breq	.+6      	; 0x539e <vfprintf+0x26a>
    5398:	88 37       	cpi	r24, 0x78	; 120
    539a:	21 f0       	breq	.+8      	; 0x53a4 <vfprintf+0x270>
    539c:	a9 c0       	rjmp	.+338    	; 0x54f0 <vfprintf+0x3bc>
    539e:	e9 2f       	mov	r30, r25
    53a0:	e0 61       	ori	r30, 0x10	; 16
    53a2:	be 2e       	mov	r11, r30
    53a4:	b4 fe       	sbrs	r11, 4
    53a6:	0d c0       	rjmp	.+26     	; 0x53c2 <vfprintf+0x28e>
    53a8:	fb 2d       	mov	r31, r11
    53aa:	f4 60       	ori	r31, 0x04	; 4
    53ac:	bf 2e       	mov	r11, r31
    53ae:	09 c0       	rjmp	.+18     	; 0x53c2 <vfprintf+0x28e>
    53b0:	34 fe       	sbrs	r3, 4
    53b2:	0a c0       	rjmp	.+20     	; 0x53c8 <vfprintf+0x294>
    53b4:	29 2f       	mov	r18, r25
    53b6:	26 60       	ori	r18, 0x06	; 6
    53b8:	b2 2e       	mov	r11, r18
    53ba:	06 c0       	rjmp	.+12     	; 0x53c8 <vfprintf+0x294>
    53bc:	28 e0       	ldi	r18, 0x08	; 8
    53be:	30 e0       	ldi	r19, 0x00	; 0
    53c0:	05 c0       	rjmp	.+10     	; 0x53cc <vfprintf+0x298>
    53c2:	20 e1       	ldi	r18, 0x10	; 16
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	02 c0       	rjmp	.+4      	; 0x53cc <vfprintf+0x298>
    53c8:	20 e1       	ldi	r18, 0x10	; 16
    53ca:	32 e0       	ldi	r19, 0x02	; 2
    53cc:	f8 01       	movw	r30, r16
    53ce:	b7 fe       	sbrs	r11, 7
    53d0:	07 c0       	rjmp	.+14     	; 0x53e0 <vfprintf+0x2ac>
    53d2:	60 81       	ld	r22, Z
    53d4:	71 81       	ldd	r23, Z+1	; 0x01
    53d6:	82 81       	ldd	r24, Z+2	; 0x02
    53d8:	93 81       	ldd	r25, Z+3	; 0x03
    53da:	0c 5f       	subi	r16, 0xFC	; 252
    53dc:	1f 4f       	sbci	r17, 0xFF	; 255
    53de:	06 c0       	rjmp	.+12     	; 0x53ec <vfprintf+0x2b8>
    53e0:	60 81       	ld	r22, Z
    53e2:	71 81       	ldd	r23, Z+1	; 0x01
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	0e 5f       	subi	r16, 0xFE	; 254
    53ea:	1f 4f       	sbci	r17, 0xFF	; 255
    53ec:	a3 01       	movw	r20, r6
    53ee:	f1 d0       	rcall	.+482    	; 0x55d2 <__ultoa_invert>
    53f0:	88 2e       	mov	r8, r24
    53f2:	86 18       	sub	r8, r6
    53f4:	fb 2d       	mov	r31, r11
    53f6:	ff 77       	andi	r31, 0x7F	; 127
    53f8:	3f 2e       	mov	r3, r31
    53fa:	36 fe       	sbrs	r3, 6
    53fc:	0d c0       	rjmp	.+26     	; 0x5418 <vfprintf+0x2e4>
    53fe:	23 2d       	mov	r18, r3
    5400:	2e 7f       	andi	r18, 0xFE	; 254
    5402:	a2 2e       	mov	r10, r18
    5404:	89 14       	cp	r8, r9
    5406:	58 f4       	brcc	.+22     	; 0x541e <vfprintf+0x2ea>
    5408:	34 fe       	sbrs	r3, 4
    540a:	0b c0       	rjmp	.+22     	; 0x5422 <vfprintf+0x2ee>
    540c:	32 fc       	sbrc	r3, 2
    540e:	09 c0       	rjmp	.+18     	; 0x5422 <vfprintf+0x2ee>
    5410:	83 2d       	mov	r24, r3
    5412:	8e 7e       	andi	r24, 0xEE	; 238
    5414:	a8 2e       	mov	r10, r24
    5416:	05 c0       	rjmp	.+10     	; 0x5422 <vfprintf+0x2ee>
    5418:	b8 2c       	mov	r11, r8
    541a:	a3 2c       	mov	r10, r3
    541c:	03 c0       	rjmp	.+6      	; 0x5424 <vfprintf+0x2f0>
    541e:	b8 2c       	mov	r11, r8
    5420:	01 c0       	rjmp	.+2      	; 0x5424 <vfprintf+0x2f0>
    5422:	b9 2c       	mov	r11, r9
    5424:	a4 fe       	sbrs	r10, 4
    5426:	0f c0       	rjmp	.+30     	; 0x5446 <vfprintf+0x312>
    5428:	fe 01       	movw	r30, r28
    542a:	e8 0d       	add	r30, r8
    542c:	f1 1d       	adc	r31, r1
    542e:	80 81       	ld	r24, Z
    5430:	80 33       	cpi	r24, 0x30	; 48
    5432:	21 f4       	brne	.+8      	; 0x543c <vfprintf+0x308>
    5434:	9a 2d       	mov	r25, r10
    5436:	99 7e       	andi	r25, 0xE9	; 233
    5438:	a9 2e       	mov	r10, r25
    543a:	09 c0       	rjmp	.+18     	; 0x544e <vfprintf+0x31a>
    543c:	a2 fe       	sbrs	r10, 2
    543e:	06 c0       	rjmp	.+12     	; 0x544c <vfprintf+0x318>
    5440:	b3 94       	inc	r11
    5442:	b3 94       	inc	r11
    5444:	04 c0       	rjmp	.+8      	; 0x544e <vfprintf+0x31a>
    5446:	8a 2d       	mov	r24, r10
    5448:	86 78       	andi	r24, 0x86	; 134
    544a:	09 f0       	breq	.+2      	; 0x544e <vfprintf+0x31a>
    544c:	b3 94       	inc	r11
    544e:	a3 fc       	sbrc	r10, 3
    5450:	10 c0       	rjmp	.+32     	; 0x5472 <vfprintf+0x33e>
    5452:	a0 fe       	sbrs	r10, 0
    5454:	06 c0       	rjmp	.+12     	; 0x5462 <vfprintf+0x32e>
    5456:	b2 14       	cp	r11, r2
    5458:	80 f4       	brcc	.+32     	; 0x547a <vfprintf+0x346>
    545a:	28 0c       	add	r2, r8
    545c:	92 2c       	mov	r9, r2
    545e:	9b 18       	sub	r9, r11
    5460:	0d c0       	rjmp	.+26     	; 0x547c <vfprintf+0x348>
    5462:	b2 14       	cp	r11, r2
    5464:	58 f4       	brcc	.+22     	; 0x547c <vfprintf+0x348>
    5466:	b6 01       	movw	r22, r12
    5468:	80 e2       	ldi	r24, 0x20	; 32
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	76 d0       	rcall	.+236    	; 0x555a <fputc>
    546e:	b3 94       	inc	r11
    5470:	f8 cf       	rjmp	.-16     	; 0x5462 <vfprintf+0x32e>
    5472:	b2 14       	cp	r11, r2
    5474:	18 f4       	brcc	.+6      	; 0x547c <vfprintf+0x348>
    5476:	2b 18       	sub	r2, r11
    5478:	02 c0       	rjmp	.+4      	; 0x547e <vfprintf+0x34a>
    547a:	98 2c       	mov	r9, r8
    547c:	21 2c       	mov	r2, r1
    547e:	a4 fe       	sbrs	r10, 4
    5480:	0f c0       	rjmp	.+30     	; 0x54a0 <vfprintf+0x36c>
    5482:	b6 01       	movw	r22, r12
    5484:	80 e3       	ldi	r24, 0x30	; 48
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	68 d0       	rcall	.+208    	; 0x555a <fputc>
    548a:	a2 fe       	sbrs	r10, 2
    548c:	16 c0       	rjmp	.+44     	; 0x54ba <vfprintf+0x386>
    548e:	a1 fc       	sbrc	r10, 1
    5490:	03 c0       	rjmp	.+6      	; 0x5498 <vfprintf+0x364>
    5492:	88 e7       	ldi	r24, 0x78	; 120
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	02 c0       	rjmp	.+4      	; 0x549c <vfprintf+0x368>
    5498:	88 e5       	ldi	r24, 0x58	; 88
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	b6 01       	movw	r22, r12
    549e:	0c c0       	rjmp	.+24     	; 0x54b8 <vfprintf+0x384>
    54a0:	8a 2d       	mov	r24, r10
    54a2:	86 78       	andi	r24, 0x86	; 134
    54a4:	51 f0       	breq	.+20     	; 0x54ba <vfprintf+0x386>
    54a6:	a1 fe       	sbrs	r10, 1
    54a8:	02 c0       	rjmp	.+4      	; 0x54ae <vfprintf+0x37a>
    54aa:	8b e2       	ldi	r24, 0x2B	; 43
    54ac:	01 c0       	rjmp	.+2      	; 0x54b0 <vfprintf+0x37c>
    54ae:	80 e2       	ldi	r24, 0x20	; 32
    54b0:	a7 fc       	sbrc	r10, 7
    54b2:	8d e2       	ldi	r24, 0x2D	; 45
    54b4:	b6 01       	movw	r22, r12
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	50 d0       	rcall	.+160    	; 0x555a <fputc>
    54ba:	89 14       	cp	r8, r9
    54bc:	30 f4       	brcc	.+12     	; 0x54ca <vfprintf+0x396>
    54be:	b6 01       	movw	r22, r12
    54c0:	80 e3       	ldi	r24, 0x30	; 48
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	4a d0       	rcall	.+148    	; 0x555a <fputc>
    54c6:	9a 94       	dec	r9
    54c8:	f8 cf       	rjmp	.-16     	; 0x54ba <vfprintf+0x386>
    54ca:	8a 94       	dec	r8
    54cc:	f3 01       	movw	r30, r6
    54ce:	e8 0d       	add	r30, r8
    54d0:	f1 1d       	adc	r31, r1
    54d2:	80 81       	ld	r24, Z
    54d4:	b6 01       	movw	r22, r12
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	40 d0       	rcall	.+128    	; 0x555a <fputc>
    54da:	81 10       	cpse	r8, r1
    54dc:	f6 cf       	rjmp	.-20     	; 0x54ca <vfprintf+0x396>
    54de:	22 20       	and	r2, r2
    54e0:	09 f4       	brne	.+2      	; 0x54e4 <vfprintf+0x3b0>
    54e2:	4e ce       	rjmp	.-868    	; 0x5180 <vfprintf+0x4c>
    54e4:	b6 01       	movw	r22, r12
    54e6:	80 e2       	ldi	r24, 0x20	; 32
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	37 d0       	rcall	.+110    	; 0x555a <fputc>
    54ec:	2a 94       	dec	r2
    54ee:	f7 cf       	rjmp	.-18     	; 0x54de <vfprintf+0x3aa>
    54f0:	f6 01       	movw	r30, r12
    54f2:	86 81       	ldd	r24, Z+6	; 0x06
    54f4:	97 81       	ldd	r25, Z+7	; 0x07
    54f6:	02 c0       	rjmp	.+4      	; 0x54fc <vfprintf+0x3c8>
    54f8:	8f ef       	ldi	r24, 0xFF	; 255
    54fa:	9f ef       	ldi	r25, 0xFF	; 255
    54fc:	2b 96       	adiw	r28, 0x0b	; 11
    54fe:	0f b6       	in	r0, 0x3f	; 63
    5500:	f8 94       	cli
    5502:	de bf       	out	0x3e, r29	; 62
    5504:	0f be       	out	0x3f, r0	; 63
    5506:	cd bf       	out	0x3d, r28	; 61
    5508:	df 91       	pop	r29
    550a:	cf 91       	pop	r28
    550c:	1f 91       	pop	r17
    550e:	0f 91       	pop	r16
    5510:	ff 90       	pop	r15
    5512:	ef 90       	pop	r14
    5514:	df 90       	pop	r13
    5516:	cf 90       	pop	r12
    5518:	bf 90       	pop	r11
    551a:	af 90       	pop	r10
    551c:	9f 90       	pop	r9
    551e:	8f 90       	pop	r8
    5520:	7f 90       	pop	r7
    5522:	6f 90       	pop	r6
    5524:	5f 90       	pop	r5
    5526:	4f 90       	pop	r4
    5528:	3f 90       	pop	r3
    552a:	2f 90       	pop	r2
    552c:	08 95       	ret

0000552e <strnlen_P>:
    552e:	fc 01       	movw	r30, r24
    5530:	05 90       	lpm	r0, Z+
    5532:	61 50       	subi	r22, 0x01	; 1
    5534:	70 40       	sbci	r23, 0x00	; 0
    5536:	01 10       	cpse	r0, r1
    5538:	d8 f7       	brcc	.-10     	; 0x5530 <strnlen_P+0x2>
    553a:	80 95       	com	r24
    553c:	90 95       	com	r25
    553e:	8e 0f       	add	r24, r30
    5540:	9f 1f       	adc	r25, r31
    5542:	08 95       	ret

00005544 <strnlen>:
    5544:	fc 01       	movw	r30, r24
    5546:	61 50       	subi	r22, 0x01	; 1
    5548:	70 40       	sbci	r23, 0x00	; 0
    554a:	01 90       	ld	r0, Z+
    554c:	01 10       	cpse	r0, r1
    554e:	d8 f7       	brcc	.-10     	; 0x5546 <strnlen+0x2>
    5550:	80 95       	com	r24
    5552:	90 95       	com	r25
    5554:	8e 0f       	add	r24, r30
    5556:	9f 1f       	adc	r25, r31
    5558:	08 95       	ret

0000555a <fputc>:
    555a:	0f 93       	push	r16
    555c:	1f 93       	push	r17
    555e:	cf 93       	push	r28
    5560:	df 93       	push	r29
    5562:	fb 01       	movw	r30, r22
    5564:	23 81       	ldd	r18, Z+3	; 0x03
    5566:	21 fd       	sbrc	r18, 1
    5568:	03 c0       	rjmp	.+6      	; 0x5570 <fputc+0x16>
    556a:	8f ef       	ldi	r24, 0xFF	; 255
    556c:	9f ef       	ldi	r25, 0xFF	; 255
    556e:	2c c0       	rjmp	.+88     	; 0x55c8 <fputc+0x6e>
    5570:	22 ff       	sbrs	r18, 2
    5572:	16 c0       	rjmp	.+44     	; 0x55a0 <fputc+0x46>
    5574:	46 81       	ldd	r20, Z+6	; 0x06
    5576:	57 81       	ldd	r21, Z+7	; 0x07
    5578:	24 81       	ldd	r18, Z+4	; 0x04
    557a:	35 81       	ldd	r19, Z+5	; 0x05
    557c:	42 17       	cp	r20, r18
    557e:	53 07       	cpc	r21, r19
    5580:	44 f4       	brge	.+16     	; 0x5592 <fputc+0x38>
    5582:	a0 81       	ld	r26, Z
    5584:	b1 81       	ldd	r27, Z+1	; 0x01
    5586:	9d 01       	movw	r18, r26
    5588:	2f 5f       	subi	r18, 0xFF	; 255
    558a:	3f 4f       	sbci	r19, 0xFF	; 255
    558c:	31 83       	std	Z+1, r19	; 0x01
    558e:	20 83       	st	Z, r18
    5590:	8c 93       	st	X, r24
    5592:	26 81       	ldd	r18, Z+6	; 0x06
    5594:	37 81       	ldd	r19, Z+7	; 0x07
    5596:	2f 5f       	subi	r18, 0xFF	; 255
    5598:	3f 4f       	sbci	r19, 0xFF	; 255
    559a:	37 83       	std	Z+7, r19	; 0x07
    559c:	26 83       	std	Z+6, r18	; 0x06
    559e:	14 c0       	rjmp	.+40     	; 0x55c8 <fputc+0x6e>
    55a0:	8b 01       	movw	r16, r22
    55a2:	ec 01       	movw	r28, r24
    55a4:	fb 01       	movw	r30, r22
    55a6:	00 84       	ldd	r0, Z+8	; 0x08
    55a8:	f1 85       	ldd	r31, Z+9	; 0x09
    55aa:	e0 2d       	mov	r30, r0
    55ac:	19 95       	eicall
    55ae:	89 2b       	or	r24, r25
    55b0:	e1 f6       	brne	.-72     	; 0x556a <fputc+0x10>
    55b2:	d8 01       	movw	r26, r16
    55b4:	16 96       	adiw	r26, 0x06	; 6
    55b6:	8d 91       	ld	r24, X+
    55b8:	9c 91       	ld	r25, X
    55ba:	17 97       	sbiw	r26, 0x07	; 7
    55bc:	01 96       	adiw	r24, 0x01	; 1
    55be:	17 96       	adiw	r26, 0x07	; 7
    55c0:	9c 93       	st	X, r25
    55c2:	8e 93       	st	-X, r24
    55c4:	16 97       	sbiw	r26, 0x06	; 6
    55c6:	ce 01       	movw	r24, r28
    55c8:	df 91       	pop	r29
    55ca:	cf 91       	pop	r28
    55cc:	1f 91       	pop	r17
    55ce:	0f 91       	pop	r16
    55d0:	08 95       	ret

000055d2 <__ultoa_invert>:
    55d2:	fa 01       	movw	r30, r20
    55d4:	aa 27       	eor	r26, r26
    55d6:	28 30       	cpi	r18, 0x08	; 8
    55d8:	51 f1       	breq	.+84     	; 0x562e <__ultoa_invert+0x5c>
    55da:	20 31       	cpi	r18, 0x10	; 16
    55dc:	81 f1       	breq	.+96     	; 0x563e <__ultoa_invert+0x6c>
    55de:	e8 94       	clt
    55e0:	6f 93       	push	r22
    55e2:	6e 7f       	andi	r22, 0xFE	; 254
    55e4:	6e 5f       	subi	r22, 0xFE	; 254
    55e6:	7f 4f       	sbci	r23, 0xFF	; 255
    55e8:	8f 4f       	sbci	r24, 0xFF	; 255
    55ea:	9f 4f       	sbci	r25, 0xFF	; 255
    55ec:	af 4f       	sbci	r26, 0xFF	; 255
    55ee:	b1 e0       	ldi	r27, 0x01	; 1
    55f0:	3e d0       	rcall	.+124    	; 0x566e <__ultoa_invert+0x9c>
    55f2:	b4 e0       	ldi	r27, 0x04	; 4
    55f4:	3c d0       	rcall	.+120    	; 0x566e <__ultoa_invert+0x9c>
    55f6:	67 0f       	add	r22, r23
    55f8:	78 1f       	adc	r23, r24
    55fa:	89 1f       	adc	r24, r25
    55fc:	9a 1f       	adc	r25, r26
    55fe:	a1 1d       	adc	r26, r1
    5600:	68 0f       	add	r22, r24
    5602:	79 1f       	adc	r23, r25
    5604:	8a 1f       	adc	r24, r26
    5606:	91 1d       	adc	r25, r1
    5608:	a1 1d       	adc	r26, r1
    560a:	6a 0f       	add	r22, r26
    560c:	71 1d       	adc	r23, r1
    560e:	81 1d       	adc	r24, r1
    5610:	91 1d       	adc	r25, r1
    5612:	a1 1d       	adc	r26, r1
    5614:	20 d0       	rcall	.+64     	; 0x5656 <__ultoa_invert+0x84>
    5616:	09 f4       	brne	.+2      	; 0x561a <__ultoa_invert+0x48>
    5618:	68 94       	set
    561a:	3f 91       	pop	r19
    561c:	2a e0       	ldi	r18, 0x0A	; 10
    561e:	26 9f       	mul	r18, r22
    5620:	11 24       	eor	r1, r1
    5622:	30 19       	sub	r19, r0
    5624:	30 5d       	subi	r19, 0xD0	; 208
    5626:	31 93       	st	Z+, r19
    5628:	de f6       	brtc	.-74     	; 0x55e0 <__ultoa_invert+0xe>
    562a:	cf 01       	movw	r24, r30
    562c:	08 95       	ret
    562e:	46 2f       	mov	r20, r22
    5630:	47 70       	andi	r20, 0x07	; 7
    5632:	40 5d       	subi	r20, 0xD0	; 208
    5634:	41 93       	st	Z+, r20
    5636:	b3 e0       	ldi	r27, 0x03	; 3
    5638:	0f d0       	rcall	.+30     	; 0x5658 <__ultoa_invert+0x86>
    563a:	c9 f7       	brne	.-14     	; 0x562e <__ultoa_invert+0x5c>
    563c:	f6 cf       	rjmp	.-20     	; 0x562a <__ultoa_invert+0x58>
    563e:	46 2f       	mov	r20, r22
    5640:	4f 70       	andi	r20, 0x0F	; 15
    5642:	40 5d       	subi	r20, 0xD0	; 208
    5644:	4a 33       	cpi	r20, 0x3A	; 58
    5646:	18 f0       	brcs	.+6      	; 0x564e <__ultoa_invert+0x7c>
    5648:	49 5d       	subi	r20, 0xD9	; 217
    564a:	31 fd       	sbrc	r19, 1
    564c:	40 52       	subi	r20, 0x20	; 32
    564e:	41 93       	st	Z+, r20
    5650:	02 d0       	rcall	.+4      	; 0x5656 <__ultoa_invert+0x84>
    5652:	a9 f7       	brne	.-22     	; 0x563e <__ultoa_invert+0x6c>
    5654:	ea cf       	rjmp	.-44     	; 0x562a <__ultoa_invert+0x58>
    5656:	b4 e0       	ldi	r27, 0x04	; 4
    5658:	a6 95       	lsr	r26
    565a:	97 95       	ror	r25
    565c:	87 95       	ror	r24
    565e:	77 95       	ror	r23
    5660:	67 95       	ror	r22
    5662:	ba 95       	dec	r27
    5664:	c9 f7       	brne	.-14     	; 0x5658 <__ultoa_invert+0x86>
    5666:	00 97       	sbiw	r24, 0x00	; 0
    5668:	61 05       	cpc	r22, r1
    566a:	71 05       	cpc	r23, r1
    566c:	08 95       	ret
    566e:	9b 01       	movw	r18, r22
    5670:	ac 01       	movw	r20, r24
    5672:	0a 2e       	mov	r0, r26
    5674:	06 94       	lsr	r0
    5676:	57 95       	ror	r21
    5678:	47 95       	ror	r20
    567a:	37 95       	ror	r19
    567c:	27 95       	ror	r18
    567e:	ba 95       	dec	r27
    5680:	c9 f7       	brne	.-14     	; 0x5674 <__ultoa_invert+0xa2>
    5682:	62 0f       	add	r22, r18
    5684:	73 1f       	adc	r23, r19
    5686:	84 1f       	adc	r24, r20
    5688:	95 1f       	adc	r25, r21
    568a:	a0 1d       	adc	r26, r0
    568c:	08 95       	ret

0000568e <_exit>:
    568e:	f8 94       	cli

00005690 <__stop_program>:
    5690:	ff cf       	rjmp	.-2      	; 0x5690 <__stop_program>


SEP4Embd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000838  00800200  00006146  000061da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001246  00800a38  00800a38  00006a12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006a12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b90  00000000  00000000  00006ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f33a  00000000  00000000  00007640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d3a  00000000  00000000  0001697a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007047  00000000  00000000  0001a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002754  00000000  00000000  000216fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000449c  00000000  00000000  00023e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d39f  00000000  00000000  000282ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb8  00000000  00000000  0003568b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c2       	rjmp	.+1172   	; 0x496 <__ctors_end>
       2:	00 00       	nop
       4:	69 c2       	rjmp	.+1234   	; 0x4d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c2       	rjmp	.+1230   	; 0x4d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c2       	rjmp	.+1226   	; 0x4d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c2       	rjmp	.+1222   	; 0x4d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c2       	rjmp	.+1218   	; 0x4d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c2       	rjmp	.+1214   	; 0x4d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c2       	rjmp	.+1210   	; 0x4d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c2       	rjmp	.+1206   	; 0x4d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c2       	rjmp	.+1202   	; 0x4d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c2       	rjmp	.+1198   	; 0x4d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c2       	rjmp	.+1194   	; 0x4d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_12>
      34:	51 c2       	rjmp	.+1186   	; 0x4d8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c2       	rjmp	.+1182   	; 0x4d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c2       	rjmp	.+1178   	; 0x4d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c2       	rjmp	.+1174   	; 0x4d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c2       	rjmp	.+1170   	; 0x4d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c2       	rjmp	.+1166   	; 0x4d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c2       	rjmp	.+1162   	; 0x4d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c2       	rjmp	.+1158   	; 0x4d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c2       	rjmp	.+1154   	; 0x4d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c2       	rjmp	.+1150   	; 0x4d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c2       	rjmp	.+1146   	; 0x4d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c2       	rjmp	.+1142   	; 0x4d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__vector_25>
      68:	0c 94 ca 25 	jmp	0x4b94	; 0x4b94 <__vector_26>
      6c:	35 c2       	rjmp	.+1130   	; 0x4d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c2       	rjmp	.+1126   	; 0x4d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c2       	rjmp	.+1122   	; 0x4d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c2       	rjmp	.+1118   	; 0x4d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c2       	rjmp	.+1114   	; 0x4d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c2       	rjmp	.+1110   	; 0x4d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c2       	rjmp	.+1106   	; 0x4d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c2       	rjmp	.+1102   	; 0x4d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	25 c2       	rjmp	.+1098   	; 0x4d8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0e 26 	jmp	0x4c1c	; 0x4c1c <__vector_36>
      94:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__vector_37>
      98:	1f c2       	rjmp	.+1086   	; 0x4d8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <__vector_39>
      a0:	1b c2       	rjmp	.+1078   	; 0x4d8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	19 c2       	rjmp	.+1074   	; 0x4d8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	17 c2       	rjmp	.+1070   	; 0x4d8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	15 c2       	rjmp	.+1066   	; 0x4d8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	13 c2       	rjmp	.+1062   	; 0x4d8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	11 c2       	rjmp	.+1058   	; 0x4d8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0f c2       	rjmp	.+1054   	; 0x4d8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0d c2       	rjmp	.+1050   	; 0x4d8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0b c2       	rjmp	.+1046   	; 0x4d8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	09 c2       	rjmp	.+1042   	; 0x4d8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	07 c2       	rjmp	.+1038   	; 0x4d8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__vector_51>
      d0:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__vector_52>
      d4:	01 c2       	rjmp	.+1026   	; 0x4d8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3a 27 	jmp	0x4e74	; 0x4e74 <__vector_54>
      dc:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <__vector_55>
      e0:	fb c1       	rjmp	.+1014   	; 0x4d8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c1 01       	movw	r24, r2
      e6:	c1 01       	movw	r24, r2
      e8:	c1 01       	movw	r24, r2
      ea:	fb 01       	movw	r30, r22
      ec:	03 02       	muls	r16, r19
      ee:	19 02       	muls	r17, r25
      f0:	c1 01       	movw	r24, r2
      f2:	c1 01       	movw	r24, r2
      f4:	fb 01       	movw	r30, r22
      f6:	03 02       	muls	r16, r19
      f8:	1a 29       	or	r17, r10
      fa:	8a 29       	or	r24, r10
      fc:	8a 29       	or	r24, r10
      fe:	8a 29       	or	r24, r10
     100:	8a 29       	or	r24, r10
     102:	8a 29       	or	r24, r10
     104:	8a 29       	or	r24, r10
     106:	8a 29       	or	r24, r10
     108:	1a 29       	or	r17, r10
     10a:	8a 29       	or	r24, r10
     10c:	8a 29       	or	r24, r10
     10e:	8a 29       	or	r24, r10
     110:	8a 29       	or	r24, r10
     112:	8a 29       	or	r24, r10
     114:	8a 29       	or	r24, r10
     116:	8a 29       	or	r24, r10
     118:	1c 29       	or	r17, r12
     11a:	8a 29       	or	r24, r10
     11c:	8a 29       	or	r24, r10
     11e:	8a 29       	or	r24, r10
     120:	8a 29       	or	r24, r10
     122:	8a 29       	or	r24, r10
     124:	8a 29       	or	r24, r10
     126:	8a 29       	or	r24, r10
     128:	8a 29       	or	r24, r10
     12a:	8a 29       	or	r24, r10
     12c:	8a 29       	or	r24, r10
     12e:	8a 29       	or	r24, r10
     130:	8a 29       	or	r24, r10
     132:	8a 29       	or	r24, r10
     134:	8a 29       	or	r24, r10
     136:	8a 29       	or	r24, r10
     138:	1c 29       	or	r17, r12
     13a:	8a 29       	or	r24, r10
     13c:	8a 29       	or	r24, r10
     13e:	8a 29       	or	r24, r10
     140:	8a 29       	or	r24, r10
     142:	8a 29       	or	r24, r10
     144:	8a 29       	or	r24, r10
     146:	8a 29       	or	r24, r10
     148:	8a 29       	or	r24, r10
     14a:	8a 29       	or	r24, r10
     14c:	8a 29       	or	r24, r10
     14e:	8a 29       	or	r24, r10
     150:	8a 29       	or	r24, r10
     152:	8a 29       	or	r24, r10
     154:	8a 29       	or	r24, r10
     156:	8a 29       	or	r24, r10
     158:	86 29       	or	r24, r6
     15a:	8a 29       	or	r24, r10
     15c:	8a 29       	or	r24, r10
     15e:	8a 29       	or	r24, r10
     160:	8a 29       	or	r24, r10
     162:	8a 29       	or	r24, r10
     164:	8a 29       	or	r24, r10
     166:	8a 29       	or	r24, r10
     168:	51 29       	or	r21, r1
     16a:	8a 29       	or	r24, r10
     16c:	8a 29       	or	r24, r10
     16e:	8a 29       	or	r24, r10
     170:	8a 29       	or	r24, r10
     172:	8a 29       	or	r24, r10
     174:	8a 29       	or	r24, r10
     176:	8a 29       	or	r24, r10
     178:	8a 29       	or	r24, r10
     17a:	8a 29       	or	r24, r10
     17c:	8a 29       	or	r24, r10
     17e:	8a 29       	or	r24, r10
     180:	8a 29       	or	r24, r10
     182:	8a 29       	or	r24, r10
     184:	8a 29       	or	r24, r10
     186:	8a 29       	or	r24, r10
     188:	45 29       	or	r20, r5
     18a:	8a 29       	or	r24, r10
     18c:	8a 29       	or	r24, r10
     18e:	8a 29       	or	r24, r10
     190:	8a 29       	or	r24, r10
     192:	8a 29       	or	r24, r10
     194:	8a 29       	or	r24, r10
     196:	8a 29       	or	r24, r10
     198:	69 29       	or	r22, r9

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e e7       	ldi	r16, 0x7E	; 126
     19c:	1a e1       	ldi	r17, 0x1A	; 26
     19e:	0f 2e       	mov	r0, r31
     1a0:	fe ea       	ldi	r31, 0xAE	; 174
     1a2:	ef 2e       	mov	r14, r31
     1a4:	fa e1       	ldi	r31, 0x1A	; 26
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	ff d7       	rcall	.+4094   	; 0x11ca <uxListRemove>
     1cc:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxCurrentNumberOfTasks>
     1d6:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	4c d7       	rcall	.+3736   	; 0x1082 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	4a d7       	rcall	.+3732   	; 0x1082 <vPortFree>
     1ee:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	10 f0       	brcs	.+4      	; 0x202 <prvIdleTask+0x68>
     1fe:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
     202:	0e 94 42 1b 	call	0x3684	; 0x3684 <vApplicationIdleHook>
     206:	d1 cf       	rjmp	.-94     	; 0x1aa <prvIdleTask+0x10>

00000208 <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	60 97       	sbiw	r28, 0x10	; 16
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	89 87       	std	Y+9, r24	; 0x09
     224:	81 2c       	mov	r8, r1
     226:	91 2c       	mov	r9, r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	69 84       	ldd	r6, Y+9	; 0x09
     22e:	7a 84       	ldd	r7, Y+10	; 0x0a
     230:	e0 91 e6 1a 	lds	r30, 0x1AE6	; 0x801ae6 <pxCurrentTimerList>
     234:	f0 91 e7 1a 	lds	r31, 0x1AE7	; 0x801ae7 <pxCurrentTimerList+0x1>
     238:	80 81       	ld	r24, Z
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <prvTimerTask+0x38>
     23e:	11 c1       	rjmp	.+546    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     240:	07 80       	ldd	r0, Z+7	; 0x07
     242:	f0 85       	ldd	r31, Z+8	; 0x08
     244:	e0 2d       	mov	r30, r0
     246:	20 80       	ld	r2, Z
     248:	31 80       	ldd	r3, Z+1	; 0x01
     24a:	42 80       	ldd	r4, Z+2	; 0x02
     24c:	53 80       	ldd	r5, Z+3	; 0x03
     24e:	0e 94 1a 13 	call	0x2634	; 0x2634 <vTaskSuspendAll>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 ac 1a 	call	0x3558	; 0x3558 <prvSampleTimeNow>
     25a:	6b 87       	std	Y+11, r22	; 0x0b
     25c:	7c 87       	std	Y+12, r23	; 0x0c
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	9e 87       	std	Y+14, r25	; 0x0e
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	81 11       	cpse	r24, r1
     266:	66 c0       	rjmp	.+204    	; 0x334 <prvTimerTask+0x12c>
     268:	8b 85       	ldd	r24, Y+11	; 0x0b
     26a:	9c 85       	ldd	r25, Y+12	; 0x0c
     26c:	ad 85       	ldd	r26, Y+13	; 0x0d
     26e:	be 85       	ldd	r27, Y+14	; 0x0e
     270:	82 15       	cp	r24, r2
     272:	93 05       	cpc	r25, r3
     274:	a4 05       	cpc	r26, r4
     276:	b5 05       	cpc	r27, r5
     278:	08 f4       	brcc	.+2      	; 0x27c <prvTimerTask+0x74>
     27a:	44 c0       	rjmp	.+136    	; 0x304 <prvTimerTask+0xfc>
     27c:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
     280:	e0 91 e6 1a 	lds	r30, 0x1AE6	; 0x801ae6 <pxCurrentTimerList>
     284:	f0 91 e7 1a 	lds	r31, 0x1AE7	; 0x801ae7 <pxCurrentTimerList+0x1>
     288:	07 80       	ldd	r0, Z+7	; 0x07
     28a:	f0 85       	ldd	r31, Z+8	; 0x08
     28c:	e0 2d       	mov	r30, r0
     28e:	a0 85       	ldd	r26, Z+8	; 0x08
     290:	b1 85       	ldd	r27, Z+9	; 0x09
     292:	b8 8b       	std	Y+16, r27	; 0x10
     294:	af 87       	std	Y+15, r26	; 0x0f
     296:	cd 01       	movw	r24, r26
     298:	02 96       	adiw	r24, 0x02	; 2
     29a:	97 d7       	rcall	.+3886   	; 0x11ca <uxListRemove>
     29c:	ef 85       	ldd	r30, Y+15	; 0x0f
     29e:	f8 89       	ldd	r31, Y+16	; 0x10
     2a0:	87 89       	ldd	r24, Z+23	; 0x17
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <prvTimerTask+0xe0>
     2a6:	46 85       	ldd	r20, Z+14	; 0x0e
     2a8:	57 85       	ldd	r21, Z+15	; 0x0f
     2aa:	60 89       	ldd	r22, Z+16	; 0x10
     2ac:	71 89       	ldd	r23, Z+17	; 0x11
     2ae:	42 0d       	add	r20, r2
     2b0:	53 1d       	adc	r21, r3
     2b2:	64 1d       	adc	r22, r4
     2b4:	75 1d       	adc	r23, r5
     2b6:	72 01       	movw	r14, r4
     2b8:	61 01       	movw	r12, r2
     2ba:	0b 85       	ldd	r16, Y+11	; 0x0b
     2bc:	1c 85       	ldd	r17, Y+12	; 0x0c
     2be:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 bb 19 	call	0x3376	; 0x3376 <prvInsertTimerInActiveList>
     2c8:	88 23       	and	r24, r24
     2ca:	99 f0       	breq	.+38     	; 0x2f2 <prvTimerTask+0xea>
     2cc:	c8 2c       	mov	r12, r8
     2ce:	d9 2c       	mov	r13, r9
     2d0:	ea 2c       	mov	r14, r10
     2d2:	fb 2c       	mov	r15, r11
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	a2 01       	movw	r20, r4
     2da:	91 01       	movw	r18, r2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	0e 94 4e 1a 	call	0x349c	; 0x349c <xTimerGenericCommand>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <prvTimerTask+0xea>
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	af 85       	ldd	r26, Y+15	; 0x0f
     2ec:	b8 89       	ldd	r27, Y+16	; 0x10
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	8c 93       	st	X, r24
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	54 96       	adiw	r26, 0x14	; 20
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	55 97       	sbiw	r26, 0x15	; 21
     2fe:	cd 01       	movw	r24, r26
     300:	19 95       	eicall
     302:	a0 c0       	rjmp	.+320    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	b2 01       	movw	r22, r4
     308:	a1 01       	movw	r20, r2
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	48 1b       	sub	r20, r24
     314:	59 0b       	sbc	r21, r25
     316:	6a 0b       	sbc	r22, r26
     318:	7b 0b       	sbc	r23, r27
     31a:	80 91 e2 1a 	lds	r24, 0x1AE2	; 0x801ae2 <xTimerQueue>
     31e:	90 91 e3 1a 	lds	r25, 0x1AE3	; 0x801ae3 <xTimerQueue+0x1>
     322:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <vQueueWaitForMessageRestricted>
     326:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
     32a:	81 11       	cpse	r24, r1
     32c:	8b c0       	rjmp	.+278    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     32e:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
     332:	88 c0       	rjmp	.+272    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     334:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
     338:	85 c0       	rjmp	.+266    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	88 23       	and	r24, r24
     33e:	0c f4       	brge	.+2      	; 0x342 <prvTimerTask+0x13a>
     340:	81 c0       	rjmp	.+258    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     342:	4e 80       	ldd	r4, Y+6	; 0x06
     344:	5f 80       	ldd	r5, Y+7	; 0x07
     346:	d2 01       	movw	r26, r4
     348:	1c 96       	adiw	r26, 0x0c	; 12
     34a:	8d 91       	ld	r24, X+
     34c:	9c 91       	ld	r25, X
     34e:	1d 97       	sbiw	r26, 0x0d	; 13
     350:	89 2b       	or	r24, r25
     352:	19 f0       	breq	.+6      	; 0x35a <prvTimerTask+0x152>
     354:	c2 01       	movw	r24, r4
     356:	02 96       	adiw	r24, 0x02	; 2
     358:	38 d7       	rcall	.+3696   	; 0x11ca <uxListRemove>
     35a:	ce 01       	movw	r24, r28
     35c:	08 96       	adiw	r24, 0x08	; 8
     35e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <prvSampleTimeNow>
     362:	8b 01       	movw	r16, r22
     364:	9c 01       	movw	r18, r24
     366:	e9 81       	ldd	r30, Y+1	; 0x01
     368:	0e 2e       	mov	r0, r30
     36a:	00 0c       	add	r0, r0
     36c:	ff 0b       	sbc	r31, r31
     36e:	ea 30       	cpi	r30, 0x0A	; 10
     370:	f1 05       	cpc	r31, r1
     372:	08 f0       	brcs	.+2      	; 0x376 <prvTimerTask+0x16e>
     374:	67 c0       	rjmp	.+206    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     376:	88 27       	eor	r24, r24
     378:	ee 58       	subi	r30, 0x8E	; 142
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	8f 4f       	sbci	r24, 0xFF	; 255
     37e:	0c 94 dd 2b 	jmp	0x57ba	; 0x57ba <__tablejump2__>
     382:	f2 01       	movw	r30, r4
     384:	87 89       	ldd	r24, Z+23	; 0x17
     386:	81 60       	ori	r24, 0x01	; 1
     388:	87 8b       	std	Z+23, r24	; 0x17
     38a:	ca 80       	ldd	r12, Y+2	; 0x02
     38c:	db 80       	ldd	r13, Y+3	; 0x03
     38e:	ec 80       	ldd	r14, Y+4	; 0x04
     390:	fd 80       	ldd	r15, Y+5	; 0x05
     392:	46 85       	ldd	r20, Z+14	; 0x0e
     394:	57 85       	ldd	r21, Z+15	; 0x0f
     396:	60 89       	ldd	r22, Z+16	; 0x10
     398:	71 89       	ldd	r23, Z+17	; 0x11
     39a:	4c 0d       	add	r20, r12
     39c:	5d 1d       	adc	r21, r13
     39e:	6e 1d       	adc	r22, r14
     3a0:	7f 1d       	adc	r23, r15
     3a2:	c2 01       	movw	r24, r4
     3a4:	0e 94 bb 19 	call	0x3376	; 0x3376 <prvInsertTimerInActiveList>
     3a8:	88 23       	and	r24, r24
     3aa:	09 f4       	brne	.+2      	; 0x3ae <prvTimerTask+0x1a6>
     3ac:	4b c0       	rjmp	.+150    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3ae:	d2 01       	movw	r26, r4
     3b0:	54 96       	adiw	r26, 0x14	; 20
     3b2:	ed 91       	ld	r30, X+
     3b4:	fc 91       	ld	r31, X
     3b6:	55 97       	sbiw	r26, 0x15	; 21
     3b8:	c2 01       	movw	r24, r4
     3ba:	19 95       	eicall
     3bc:	f2 01       	movw	r30, r4
     3be:	87 89       	ldd	r24, Z+23	; 0x17
     3c0:	82 ff       	sbrs	r24, 2
     3c2:	40 c0       	rjmp	.+128    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3c4:	4a 81       	ldd	r20, Y+2	; 0x02
     3c6:	5b 81       	ldd	r21, Y+3	; 0x03
     3c8:	6c 81       	ldd	r22, Y+4	; 0x04
     3ca:	7d 81       	ldd	r23, Y+5	; 0x05
     3cc:	86 85       	ldd	r24, Z+14	; 0x0e
     3ce:	97 85       	ldd	r25, Z+15	; 0x0f
     3d0:	a0 89       	ldd	r26, Z+16	; 0x10
     3d2:	b1 89       	ldd	r27, Z+17	; 0x11
     3d4:	9a 01       	movw	r18, r20
     3d6:	ab 01       	movw	r20, r22
     3d8:	28 0f       	add	r18, r24
     3da:	39 1f       	adc	r19, r25
     3dc:	4a 1f       	adc	r20, r26
     3de:	5b 1f       	adc	r21, r27
     3e0:	c8 2c       	mov	r12, r8
     3e2:	d9 2c       	mov	r13, r9
     3e4:	ea 2c       	mov	r14, r10
     3e6:	fb 2c       	mov	r15, r11
     3e8:	00 e0       	ldi	r16, 0x00	; 0
     3ea:	10 e0       	ldi	r17, 0x00	; 0
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	c2 01       	movw	r24, r4
     3f0:	0e 94 4e 1a 	call	0x349c	; 0x349c <xTimerGenericCommand>
     3f4:	27 c0       	rjmp	.+78     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3f6:	d2 01       	movw	r26, r4
     3f8:	57 96       	adiw	r26, 0x17	; 23
     3fa:	8c 91       	ld	r24, X
     3fc:	57 97       	sbiw	r26, 0x17	; 23
     3fe:	8e 7f       	andi	r24, 0xFE	; 254
     400:	57 96       	adiw	r26, 0x17	; 23
     402:	8c 93       	st	X, r24
     404:	1f c0       	rjmp	.+62     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     406:	f2 01       	movw	r30, r4
     408:	87 89       	ldd	r24, Z+23	; 0x17
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	87 8b       	std	Z+23, r24	; 0x17
     40e:	4a 81       	ldd	r20, Y+2	; 0x02
     410:	5b 81       	ldd	r21, Y+3	; 0x03
     412:	6c 81       	ldd	r22, Y+4	; 0x04
     414:	7d 81       	ldd	r23, Y+5	; 0x05
     416:	46 87       	std	Z+14, r20	; 0x0e
     418:	57 87       	std	Z+15, r21	; 0x0f
     41a:	60 8b       	std	Z+16, r22	; 0x10
     41c:	71 8b       	std	Z+17, r23	; 0x11
     41e:	40 0f       	add	r20, r16
     420:	51 1f       	adc	r21, r17
     422:	62 1f       	adc	r22, r18
     424:	73 1f       	adc	r23, r19
     426:	68 01       	movw	r12, r16
     428:	79 01       	movw	r14, r18
     42a:	c2 01       	movw	r24, r4
     42c:	0e 94 bb 19 	call	0x3376	; 0x3376 <prvInsertTimerInActiveList>
     430:	09 c0       	rjmp	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     432:	f2 01       	movw	r30, r4
     434:	87 89       	ldd	r24, Z+23	; 0x17
     436:	81 fd       	sbrc	r24, 1
     438:	03 c0       	rjmp	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43a:	c2 01       	movw	r24, r4
     43c:	22 d6       	rcall	.+3140   	; 0x1082 <vPortFree>
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     440:	8e 7f       	andi	r24, 0xFE	; 254
     442:	87 8b       	std	Z+23, r24	; 0x17
     444:	28 2d       	mov	r18, r8
     446:	39 2d       	mov	r19, r9
     448:	4a 2d       	mov	r20, r10
     44a:	5b 2d       	mov	r21, r11
     44c:	66 2d       	mov	r22, r6
     44e:	77 2d       	mov	r23, r7
     450:	80 91 e2 1a 	lds	r24, 0x1AE2	; 0x801ae2 <xTimerQueue>
     454:	90 91 e3 1a 	lds	r25, 0x1AE3	; 0x801ae3 <xTimerQueue+0x1>
     458:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xQueueReceive>
     45c:	81 11       	cpse	r24, r1
     45e:	6d cf       	rjmp	.-294    	; 0x33a <prvTimerTask+0x132>
     460:	e7 ce       	rjmp	.-562    	; 0x230 <prvTimerTask+0x28>
     462:	0e 94 1a 13 	call	0x2634	; 0x2634 <vTaskSuspendAll>
     466:	ce 01       	movw	r24, r28
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <prvSampleTimeNow>
     46e:	6b 87       	std	Y+11, r22	; 0x0b
     470:	7c 87       	std	Y+12, r23	; 0x0c
     472:	8d 87       	std	Y+13, r24	; 0x0d
     474:	9e 87       	std	Y+14, r25	; 0x0e
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	81 11       	cpse	r24, r1
     47a:	5c cf       	rjmp	.-328    	; 0x334 <prvTimerTask+0x12c>
     47c:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <pxOverflowTimerList>
     480:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <pxOverflowTimerList+0x1>
     484:	80 81       	ld	r24, Z
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	81 11       	cpse	r24, r1
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	28 2c       	mov	r2, r8
     48e:	39 2c       	mov	r3, r9
     490:	4a 2c       	mov	r4, r10
     492:	5b 2c       	mov	r5, r11
     494:	38 cf       	rjmp	.-400    	; 0x306 <prvTimerTask+0xfe>

00000496 <__ctors_end>:
     496:	11 24       	eor	r1, r1
     498:	1f be       	out	0x3f, r1	; 63
     49a:	cf ef       	ldi	r28, 0xFF	; 255
     49c:	d1 e2       	ldi	r29, 0x21	; 33
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	0c bf       	out	0x3c, r16	; 60

000004a6 <__do_copy_data>:
     4a6:	1a e0       	ldi	r17, 0x0A	; 10
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b2 e0       	ldi	r27, 0x02	; 2
     4ac:	e6 e4       	ldi	r30, 0x46	; 70
     4ae:	f1 e6       	ldi	r31, 0x61	; 97
     4b0:	00 e0       	ldi	r16, 0x00	; 0
     4b2:	0b bf       	out	0x3b, r16	; 59
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__do_copy_data+0x14>
     4b6:	07 90       	elpm	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	a8 33       	cpi	r26, 0x38	; 56
     4bc:	b1 07       	cpc	r27, r17
     4be:	d9 f7       	brne	.-10     	; 0x4b6 <__do_copy_data+0x10>

000004c0 <__do_clear_bss>:
     4c0:	2c e1       	ldi	r18, 0x1C	; 28
     4c2:	a8 e3       	ldi	r26, 0x38	; 56
     4c4:	ba e0       	ldi	r27, 0x0A	; 10
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <.do_clear_bss_start>

000004c8 <.do_clear_bss_loop>:
     4c8:	1d 92       	st	X+, r1

000004ca <.do_clear_bss_start>:
     4ca:	ae 37       	cpi	r26, 0x7E	; 126
     4cc:	b2 07       	cpc	r27, r18
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <.do_clear_bss_loop>
     4d0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <main>
     4d4:	0c 94 a1 30 	jmp	0x6142	; 0x6142 <_exit>

000004d8 <__bad_interrupt>:
     4d8:	93 cd       	rjmp	.-1242   	; 0x0 <__vectors>

000004da <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <lora_handler_task+0x6>
     4e0:	1f 92       	push	r1
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 29 20 	call	0x4052	; 0x4052 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>
	lora_driver_reset_rn2483(0);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 29 20 	call	0x4052	; 0x4052 <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     4fe:	66 e9       	ldi	r22, 0x96	; 150
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     50a:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     514:	0e 94 3d 20 	call	0x407a	; 0x407a <lora_driver_rn2483_factory_reset>
     518:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	8e e6       	ldi	r24, 0x6E	; 110
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     52c:	0e 94 bb 21 	call	0x4376	; 0x4376 <lora_driver_configure_to_eu868>
     530:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	81 e8       	ldi	r24, 0x81	; 129
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     544:	8e e4       	ldi	r24, 0x4E	; 78
     546:	9a e0       	ldi	r25, 0x0A	; 10
     548:	0e 94 4f 20 	call	0x409e	; 0x409e <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     54c:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     550:	0e e4       	ldi	r16, 0x4E	; 78
     552:	1a e0       	ldi	r17, 0x0A	; 10
     554:	1f 93       	push	r17
     556:	0f 93       	push	r16
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	8a e9       	ldi	r24, 0x9A	; 154
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     568:	c8 01       	movw	r24, r16
     56a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_set_device_identifier>
     56e:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	1f 93       	push	r17
     578:	0f 93       	push	r16
     57a:	8e ea       	ldi	r24, 0xAE	; 174
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	9f 93       	push	r25
     580:	8f 93       	push	r24
     582:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     586:	a8 01       	movw	r20, r16
     588:	63 ec       	ldi	r22, 0xC3	; 195
     58a:	72 e0       	ldi	r23, 0x02	; 2
     58c:	84 ee       	ldi	r24, 0xE4	; 228
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	0e 94 99 22 	call	0x4532	; 0x4532 <lora_driver_set_otaa_identity>
     594:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     598:	9f 93       	push	r25
     59a:	8f 93       	push	r24
     59c:	1f 93       	push	r17
     59e:	0f 93       	push	r16
     5a0:	83 ec       	ldi	r24, 0xC3	; 195
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	84 ee       	ldi	r24, 0xE4	; 228
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	85 ef       	ldi	r24, 0xF5	; 245
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     5bc:	0e 94 9e 20 	call	0x413c	; 0x413c <lora_driver_save_mac>
     5c0:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	8b e2       	ldi	r24, 0x2B	; 43
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 98 21 	call	0x4330	; 0x4330 <lora_driver_set_adaptive_data_rate>
     5e4:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	8a e3       	ldi	r24, 0x3A	; 58
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     5f8:	84 ef       	ldi	r24, 0xF4	; 244
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 a3 21 	call	0x4346	; 0x4346 <lora_driver_set_receive_delay>
     600:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	8f 93       	push	r24
     60c:	84 ef       	ldi	r24, 0xF4	; 244
     60e:	8f 93       	push	r24
     610:	8b e5       	ldi	r24, 0x5B	; 91
     612:	93 e0       	ldi	r25, 0x03	; 3
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	0a e0       	ldi	r16, 0x0A	; 10
     628:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     62a:	0f 2e       	mov	r0, r31
     62c:	fb e7       	ldi	r31, 0x7B	; 123
     62e:	ef 2e       	mov	r14, r31
     630:	f3 e0       	ldi	r31, 0x03	; 3
     632:	ff 2e       	mov	r15, r31
     634:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 a4 20 	call	0x4148	; 0x4148 <lora_driver_join>
     63c:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     63e:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	1f 93       	push	r17
     648:	0f 93       	push	r16
     64a:	ff 92       	push	r15
     64c:	ef 92       	push	r14
     64e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>

		if ( rc != LoRa_ACCEPTED)
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	f8 e0       	ldi	r31, 0x08	; 8
     660:	df 16       	cp	r13, r31
     662:	d9 f1       	breq	.+118    	; 0x6da <lora_handler_task+0x200>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     66a:	66 e3       	ldi	r22, 0x36	; 54
     66c:	71 e0       	ldi	r23, 0x01	; 1
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>
     676:	01 50       	subi	r16, 0x01	; 1
     678:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     67a:	e9 f6       	brne	.-70     	; 0x636 <lora_handler_task+0x15c>
     67c:	27 c0       	rjmp	.+78     	; 0x6cc <lora_handler_task+0x1f2>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     67e:	7a d6       	rcall	.+3316   	; 0x1374 <vPortYield>
     680:	fe cf       	rjmp	.-4      	; 0x67e <lora_handler_task+0x1a4>
	 const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     682:	4c e6       	ldi	r20, 0x6C	; 108
     684:	52 e0       	ldi	r21, 0x02	; 2
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	ce 01       	movw	r24, r28
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <vTaskDelayUntil>
		int16_t noise = 4550; // Dummy CO2

		//uint16_t ppm;
		//mh_z19_return_code_t rc;
		
		_uplink_payload.bytes[0] = hum >> 8;
     692:	f8 01       	movw	r30, r16
     694:	c2 82       	std	Z+2, r12	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     696:	83 82       	std	Z+3, r8	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     698:	d4 82       	std	Z+4, r13	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     69a:	95 82       	std	Z+5, r9	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     69c:	c6 82       	std	Z+6, r12	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     69e:	a7 82       	std	Z+7, r10	; 0x07
		_uplink_payload.bytes[6] = noise >> 8;
     6a0:	d0 86       	std	Z+8, r13	; 0x08
		_uplink_payload.bytes[7] = noise & 0xFF;
     6a2:	b1 86       	std	Z+9, r11	; 0x09

		led_short_puls(led_ST4);  // OPTIONAL
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     6aa:	b8 01       	movw	r22, r16
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 cd 20 	call	0x419a	; 0x419a <lora_driver_sent_upload_message>
     6b2:	0e 94 ba 22 	call	0x4574	; 0x4574 <lora_driver_map_return_code_to_text>
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	ff 92       	push	r15
     6bc:	ef 92       	push	r14
     6be:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <printf>
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	db cf       	rjmp	.-74     	; 0x682 <lora_handler_task+0x1a8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <led_fast_blink>
     6d8:	d2 cf       	rjmp	.-92     	; 0x67e <lora_handler_task+0x1a4>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 8;
     6e0:	e8 e3       	ldi	r30, 0x38	; 56
     6e2:	fa e0       	ldi	r31, 0x0A	; 10
     6e4:	88 e0       	ldi	r24, 0x08	; 8
     6e6:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     6ec:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskGetTickCount>
     6f0:	69 83       	std	Y+1, r22	; 0x01
     6f2:	7a 83       	std	Y+2, r23	; 0x02
     6f4:	8b 83       	std	Y+3, r24	; 0x03
     6f6:	9c 83       	std	Y+4, r25	; 0x04
		int16_t noise = 4550; // Dummy CO2

		//uint16_t ppm;
		//mh_z19_return_code_t rc;
		
		_uplink_payload.bytes[0] = hum >> 8;
     6f8:	08 e3       	ldi	r16, 0x38	; 56
     6fa:	1a e0       	ldi	r17, 0x0A	; 10
     6fc:	0f 2e       	mov	r0, r31
     6fe:	ff e0       	ldi	r31, 0x0F	; 15
     700:	cf 2e       	mov	r12, r31
     702:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
     704:	0f 2e       	mov	r0, r31
     706:	f0 ea       	ldi	r31, 0xA0	; 160
     708:	8f 2e       	mov	r8, r31
     70a:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
     70c:	0f 2e       	mov	r0, r31
     70e:	f1 e1       	ldi	r31, 0x11	; 17
     710:	df 2e       	mov	r13, r31
     712:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[3] = temp & 0xFF;
     714:	0f 2e       	mov	r0, r31
     716:	f8 ef       	ldi	r31, 0xF8	; 248
     718:	9f 2e       	mov	r9, r31
     71a:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     71c:	0f 2e       	mov	r0, r31
     71e:	f2 ed       	ldi	r31, 0xD2	; 210
     720:	af 2e       	mov	r10, r31
     722:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[6] = noise >> 8;
		_uplink_payload.bytes[7] = noise & 0xFF;
     724:	0f 2e       	mov	r0, r31
     726:	f6 ec       	ldi	r31, 0xC6	; 198
     728:	bf 2e       	mov	r11, r31
     72a:	f0 2d       	mov	r31, r0

		led_short_puls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     72c:	0f 2e       	mov	r0, r31
     72e:	fb e9       	ldi	r31, 0x9B	; 155
     730:	ef 2e       	mov	r14, r31
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	ff 2e       	mov	r15, r31
     736:	f0 2d       	mov	r31, r0
     738:	a4 cf       	rjmp	.-184    	; 0x682 <lora_handler_task+0x1a8>

0000073a <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
	xTaskCreate(
     740:	e1 2c       	mov	r14, r1
     742:	f1 2c       	mov	r15, r1
     744:	08 2f       	mov	r16, r24
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	48 e8       	ldi	r20, 0x88	; 136
     74c:	51 e0       	ldi	r21, 0x01	; 1
     74e:	60 eb       	ldi	r22, 0xB0	; 176
     750:	73 e0       	ldi	r23, 0x03	; 3
     752:	8d e6       	ldi	r24, 0x6D	; 109
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	0e 94 bf 11 	call	0x237e	; 0x237e <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	08 95       	ret

00000762 <my_co2_call_back>:
	}
	else
	{
		return self->lastCO2ppm;
	}
}
     762:	bc 01       	movw	r22, r24
     764:	87 eb       	ldi	r24, 0xB7	; 183
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	ce c0       	rjmp	.+412    	; 0x906 <Logging_MeasureInt>
     76a:	08 95       	ret

0000076c <createCO2>:
     76c:	80 91 b2 0a 	lds	r24, 0x0AB2	; 0x800ab2 <driverInitialized>
     770:	90 91 b3 0a 	lds	r25, 0x0AB3	; 0x800ab3 <driverInitialized+0x1>
     774:	89 2b       	or	r24, r25
     776:	79 f4       	brne	.+30     	; 0x796 <createCO2+0x2a>
     778:	61 eb       	ldi	r22, 0xB1	; 177
     77a:	73 e0       	ldi	r23, 0x03	; 3
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <mh_z19_create>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	90 93 b3 0a 	sts	0x0AB3, r25	; 0x800ab3 <driverInitialized+0x1>
     78a:	80 93 b2 0a 	sts	0x0AB2, r24	; 0x800ab2 <driverInitialized>
     78e:	86 ec       	ldi	r24, 0xC6	; 198
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	f1 d0       	rcall	.+482    	; 0x976 <Logging_Info>
     794:	03 c0       	rjmp	.+6      	; 0x79c <createCO2+0x30>
     796:	8e ed       	ldi	r24, 0xDE	; 222
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	fb d0       	rcall	.+502    	; 0x992 <Logging_Error>
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <calloc>
     7a8:	2f ef       	ldi	r18, 0xFF	; 255
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	fc 01       	movw	r30, r24
     7ae:	31 83       	std	Z+1, r19	; 0x01
     7b0:	20 83       	st	Z, r18
     7b2:	08 95       	ret

000007b4 <CO2_task>:

void CO2_task(void* pvParameters) {
     7b4:	fc 01       	movw	r30, r24
	const CO2_t sensor = ((void**)pvParameters)[0];
     7b6:	a0 80       	ld	r10, Z
     7b8:	b1 80       	ldd	r11, Z+1	; 0x01
	const EventGroupHandle_t measureEventGroup = ((void**)pvParameters)[1];
     7ba:	c2 81       	ldd	r28, Z+2	; 0x02
     7bc:	d3 81       	ldd	r29, Z+3	; 0x03
	const EventGroupHandle_t dataReadyEventGroup = ((void**)pvParameters)[2];
     7be:	84 80       	ldd	r8, Z+4	; 0x04
     7c0:	95 80       	ldd	r9, Z+5	; 0x05


	while (1) {
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f8 ee       	ldi	r31, 0xE8	; 232
     7c6:	cf 2e       	mov	r12, r31
     7c8:	f3 e0       	ldi	r31, 0x03	; 3
     7ca:	df 2e       	mov	r13, r31
     7cc:	e1 2c       	mov	r14, r1
     7ce:	f1 2c       	mov	r15, r1
     7d0:	f0 2d       	mov	r31, r0
     7d2:	01 e0       	ldi	r16, 0x01	; 1
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	ce 01       	movw	r24, r28
     7e0:	d4 d1       	rcall	.+936    	; 0xb8a <xEventGroupWaitBits>
			CO2_MEASURE_BIT,
			pdFALSE,
			pdTRUE,
			1000);

		if ((uxBits & (CO2_MEASURE_BIT)) == (CO2_MEASURE_BIT)) {
     7e2:	60 ff       	sbrs	r22, 0
     7e4:	28 c0       	rjmp	.+80     	; 0x836 <CO2_task+0x82>
			mh_z19_return_code_t rc = mh_z19_take_meassuring();
     7e6:	0e 94 11 24 	call	0x4822	; 0x4822 <mh_z19_take_meassuring>
     7ea:	18 2f       	mov	r17, r24

			//make this delay 500 ms
			vTaskDelay(500);
     7ec:	64 ef       	ldi	r22, 0xF4	; 244
     7ee:	71 e0       	ldi	r23, 0x01	; 1
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>

			if (rc == MHZ19_OK)
     7f8:	11 11       	cpse	r17, r1
     7fa:	19 c0       	rjmp	.+50     	; 0x82e <CO2_task+0x7a>
			{
				if (mh_z19_get_co2_ppm(&sensor->lastCO2ppm) == MHZ19_OK)
     7fc:	c5 01       	movw	r24, r10
     7fe:	0e 94 40 24 	call	0x4880	; 0x4880 <mh_z19_get_co2_ppm>
     802:	81 11       	cpse	r24, r1
     804:	10 c0       	rjmp	.+32     	; 0x826 <CO2_task+0x72>
				{
					xEventGroupSetBits(dataReadyEventGroup, CO2_READY_BIT);
     806:	48 e0       	ldi	r20, 0x08	; 8
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	c4 01       	movw	r24, r8
     810:	99 d2       	rcall	.+1330   	; 0xd44 <xEventGroupSetBits>
					xEventGroupClearBits(measureEventGroup, CO2_MEASURE_BIT);
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	ce 01       	movw	r24, r28
     81c:	76 d2       	rcall	.+1260   	; 0xd0a <xEventGroupClearBits>
					Logging_Info("CO2_READY_BIT set.");
     81e:	8e e2       	ldi	r24, 0x2E	; 46
     820:	94 e0       	ldi	r25, 0x04	; 4
     822:	a9 d0       	rcall	.+338    	; 0x976 <Logging_Info>
     824:	ce cf       	rjmp	.-100    	; 0x7c2 <CO2_task+0xe>
				}
				else
				{
					Logging_Error("Something went wrong when saving the data.");
     826:	81 e4       	ldi	r24, 0x41	; 65
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	b3 d0       	rcall	.+358    	; 0x992 <Logging_Error>
     82c:	ca cf       	rjmp	.-108    	; 0x7c2 <CO2_task+0xe>
				}
			}
			else
			{
				Logging_Error("Measuring unsuccessful.");
     82e:	8c e6       	ldi	r24, 0x6C	; 108
     830:	94 e0       	ldi	r25, 0x04	; 4
     832:	af d0       	rcall	.+350    	; 0x992 <Logging_Error>
     834:	c6 cf       	rjmp	.-116    	; 0x7c2 <CO2_task+0xe>
			}
		}
		else
		{
			Logging_Error("Timed-out waiting for CO2_MEASURE_BIT to be set in measureEventGroup.");
     836:	84 e8       	ldi	r24, 0x84	; 132
     838:	94 e0       	ldi	r25, 0x04	; 4
     83a:	ab d0       	rcall	.+342    	; 0x992 <Logging_Error>
     83c:	c2 cf       	rjmp	.-124    	; 0x7c2 <CO2_task+0xe>

0000083e <_FormattingString>:
     83e:	ef 92       	push	r14
void Logging_MeasureFloat(char* message, float data)
{
	char* measureMsg = _FormattingWithDataFloat(data, message, "MEASUREMENT");
	_ProtectResoucres(measureMsg);
	free(measureMsg);
}
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	18 2f       	mov	r17, r24
     84c:	09 2f       	mov	r16, r25
     84e:	f6 2e       	mov	r15, r22
     850:	e7 2e       	mov	r14, r23
     852:	e8 2f       	mov	r30, r24
     854:	f9 2f       	mov	r31, r25
     856:	df 01       	movw	r26, r30
     858:	0d 90       	ld	r0, X+
     85a:	00 20       	and	r0, r0
     85c:	e9 f7       	brne	.-6      	; 0x858 <_FormattingString+0x1a>
     85e:	bd 01       	movw	r22, r26
     860:	6e 1b       	sub	r22, r30
     862:	7f 0b       	sbc	r23, r31
     864:	67 5f       	subi	r22, 0xF7	; 247
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <calloc>
     870:	d8 2f       	mov	r29, r24
     872:	c9 2f       	mov	r28, r25
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	8a ec       	ldi	r24, 0xCA	; 202
     87e:	94 e0       	ldi	r25, 0x04	; 4
     880:	9f 93       	push	r25
     882:	8f 93       	push	r24
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
     88c:	8d b7       	in	r24, 0x3d	; 61
     88e:	9e b7       	in	r25, 0x3e	; 62
     890:	08 96       	adiw	r24, 0x08	; 8
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	9e bf       	out	0x3e, r25	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	8d bf       	out	0x3d, r24	; 61
     89c:	8d 2f       	mov	r24, r29
     89e:	9c 2f       	mov	r25, r28
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <_ProtectResoucres>:
     8ae:	0f 93       	push	r16
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	80 91 5a 1c 	lds	r24, 0x1C5A	; 0x801c5a <semaphoreMutex>
     8ba:	90 91 5b 1c 	lds	r25, 0x1C5B	; 0x801c5b <semaphoreMutex+0x1>
     8be:	89 2b       	or	r24, r25
     8c0:	39 f4       	brne	.+14     	; 0x8d0 <_ProtectResoucres+0x22>
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <xQueueCreateMutex>
     8c8:	90 93 5b 1c 	sts	0x1C5B, r25	; 0x801c5b <semaphoreMutex+0x1>
     8cc:	80 93 5a 1c 	sts	0x1C5A, r24	; 0x801c5a <semaphoreMutex>
     8d0:	4f ef       	ldi	r20, 0xFF	; 255
     8d2:	5f ef       	ldi	r21, 0xFF	; 255
     8d4:	ba 01       	movw	r22, r20
     8d6:	80 91 5a 1c 	lds	r24, 0x1C5A	; 0x801c5a <semaphoreMutex>
     8da:	90 91 5b 1c 	lds	r25, 0x1C5B	; 0x801c5b <semaphoreMutex+0x1>
     8de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <xQueueSemaphoreTake>
     8e2:	ce 01       	movw	r24, r28
     8e4:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <puts>
     8e8:	00 e0       	ldi	r16, 0x00	; 0
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	a9 01       	movw	r20, r18
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	80 91 5a 1c 	lds	r24, 0x1C5A	; 0x801c5a <semaphoreMutex>
     8f8:	90 91 5b 1c 	lds	r25, 0x1C5B	; 0x801c5b <semaphoreMutex+0x1>
     8fc:	45 d7       	rcall	.+3722   	; 0x1788 <xQueueGenericSend>
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <Logging_MeasureInt>:
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	18 2f       	mov	r17, r24
     914:	09 2f       	mov	r16, r25
     916:	f6 2e       	mov	r15, r22
     918:	e7 2e       	mov	r14, r23
     91a:	62 e3       	ldi	r22, 0x32	; 50
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <calloc>
     926:	d8 2f       	mov	r29, r24
     928:	c9 2f       	mov	r28, r25
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	82 ed       	ldi	r24, 0xD2	; 210
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	8e ed       	ldi	r24, 0xDE	; 222
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	9f 93       	push	r25
     940:	8f 93       	push	r24
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
     94a:	8d 2f       	mov	r24, r29
     94c:	9c 2f       	mov	r25, r28
     94e:	af df       	rcall	.-162    	; 0x8ae <_ProtectResoucres>
     950:	8d 2f       	mov	r24, r29
     952:	9c 2f       	mov	r25, r28
     954:	0e 94 97 2c 	call	0x592e	; 0x592e <free>
     958:	8d b7       	in	r24, 0x3d	; 61
     95a:	9e b7       	in	r25, 0x3e	; 62
     95c:	0a 96       	adiw	r24, 0x0a	; 10
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	9e bf       	out	0x3e, r25	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	8d bf       	out	0x3d, r24	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	08 95       	ret

00000976 <Logging_Info>:

void Logging_Info(char* message)
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
	char* infoMsg = _FormattingString("INFO", message);
     97a:	bc 01       	movw	r22, r24
     97c:	84 ef       	ldi	r24, 0xF4	; 244
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	5e df       	rcall	.-324    	; 0x83e <_FormattingString>
     982:	ec 01       	movw	r28, r24
	_ProtectResoucres(infoMsg);
     984:	94 df       	rcall	.-216    	; 0x8ae <_ProtectResoucres>
     986:	ce 01       	movw	r24, r28
	free(infoMsg);
     988:	0e 94 97 2c 	call	0x592e	; 0x592e <free>
     98c:	df 91       	pop	r29
}
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <Logging_Error>:
     992:	cf 93       	push	r28

void Logging_Error(char* message)
{
     994:	df 93       	push	r29
	char* errorMsg = _FormattingString("ERROR", message);
     996:	bc 01       	movw	r22, r24
     998:	83 ef       	ldi	r24, 0xF3	; 243
     99a:	99 e0       	ldi	r25, 0x09	; 9
     99c:	50 df       	rcall	.-352    	; 0x83e <_FormattingString>
     99e:	ec 01       	movw	r28, r24
	_ProtectResoucres(errorMsg);
     9a0:	86 df       	rcall	.-244    	; 0x8ae <_ProtectResoucres>
     9a2:	ce 01       	movw	r24, r28
	free(errorMsg);
     9a4:	0e 94 97 2c 	call	0x592e	; 0x592e <free>
     9a8:	df 91       	pop	r29
}
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <createSound>:
struct Sound {
	uint16_t dBMeasured;
};

Sound_t createSound() {
	Sound_t self = calloc(sizeof(Sound), 1);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <calloc>
	if (self == NULL){
		return NULL;
	}

	return self;
}
     9ba:	08 95       	ret

000009bc <createTempHumid>:
	}
	else
	{
		return self->temperature;
	}
}
     9bc:	0e 94 a3 1c 	call	0x3946	; 0x3946 <hih8120Create>
     9c0:	81 30       	cpi	r24, 0x01	; 1
     9c2:	21 f4       	brne	.+8      	; 0x9cc <createTempHumid+0x10>
     9c4:	89 ef       	ldi	r24, 0xF9	; 249
     9c6:	94 e0       	ldi	r25, 0x04	; 4
     9c8:	e4 df       	rcall	.-56     	; 0x992 <Logging_Error>
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <createTempHumid+0x1a>
     9cc:	81 11       	cpse	r24, r1
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <createTempHumid+0x1a>
     9d0:	8f e2       	ldi	r24, 0x2F	; 47
     9d2:	95 e0       	ldi	r25, 0x05	; 5
     9d4:	d0 df       	rcall	.-96     	; 0x976 <Logging_Info>
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	88 e0       	ldi	r24, 0x08	; 8
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <calloc>
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e8       	ldi	r22, 0x80	; 128
     9e8:	7f eb       	ldi	r23, 0xBF	; 191
     9ea:	fc 01       	movw	r30, r24
     9ec:	44 83       	std	Z+4, r20	; 0x04
     9ee:	55 83       	std	Z+5, r21	; 0x05
     9f0:	66 83       	std	Z+6, r22	; 0x06
     9f2:	77 83       	std	Z+7, r23	; 0x07
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	69 e8       	ldi	r22, 0x89	; 137
     9fa:	73 ec       	ldi	r23, 0xC3	; 195
     9fc:	40 83       	st	Z, r20
     9fe:	51 83       	std	Z+1, r21	; 0x01
     a00:	62 83       	std	Z+2, r22	; 0x02
     a02:	73 83       	std	Z+3, r23	; 0x03
     a04:	08 95       	ret

00000a06 <wakeup>:
     a06:	0e 94 be 1c 	call	0x397c	; 0x397c <hih8120Wakeup>
     a0a:	88 23       	and	r24, r24
     a0c:	c1 f0       	breq	.+48     	; 0xa3e <wakeup+0x38>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	69 f4       	brne	.+26     	; 0xa2c <wakeup+0x26>
     a12:	8d e4       	ldi	r24, 0x4D	; 77
     a14:	95 e0       	ldi	r25, 0x05	; 5
     a16:	bd df       	rcall	.-134    	; 0x992 <Logging_Error>
     a18:	d1 df       	rcall	.-94     	; 0x9bc <createTempHumid>
     a1a:	64 ef       	ldi	r22, 0xF4	; 244
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>
     a26:	0e 94 be 1c 	call	0x397c	; 0x397c <hih8120Wakeup>
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <wakeup+0x34>
     a2c:	83 30       	cpi	r24, 0x03	; 3
     a2e:	29 f4       	brne	.+10     	; 0xa3a <wakeup+0x34>
     a30:	86 e8       	ldi	r24, 0x86	; 134
     a32:	95 e0       	ldi	r25, 0x05	; 5
     a34:	ae df       	rcall	.-164    	; 0x992 <Logging_Error>
     a36:	0e 94 be 1c 	call	0x397c	; 0x397c <hih8120Wakeup>
     a3a:	81 11       	cpse	r24, r1
     a3c:	e8 cf       	rjmp	.-48     	; 0xa0e <wakeup+0x8>
     a3e:	88 eb       	ldi	r24, 0xB8	; 184
     a40:	95 e0       	ldi	r25, 0x05	; 5
     a42:	99 cf       	rjmp	.-206    	; 0x976 <Logging_Info>
     a44:	08 95       	ret

00000a46 <measureTempHumid>:
     a46:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <hih8120Meassure>
     a4a:	88 23       	and	r24, r24
     a4c:	99 f0       	breq	.+38     	; 0xa74 <measureTempHumid+0x2e>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	41 f4       	brne	.+16     	; 0xa62 <measureTempHumid+0x1c>
     a52:	8d e4       	ldi	r24, 0x4D	; 77
     a54:	95 e0       	ldi	r25, 0x05	; 5
     a56:	9d df       	rcall	.-198    	; 0x992 <Logging_Error>
     a58:	b1 df       	rcall	.-158    	; 0x9bc <createTempHumid>
     a5a:	d5 df       	rcall	.-86     	; 0xa06 <wakeup>
     a5c:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <hih8120Meassure>
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <measureTempHumid+0x2a>
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	29 f4       	brne	.+10     	; 0xa70 <measureTempHumid+0x2a>
     a66:	86 e8       	ldi	r24, 0x86	; 134
     a68:	95 e0       	ldi	r25, 0x05	; 5
     a6a:	93 df       	rcall	.-218    	; 0x992 <Logging_Error>
     a6c:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <hih8120Meassure>
     a70:	81 11       	cpse	r24, r1
     a72:	ed cf       	rjmp	.-38     	; 0xa4e <measureTempHumid+0x8>
     a74:	8d ee       	ldi	r24, 0xED	; 237
     a76:	95 e0       	ldi	r25, 0x05	; 5
     a78:	7e cf       	rjmp	.-260    	; 0x976 <Logging_Info>
     a7a:	08 95       	ret

00000a7c <setDataTempHumid>:
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
     a82:	0e 94 bb 1c 	call	0x3976	; 0x3976 <hih8120IsReady>
     a86:	88 23       	and	r24, r24
     a88:	81 f0       	breq	.+32     	; 0xaaa <setDataTempHumid+0x2e>
     a8a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <hih8120GetHumidity>
     a8e:	6c 83       	std	Y+4, r22	; 0x04
     a90:	7d 83       	std	Y+5, r23	; 0x05
     a92:	8e 83       	std	Y+6, r24	; 0x06
     a94:	9f 83       	std	Y+7, r25	; 0x07
     a96:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <hih8120GetTemperature>
     a9a:	68 83       	st	Y, r22
     a9c:	79 83       	std	Y+1, r23	; 0x01
     a9e:	8a 83       	std	Y+2, r24	; 0x02
     aa0:	9b 83       	std	Y+3, r25	; 0x03
     aa2:	8f e0       	ldi	r24, 0x0F	; 15
     aa4:	96 e0       	ldi	r25, 0x06	; 6
     aa6:	67 df       	rcall	.-306    	; 0x976 <Logging_Info>
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <setDataTempHumid+0x3c>
     aaa:	8d e3       	ldi	r24, 0x3D	; 61
     aac:	96 e0       	ldi	r25, 0x06	; 6
     aae:	71 df       	rcall	.-286    	; 0x992 <Logging_Error>
     ab0:	0e 94 bb 1c 	call	0x3976	; 0x3976 <hih8120IsReady>
     ab4:	88 23       	and	r24, r24
     ab6:	c9 f3       	breq	.-14     	; 0xaaa <setDataTempHumid+0x2e>
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <temp_humid_task>:

void temp_humid_task(void* pvParameters) {
     abe:	fc 01       	movw	r30, r24
	const Temp_Hum_t sensor = ((void**)pvParameters)[0];
     ac0:	80 80       	ld	r8, Z
     ac2:	91 80       	ldd	r9, Z+1	; 0x01
	const EventGroupHandle_t measureEventGroup = ((void**)pvParameters)[1];
     ac4:	c2 81       	ldd	r28, Z+2	; 0x02
     ac6:	d3 81       	ldd	r29, Z+3	; 0x03
	const EventGroupHandle_t dataReadyEventGroup = ((void**)pvParameters)[2];
     ac8:	a4 80       	ldd	r10, Z+4	; 0x04
     aca:	b5 80       	ldd	r11, Z+5	; 0x05


	while (1) {
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,
     acc:	0f 2e       	mov	r0, r31
     ace:	f8 ee       	ldi	r31, 0xE8	; 232
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f3 e0       	ldi	r31, 0x03	; 3
     ad4:	df 2e       	mov	r13, r31
     ad6:	e1 2c       	mov	r14, r1
     ad8:	f1 2c       	mov	r15, r1
     ada:	f0 2d       	mov	r31, r0
     adc:	01 e0       	ldi	r16, 0x01	; 1
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	42 e0       	ldi	r20, 0x02	; 2
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	ce 01       	movw	r24, r28
     aea:	4f d0       	rcall	.+158    	; 0xb8a <xEventGroupWaitBits>
			TEMP_HUM_MEASURE_BIT,
			pdFALSE,
			pdTRUE,
			1000);

		if ((uxBits & (TEMP_HUM_MEASURE_BIT)) == (TEMP_HUM_MEASURE_BIT)) {
     aec:	61 ff       	sbrs	r22, 1

			wakeup();
     aee:	20 c0       	rjmp	.+64     	; 0xb30 <temp_humid_task+0x72>
     af0:	8a df       	rcall	.-236    	; 0xa06 <wakeup>

			//should be 100ms delay
			vTaskDelay(500);
     af2:	64 ef       	ldi	r22, 0xF4	; 244
     af4:	71 e0       	ldi	r23, 0x01	; 1
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>

			measureTempHumid();
     afe:	a3 df       	rcall	.-186    	; 0xa46 <measureTempHumid>

			//should be 10ms delay
			vTaskDelay(500);
     b00:	64 ef       	ldi	r22, 0xF4	; 244
     b02:	71 e0       	ldi	r23, 0x01	; 1
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>

			setDataTempHumid(sensor);
     b0c:	c4 01       	movw	r24, r8
     b0e:	b6 df       	rcall	.-148    	; 0xa7c <setDataTempHumid>

			xEventGroupSetBits(dataReadyEventGroup, TEMP_HUM_READY_BIT);
     b10:	40 e1       	ldi	r20, 0x10	; 16
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	c5 01       	movw	r24, r10
     b1a:	14 d1       	rcall	.+552    	; 0xd44 <xEventGroupSetBits>
			xEventGroupClearBits(measureEventGroup, TEMP_HUM_MEASURE_BIT);
     b1c:	42 e0       	ldi	r20, 0x02	; 2
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	ce 01       	movw	r24, r28
			Logging_Info("TEMP_HUM_READY_BIT set.");
     b26:	f1 d0       	rcall	.+482    	; 0xd0a <xEventGroupClearBits>
     b28:	8b ea       	ldi	r24, 0xAB	; 171
     b2a:	96 e0       	ldi	r25, 0x06	; 6
     b2c:	24 df       	rcall	.-440    	; 0x976 <Logging_Info>
		}
		else {
			Logging_Error("Timed-out waiting for TEMP_HUM_MEASURE_BIT to be set in measureEventGroup.");
     b2e:	ce cf       	rjmp	.-100    	; 0xacc <temp_humid_task+0xe>
     b30:	83 ec       	ldi	r24, 0xC3	; 195
     b32:	96 e0       	ldi	r25, 0x06	; 6
     b34:	2e df       	rcall	.-420    	; 0x992 <Logging_Error>
     b36:	ca cf       	rjmp	.-108    	; 0xacc <temp_humid_task+0xe>

00000b38 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     b38:	e7 e0       	ldi	r30, 0x07	; 7
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
     b3c:	80 81       	ld	r24, Z
     b3e:	8f 60       	ori	r24, 0x0F	; 15
     b40:	80 83       	st	Z, r24
     b42:	08 95       	ret

00000b44 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     b44:	e8 e0       	ldi	r30, 0x08	; 8
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	90 81       	ld	r25, Z
     b4a:	90 7f       	andi	r25, 0xF0	; 240
     b4c:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     b4e:	90 81       	ld	r25, Z
     b50:	8f 70       	andi	r24, 0x0F	; 15
     b52:	98 2b       	or	r25, r24
     b54:	90 83       	st	Z, r25
     b56:	08 95       	ret

00000b58 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     b58:	e8 e0       	ldi	r30, 0x08	; 8
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	80 81       	ld	r24, Z
     b5e:	80 7f       	andi	r24, 0xF0	; 240
     b60:	80 83       	st	Z, r24
     b62:	08 95       	ret

00000b64 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	d1 d1       	rcall	.+930    	; 0xf10 <pvPortMalloc>
     b6e:	ec 01       	movw	r28, r24
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	39 f0       	breq	.+14     	; 0xb82 <xEventGroupCreate+0x1e>
     b74:	fc 01       	movw	r30, r24
     b76:	11 92       	st	Z+, r1
     b78:	11 92       	st	Z+, r1
     b7a:	11 92       	st	Z+, r1
     b7c:	11 92       	st	Z+, r1
     b7e:	cf 01       	movw	r24, r30
     b80:	b1 d2       	rcall	.+1378   	; 0x10e4 <vListInitialise>
     b82:	ce 01       	movw	r24, r28
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <xEventGroupWaitBits>:
     b8a:	2f 92       	push	r2
     b8c:	3f 92       	push	r3
     b8e:	4f 92       	push	r4
     b90:	5f 92       	push	r5
     b92:	6f 92       	push	r6
     b94:	7f 92       	push	r7
     b96:	8f 92       	push	r8
     b98:	9f 92       	push	r9
     b9a:	af 92       	push	r10
     b9c:	bf 92       	push	r11
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	ec 01       	movw	r28, r24
     bb0:	4a 01       	movw	r8, r20
     bb2:	5b 01       	movw	r10, r22
     bb4:	62 2e       	mov	r6, r18
     bb6:	70 2e       	mov	r7, r16
     bb8:	0e 94 1a 13 	call	0x2634	; 0x2634 <vTaskSuspendAll>
     bbc:	28 80       	ld	r2, Y
     bbe:	39 80       	ldd	r3, Y+1	; 0x01
     bc0:	4a 80       	ldd	r4, Y+2	; 0x02
     bc2:	5b 80       	ldd	r5, Y+3	; 0x03
     bc4:	01 11       	cpse	r16, r1
     bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <xEventGroupWaitBits+0x58>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	b2 01       	movw	r22, r4
     bcc:	a1 01       	movw	r20, r2
     bce:	48 21       	and	r20, r8
     bd0:	59 21       	and	r21, r9
     bd2:	6a 21       	and	r22, r10
     bd4:	7b 21       	and	r23, r11
     bd6:	45 2b       	or	r20, r21
     bd8:	46 2b       	or	r20, r22
     bda:	47 2b       	or	r20, r23
     bdc:	79 f4       	brne	.+30     	; 0xbfc <xEventGroupWaitBits+0x72>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <xEventGroupWaitBits+0x72>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	b2 01       	movw	r22, r4
     be6:	a1 01       	movw	r20, r2
     be8:	48 21       	and	r20, r8
     bea:	59 21       	and	r21, r9
     bec:	6a 21       	and	r22, r10
     bee:	7b 21       	and	r23, r11
     bf0:	48 15       	cp	r20, r8
     bf2:	59 05       	cpc	r21, r9
     bf4:	6a 05       	cpc	r22, r10
     bf6:	7b 05       	cpc	r23, r11
     bf8:	09 f0       	breq	.+2      	; 0xbfc <xEventGroupWaitBits+0x72>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	88 23       	and	r24, r24
     bfe:	81 f0       	breq	.+32     	; 0xc20 <xEventGroupWaitBits+0x96>
     c00:	66 20       	and	r6, r6
     c02:	09 f4       	brne	.+2      	; 0xc06 <xEventGroupWaitBits+0x7c>
     c04:	6b c0       	rjmp	.+214    	; 0xcdc <xEventGroupWaitBits+0x152>
     c06:	80 94       	com	r8
     c08:	90 94       	com	r9
     c0a:	a0 94       	com	r10
     c0c:	b0 94       	com	r11
     c0e:	82 20       	and	r8, r2
     c10:	93 20       	and	r9, r3
     c12:	a4 20       	and	r10, r4
     c14:	b5 20       	and	r11, r5
     c16:	88 82       	st	Y, r8
     c18:	99 82       	std	Y+1, r9	; 0x01
     c1a:	aa 82       	std	Y+2, r10	; 0x02
     c1c:	bb 82       	std	Y+3, r11	; 0x03
     c1e:	5e c0       	rjmp	.+188    	; 0xcdc <xEventGroupWaitBits+0x152>
     c20:	c1 14       	cp	r12, r1
     c22:	d1 04       	cpc	r13, r1
     c24:	e1 04       	cpc	r14, r1
     c26:	f1 04       	cpc	r15, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <xEventGroupWaitBits+0xa2>
     c2a:	58 c0       	rjmp	.+176    	; 0xcdc <xEventGroupWaitBits+0x152>
     c2c:	66 20       	and	r6, r6
     c2e:	29 f0       	breq	.+10     	; 0xc3a <xEventGroupWaitBits+0xb0>
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	71 e0       	ldi	r23, 0x01	; 1
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <xEventGroupWaitBits+0xb6>
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	ba 01       	movw	r22, r20
     c40:	71 10       	cpse	r7, r1
     c42:	74 60       	ori	r23, 0x04	; 4
     c44:	48 29       	or	r20, r8
     c46:	59 29       	or	r21, r9
     c48:	6a 29       	or	r22, r10
     c4a:	7b 29       	or	r23, r11
     c4c:	97 01       	movw	r18, r14
     c4e:	86 01       	movw	r16, r12
     c50:	ce 01       	movw	r24, r28
     c52:	04 96       	adiw	r24, 0x04	; 4
     c54:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <vTaskPlaceOnUnorderedEventList>
     c58:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
     c5c:	81 11       	cpse	r24, r1
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <xEventGroupWaitBits+0xd8>
     c60:	89 d3       	rcall	.+1810   	; 0x1374 <vPortYield>
     c62:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <uxTaskResetEventItemValue>
     c66:	91 fd       	sbrc	r25, 1
     c68:	35 c0       	rjmp	.+106    	; 0xcd4 <xEventGroupWaitBits+0x14a>
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	0f 92       	push	r0
     c70:	68 81       	ld	r22, Y
     c72:	79 81       	ldd	r23, Y+1	; 0x01
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	71 10       	cpse	r7, r1
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <xEventGroupWaitBits+0x10c>
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	75 01       	movw	r14, r10
     c80:	64 01       	movw	r12, r8
     c82:	c6 22       	and	r12, r22
     c84:	d7 22       	and	r13, r23
     c86:	e8 22       	and	r14, r24
     c88:	f9 22       	and	r15, r25
     c8a:	cd 28       	or	r12, r13
     c8c:	ce 28       	or	r12, r14
     c8e:	cf 28       	or	r12, r15
     c90:	79 f4       	brne	.+30     	; 0xcb0 <xEventGroupWaitBits+0x126>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	0d c0       	rjmp	.+26     	; 0xcb0 <xEventGroupWaitBits+0x126>
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	75 01       	movw	r14, r10
     c9a:	64 01       	movw	r12, r8
     c9c:	c6 22       	and	r12, r22
     c9e:	d7 22       	and	r13, r23
     ca0:	e8 22       	and	r14, r24
     ca2:	f9 22       	and	r15, r25
     ca4:	c8 14       	cp	r12, r8
     ca6:	d9 04       	cpc	r13, r9
     ca8:	ea 04       	cpc	r14, r10
     caa:	fb 04       	cpc	r15, r11
     cac:	09 f0       	breq	.+2      	; 0xcb0 <xEventGroupWaitBits+0x126>
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	22 23       	and	r18, r18
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <xEventGroupWaitBits+0x146>
     cb4:	66 20       	and	r6, r6
     cb6:	61 f0       	breq	.+24     	; 0xcd0 <xEventGroupWaitBits+0x146>
     cb8:	80 94       	com	r8
     cba:	90 94       	com	r9
     cbc:	a0 94       	com	r10
     cbe:	b0 94       	com	r11
     cc0:	86 22       	and	r8, r22
     cc2:	97 22       	and	r9, r23
     cc4:	a8 22       	and	r10, r24
     cc6:	b9 22       	and	r11, r25
     cc8:	88 82       	st	Y, r8
     cca:	99 82       	std	Y+1, r9	; 0x01
     ccc:	aa 82       	std	Y+2, r10	; 0x02
     cce:	bb 82       	std	Y+3, r11	; 0x03
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	1b 01       	movw	r2, r22
     cd6:	2c 01       	movw	r4, r24
     cd8:	55 24       	eor	r5, r5
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <xEventGroupWaitBits+0x156>
     cdc:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
     ce0:	c2 01       	movw	r24, r4
     ce2:	b1 01       	movw	r22, r2
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	9f 90       	pop	r9
     cfa:	8f 90       	pop	r8
     cfc:	7f 90       	pop	r7
     cfe:	6f 90       	pop	r6
     d00:	5f 90       	pop	r5
     d02:	4f 90       	pop	r4
     d04:	3f 90       	pop	r3
     d06:	2f 90       	pop	r2
     d08:	08 95       	ret

00000d0a <xEventGroupClearBits>:
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	0f 92       	push	r0
     d14:	fc 01       	movw	r30, r24
     d16:	00 81       	ld	r16, Z
     d18:	11 81       	ldd	r17, Z+1	; 0x01
     d1a:	22 81       	ldd	r18, Z+2	; 0x02
     d1c:	33 81       	ldd	r19, Z+3	; 0x03
     d1e:	40 95       	com	r20
     d20:	50 95       	com	r21
     d22:	60 95       	com	r22
     d24:	70 95       	com	r23
     d26:	40 23       	and	r20, r16
     d28:	51 23       	and	r21, r17
     d2a:	62 23       	and	r22, r18
     d2c:	73 23       	and	r23, r19
     d2e:	40 83       	st	Z, r20
     d30:	51 83       	std	Z+1, r21	; 0x01
     d32:	62 83       	std	Z+2, r22	; 0x02
     d34:	73 83       	std	Z+3, r23	; 0x03
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	c9 01       	movw	r24, r18
     d3c:	b8 01       	movw	r22, r16
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	08 95       	ret

00000d44 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
     d66:	6a 01       	movw	r12, r20
     d68:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d6a:	8c 01       	movw	r16, r24
     d6c:	09 5f       	subi	r16, 0xF9	; 249
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     d70:	0e 94 1a 13 	call	0x2634	; 0x2634 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     d74:	eb 85       	ldd	r30, Y+11	; 0x0b
     d76:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     d78:	88 81       	ld	r24, Y
     d7a:	99 81       	ldd	r25, Y+1	; 0x01
     d7c:	aa 81       	ldd	r26, Y+2	; 0x02
     d7e:	bb 81       	ldd	r27, Y+3	; 0x03
     d80:	c8 2a       	or	r12, r24
     d82:	d9 2a       	or	r13, r25
     d84:	ea 2a       	or	r14, r26
     d86:	fb 2a       	or	r15, r27
     d88:	c8 82       	st	Y, r12
     d8a:	d9 82       	std	Y+1, r13	; 0x01
     d8c:	ea 82       	std	Y+2, r14	; 0x02
     d8e:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     d90:	0e 17       	cp	r16, r30
     d92:	1f 07       	cpc	r17, r31
     d94:	09 f4       	brne	.+2      	; 0xd98 <xEventGroupSetBits+0x54>
     d96:	45 c0       	rjmp	.+138    	; 0xe22 <xEventGroupSetBits+0xde>
     d98:	c1 2c       	mov	r12, r1
     d9a:	d1 2c       	mov	r13, r1
     d9c:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     d9e:	99 24       	eor	r9, r9
     da0:	93 94       	inc	r9
     da2:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     da4:	a4 80       	ldd	r10, Z+4	; 0x04
     da6:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	a2 81       	ldd	r26, Z+2	; 0x02
     dae:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     db0:	ac 01       	movw	r20, r24
     db2:	bd 01       	movw	r22, r26
     db4:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     db6:	b2 fd       	sbrc	r27, 2
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     dba:	48 80       	ld	r4, Y
     dbc:	59 80       	ldd	r5, Y+1	; 0x01
     dbe:	6a 80       	ldd	r6, Y+2	; 0x02
     dc0:	7b 80       	ldd	r7, Y+3	; 0x03
     dc2:	44 22       	and	r4, r20
     dc4:	55 22       	and	r5, r21
     dc6:	66 22       	and	r6, r22
     dc8:	77 22       	and	r7, r23
     dca:	29 2d       	mov	r18, r9
     dcc:	45 28       	or	r4, r5
     dce:	46 28       	or	r4, r6
     dd0:	47 28       	or	r4, r7
     dd2:	89 f4       	brne	.+34     	; 0xdf6 <xEventGroupSetBits+0xb2>
     dd4:	28 2d       	mov	r18, r8
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <xEventGroupSetBits+0xb2>
     dd8:	48 80       	ld	r4, Y
     dda:	59 80       	ldd	r5, Y+1	; 0x01
     ddc:	6a 80       	ldd	r6, Y+2	; 0x02
     dde:	7b 80       	ldd	r7, Y+3	; 0x03
     de0:	44 22       	and	r4, r20
     de2:	55 22       	and	r5, r21
     de4:	66 22       	and	r6, r22
     de6:	77 22       	and	r7, r23
     de8:	29 2d       	mov	r18, r9
     dea:	44 16       	cp	r4, r20
     dec:	55 06       	cpc	r5, r21
     dee:	66 06       	cpc	r6, r22
     df0:	77 06       	cpc	r7, r23
     df2:	09 f0       	breq	.+2      	; 0xdf6 <xEventGroupSetBits+0xb2>
     df4:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     df6:	22 23       	and	r18, r18
     df8:	71 f0       	breq	.+28     	; 0xe16 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     dfa:	b0 ff       	sbrs	r27, 0
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     dfe:	c4 2a       	or	r12, r20
     e00:	d5 2a       	or	r13, r21
     e02:	e6 2a       	or	r14, r22
     e04:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     e06:	48 81       	ld	r20, Y
     e08:	59 81       	ldd	r21, Y+1	; 0x01
     e0a:	6a 81       	ldd	r22, Y+2	; 0x02
     e0c:	7b 81       	ldd	r23, Y+3	; 0x03
     e0e:	72 60       	ori	r23, 0x02	; 2
     e10:	cf 01       	movw	r24, r30
     e12:	0e 94 21 16 	call	0x2c42	; 0x2c42 <vTaskRemoveFromUnorderedEventList>
     e16:	ea 2d       	mov	r30, r10
     e18:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     e1a:	0e 17       	cp	r16, r30
     e1c:	1f 07       	cpc	r17, r31
     e1e:	11 f6       	brne	.-124    	; 0xda4 <xEventGroupSetBits+0x60>
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     e22:	c1 2c       	mov	r12, r1
     e24:	d1 2c       	mov	r13, r1
     e26:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     e28:	c0 94       	com	r12
     e2a:	d0 94       	com	r13
     e2c:	e0 94       	com	r14
     e2e:	f0 94       	com	r15
     e30:	88 81       	ld	r24, Y
     e32:	99 81       	ldd	r25, Y+1	; 0x01
     e34:	aa 81       	ldd	r26, Y+2	; 0x02
     e36:	bb 81       	ldd	r27, Y+3	; 0x03
     e38:	c8 22       	and	r12, r24
     e3a:	d9 22       	and	r13, r25
     e3c:	ea 22       	and	r14, r26
     e3e:	fb 22       	and	r15, r27
     e40:	c8 82       	st	Y, r12
     e42:	d9 82       	std	Y+1, r13	; 0x01
     e44:	ea 82       	std	Y+2, r14	; 0x02
     e46:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     e48:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     e4c:	68 81       	ld	r22, Y
     e4e:	79 81       	ldd	r23, Y+1	; 0x01
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9b 81       	ldd	r25, Y+3	; 0x03
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	8f 90       	pop	r8
     e6c:	7f 90       	pop	r7
     e6e:	6f 90       	pop	r6
     e70:	5f 90       	pop	r5
     e72:	4f 90       	pop	r4
     e74:	08 95       	ret

00000e76 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     e7c:	ec eb       	ldi	r30, 0xBC	; 188
     e7e:	fa e0       	ldi	r31, 0x0A	; 10
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <prvInsertBlockIntoFreeList+0xe>
     e82:	f9 01       	movw	r30, r18
     e84:	20 81       	ld	r18, Z
     e86:	31 81       	ldd	r19, Z+1	; 0x01
     e88:	2a 17       	cp	r18, r26
     e8a:	3b 07       	cpc	r19, r27
     e8c:	d0 f3       	brcs	.-12     	; 0xe82 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	af 01       	movw	r20, r30
     e94:	48 0f       	add	r20, r24
     e96:	59 1f       	adc	r21, r25
     e98:	a4 17       	cp	r26, r20
     e9a:	b5 07       	cpc	r27, r21
     e9c:	49 f4       	brne	.+18     	; 0xeb0 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     e9e:	12 96       	adiw	r26, 0x02	; 2
     ea0:	4d 91       	ld	r20, X+
     ea2:	5c 91       	ld	r21, X
     ea4:	13 97       	sbiw	r26, 0x03	; 3
     ea6:	84 0f       	add	r24, r20
     ea8:	95 1f       	adc	r25, r21
     eaa:	93 83       	std	Z+3, r25	; 0x03
     eac:	82 83       	std	Z+2, r24	; 0x02
     eae:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	ed 01       	movw	r28, r26
     eba:	c8 0f       	add	r28, r24
     ebc:	d9 1f       	adc	r29, r25
     ebe:	2c 17       	cp	r18, r28
     ec0:	3d 07       	cpc	r19, r29
     ec2:	d9 f4       	brne	.+54     	; 0xefa <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     ec4:	20 91 ba 0a 	lds	r18, 0x0ABA	; 0x800aba <pxEnd>
     ec8:	30 91 bb 0a 	lds	r19, 0x0ABB	; 0x800abb <pxEnd+0x1>
     ecc:	c2 17       	cp	r28, r18
     ece:	d3 07       	cpc	r29, r19
     ed0:	81 f0       	breq	.+32     	; 0xef2 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     ed2:	2a 81       	ldd	r18, Y+2	; 0x02
     ed4:	3b 81       	ldd	r19, Y+3	; 0x03
     ed6:	82 0f       	add	r24, r18
     ed8:	93 1f       	adc	r25, r19
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	9c 93       	st	X, r25
     ede:	8e 93       	st	-X, r24
     ee0:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     ee2:	c0 81       	ld	r28, Z
     ee4:	d1 81       	ldd	r29, Z+1	; 0x01
     ee6:	88 81       	ld	r24, Y
     ee8:	99 81       	ldd	r25, Y+1	; 0x01
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	9c 93       	st	X, r25
     eee:	8e 93       	st	-X, r24
     ef0:	07 c0       	rjmp	.+14     	; 0xf00 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	dc 93       	st	X, r29
     ef6:	ce 93       	st	-X, r28
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	3c 93       	st	X, r19
     efe:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     f00:	ae 17       	cp	r26, r30
     f02:	bf 07       	cpc	r27, r31
     f04:	11 f0       	breq	.+4      	; 0xf0a <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     f06:	b1 83       	std	Z+1, r27	; 0x01
     f08:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     f22:	0e 94 1a 13 	call	0x2634	; 0x2634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     f26:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <pxEnd>
     f2a:	90 91 bb 0a 	lds	r25, 0x0ABB	; 0x800abb <pxEnd+0x1>
     f2e:	89 2b       	or	r24, r25
     f30:	41 f5       	brne	.+80     	; 0xf82 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     f32:	ec eb       	ldi	r30, 0xBC	; 188
     f34:	fa e0       	ldi	r31, 0x0A	; 10
     f36:	a0 ec       	ldi	r26, 0xC0	; 192
     f38:	ba e0       	ldi	r27, 0x0A	; 10
     f3a:	b1 83       	std	Z+1, r27	; 0x01
     f3c:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     f3e:	13 82       	std	Z+3, r1	; 0x03
     f40:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     f42:	ec e5       	ldi	r30, 0x5C	; 92
     f44:	fa e1       	ldi	r31, 0x1A	; 26
     f46:	f0 93 bb 0a 	sts	0x0ABB, r31	; 0x800abb <pxEnd+0x1>
     f4a:	e0 93 ba 0a 	sts	0x0ABA, r30	; 0x800aba <pxEnd>
	pxEnd->xBlockSize = 0;
     f4e:	13 82       	std	Z+3, r1	; 0x03
     f50:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     f52:	11 82       	std	Z+1, r1	; 0x01
     f54:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     f56:	8c e9       	ldi	r24, 0x9C	; 156
     f58:	9f e0       	ldi	r25, 0x0F	; 15
     f5a:	13 96       	adiw	r26, 0x03	; 3
     f5c:	9c 93       	st	X, r25
     f5e:	8e 93       	st	-X, r24
     f60:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     f62:	ed 93       	st	X+, r30
     f64:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     f66:	90 93 b7 0a 	sts	0x0AB7, r25	; 0x800ab7 <xMinimumEverFreeBytesRemaining+0x1>
     f6a:	80 93 b6 0a 	sts	0x0AB6, r24	; 0x800ab6 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     f6e:	90 93 b9 0a 	sts	0x0AB9, r25	; 0x800ab9 <xFreeBytesRemaining+0x1>
     f72:	80 93 b8 0a 	sts	0x0AB8, r24	; 0x800ab8 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e8       	ldi	r25, 0x80	; 128
     f7a:	90 93 b5 0a 	sts	0x0AB5, r25	; 0x800ab5 <xBlockAllocatedBit+0x1>
     f7e:	80 93 b4 0a 	sts	0x0AB4, r24	; 0x800ab4 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     f82:	e0 90 b4 0a 	lds	r14, 0x0AB4	; 0x800ab4 <xBlockAllocatedBit>
     f86:	f0 90 b5 0a 	lds	r15, 0x0AB5	; 0x800ab5 <xBlockAllocatedBit+0x1>
     f8a:	c7 01       	movw	r24, r14
     f8c:	8c 23       	and	r24, r28
     f8e:	9d 23       	and	r25, r29
     f90:	89 2b       	or	r24, r25
     f92:	09 f0       	breq	.+2      	; 0xf96 <pvPortMalloc+0x86>
     f94:	66 c0       	rjmp	.+204    	; 0x1062 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     f96:	20 97       	sbiw	r28, 0x00	; 0
     f98:	09 f4       	brne	.+2      	; 0xf9c <pvPortMalloc+0x8c>
     f9a:	66 c0       	rjmp	.+204    	; 0x1068 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     f9c:	ae 01       	movw	r20, r28
     f9e:	4c 5f       	subi	r20, 0xFC	; 252
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <pvPortMalloc+0x96>
     fa4:	5e c0       	rjmp	.+188    	; 0x1062 <pvPortMalloc+0x152>
     fa6:	00 91 b8 0a 	lds	r16, 0x0AB8	; 0x800ab8 <xFreeBytesRemaining>
     faa:	10 91 b9 0a 	lds	r17, 0x0AB9	; 0x800ab9 <xFreeBytesRemaining+0x1>
     fae:	04 17       	cp	r16, r20
     fb0:	15 07       	cpc	r17, r21
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <pvPortMalloc+0xa6>
     fb4:	56 c0       	rjmp	.+172    	; 0x1062 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     fb6:	c0 91 bc 0a 	lds	r28, 0x0ABC	; 0x800abc <xStart>
     fba:	d0 91 bd 0a 	lds	r29, 0x0ABD	; 0x800abd <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     fbe:	ec eb       	ldi	r30, 0xBC	; 188
     fc0:	fa e0       	ldi	r31, 0x0A	; 10
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <pvPortMalloc+0xb8>
     fc4:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     fc6:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     fc8:	2a 81       	ldd	r18, Y+2	; 0x02
     fca:	3b 81       	ldd	r19, Y+3	; 0x03
     fcc:	24 17       	cp	r18, r20
     fce:	35 07       	cpc	r19, r21
     fd0:	28 f4       	brcc	.+10     	; 0xfdc <pvPortMalloc+0xcc>
     fd2:	28 81       	ld	r18, Y
     fd4:	39 81       	ldd	r19, Y+1	; 0x01
     fd6:	21 15       	cp	r18, r1
     fd8:	31 05       	cpc	r19, r1
     fda:	a1 f7       	brne	.-24     	; 0xfc4 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     fdc:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <pxEnd>
     fe0:	90 91 bb 0a 	lds	r25, 0x0ABB	; 0x800abb <pxEnd+0x1>
     fe4:	c8 17       	cp	r28, r24
     fe6:	d9 07       	cpc	r29, r25
     fe8:	e1 f1       	breq	.+120    	; 0x1062 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     fea:	c0 80       	ld	r12, Z
     fec:	d1 80       	ldd	r13, Z+1	; 0x01
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	c8 0e       	add	r12, r24
     ff2:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ff4:	88 81       	ld	r24, Y
     ff6:	99 81       	ldd	r25, Y+1	; 0x01
     ff8:	91 83       	std	Z+1, r25	; 0x01
     ffa:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     ffc:	2a 81       	ldd	r18, Y+2	; 0x02
     ffe:	3b 81       	ldd	r19, Y+3	; 0x03
    1000:	24 1b       	sub	r18, r20
    1002:	35 0b       	sbc	r19, r21
    1004:	29 30       	cpi	r18, 0x09	; 9
    1006:	31 05       	cpc	r19, r1
    1008:	48 f0       	brcs	.+18     	; 0x101c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    100a:	ce 01       	movw	r24, r28
    100c:	84 0f       	add	r24, r20
    100e:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1010:	fc 01       	movw	r30, r24
    1012:	33 83       	std	Z+3, r19	; 0x03
    1014:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1016:	5b 83       	std	Y+3, r21	; 0x03
    1018:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    101a:	2d df       	rcall	.-422    	; 0xe76 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	9b 81       	ldd	r25, Y+3	; 0x03
    1020:	08 1b       	sub	r16, r24
    1022:	19 0b       	sbc	r17, r25
    1024:	10 93 b9 0a 	sts	0x0AB9, r17	; 0x800ab9 <xFreeBytesRemaining+0x1>
    1028:	00 93 b8 0a 	sts	0x0AB8, r16	; 0x800ab8 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    102c:	20 91 b6 0a 	lds	r18, 0x0AB6	; 0x800ab6 <xMinimumEverFreeBytesRemaining>
    1030:	30 91 b7 0a 	lds	r19, 0x0AB7	; 0x800ab7 <xMinimumEverFreeBytesRemaining+0x1>
    1034:	02 17       	cp	r16, r18
    1036:	13 07       	cpc	r17, r19
    1038:	20 f4       	brcc	.+8      	; 0x1042 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    103a:	10 93 b7 0a 	sts	0x0AB7, r17	; 0x800ab7 <xMinimumEverFreeBytesRemaining+0x1>
    103e:	00 93 b6 0a 	sts	0x0AB6, r16	; 0x800ab6 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1042:	e8 2a       	or	r14, r24
    1044:	f9 2a       	or	r15, r25
    1046:	fb 82       	std	Y+3, r15	; 0x03
    1048:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    104a:	19 82       	std	Y+1, r1	; 0x01
    104c:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    104e:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1052:	c1 14       	cp	r12, r1
    1054:	d1 04       	cpc	r13, r1
    1056:	59 f4       	brne	.+22     	; 0x106e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1058:	0e 94 43 1b 	call	0x3686	; 0x3686 <vApplicationMallocFailedHook>
    105c:	c1 2c       	mov	r12, r1
    105e:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1060:	06 c0       	rjmp	.+12     	; 0x106e <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1062:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
    1066:	f8 cf       	rjmp	.-16     	; 0x1058 <pvPortMalloc+0x148>
    1068:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
    106c:	f5 cf       	rjmp	.-22     	; 0x1058 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    106e:	c6 01       	movw	r24, r12
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	08 95       	ret

00001082 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	51 f1       	breq	.+84     	; 0x10de <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    108a:	fc 01       	movw	r30, r24
    108c:	34 97       	sbiw	r30, 0x04	; 4
    108e:	22 81       	ldd	r18, Z+2	; 0x02
    1090:	33 81       	ldd	r19, Z+3	; 0x03
    1092:	40 91 b4 0a 	lds	r20, 0x0AB4	; 0x800ab4 <xBlockAllocatedBit>
    1096:	50 91 b5 0a 	lds	r21, 0x0AB5	; 0x800ab5 <xBlockAllocatedBit+0x1>
    109a:	b9 01       	movw	r22, r18
    109c:	64 23       	and	r22, r20
    109e:	75 23       	and	r23, r21
    10a0:	67 2b       	or	r22, r23
    10a2:	e9 f0       	breq	.+58     	; 0x10de <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	67 2b       	or	r22, r23
    10aa:	c9 f4       	brne	.+50     	; 0x10de <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    10ac:	ef 01       	movw	r28, r30
    10ae:	40 95       	com	r20
    10b0:	50 95       	com	r21
    10b2:	24 23       	and	r18, r20
    10b4:	35 23       	and	r19, r21
    10b6:	33 83       	std	Z+3, r19	; 0x03
    10b8:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    10ba:	0e 94 1a 13 	call	0x2634	; 0x2634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    10be:	20 91 b8 0a 	lds	r18, 0x0AB8	; 0x800ab8 <xFreeBytesRemaining>
    10c2:	30 91 b9 0a 	lds	r19, 0x0AB9	; 0x800ab9 <xFreeBytesRemaining+0x1>
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	90 93 b9 0a 	sts	0x0AB9, r25	; 0x800ab9 <xFreeBytesRemaining+0x1>
    10d2:	80 93 b8 0a 	sts	0x0AB8, r24	; 0x800ab8 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    10d6:	ce 01       	movw	r24, r28
    10d8:	ce de       	rcall	.-612    	; 0xe76 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    10da:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    10e4:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    10e6:	03 96       	adiw	r24, 0x03	; 3
    10e8:	92 83       	std	Z+2, r25	; 0x02
    10ea:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    10ec:	4f ef       	ldi	r20, 0xFF	; 255
    10ee:	5f ef       	ldi	r21, 0xFF	; 255
    10f0:	ba 01       	movw	r22, r20
    10f2:	43 83       	std	Z+3, r20	; 0x03
    10f4:	54 83       	std	Z+4, r21	; 0x04
    10f6:	65 83       	std	Z+5, r22	; 0x05
    10f8:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    10fa:	90 87       	std	Z+8, r25	; 0x08
    10fc:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    10fe:	92 87       	std	Z+10, r25	; 0x0a
    1100:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1102:	10 82       	st	Z, r1
    1104:	08 95       	ret

00001106 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1106:	fc 01       	movw	r30, r24
    1108:	13 86       	std	Z+11, r1	; 0x0b
    110a:	12 86       	std	Z+10, r1	; 0x0a
    110c:	08 95       	ret

0000110e <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	9c 01       	movw	r18, r24
    1114:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1116:	dc 01       	movw	r26, r24
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	cd 91       	ld	r28, X+
    111c:	dc 91       	ld	r29, X
    111e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1120:	d5 83       	std	Z+5, r29	; 0x05
    1122:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	97 83       	std	Z+7, r25	; 0x07
    112a:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    112c:	8e 81       	ldd	r24, Y+6	; 0x06
    112e:	9f 81       	ldd	r25, Y+7	; 0x07
    1130:	dc 01       	movw	r26, r24
    1132:	15 96       	adiw	r26, 0x05	; 5
    1134:	7c 93       	st	X, r23
    1136:	6e 93       	st	-X, r22
    1138:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    113a:	7f 83       	std	Y+7, r23	; 0x07
    113c:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    113e:	33 87       	std	Z+11, r19	; 0x0b
    1140:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1142:	f9 01       	movw	r30, r18
    1144:	80 81       	ld	r24, Z
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	80 83       	st	Z, r24
}
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    115a:	08 81       	ld	r16, Y
    115c:	19 81       	ldd	r17, Y+1	; 0x01
    115e:	2a 81       	ldd	r18, Y+2	; 0x02
    1160:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1162:	0f 3f       	cpi	r16, 0xFF	; 255
    1164:	4f ef       	ldi	r20, 0xFF	; 255
    1166:	14 07       	cpc	r17, r20
    1168:	24 07       	cpc	r18, r20
    116a:	34 07       	cpc	r19, r20
    116c:	21 f4       	brne	.+8      	; 0x1176 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    116e:	fc 01       	movw	r30, r24
    1170:	a1 85       	ldd	r26, Z+9	; 0x09
    1172:	b2 85       	ldd	r27, Z+10	; 0x0a
    1174:	11 c0       	rjmp	.+34     	; 0x1198 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1176:	dc 01       	movw	r26, r24
    1178:	13 96       	adiw	r26, 0x03	; 3
    117a:	01 c0       	rjmp	.+2      	; 0x117e <vListInsert+0x2e>
    117c:	df 01       	movw	r26, r30
    117e:	14 96       	adiw	r26, 0x04	; 4
    1180:	ed 91       	ld	r30, X+
    1182:	fc 91       	ld	r31, X
    1184:	15 97       	sbiw	r26, 0x05	; 5
    1186:	40 81       	ld	r20, Z
    1188:	51 81       	ldd	r21, Z+1	; 0x01
    118a:	62 81       	ldd	r22, Z+2	; 0x02
    118c:	73 81       	ldd	r23, Z+3	; 0x03
    118e:	04 17       	cp	r16, r20
    1190:	15 07       	cpc	r17, r21
    1192:	26 07       	cpc	r18, r22
    1194:	37 07       	cpc	r19, r23
    1196:	90 f7       	brcc	.-28     	; 0x117c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1198:	14 96       	adiw	r26, 0x04	; 4
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	15 97       	sbiw	r26, 0x05	; 5
    11a0:	fd 83       	std	Y+5, r31	; 0x05
    11a2:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11a4:	d7 83       	std	Z+7, r29	; 0x07
    11a6:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    11a8:	bf 83       	std	Y+7, r27	; 0x07
    11aa:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    11ac:	15 96       	adiw	r26, 0x05	; 5
    11ae:	dc 93       	st	X, r29
    11b0:	ce 93       	st	-X, r28
    11b2:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    11b4:	9b 87       	std	Y+11, r25	; 0x0b
    11b6:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 81       	ld	r18, Z
    11bc:	2f 5f       	subi	r18, 0xFF	; 255
    11be:	20 83       	st	Z, r18
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    11d0:	a2 85       	ldd	r26, Z+10	; 0x0a
    11d2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    11d4:	c4 81       	ldd	r28, Z+4	; 0x04
    11d6:	d5 81       	ldd	r29, Z+5	; 0x05
    11d8:	86 81       	ldd	r24, Z+6	; 0x06
    11da:	97 81       	ldd	r25, Z+7	; 0x07
    11dc:	9f 83       	std	Y+7, r25	; 0x07
    11de:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    11e0:	c6 81       	ldd	r28, Z+6	; 0x06
    11e2:	d7 81       	ldd	r29, Z+7	; 0x07
    11e4:	84 81       	ldd	r24, Z+4	; 0x04
    11e6:	95 81       	ldd	r25, Z+5	; 0x05
    11e8:	9d 83       	std	Y+5, r25	; 0x05
    11ea:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	8d 91       	ld	r24, X+
    11f0:	9c 91       	ld	r25, X
    11f2:	12 97       	sbiw	r26, 0x02	; 2
    11f4:	e8 17       	cp	r30, r24
    11f6:	f9 07       	cpc	r31, r25
    11f8:	31 f4       	brne	.+12     	; 0x1206 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    11fa:	86 81       	ldd	r24, Z+6	; 0x06
    11fc:	97 81       	ldd	r25, Z+7	; 0x07
    11fe:	12 96       	adiw	r26, 0x02	; 2
    1200:	9c 93       	st	X, r25
    1202:	8e 93       	st	-X, r24
    1204:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1206:	13 86       	std	Z+11, r1	; 0x0b
    1208:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    120a:	8c 91       	ld	r24, X
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1210:	8c 91       	ld	r24, X
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1218:	31 e1       	ldi	r19, 0x11	; 17
    121a:	fc 01       	movw	r30, r24
    121c:	30 83       	st	Z, r19
    121e:	31 97       	sbiw	r30, 0x01	; 1
    1220:	22 e2       	ldi	r18, 0x22	; 34
    1222:	20 83       	st	Z, r18
    1224:	31 97       	sbiw	r30, 0x01	; 1
    1226:	a3 e3       	ldi	r26, 0x33	; 51
    1228:	a0 83       	st	Z, r26
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	60 83       	st	Z, r22
    122e:	31 97       	sbiw	r30, 0x01	; 1
    1230:	70 83       	st	Z, r23
    1232:	31 97       	sbiw	r30, 0x01	; 1
    1234:	10 82       	st	Z, r1
    1236:	31 97       	sbiw	r30, 0x01	; 1
    1238:	10 82       	st	Z, r1
    123a:	31 97       	sbiw	r30, 0x01	; 1
    123c:	60 e8       	ldi	r22, 0x80	; 128
    123e:	60 83       	st	Z, r22
    1240:	31 97       	sbiw	r30, 0x01	; 1
    1242:	10 82       	st	Z, r1
    1244:	31 97       	sbiw	r30, 0x01	; 1
    1246:	10 82       	st	Z, r1
    1248:	31 97       	sbiw	r30, 0x01	; 1
    124a:	10 82       	st	Z, r1
    124c:	31 97       	sbiw	r30, 0x01	; 1
    124e:	62 e0       	ldi	r22, 0x02	; 2
    1250:	60 83       	st	Z, r22
    1252:	31 97       	sbiw	r30, 0x01	; 1
    1254:	63 e0       	ldi	r22, 0x03	; 3
    1256:	60 83       	st	Z, r22
    1258:	31 97       	sbiw	r30, 0x01	; 1
    125a:	64 e0       	ldi	r22, 0x04	; 4
    125c:	60 83       	st	Z, r22
    125e:	31 97       	sbiw	r30, 0x01	; 1
    1260:	65 e0       	ldi	r22, 0x05	; 5
    1262:	60 83       	st	Z, r22
    1264:	31 97       	sbiw	r30, 0x01	; 1
    1266:	66 e0       	ldi	r22, 0x06	; 6
    1268:	60 83       	st	Z, r22
    126a:	31 97       	sbiw	r30, 0x01	; 1
    126c:	67 e0       	ldi	r22, 0x07	; 7
    126e:	60 83       	st	Z, r22
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	68 e0       	ldi	r22, 0x08	; 8
    1274:	60 83       	st	Z, r22
    1276:	31 97       	sbiw	r30, 0x01	; 1
    1278:	69 e0       	ldi	r22, 0x09	; 9
    127a:	60 83       	st	Z, r22
    127c:	31 97       	sbiw	r30, 0x01	; 1
    127e:	60 e1       	ldi	r22, 0x10	; 16
    1280:	60 83       	st	Z, r22
    1282:	31 97       	sbiw	r30, 0x01	; 1
    1284:	30 83       	st	Z, r19
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	32 e1       	ldi	r19, 0x12	; 18
    128a:	30 83       	st	Z, r19
    128c:	31 97       	sbiw	r30, 0x01	; 1
    128e:	33 e1       	ldi	r19, 0x13	; 19
    1290:	30 83       	st	Z, r19
    1292:	31 97       	sbiw	r30, 0x01	; 1
    1294:	34 e1       	ldi	r19, 0x14	; 20
    1296:	30 83       	st	Z, r19
    1298:	31 97       	sbiw	r30, 0x01	; 1
    129a:	35 e1       	ldi	r19, 0x15	; 21
    129c:	30 83       	st	Z, r19
    129e:	31 97       	sbiw	r30, 0x01	; 1
    12a0:	36 e1       	ldi	r19, 0x16	; 22
    12a2:	30 83       	st	Z, r19
    12a4:	31 97       	sbiw	r30, 0x01	; 1
    12a6:	37 e1       	ldi	r19, 0x17	; 23
    12a8:	30 83       	st	Z, r19
    12aa:	31 97       	sbiw	r30, 0x01	; 1
    12ac:	38 e1       	ldi	r19, 0x18	; 24
    12ae:	30 83       	st	Z, r19
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	39 e1       	ldi	r19, 0x19	; 25
    12b4:	30 83       	st	Z, r19
    12b6:	31 97       	sbiw	r30, 0x01	; 1
    12b8:	30 e2       	ldi	r19, 0x20	; 32
    12ba:	30 83       	st	Z, r19
    12bc:	31 97       	sbiw	r30, 0x01	; 1
    12be:	31 e2       	ldi	r19, 0x21	; 33
    12c0:	30 83       	st	Z, r19
    12c2:	31 97       	sbiw	r30, 0x01	; 1
    12c4:	20 83       	st	Z, r18
    12c6:	31 97       	sbiw	r30, 0x01	; 1
    12c8:	23 e2       	ldi	r18, 0x23	; 35
    12ca:	20 83       	st	Z, r18
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	40 83       	st	Z, r20
    12d0:	31 97       	sbiw	r30, 0x01	; 1
    12d2:	50 83       	st	Z, r21
    12d4:	31 97       	sbiw	r30, 0x01	; 1
    12d6:	26 e2       	ldi	r18, 0x26	; 38
    12d8:	20 83       	st	Z, r18
    12da:	31 97       	sbiw	r30, 0x01	; 1
    12dc:	27 e2       	ldi	r18, 0x27	; 39
    12de:	20 83       	st	Z, r18
    12e0:	31 97       	sbiw	r30, 0x01	; 1
    12e2:	28 e2       	ldi	r18, 0x28	; 40
    12e4:	20 83       	st	Z, r18
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	29 e2       	ldi	r18, 0x29	; 41
    12ea:	20 83       	st	Z, r18
    12ec:	31 97       	sbiw	r30, 0x01	; 1
    12ee:	20 e3       	ldi	r18, 0x30	; 48
    12f0:	20 83       	st	Z, r18
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	21 e3       	ldi	r18, 0x31	; 49
    12f6:	20 83       	st	Z, r18
    12f8:	89 97       	sbiw	r24, 0x29	; 41
    12fa:	08 95       	ret

000012fc <xPortStartScheduler>:
    12fc:	a8 95       	wdr
    12fe:	90 ec       	ldi	r25, 0xC0	; 192
    1300:	88 e1       	ldi	r24, 0x18	; 24
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	a8 95       	wdr
    1308:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1312:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    1316:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    131a:	cd 91       	ld	r28, X+
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	dd 91       	ld	r29, X+
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	bf 90       	pop	r11
    134c:	af 90       	pop	r10
    134e:	9f 90       	pop	r9
    1350:	8f 90       	pop	r8
    1352:	7f 90       	pop	r7
    1354:	6f 90       	pop	r6
    1356:	5f 90       	pop	r5
    1358:	4f 90       	pop	r4
    135a:	3f 90       	pop	r3
    135c:	2f 90       	pop	r2
    135e:	1f 90       	pop	r1
    1360:	0f 90       	pop	r0
    1362:	0c be       	out	0x3c, r0	; 60
    1364:	0f 90       	pop	r0
    1366:	0b be       	out	0x3b, r0	; 59
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	08 95       	ret
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	08 95       	ret

00001374 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	0f 92       	push	r0
    137c:	0b b6       	in	r0, 0x3b	; 59
    137e:	0f 92       	push	r0
    1380:	0c b6       	in	r0, 0x3c	; 60
    1382:	0f 92       	push	r0
    1384:	1f 92       	push	r1
    1386:	11 24       	eor	r1, r1
    1388:	2f 92       	push	r2
    138a:	3f 92       	push	r3
    138c:	4f 92       	push	r4
    138e:	5f 92       	push	r5
    1390:	6f 92       	push	r6
    1392:	7f 92       	push	r7
    1394:	8f 92       	push	r8
    1396:	9f 92       	push	r9
    1398:	af 92       	push	r10
    139a:	bf 92       	push	r11
    139c:	cf 92       	push	r12
    139e:	df 92       	push	r13
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	ef 93       	push	r30
    13c2:	ff 93       	push	r31
    13c4:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    13c8:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    13cc:	0d b6       	in	r0, 0x3d	; 61
    13ce:	0d 92       	st	X+, r0
    13d0:	0e b6       	in	r0, 0x3e	; 62
    13d2:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    13d4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    13d8:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    13dc:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    13e0:	cd 91       	ld	r28, X+
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	dd 91       	ld	r29, X+
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	5f 90       	pop	r5
    141e:	4f 90       	pop	r4
    1420:	3f 90       	pop	r3
    1422:	2f 90       	pop	r2
    1424:	1f 90       	pop	r1
    1426:	0f 90       	pop	r0
    1428:	0c be       	out	0x3c, r0	; 60
    142a:	0f 90       	pop	r0
    142c:	0b be       	out	0x3b, r0	; 59
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1434:	08 95       	ret

00001436 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	0f 92       	push	r0
    143e:	0b b6       	in	r0, 0x3b	; 59
    1440:	0f 92       	push	r0
    1442:	0c b6       	in	r0, 0x3c	; 60
    1444:	0f 92       	push	r0
    1446:	1f 92       	push	r1
    1448:	11 24       	eor	r1, r1
    144a:	2f 92       	push	r2
    144c:	3f 92       	push	r3
    144e:	4f 92       	push	r4
    1450:	5f 92       	push	r5
    1452:	6f 92       	push	r6
    1454:	7f 92       	push	r7
    1456:	8f 92       	push	r8
    1458:	9f 92       	push	r9
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	2f 93       	push	r18
    146c:	3f 93       	push	r19
    146e:	4f 93       	push	r20
    1470:	5f 93       	push	r21
    1472:	6f 93       	push	r22
    1474:	7f 93       	push	r23
    1476:	8f 93       	push	r24
    1478:	9f 93       	push	r25
    147a:	af 93       	push	r26
    147c:	bf 93       	push	r27
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
    1486:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    148a:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    148e:	0d b6       	in	r0, 0x3d	; 61
    1490:	0d 92       	st	X+, r0
    1492:	0e b6       	in	r0, 0x3e	; 62
    1494:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1496:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1498:	0e 94 2e 13 	call	0x265c	; 0x265c <xTaskIncrementTick>
    149c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    149e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    14a2:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    14a6:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    14aa:	cd 91       	ld	r28, X+
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	dd 91       	ld	r29, X+
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	7f 90       	pop	r7
    14e4:	6f 90       	pop	r6
    14e6:	5f 90       	pop	r5
    14e8:	4f 90       	pop	r4
    14ea:	3f 90       	pop	r3
    14ec:	2f 90       	pop	r2
    14ee:	1f 90       	pop	r1
    14f0:	0f 90       	pop	r0
    14f2:	0c be       	out	0x3c, r0	; 60
    14f4:	0f 90       	pop	r0
    14f6:	0b be       	out	0x3b, r0	; 59
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    14fe:	08 95       	ret

00001500 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1500:	9a df       	rcall	.-204    	; 0x1436 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1502:	18 95       	reti

00001504 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	0f 92       	push	r0
    150a:	fc 01       	movw	r30, r24
    150c:	96 8d       	ldd	r25, Z+30	; 0x1e
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	91 11       	cpse	r25, r1
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	08 95       	ret

0000151a <prvCopyDataToQueue>:
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ec 01       	movw	r28, r24
    1524:	04 2f       	mov	r16, r20
    1526:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1528:	48 a1       	ldd	r20, Y+32	; 0x20
    152a:	41 11       	cpse	r20, r1
    152c:	0c c0       	rjmp	.+24     	; 0x1546 <prvCopyDataToQueue+0x2c>
    152e:	88 81       	ld	r24, Y
    1530:	99 81       	ldd	r25, Y+1	; 0x01
    1532:	89 2b       	or	r24, r25
    1534:	09 f0       	breq	.+2      	; 0x1538 <prvCopyDataToQueue+0x1e>
    1536:	42 c0       	rjmp	.+132    	; 0x15bc <prvCopyDataToQueue+0xa2>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	0e 94 56 17 	call	0x2eac	; 0x2eac <xTaskPriorityDisinherit>
    1540:	1d 82       	std	Y+5, r1	; 0x05
    1542:	1c 82       	std	Y+4, r1	; 0x04
    1544:	42 c0       	rjmp	.+132    	; 0x15ca <prvCopyDataToQueue+0xb0>
    1546:	01 11       	cpse	r16, r1
    1548:	17 c0       	rjmp	.+46     	; 0x1578 <prvCopyDataToQueue+0x5e>
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <memcpy>
    1554:	28 a1       	ldd	r18, Y+32	; 0x20
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	9b 81       	ldd	r25, Y+3	; 0x03
    155a:	82 0f       	add	r24, r18
    155c:	91 1d       	adc	r25, r1
    155e:	9b 83       	std	Y+3, r25	; 0x03
    1560:	8a 83       	std	Y+2, r24	; 0x02
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	82 17       	cp	r24, r18
    1568:	93 07       	cpc	r25, r19
    156a:	50 f1       	brcs	.+84     	; 0x15c0 <prvCopyDataToQueue+0xa6>
    156c:	88 81       	ld	r24, Y
    156e:	99 81       	ldd	r25, Y+1	; 0x01
    1570:	9b 83       	std	Y+3, r25	; 0x03
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	29 c0       	rjmp	.+82     	; 0x15ca <prvCopyDataToQueue+0xb0>
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <memcpy>
    1582:	88 a1       	ldd	r24, Y+32	; 0x20
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	91 95       	neg	r25
    1588:	81 95       	neg	r24
    158a:	91 09       	sbc	r25, r1
    158c:	2e 81       	ldd	r18, Y+6	; 0x06
    158e:	3f 81       	ldd	r19, Y+7	; 0x07
    1590:	28 0f       	add	r18, r24
    1592:	39 1f       	adc	r19, r25
    1594:	3f 83       	std	Y+7, r19	; 0x07
    1596:	2e 83       	std	Y+6, r18	; 0x06
    1598:	48 81       	ld	r20, Y
    159a:	59 81       	ldd	r21, Y+1	; 0x01
    159c:	24 17       	cp	r18, r20
    159e:	35 07       	cpc	r19, r21
    15a0:	30 f4       	brcc	.+12     	; 0x15ae <prvCopyDataToQueue+0x94>
    15a2:	2c 81       	ldd	r18, Y+4	; 0x04
    15a4:	3d 81       	ldd	r19, Y+5	; 0x05
    15a6:	82 0f       	add	r24, r18
    15a8:	93 1f       	adc	r25, r19
    15aa:	9f 83       	std	Y+7, r25	; 0x07
    15ac:	8e 83       	std	Y+6, r24	; 0x06
    15ae:	02 30       	cpi	r16, 0x02	; 2
    15b0:	49 f4       	brne	.+18     	; 0x15c4 <prvCopyDataToQueue+0xaa>
    15b2:	11 23       	and	r17, r17
    15b4:	49 f0       	breq	.+18     	; 0x15c8 <prvCopyDataToQueue+0xae>
    15b6:	11 50       	subi	r17, 0x01	; 1
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <prvCopyDataToQueue+0xb0>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <prvCopyDataToQueue+0xb0>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <prvCopyDataToQueue+0xb0>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <prvCopyDataToQueue+0xb0>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	1f 5f       	subi	r17, 0xFF	; 255
    15cc:	1e 8f       	std	Y+30, r17	; 0x1e
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <prvCopyDataFromQueue>:
    15d8:	fc 01       	movw	r30, r24
    15da:	40 a1       	ldd	r20, Z+32	; 0x20
    15dc:	44 23       	and	r20, r20
    15de:	a9 f0       	breq	.+42     	; 0x160a <prvCopyDataFromQueue+0x32>
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	26 81       	ldd	r18, Z+6	; 0x06
    15e4:	37 81       	ldd	r19, Z+7	; 0x07
    15e6:	24 0f       	add	r18, r20
    15e8:	35 1f       	adc	r19, r21
    15ea:	37 83       	std	Z+7, r19	; 0x07
    15ec:	26 83       	std	Z+6, r18	; 0x06
    15ee:	84 81       	ldd	r24, Z+4	; 0x04
    15f0:	95 81       	ldd	r25, Z+5	; 0x05
    15f2:	28 17       	cp	r18, r24
    15f4:	39 07       	cpc	r19, r25
    15f6:	20 f0       	brcs	.+8      	; 0x1600 <prvCopyDataFromQueue+0x28>
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	97 83       	std	Z+7, r25	; 0x07
    15fe:	86 83       	std	Z+6, r24	; 0x06
    1600:	cb 01       	movw	r24, r22
    1602:	66 81       	ldd	r22, Z+6	; 0x06
    1604:	77 81       	ldd	r23, Z+7	; 0x07
    1606:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <memcpy>
    160a:	08 95       	ret

0000160c <prvUnlockQueue>:
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	8c 01       	movw	r16, r24
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	0f 92       	push	r0
    161e:	fc 01       	movw	r30, r24
    1620:	c2 a1       	ldd	r28, Z+34	; 0x22
    1622:	1c 16       	cp	r1, r28
    1624:	ac f4       	brge	.+42     	; 0x1650 <prvUnlockQueue+0x44>
    1626:	83 89       	ldd	r24, Z+19	; 0x13
    1628:	81 11       	cpse	r24, r1
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <prvUnlockQueue+0x2c>
    162c:	11 c0       	rjmp	.+34     	; 0x1650 <prvUnlockQueue+0x44>
    162e:	f8 01       	movw	r30, r16
    1630:	83 89       	ldd	r24, Z+19	; 0x13
    1632:	81 11       	cpse	r24, r1
    1634:	05 c0       	rjmp	.+10     	; 0x1640 <prvUnlockQueue+0x34>
    1636:	0c c0       	rjmp	.+24     	; 0x1650 <prvUnlockQueue+0x44>
    1638:	78 01       	movw	r14, r16
    163a:	f3 e1       	ldi	r31, 0x13	; 19
    163c:	ef 0e       	add	r14, r31
    163e:	f1 1c       	adc	r15, r1
    1640:	c7 01       	movw	r24, r14
    1642:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskRemoveFromEventList>
    1646:	81 11       	cpse	r24, r1
    1648:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vTaskMissedYield>
    164c:	c1 50       	subi	r28, 0x01	; 1
    164e:	79 f7       	brne	.-34     	; 0x162e <prvUnlockQueue+0x22>
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	f8 01       	movw	r30, r16
    1654:	82 a3       	std	Z+34, r24	; 0x22
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	0f 92       	push	r0
    1660:	c1 a1       	ldd	r28, Z+33	; 0x21
    1662:	1c 16       	cp	r1, r28
    1664:	ac f4       	brge	.+42     	; 0x1690 <prvUnlockQueue+0x84>
    1666:	80 85       	ldd	r24, Z+8	; 0x08
    1668:	81 11       	cpse	r24, r1
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <prvUnlockQueue+0x6c>
    166c:	11 c0       	rjmp	.+34     	; 0x1690 <prvUnlockQueue+0x84>
    166e:	f8 01       	movw	r30, r16
    1670:	80 85       	ldd	r24, Z+8	; 0x08
    1672:	81 11       	cpse	r24, r1
    1674:	05 c0       	rjmp	.+10     	; 0x1680 <prvUnlockQueue+0x74>
    1676:	0c c0       	rjmp	.+24     	; 0x1690 <prvUnlockQueue+0x84>
    1678:	78 01       	movw	r14, r16
    167a:	f8 e0       	ldi	r31, 0x08	; 8
    167c:	ef 0e       	add	r14, r31
    167e:	f1 1c       	adc	r15, r1
    1680:	c7 01       	movw	r24, r14
    1682:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskRemoveFromEventList>
    1686:	81 11       	cpse	r24, r1
    1688:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vTaskMissedYield>
    168c:	c1 50       	subi	r28, 0x01	; 1
    168e:	79 f7       	brne	.-34     	; 0x166e <prvUnlockQueue+0x62>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	f8 01       	movw	r30, r16
    1694:	81 a3       	std	Z+33, r24	; 0x21
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	08 95       	ret

000016a6 <xQueueGenericReset>:
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ec 01       	movw	r28, r24
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	0f 92       	push	r0
    16b2:	e8 81       	ld	r30, Y
    16b4:	f9 81       	ldd	r31, Y+1	; 0x01
    16b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b8:	28 a1       	ldd	r18, Y+32	; 0x20
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	82 9f       	mul	r24, r18
    16c0:	a0 01       	movw	r20, r0
    16c2:	83 9f       	mul	r24, r19
    16c4:	50 0d       	add	r21, r0
    16c6:	92 9f       	mul	r25, r18
    16c8:	50 0d       	add	r21, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	4e 0f       	add	r20, r30
    16ce:	5f 1f       	adc	r21, r31
    16d0:	5d 83       	std	Y+5, r21	; 0x05
    16d2:	4c 83       	std	Y+4, r20	; 0x04
    16d4:	1e 8e       	std	Y+30, r1	; 0x1e
    16d6:	fb 83       	std	Y+3, r31	; 0x03
    16d8:	ea 83       	std	Y+2, r30	; 0x02
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	82 9f       	mul	r24, r18
    16de:	a0 01       	movw	r20, r0
    16e0:	83 9f       	mul	r24, r19
    16e2:	50 0d       	add	r21, r0
    16e4:	92 9f       	mul	r25, r18
    16e6:	50 0d       	add	r21, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	cf 01       	movw	r24, r30
    16ec:	84 0f       	add	r24, r20
    16ee:	95 1f       	adc	r25, r21
    16f0:	9f 83       	std	Y+7, r25	; 0x07
    16f2:	8e 83       	std	Y+6, r24	; 0x06
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	89 a3       	std	Y+33, r24	; 0x21
    16f8:	8a a3       	std	Y+34, r24	; 0x22
    16fa:	61 11       	cpse	r22, r1
    16fc:	0b c0       	rjmp	.+22     	; 0x1714 <xQueueGenericReset+0x6e>
    16fe:	88 85       	ldd	r24, Y+8	; 0x08
    1700:	88 23       	and	r24, r24
    1702:	71 f0       	breq	.+28     	; 0x1720 <xQueueGenericReset+0x7a>
    1704:	ce 01       	movw	r24, r28
    1706:	08 96       	adiw	r24, 0x08	; 8
    1708:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskRemoveFromEventList>
    170c:	88 23       	and	r24, r24
    170e:	41 f0       	breq	.+16     	; 0x1720 <xQueueGenericReset+0x7a>
    1710:	31 de       	rcall	.-926    	; 0x1374 <vPortYield>
    1712:	06 c0       	rjmp	.+12     	; 0x1720 <xQueueGenericReset+0x7a>
    1714:	ce 01       	movw	r24, r28
    1716:	08 96       	adiw	r24, 0x08	; 8
    1718:	e5 dc       	rcall	.-1590   	; 0x10e4 <vListInitialise>
    171a:	ce 01       	movw	r24, r28
    171c:	43 96       	adiw	r24, 0x13	; 19
    171e:	e2 dc       	rcall	.-1596   	; 0x10e4 <vListInitialise>
    1720:	0f 90       	pop	r0
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <xQueueGenericCreate>:
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	08 2f       	mov	r16, r24
    1738:	16 2f       	mov	r17, r22
    173a:	f4 2e       	mov	r15, r20
    173c:	66 23       	and	r22, r22
    173e:	b9 f0       	breq	.+46     	; 0x176e <xQueueGenericCreate+0x42>
    1740:	86 9f       	mul	r24, r22
    1742:	c0 01       	movw	r24, r0
    1744:	11 24       	eor	r1, r1
    1746:	85 96       	adiw	r24, 0x25	; 37
    1748:	e3 db       	rcall	.-2106   	; 0xf10 <pvPortMalloc>
    174a:	ec 01       	movw	r28, r24
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	41 f4       	brne	.+16     	; 0x1760 <xQueueGenericCreate+0x34>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <xQueueGenericCreate+0x4e>
    1752:	0f 8f       	std	Y+31, r16	; 0x1f
    1754:	18 a3       	std	Y+32, r17	; 0x20
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	ce 01       	movw	r24, r28
    175a:	a5 df       	rcall	.-182    	; 0x16a6 <xQueueGenericReset>
    175c:	fc a2       	std	Y+36, r15	; 0x24
    175e:	0d c0       	rjmp	.+26     	; 0x177a <xQueueGenericCreate+0x4e>
    1760:	85 96       	adiw	r24, 0x25	; 37
    1762:	99 83       	std	Y+1, r25	; 0x01
    1764:	88 83       	st	Y, r24
    1766:	f5 cf       	rjmp	.-22     	; 0x1752 <xQueueGenericCreate+0x26>
    1768:	d9 83       	std	Y+1, r29	; 0x01
    176a:	c8 83       	st	Y, r28
    176c:	f2 cf       	rjmp	.-28     	; 0x1752 <xQueueGenericCreate+0x26>
    176e:	85 e2       	ldi	r24, 0x25	; 37
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	ce db       	rcall	.-2148   	; 0xf10 <pvPortMalloc>
    1774:	ec 01       	movw	r28, r24
    1776:	89 2b       	or	r24, r25
    1778:	b9 f7       	brne	.-18     	; 0x1768 <xQueueGenericCreate+0x3c>
    177a:	ce 01       	movw	r24, r28
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	08 95       	ret

00001788 <xQueueGenericSend>:
    1788:	9f 92       	push	r9
    178a:	af 92       	push	r10
    178c:	bf 92       	push	r11
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	29 97       	sbiw	r28, 0x09	; 9
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	7c 01       	movw	r14, r24
    17b0:	5b 01       	movw	r10, r22
    17b2:	2e 83       	std	Y+6, r18	; 0x06
    17b4:	3f 83       	std	Y+7, r19	; 0x07
    17b6:	48 87       	std	Y+8, r20	; 0x08
    17b8:	59 87       	std	Y+9, r21	; 0x09
    17ba:	10 e0       	ldi	r17, 0x00	; 0
    17bc:	99 24       	eor	r9, r9
    17be:	93 94       	inc	r9
    17c0:	6c 01       	movw	r12, r24
    17c2:	88 e0       	ldi	r24, 0x08	; 8
    17c4:	c8 0e       	add	r12, r24
    17c6:	d1 1c       	adc	r13, r1
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	0f 92       	push	r0
    17ce:	f7 01       	movw	r30, r14
    17d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    17d2:	87 8d       	ldd	r24, Z+31	; 0x1f
    17d4:	98 17       	cp	r25, r24
    17d6:	10 f0       	brcs	.+4      	; 0x17dc <xQueueGenericSend+0x54>
    17d8:	02 30       	cpi	r16, 0x02	; 2
    17da:	b1 f4       	brne	.+44     	; 0x1808 <xQueueGenericSend+0x80>
    17dc:	40 2f       	mov	r20, r16
    17de:	b5 01       	movw	r22, r10
    17e0:	c7 01       	movw	r24, r14
    17e2:	9b de       	rcall	.-714    	; 0x151a <prvCopyDataToQueue>
    17e4:	f7 01       	movw	r30, r14
    17e6:	93 89       	ldd	r25, Z+19	; 0x13
    17e8:	99 23       	and	r25, r25
    17ea:	41 f0       	breq	.+16     	; 0x17fc <xQueueGenericSend+0x74>
    17ec:	c7 01       	movw	r24, r14
    17ee:	43 96       	adiw	r24, 0x13	; 19
    17f0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskRemoveFromEventList>
    17f4:	88 23       	and	r24, r24
    17f6:	21 f0       	breq	.+8      	; 0x1800 <xQueueGenericSend+0x78>
    17f8:	bd dd       	rcall	.-1158   	; 0x1374 <vPortYield>
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <xQueueGenericSend+0x78>
    17fc:	81 11       	cpse	r24, r1
    17fe:	ba dd       	rcall	.-1164   	; 0x1374 <vPortYield>
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	4e c0       	rjmp	.+156    	; 0x18a4 <xQueueGenericSend+0x11c>
    1808:	8e 81       	ldd	r24, Y+6	; 0x06
    180a:	9f 81       	ldd	r25, Y+7	; 0x07
    180c:	a8 85       	ldd	r26, Y+8	; 0x08
    180e:	b9 85       	ldd	r27, Y+9	; 0x09
    1810:	89 2b       	or	r24, r25
    1812:	8a 2b       	or	r24, r26
    1814:	8b 2b       	or	r24, r27
    1816:	21 f4       	brne	.+8      	; 0x1820 <xQueueGenericSend+0x98>
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	42 c0       	rjmp	.+132    	; 0x18a4 <xQueueGenericSend+0x11c>
    1820:	11 11       	cpse	r17, r1
    1822:	05 c0       	rjmp	.+10     	; 0x182e <xQueueGenericSend+0xa6>
    1824:	ce 01       	movw	r24, r28
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <vTaskInternalSetTimeOutState>
    182c:	19 2d       	mov	r17, r9
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	00 d7       	rcall	.+3584   	; 0x2634 <vTaskSuspendAll>
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	0f 92       	push	r0
    183a:	f7 01       	movw	r30, r14
    183c:	81 a1       	ldd	r24, Z+33	; 0x21
    183e:	8f 3f       	cpi	r24, 0xFF	; 255
    1840:	09 f4       	brne	.+2      	; 0x1844 <xQueueGenericSend+0xbc>
    1842:	11 a2       	std	Z+33, r1	; 0x21
    1844:	f7 01       	movw	r30, r14
    1846:	82 a1       	ldd	r24, Z+34	; 0x22
    1848:	8f 3f       	cpi	r24, 0xFF	; 255
    184a:	09 f4       	brne	.+2      	; 0x184e <xQueueGenericSend+0xc6>
    184c:	12 a2       	std	Z+34, r1	; 0x22
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	be 01       	movw	r22, r28
    1854:	6a 5f       	subi	r22, 0xFA	; 250
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <xTaskCheckForTimeOut>
    1860:	81 11       	cpse	r24, r1
    1862:	1c c0       	rjmp	.+56     	; 0x189c <xQueueGenericSend+0x114>
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	0f 92       	push	r0
    186a:	f7 01       	movw	r30, r14
    186c:	96 8d       	ldd	r25, Z+30	; 0x1e
    186e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1870:	0f 90       	pop	r0
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	98 13       	cpse	r25, r24
    1876:	0e c0       	rjmp	.+28     	; 0x1894 <xQueueGenericSend+0x10c>
    1878:	4e 81       	ldd	r20, Y+6	; 0x06
    187a:	5f 81       	ldd	r21, Y+7	; 0x07
    187c:	68 85       	ldd	r22, Y+8	; 0x08
    187e:	79 85       	ldd	r23, Y+9	; 0x09
    1880:	c6 01       	movw	r24, r12
    1882:	0e 94 84 15 	call	0x2b08	; 0x2b08 <vTaskPlaceOnEventList>
    1886:	c7 01       	movw	r24, r14
    1888:	c1 de       	rcall	.-638    	; 0x160c <prvUnlockQueue>
    188a:	bd d7       	rcall	.+3962   	; 0x2806 <xTaskResumeAll>
    188c:	81 11       	cpse	r24, r1
    188e:	9c cf       	rjmp	.-200    	; 0x17c8 <xQueueGenericSend+0x40>
    1890:	71 dd       	rcall	.-1310   	; 0x1374 <vPortYield>
    1892:	9a cf       	rjmp	.-204    	; 0x17c8 <xQueueGenericSend+0x40>
    1894:	c7 01       	movw	r24, r14
    1896:	ba de       	rcall	.-652    	; 0x160c <prvUnlockQueue>
    1898:	b6 d7       	rcall	.+3948   	; 0x2806 <xTaskResumeAll>
    189a:	96 cf       	rjmp	.-212    	; 0x17c8 <xQueueGenericSend+0x40>
    189c:	c7 01       	movw	r24, r14
    189e:	b6 de       	rcall	.-660    	; 0x160c <prvUnlockQueue>
    18a0:	b2 d7       	rcall	.+3940   	; 0x2806 <xTaskResumeAll>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	29 96       	adiw	r28, 0x09	; 9
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	9f 90       	pop	r9
    18c6:	08 95       	ret

000018c8 <xQueueCreateMutex>:
    18c8:	0f 93       	push	r16
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	48 2f       	mov	r20, r24
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	2b df       	rcall	.-426    	; 0x172c <xQueueGenericCreate>
    18d6:	ec 01       	movw	r28, r24
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	61 f0       	breq	.+24     	; 0x18f4 <xQueueCreateMutex+0x2c>
    18dc:	1d 82       	std	Y+5, r1	; 0x05
    18de:	1c 82       	std	Y+4, r1	; 0x04
    18e0:	19 82       	std	Y+1, r1	; 0x01
    18e2:	18 82       	st	Y, r1
    18e4:	1e 82       	std	Y+6, r1	; 0x06
    18e6:	00 e0       	ldi	r16, 0x00	; 0
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	4a df       	rcall	.-364    	; 0x1788 <xQueueGenericSend>
    18f4:	ce 01       	movw	r24, r28
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	0f 91       	pop	r16
    18fc:	08 95       	ret

000018fe <xQueueGenericSendFromISR>:
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	8a 01       	movw	r16, r20
    190c:	fc 01       	movw	r30, r24
    190e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1910:	37 8d       	ldd	r19, Z+31	; 0x1f
    1912:	53 17       	cp	r21, r19
    1914:	10 f0       	brcs	.+4      	; 0x191a <xQueueGenericSendFromISR+0x1c>
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	e9 f4       	brne	.+58     	; 0x1954 <xQueueGenericSendFromISR+0x56>
    191a:	42 2f       	mov	r20, r18
    191c:	78 01       	movw	r14, r16
    191e:	ec 01       	movw	r28, r24
    1920:	1a a1       	ldd	r17, Y+34	; 0x22
    1922:	fb dd       	rcall	.-1034   	; 0x151a <prvCopyDataToQueue>
    1924:	1f 3f       	cpi	r17, 0xFF	; 255
    1926:	81 f4       	brne	.+32     	; 0x1948 <xQueueGenericSendFromISR+0x4a>
    1928:	8b 89       	ldd	r24, Y+19	; 0x13
    192a:	88 23       	and	r24, r24
    192c:	a9 f0       	breq	.+42     	; 0x1958 <xQueueGenericSendFromISR+0x5a>
    192e:	ce 01       	movw	r24, r28
    1930:	43 96       	adiw	r24, 0x13	; 19
    1932:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskRemoveFromEventList>
    1936:	88 23       	and	r24, r24
    1938:	89 f0       	breq	.+34     	; 0x195c <xQueueGenericSendFromISR+0x5e>
    193a:	e1 14       	cp	r14, r1
    193c:	f1 04       	cpc	r15, r1
    193e:	81 f0       	breq	.+32     	; 0x1960 <xQueueGenericSendFromISR+0x62>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	f7 01       	movw	r30, r14
    1944:	80 83       	st	Z, r24
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <xQueueGenericSendFromISR+0x64>
    1948:	ff 24       	eor	r15, r15
    194a:	f3 94       	inc	r15
    194c:	f1 0e       	add	r15, r17
    194e:	fa a2       	std	Y+34, r15	; 0x22
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	07 c0       	rjmp	.+14     	; 0x1962 <xQueueGenericSendFromISR+0x64>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <xQueueGenericSendFromISR+0x64>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <xQueueGenericSendFromISR+0x64>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <xQueueGenericSendFromISR+0x64>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	08 95       	ret

00001970 <xQueueReceive>:
    1970:	9f 92       	push	r9
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	29 97       	sbiw	r28, 0x09	; 9
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	8c 01       	movw	r16, r24
    1998:	5b 01       	movw	r10, r22
    199a:	2e 83       	std	Y+6, r18	; 0x06
    199c:	3f 83       	std	Y+7, r19	; 0x07
    199e:	48 87       	std	Y+8, r20	; 0x08
    19a0:	59 87       	std	Y+9, r21	; 0x09
    19a2:	e1 2c       	mov	r14, r1
    19a4:	99 24       	eor	r9, r9
    19a6:	93 94       	inc	r9
    19a8:	6c 01       	movw	r12, r24
    19aa:	83 e1       	ldi	r24, 0x13	; 19
    19ac:	c8 0e       	add	r12, r24
    19ae:	d1 1c       	adc	r13, r1
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	0f 92       	push	r0
    19b6:	f8 01       	movw	r30, r16
    19b8:	f6 8c       	ldd	r15, Z+30	; 0x1e
    19ba:	ff 20       	and	r15, r15
    19bc:	99 f0       	breq	.+38     	; 0x19e4 <xQueueReceive+0x74>
    19be:	b5 01       	movw	r22, r10
    19c0:	c8 01       	movw	r24, r16
    19c2:	0a de       	rcall	.-1004   	; 0x15d8 <prvCopyDataFromQueue>
    19c4:	fa 94       	dec	r15
    19c6:	f8 01       	movw	r30, r16
    19c8:	f6 8e       	std	Z+30, r15	; 0x1e
    19ca:	80 85       	ldd	r24, Z+8	; 0x08
    19cc:	88 23       	and	r24, r24
    19ce:	31 f0       	breq	.+12     	; 0x19dc <xQueueReceive+0x6c>
    19d0:	c8 01       	movw	r24, r16
    19d2:	08 96       	adiw	r24, 0x08	; 8
    19d4:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskRemoveFromEventList>
    19d8:	81 11       	cpse	r24, r1
    19da:	cc dc       	rcall	.-1640   	; 0x1374 <vPortYield>
    19dc:	0f 90       	pop	r0
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	4d c0       	rjmp	.+154    	; 0x1a7e <xQueueReceive+0x10e>
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	9f 81       	ldd	r25, Y+7	; 0x07
    19e8:	a8 85       	ldd	r26, Y+8	; 0x08
    19ea:	b9 85       	ldd	r27, Y+9	; 0x09
    19ec:	89 2b       	or	r24, r25
    19ee:	8a 2b       	or	r24, r26
    19f0:	8b 2b       	or	r24, r27
    19f2:	21 f4       	brne	.+8      	; 0x19fc <xQueueReceive+0x8c>
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	41 c0       	rjmp	.+130    	; 0x1a7e <xQueueReceive+0x10e>
    19fc:	e1 10       	cpse	r14, r1
    19fe:	05 c0       	rjmp	.+10     	; 0x1a0a <xQueueReceive+0x9a>
    1a00:	ce 01       	movw	r24, r28
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <vTaskInternalSetTimeOutState>
    1a08:	e9 2c       	mov	r14, r9
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	12 d6       	rcall	.+3108   	; 0x2634 <vTaskSuspendAll>
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	0f 92       	push	r0
    1a16:	f8 01       	movw	r30, r16
    1a18:	81 a1       	ldd	r24, Z+33	; 0x21
    1a1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <xQueueReceive+0xb0>
    1a1e:	11 a2       	std	Z+33, r1	; 0x21
    1a20:	f8 01       	movw	r30, r16
    1a22:	82 a1       	ldd	r24, Z+34	; 0x22
    1a24:	8f 3f       	cpi	r24, 0xFF	; 255
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <xQueueReceive+0xba>
    1a28:	12 a2       	std	Z+34, r1	; 0x22
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	be 01       	movw	r22, r28
    1a30:	6a 5f       	subi	r22, 0xFA	; 250
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <xTaskCheckForTimeOut>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	16 c0       	rjmp	.+44     	; 0x1a6c <xQueueReceive+0xfc>
    1a40:	c8 01       	movw	r24, r16
    1a42:	60 dd       	rcall	.-1344   	; 0x1504 <prvIsQueueEmpty>
    1a44:	88 23       	and	r24, r24
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <xQueueReceive+0xf4>
    1a48:	4e 81       	ldd	r20, Y+6	; 0x06
    1a4a:	5f 81       	ldd	r21, Y+7	; 0x07
    1a4c:	68 85       	ldd	r22, Y+8	; 0x08
    1a4e:	79 85       	ldd	r23, Y+9	; 0x09
    1a50:	c6 01       	movw	r24, r12
    1a52:	0e 94 84 15 	call	0x2b08	; 0x2b08 <vTaskPlaceOnEventList>
    1a56:	c8 01       	movw	r24, r16
    1a58:	d9 dd       	rcall	.-1102   	; 0x160c <prvUnlockQueue>
    1a5a:	d5 d6       	rcall	.+3498   	; 0x2806 <xTaskResumeAll>
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	a8 cf       	rjmp	.-176    	; 0x19b0 <xQueueReceive+0x40>
    1a60:	89 dc       	rcall	.-1774   	; 0x1374 <vPortYield>
    1a62:	a6 cf       	rjmp	.-180    	; 0x19b0 <xQueueReceive+0x40>
    1a64:	c8 01       	movw	r24, r16
    1a66:	d2 dd       	rcall	.-1116   	; 0x160c <prvUnlockQueue>
    1a68:	ce d6       	rcall	.+3484   	; 0x2806 <xTaskResumeAll>
    1a6a:	a2 cf       	rjmp	.-188    	; 0x19b0 <xQueueReceive+0x40>
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	ce dd       	rcall	.-1124   	; 0x160c <prvUnlockQueue>
    1a70:	ca d6       	rcall	.+3476   	; 0x2806 <xTaskResumeAll>
    1a72:	c8 01       	movw	r24, r16
    1a74:	47 dd       	rcall	.-1394   	; 0x1504 <prvIsQueueEmpty>
    1a76:	88 23       	and	r24, r24
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <xQueueReceive+0x10c>
    1a7a:	9a cf       	rjmp	.-204    	; 0x19b0 <xQueueReceive+0x40>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	29 96       	adiw	r28, 0x09	; 9
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	9f 90       	pop	r9
    1aa0:	08 95       	ret

00001aa2 <xQueueSemaphoreTake>:
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	29 97       	sbiw	r28, 0x09	; 9
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	8c 01       	movw	r16, r24
    1ac6:	4e 83       	std	Y+6, r20	; 0x06
    1ac8:	5f 83       	std	Y+7, r21	; 0x07
    1aca:	68 87       	std	Y+8, r22	; 0x08
    1acc:	79 87       	std	Y+9, r23	; 0x09
    1ace:	b1 2c       	mov	r11, r1
    1ad0:	d1 2c       	mov	r13, r1
    1ad2:	cc 24       	eor	r12, r12
    1ad4:	c3 94       	inc	r12
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	83 e1       	ldi	r24, 0x13	; 19
    1ada:	e8 0e       	add	r14, r24
    1adc:	f1 1c       	adc	r15, r1
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	0f 92       	push	r0
    1ae4:	d8 01       	movw	r26, r16
    1ae6:	5e 96       	adiw	r26, 0x1e	; 30
    1ae8:	8c 91       	ld	r24, X
    1aea:	5e 97       	sbiw	r26, 0x1e	; 30
    1aec:	88 23       	and	r24, r24
    1aee:	e1 f0       	breq	.+56     	; 0x1b28 <xQueueSemaphoreTake+0x86>
    1af0:	81 50       	subi	r24, 0x01	; 1
    1af2:	5e 96       	adiw	r26, 0x1e	; 30
    1af4:	8c 93       	st	X, r24
    1af6:	5e 97       	sbiw	r26, 0x1e	; 30
    1af8:	8d 91       	ld	r24, X+
    1afa:	9c 91       	ld	r25, X
    1afc:	89 2b       	or	r24, r25
    1afe:	29 f4       	brne	.+10     	; 0x1b0a <xQueueSemaphoreTake+0x68>
    1b00:	0e 94 0a 18 	call	0x3014	; 0x3014 <pvTaskIncrementMutexHeldCount>
    1b04:	f8 01       	movw	r30, r16
    1b06:	95 83       	std	Z+5, r25	; 0x05
    1b08:	84 83       	std	Z+4, r24	; 0x04
    1b0a:	d8 01       	movw	r26, r16
    1b0c:	18 96       	adiw	r26, 0x08	; 8
    1b0e:	8c 91       	ld	r24, X
    1b10:	88 23       	and	r24, r24
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <xQueueSemaphoreTake+0x7e>
    1b14:	c8 01       	movw	r24, r16
    1b16:	08 96       	adiw	r24, 0x08	; 8
    1b18:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskRemoveFromEventList>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	2a dc       	rcall	.-1964   	; 0x1374 <vPortYield>
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	7a c0       	rjmp	.+244    	; 0x1c1c <xQueueSemaphoreTake+0x17a>
    1b28:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2c:	a8 85       	ldd	r26, Y+8	; 0x08
    1b2e:	b9 85       	ldd	r27, Y+9	; 0x09
    1b30:	89 2b       	or	r24, r25
    1b32:	8a 2b       	or	r24, r26
    1b34:	8b 2b       	or	r24, r27
    1b36:	21 f4       	brne	.+8      	; 0x1b40 <xQueueSemaphoreTake+0x9e>
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	6e c0       	rjmp	.+220    	; 0x1c1c <xQueueSemaphoreTake+0x17a>
    1b40:	d1 10       	cpse	r13, r1
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <xQueueSemaphoreTake+0xac>
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <vTaskInternalSetTimeOutState>
    1b4c:	dc 2c       	mov	r13, r12
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	70 d5       	rcall	.+2784   	; 0x2634 <vTaskSuspendAll>
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	0f 92       	push	r0
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	81 a1       	ldd	r24, Z+33	; 0x21
    1b5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <xQueueSemaphoreTake+0xc2>
    1b62:	11 a2       	std	Z+33, r1	; 0x21
    1b64:	d8 01       	movw	r26, r16
    1b66:	92 96       	adiw	r26, 0x22	; 34
    1b68:	8c 91       	ld	r24, X
    1b6a:	92 97       	sbiw	r26, 0x22	; 34
    1b6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <xQueueSemaphoreTake+0xd2>
    1b70:	92 96       	adiw	r26, 0x22	; 34
    1b72:	1c 92       	st	X, r1
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	be 01       	movw	r22, r28
    1b7a:	6a 5f       	subi	r22, 0xFA	; 250
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7e:	ce 01       	movw	r24, r28
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <xTaskCheckForTimeOut>
    1b86:	81 11       	cpse	r24, r1
    1b88:	24 c0       	rjmp	.+72     	; 0x1bd2 <xQueueSemaphoreTake+0x130>
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	bb dc       	rcall	.-1674   	; 0x1504 <prvIsQueueEmpty>
    1b8e:	88 23       	and	r24, r24
    1b90:	e1 f0       	breq	.+56     	; 0x1bca <xQueueSemaphoreTake+0x128>
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	89 2b       	or	r24, r25
    1b9a:	51 f4       	brne	.+20     	; 0x1bb0 <xQueueSemaphoreTake+0x10e>
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	0f 92       	push	r0
    1ba2:	84 81       	ldd	r24, Z+4	; 0x04
    1ba4:	95 81       	ldd	r25, Z+5	; 0x05
    1ba6:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <xTaskPriorityInherit>
    1baa:	b8 2e       	mov	r11, r24
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	4e 81       	ldd	r20, Y+6	; 0x06
    1bb2:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb4:	68 85       	ldd	r22, Y+8	; 0x08
    1bb6:	79 85       	ldd	r23, Y+9	; 0x09
    1bb8:	c7 01       	movw	r24, r14
    1bba:	a6 d7       	rcall	.+3916   	; 0x2b08 <vTaskPlaceOnEventList>
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	26 dd       	rcall	.-1460   	; 0x160c <prvUnlockQueue>
    1bc0:	22 d6       	rcall	.+3140   	; 0x2806 <xTaskResumeAll>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	8c cf       	rjmp	.-232    	; 0x1ade <xQueueSemaphoreTake+0x3c>
    1bc6:	d6 db       	rcall	.-2132   	; 0x1374 <vPortYield>
    1bc8:	8a cf       	rjmp	.-236    	; 0x1ade <xQueueSemaphoreTake+0x3c>
    1bca:	c8 01       	movw	r24, r16
    1bcc:	1f dd       	rcall	.-1474   	; 0x160c <prvUnlockQueue>
    1bce:	1b d6       	rcall	.+3126   	; 0x2806 <xTaskResumeAll>
    1bd0:	86 cf       	rjmp	.-244    	; 0x1ade <xQueueSemaphoreTake+0x3c>
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	1b dd       	rcall	.-1482   	; 0x160c <prvUnlockQueue>
    1bd6:	17 d6       	rcall	.+3118   	; 0x2806 <xTaskResumeAll>
    1bd8:	c8 01       	movw	r24, r16
    1bda:	94 dc       	rcall	.-1752   	; 0x1504 <prvIsQueueEmpty>
    1bdc:	88 23       	and	r24, r24
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <xQueueSemaphoreTake+0x140>
    1be0:	7e cf       	rjmp	.-260    	; 0x1ade <xQueueSemaphoreTake+0x3c>
    1be2:	bb 20       	and	r11, r11
    1be4:	d1 f0       	breq	.+52     	; 0x1c1a <xQueueSemaphoreTake+0x178>
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	0f 92       	push	r0
    1bec:	f8 01       	movw	r30, r16
    1bee:	83 89       	ldd	r24, Z+19	; 0x13
    1bf0:	88 23       	and	r24, r24
    1bf2:	39 f0       	breq	.+14     	; 0x1c02 <xQueueSemaphoreTake+0x160>
    1bf4:	02 8c       	ldd	r0, Z+26	; 0x1a
    1bf6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	64 e0       	ldi	r22, 0x04	; 4
    1bfe:	68 1b       	sub	r22, r24
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <xQueueSemaphoreTake+0x162>
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	d8 01       	movw	r26, r16
    1c06:	14 96       	adiw	r26, 0x04	; 4
    1c08:	8d 91       	ld	r24, X+
    1c0a:	9c 91       	ld	r25, X
    1c0c:	15 97       	sbiw	r26, 0x05	; 5
    1c0e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <vTaskPriorityDisinheritAfterTimeout>
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <xQueueSemaphoreTake+0x17a>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	29 96       	adiw	r28, 0x09	; 9
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	ff 90       	pop	r15
    1c32:	ef 90       	pop	r14
    1c34:	df 90       	pop	r13
    1c36:	cf 90       	pop	r12
    1c38:	bf 90       	pop	r11
    1c3a:	08 95       	ret

00001c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	0f 92       	push	r0
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <vQueueWaitForMessageRestricted+0x14>
    1c4e:	19 a2       	std	Y+33, r1	; 0x21
    1c50:	8a a1       	ldd	r24, Y+34	; 0x22
    1c52:	8f 3f       	cpi	r24, 0xFF	; 255
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <vQueueWaitForMessageRestricted+0x1c>
    1c56:	1a a2       	std	Y+34, r1	; 0x22
    1c58:	0f 90       	pop	r0
    1c5a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1c5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c5e:	81 11       	cpse	r24, r1
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1c62:	ce 01       	movw	r24, r28
    1c64:	43 96       	adiw	r24, 0x13	; 19
    1c66:	8b d7       	rcall	.+3862   	; 0x2b7e <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1c68:	ce 01       	movw	r24, r28
    1c6a:	d0 dc       	rcall	.-1632   	; 0x160c <prvUnlockQueue>
    }
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1c72:	fc 01       	movw	r30, r24
    1c74:	44 81       	ldd	r20, Z+4	; 0x04
    1c76:	55 81       	ldd	r21, Z+5	; 0x05
    1c78:	22 81       	ldd	r18, Z+2	; 0x02
    1c7a:	33 81       	ldd	r19, Z+3	; 0x03
    1c7c:	24 0f       	add	r18, r20
    1c7e:	35 1f       	adc	r19, r21
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	b9 01       	movw	r22, r18
    1c86:	68 1b       	sub	r22, r24
    1c88:	79 0b       	sbc	r23, r25
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	64 17       	cp	r22, r20
    1c8e:	75 07       	cpc	r23, r21
    1c90:	10 f0       	brcs	.+4      	; 0x1c96 <prvBytesInBuffer+0x24>
    1c92:	84 1b       	sub	r24, r20
    1c94:	95 0b       	sbc	r25, r21
    1c96:	08 95       	ret

00001c98 <prvWriteBytesToBuffer>:
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	6c 01       	movw	r12, r24
    1cae:	5b 01       	movw	r10, r22
    1cb0:	7a 01       	movw	r14, r20
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1cb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1cb8:	04 81       	ldd	r16, Z+4	; 0x04
    1cba:	15 81       	ldd	r17, Z+5	; 0x05
    1cbc:	0c 1b       	sub	r16, r28
    1cbe:	1d 0b       	sbc	r17, r29
    1cc0:	40 17       	cp	r20, r16
    1cc2:	51 07       	cpc	r21, r17
    1cc4:	08 f4       	brcc	.+2      	; 0x1cc8 <prvWriteBytesToBuffer+0x30>
    1cc6:	8a 01       	movw	r16, r20
    1cc8:	f6 01       	movw	r30, r12
    1cca:	84 85       	ldd	r24, Z+12	; 0x0c
    1ccc:	95 85       	ldd	r25, Z+13	; 0x0d
    1cce:	a8 01       	movw	r20, r16
    1cd0:	b5 01       	movw	r22, r10
    1cd2:	8c 0f       	add	r24, r28
    1cd4:	9d 1f       	adc	r25, r29
    1cd6:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <memcpy>
    1cda:	0e 15       	cp	r16, r14
    1cdc:	1f 05       	cpc	r17, r15
    1cde:	58 f4       	brcc	.+22     	; 0x1cf6 <prvWriteBytesToBuffer+0x5e>
    1ce0:	a7 01       	movw	r20, r14
    1ce2:	40 1b       	sub	r20, r16
    1ce4:	51 0b       	sbc	r21, r17
    1ce6:	b5 01       	movw	r22, r10
    1ce8:	60 0f       	add	r22, r16
    1cea:	71 1f       	adc	r23, r17
    1cec:	f6 01       	movw	r30, r12
    1cee:	84 85       	ldd	r24, Z+12	; 0x0c
    1cf0:	95 85       	ldd	r25, Z+13	; 0x0d
    1cf2:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <memcpy>
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	8e 0d       	add	r24, r14
    1cfa:	9f 1d       	adc	r25, r15
    1cfc:	f6 01       	movw	r30, r12
    1cfe:	24 81       	ldd	r18, Z+4	; 0x04
    1d00:	35 81       	ldd	r19, Z+5	; 0x05
    1d02:	82 17       	cp	r24, r18
    1d04:	93 07       	cpc	r25, r19
    1d06:	10 f0       	brcs	.+4      	; 0x1d0c <prvWriteBytesToBuffer+0x74>
    1d08:	82 1b       	sub	r24, r18
    1d0a:	93 0b       	sbc	r25, r19
    1d0c:	f6 01       	movw	r30, r12
    1d0e:	93 83       	std	Z+3, r25	; 0x03
    1d10:	82 83       	std	Z+2, r24	; 0x02
    1d12:	c7 01       	movw	r24, r14
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	08 95       	ret

00001d2a <prvWriteMessageToBuffer>:
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	1f 92       	push	r1
    1d3c:	1f 92       	push	r1
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	5a 83       	std	Y+2, r21	; 0x02
    1d44:	49 83       	std	Y+1, r20	; 0x01
    1d46:	21 15       	cp	r18, r1
    1d48:	31 05       	cpc	r19, r1
    1d4a:	c9 f0       	breq	.+50     	; 0x1d7e <prvWriteMessageToBuffer+0x54>
    1d4c:	6b 01       	movw	r12, r22
    1d4e:	7c 01       	movw	r14, r24
    1d50:	fc 01       	movw	r30, r24
    1d52:	86 85       	ldd	r24, Z+14	; 0x0e
    1d54:	80 fd       	sbrc	r24, 0
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <prvWriteMessageToBuffer+0x3e>
    1d58:	ca 01       	movw	r24, r20
    1d5a:	24 17       	cp	r18, r20
    1d5c:	35 07       	cpc	r19, r21
    1d5e:	08 f4       	brcc	.+2      	; 0x1d62 <prvWriteMessageToBuffer+0x38>
    1d60:	c9 01       	movw	r24, r18
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	11 c0       	rjmp	.+34     	; 0x1d8a <prvWriteMessageToBuffer+0x60>
    1d68:	20 17       	cp	r18, r16
    1d6a:	31 07       	cpc	r19, r17
    1d6c:	58 f0       	brcs	.+22     	; 0x1d84 <prvWriteMessageToBuffer+0x5a>
    1d6e:	42 e0       	ldi	r20, 0x02	; 2
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	be 01       	movw	r22, r28
    1d74:	6f 5f       	subi	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	c7 01       	movw	r24, r14
    1d7a:	8e df       	rcall	.-228    	; 0x1c98 <prvWriteBytesToBuffer>
    1d7c:	06 c0       	rjmp	.+12     	; 0x1d8a <prvWriteMessageToBuffer+0x60>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	08 c0       	rjmp	.+16     	; 0x1d94 <prvWriteMessageToBuffer+0x6a>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <prvWriteMessageToBuffer+0x6a>
    1d8a:	49 81       	ldd	r20, Y+1	; 0x01
    1d8c:	5a 81       	ldd	r21, Y+2	; 0x02
    1d8e:	b6 01       	movw	r22, r12
    1d90:	c7 01       	movw	r24, r14
    1d92:	82 df       	rcall	.-252    	; 0x1c98 <prvWriteBytesToBuffer>
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	cf 90       	pop	r12
    1da8:	08 95       	ret

00001daa <prvReadBytesFromBuffer>:
    1daa:	af 92       	push	r10
    1dac:	bf 92       	push	r11
    1dae:	cf 92       	push	r12
    1db0:	df 92       	push	r13
    1db2:	ef 92       	push	r14
    1db4:	ff 92       	push	r15
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	7c 01       	movw	r14, r24
    1dc0:	5b 01       	movw	r10, r22
    1dc2:	e9 01       	movw	r28, r18
    1dc4:	42 17       	cp	r20, r18
    1dc6:	53 07       	cpc	r21, r19
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <prvReadBytesFromBuffer+0x22>
    1dca:	ea 01       	movw	r28, r20
    1dcc:	20 97       	sbiw	r28, 0x00	; 0
    1dce:	79 f1       	breq	.+94     	; 0x1e2e <prvReadBytesFromBuffer+0x84>
    1dd0:	f7 01       	movw	r30, r14
    1dd2:	00 81       	ld	r16, Z
    1dd4:	11 81       	ldd	r17, Z+1	; 0x01
    1dd6:	c4 80       	ldd	r12, Z+4	; 0x04
    1dd8:	d5 80       	ldd	r13, Z+5	; 0x05
    1dda:	c0 1a       	sub	r12, r16
    1ddc:	d1 0a       	sbc	r13, r17
    1dde:	cc 15       	cp	r28, r12
    1de0:	dd 05       	cpc	r29, r13
    1de2:	08 f4       	brcc	.+2      	; 0x1de6 <prvReadBytesFromBuffer+0x3c>
    1de4:	6e 01       	movw	r12, r28
    1de6:	f7 01       	movw	r30, r14
    1de8:	64 85       	ldd	r22, Z+12	; 0x0c
    1dea:	75 85       	ldd	r23, Z+13	; 0x0d
    1dec:	60 0f       	add	r22, r16
    1dee:	71 1f       	adc	r23, r17
    1df0:	a6 01       	movw	r20, r12
    1df2:	c5 01       	movw	r24, r10
    1df4:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <memcpy>
    1df8:	cc 16       	cp	r12, r28
    1dfa:	dd 06       	cpc	r13, r29
    1dfc:	58 f4       	brcc	.+22     	; 0x1e14 <prvReadBytesFromBuffer+0x6a>
    1dfe:	ae 01       	movw	r20, r28
    1e00:	4c 19       	sub	r20, r12
    1e02:	5d 09       	sbc	r21, r13
    1e04:	f7 01       	movw	r30, r14
    1e06:	64 85       	ldd	r22, Z+12	; 0x0c
    1e08:	75 85       	ldd	r23, Z+13	; 0x0d
    1e0a:	c5 01       	movw	r24, r10
    1e0c:	8c 0d       	add	r24, r12
    1e0e:	9d 1d       	adc	r25, r13
    1e10:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <memcpy>
    1e14:	0c 0f       	add	r16, r28
    1e16:	1d 1f       	adc	r17, r29
    1e18:	f7 01       	movw	r30, r14
    1e1a:	84 81       	ldd	r24, Z+4	; 0x04
    1e1c:	95 81       	ldd	r25, Z+5	; 0x05
    1e1e:	08 17       	cp	r16, r24
    1e20:	19 07       	cpc	r17, r25
    1e22:	10 f0       	brcs	.+4      	; 0x1e28 <prvReadBytesFromBuffer+0x7e>
    1e24:	08 1b       	sub	r16, r24
    1e26:	19 0b       	sbc	r17, r25
    1e28:	f7 01       	movw	r30, r14
    1e2a:	11 83       	std	Z+1, r17	; 0x01
    1e2c:	00 83       	st	Z, r16
    1e2e:	ce 01       	movw	r24, r28
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	df 90       	pop	r13
    1e3e:	cf 90       	pop	r12
    1e40:	bf 90       	pop	r11
    1e42:	af 90       	pop	r10
    1e44:	08 95       	ret

00001e46 <xStreamBufferGenericCreate>:
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	eb 01       	movw	r28, r22
    1e52:	11 e0       	ldi	r17, 0x01	; 1
    1e54:	41 30       	cpi	r20, 0x01	; 1
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <xStreamBufferGenericCreate+0x14>
    1e58:	10 e0       	ldi	r17, 0x00	; 0
    1e5a:	20 97       	sbiw	r28, 0x00	; 0
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <xStreamBufferGenericCreate+0x1c>
    1e5e:	c1 e0       	ldi	r28, 0x01	; 1
    1e60:	d0 e0       	ldi	r29, 0x00	; 0
    1e62:	7c 01       	movw	r14, r24
    1e64:	2f ef       	ldi	r18, 0xFF	; 255
    1e66:	e2 1a       	sub	r14, r18
    1e68:	f2 0a       	sbc	r15, r18
    1e6a:	41 96       	adiw	r24, 0x11	; 17
    1e6c:	51 d8       	rcall	.-3934   	; 0xf10 <pvPortMalloc>
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <xStreamBufferGenericCreate+0x4c>
    1e72:	20 e1       	ldi	r18, 0x10	; 16
    1e74:	fc 01       	movw	r30, r24
    1e76:	11 92       	st	Z+, r1
    1e78:	2a 95       	dec	r18
    1e7a:	e9 f7       	brne	.-6      	; 0x1e76 <xStreamBufferGenericCreate+0x30>
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	20 5f       	subi	r18, 0xF0	; 240
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	fc 01       	movw	r30, r24
    1e84:	35 87       	std	Z+13, r19	; 0x0d
    1e86:	24 87       	std	Z+12, r18	; 0x0c
    1e88:	f5 82       	std	Z+5, r15	; 0x05
    1e8a:	e4 82       	std	Z+4, r14	; 0x04
    1e8c:	d7 83       	std	Z+7, r29	; 0x07
    1e8e:	c6 83       	std	Z+6, r28	; 0x06
    1e90:	16 87       	std	Z+14, r17	; 0x0e
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	ff 90       	pop	r15
    1e9a:	ef 90       	pop	r14
    1e9c:	08 95       	ret

00001e9e <xStreamBufferReset>:
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	27 85       	ldd	r18, Z+15	; 0x0f
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	0f 92       	push	r0
    1eac:	80 85       	ldd	r24, Z+8	; 0x08
    1eae:	91 85       	ldd	r25, Z+9	; 0x09
    1eb0:	89 2b       	or	r24, r25
    1eb2:	d1 f4       	brne	.+52     	; 0x1ee8 <xStreamBufferReset+0x4a>
    1eb4:	82 85       	ldd	r24, Z+10	; 0x0a
    1eb6:	93 85       	ldd	r25, Z+11	; 0x0b
    1eb8:	89 2b       	or	r24, r25
    1eba:	c1 f4       	brne	.+48     	; 0x1eec <xStreamBufferReset+0x4e>
    1ebc:	86 85       	ldd	r24, Z+14	; 0x0e
    1ebe:	46 81       	ldd	r20, Z+6	; 0x06
    1ec0:	57 81       	ldd	r21, Z+7	; 0x07
    1ec2:	64 81       	ldd	r22, Z+4	; 0x04
    1ec4:	75 81       	ldd	r23, Z+5	; 0x05
    1ec6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ec8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1eca:	90 e1       	ldi	r25, 0x10	; 16
    1ecc:	ef 01       	movw	r28, r30
    1ece:	19 92       	st	Y+, r1
    1ed0:	9a 95       	dec	r25
    1ed2:	e9 f7       	brne	.-6      	; 0x1ece <xStreamBufferReset+0x30>
    1ed4:	b5 87       	std	Z+13, r27	; 0x0d
    1ed6:	a4 87       	std	Z+12, r26	; 0x0c
    1ed8:	75 83       	std	Z+5, r23	; 0x05
    1eda:	64 83       	std	Z+4, r22	; 0x04
    1edc:	57 83       	std	Z+7, r21	; 0x07
    1ede:	46 83       	std	Z+6, r20	; 0x06
    1ee0:	86 87       	std	Z+14, r24	; 0x0e
    1ee2:	27 87       	std	Z+15, r18	; 0x0f
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <xStreamBufferReset+0x50>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <xStreamBufferReset+0x50>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	0f 90       	pop	r0
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <xStreamBufferSpacesAvailable>:
    1ef8:	fc 01       	movw	r30, r24
    1efa:	24 81       	ldd	r18, Z+4	; 0x04
    1efc:	35 81       	ldd	r19, Z+5	; 0x05
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	42 81       	ldd	r20, Z+2	; 0x02
    1f04:	53 81       	ldd	r21, Z+3	; 0x03
    1f06:	82 0f       	add	r24, r18
    1f08:	93 1f       	adc	r25, r19
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	84 1b       	sub	r24, r20
    1f0e:	95 0b       	sbc	r25, r21
    1f10:	82 17       	cp	r24, r18
    1f12:	93 07       	cpc	r25, r19
    1f14:	10 f0       	brcs	.+4      	; 0x1f1a <xStreamBufferSpacesAvailable+0x22>
    1f16:	82 1b       	sub	r24, r18
    1f18:	93 0b       	sbc	r25, r19
    1f1a:	08 95       	ret

00001f1c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1f1c:	2f 92       	push	r2
    1f1e:	3f 92       	push	r3
    1f20:	4f 92       	push	r4
    1f22:	5f 92       	push	r5
    1f24:	6f 92       	push	r6
    1f26:	7f 92       	push	r7
    1f28:	8f 92       	push	r8
    1f2a:	9f 92       	push	r9
    1f2c:	af 92       	push	r10
    1f2e:	bf 92       	push	r11
    1f30:	cf 92       	push	r12
    1f32:	df 92       	push	r13
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	29 97       	sbiw	r28, 0x09	; 9
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	5c 01       	movw	r10, r24
    1f52:	1b 01       	movw	r2, r22
    1f54:	2a 01       	movw	r4, r20
    1f56:	0e 83       	std	Y+6, r16	; 0x06
    1f58:	1f 83       	std	Y+7, r17	; 0x07
    1f5a:	28 87       	std	Y+8, r18	; 0x08
    1f5c:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1f5e:	fc 01       	movw	r30, r24
    1f60:	86 85       	ldd	r24, Z+14	; 0x0e
    1f62:	80 ff       	sbrs	r24, 0
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1f66:	3a 01       	movw	r6, r20
    1f68:	f2 e0       	ldi	r31, 0x02	; 2
    1f6a:	6f 0e       	add	r6, r31
    1f6c:	71 1c       	adc	r7, r1
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1f70:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1f72:	8e 81       	ldd	r24, Y+6	; 0x06
    1f74:	9f 81       	ldd	r25, Y+7	; 0x07
    1f76:	a8 85       	ldd	r26, Y+8	; 0x08
    1f78:	b9 85       	ldd	r27, Y+9	; 0x09
    1f7a:	89 2b       	or	r24, r25
    1f7c:	8a 2b       	or	r24, r26
    1f7e:	8b 2b       	or	r24, r27
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <xStreamBufferSend+0x68>
    1f82:	35 c0       	rjmp	.+106    	; 0x1fee <xStreamBufferSend+0xd2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1f84:	ce 01       	movw	r24, r28
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	90 d6       	rcall	.+3360   	; 0x2caa <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f90:	c5 01       	movw	r24, r10
    1f92:	b2 df       	rcall	.-156    	; 0x1ef8 <xStreamBufferSpacesAvailable>
    1f94:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1f96:	86 15       	cp	r24, r6
    1f98:	97 05       	cpc	r25, r7
    1f9a:	20 f5       	brcc	.+72     	; 0x1fe4 <xStreamBufferSend+0xc8>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 a7 19 	call	0x334e	; 0x334e <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1fa4:	02 d7       	rcall	.+3588   	; 0x2daa <xTaskGetCurrentTaskHandle>
    1fa6:	f5 01       	movw	r30, r10
    1fa8:	93 87       	std	Z+11, r25	; 0x0b
    1faa:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1fb0:	ce 80       	ldd	r12, Y+6	; 0x06
    1fb2:	df 80       	ldd	r13, Y+7	; 0x07
    1fb4:	e8 84       	ldd	r14, Y+8	; 0x08
    1fb6:	f9 84       	ldd	r15, Y+9	; 0x09
    1fb8:	00 e0       	ldi	r16, 0x00	; 0
    1fba:	10 e0       	ldi	r17, 0x00	; 0
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	a9 01       	movw	r20, r18
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1fcc:	f5 01       	movw	r30, r10
    1fce:	13 86       	std	Z+11, r1	; 0x0b
    1fd0:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1fd2:	be 01       	movw	r22, r28
    1fd4:	6a 5f       	subi	r22, 0xFA	; 250
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	ce 01       	movw	r24, r28
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	8d d6       	rcall	.+3354   	; 0x2cf8 <xTaskCheckForTimeOut>
    1fde:	88 23       	and	r24, r24
    1fe0:	a1 f2       	breq	.-88     	; 0x1f8a <xStreamBufferSend+0x6e>
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <xStreamBufferSend+0xcc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1fe8:	81 14       	cp	r8, r1
    1fea:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1fec:	19 f4       	brne	.+6      	; 0x1ff4 <xStreamBufferSend+0xd8>
    1fee:	c5 01       	movw	r24, r10
    1ff0:	83 df       	rcall	.-250    	; 0x1ef8 <xStreamBufferSpacesAvailable>
    1ff2:	4c 01       	movw	r8, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1ff4:	83 01       	movw	r16, r6
    1ff6:	94 01       	movw	r18, r8
    1ff8:	a2 01       	movw	r20, r4
    1ffa:	b1 01       	movw	r22, r2
    1ffc:	c5 01       	movw	r24, r10
    1ffe:	95 de       	rcall	.-726    	; 0x1d2a <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2000:	7c 01       	movw	r14, r24
    2002:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2004:	e1 f0       	breq	.+56     	; 0x203e <xStreamBufferSend+0x122>
    2006:	c5 01       	movw	r24, r10
    2008:	34 de       	rcall	.-920    	; 0x1c72 <prvBytesInBuffer>
    200a:	f5 01       	movw	r30, r10
    200c:	26 81       	ldd	r18, Z+6	; 0x06
    200e:	37 81       	ldd	r19, Z+7	; 0x07
    2010:	82 17       	cp	r24, r18
    2012:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2014:	a0 f0       	brcs	.+40     	; 0x203e <xStreamBufferSend+0x122>
    2016:	0e d3       	rcall	.+1564   	; 0x2634 <vTaskSuspendAll>
    2018:	f5 01       	movw	r30, r10
    201a:	80 85       	ldd	r24, Z+8	; 0x08
    201c:	91 85       	ldd	r25, Z+9	; 0x09
    201e:	89 2b       	or	r24, r25
    2020:	69 f0       	breq	.+26     	; 0x203c <xStreamBufferSend+0x120>
    2022:	80 85       	ldd	r24, Z+8	; 0x08
    2024:	91 85       	ldd	r25, Z+9	; 0x09
    2026:	00 e0       	ldi	r16, 0x00	; 0
    2028:	10 e0       	ldi	r17, 0x00	; 0
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	ba 01       	movw	r22, r20
    2032:	0e 94 a6 18 	call	0x314c	; 0x314c <xTaskGenericNotify>
    2036:	f5 01       	movw	r30, r10
    2038:	11 86       	std	Z+9, r1	; 0x09
    203a:	10 86       	std	Z+8, r1	; 0x08
    203c:	e4 d3       	rcall	.+1992   	; 0x2806 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    203e:	c7 01       	movw	r24, r14
    2040:	29 96       	adiw	r28, 0x09	; 9
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	7f 90       	pop	r7
    2066:	6f 90       	pop	r6
    2068:	5f 90       	pop	r5
    206a:	4f 90       	pop	r4
    206c:	3f 90       	pop	r3
    206e:	2f 90       	pop	r2
    2070:	08 95       	ret

00002072 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2072:	af 92       	push	r10
    2074:	bf 92       	push	r11
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	ec 01       	movw	r28, r24
    2088:	5b 01       	movw	r10, r22
    208a:	6a 01       	movw	r12, r20
    208c:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    208e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2090:	80 ff       	sbrs	r24, 0
    2092:	04 c0       	rjmp	.+8      	; 0x209c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2094:	8a 01       	movw	r16, r20
    2096:	0e 5f       	subi	r16, 0xFE	; 254
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	01 c0       	rjmp	.+2      	; 0x209e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    209c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    209e:	ce 01       	movw	r24, r28
    20a0:	2b df       	rcall	.-426    	; 0x1ef8 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    20a2:	9c 01       	movw	r18, r24
    20a4:	a6 01       	movw	r20, r12
    20a6:	b5 01       	movw	r22, r10
    20a8:	ce 01       	movw	r24, r28
    20aa:	3f de       	rcall	.-898    	; 0x1d2a <prvWriteMessageToBuffer>
    20ac:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    20ae:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    20b0:	b9 f0       	breq	.+46     	; 0x20e0 <xStreamBufferSendFromISR+0x6e>
    20b2:	ce 01       	movw	r24, r28
    20b4:	de dd       	rcall	.-1092   	; 0x1c72 <prvBytesInBuffer>
    20b6:	2e 81       	ldd	r18, Y+6	; 0x06
    20b8:	3f 81       	ldd	r19, Y+7	; 0x07
    20ba:	82 17       	cp	r24, r18
    20bc:	93 07       	cpc	r25, r19
    20be:	80 f0       	brcs	.+32     	; 0x20e0 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    20c0:	88 85       	ldd	r24, Y+8	; 0x08
    20c2:	99 85       	ldd	r25, Y+9	; 0x09
    20c4:	89 2b       	or	r24, r25
    20c6:	61 f0       	breq	.+24     	; 0x20e0 <xStreamBufferSendFromISR+0x6e>
    20c8:	88 85       	ldd	r24, Y+8	; 0x08
    20ca:	99 85       	ldd	r25, Y+9	; 0x09
    20cc:	00 e0       	ldi	r16, 0x00	; 0
    20ce:	10 e0       	ldi	r17, 0x00	; 0
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	ba 01       	movw	r22, r20
    20d8:	0e 94 1e 19 	call	0x323c	; 0x323c <xTaskGenericNotifyFromISR>
    20dc:	19 86       	std	Y+9, r1	; 0x09
    20de:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    20e0:	c6 01       	movw	r24, r12
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	cf 90       	pop	r12
    20f2:	bf 90       	pop	r11
    20f4:	af 90       	pop	r10
    20f6:	08 95       	ret

000020f8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    20f8:	4f 92       	push	r4
    20fa:	5f 92       	push	r5
    20fc:	6f 92       	push	r6
    20fe:	7f 92       	push	r7
    2100:	8f 92       	push	r8
    2102:	9f 92       	push	r9
    2104:	af 92       	push	r10
    2106:	bf 92       	push	r11
    2108:	cf 92       	push	r12
    210a:	df 92       	push	r13
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	1f 92       	push	r1
    211a:	1f 92       	push	r1
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	5c 01       	movw	r10, r24
    2122:	2b 01       	movw	r4, r22
    2124:	3a 01       	movw	r6, r20
    2126:	68 01       	movw	r12, r16
    2128:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    212a:	fc 01       	movw	r30, r24
    212c:	86 85       	ldd	r24, Z+14	; 0x0e
    212e:	80 fd       	sbrc	r24, 0
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2132:	81 2c       	mov	r8, r1
    2134:	91 2c       	mov	r9, r1
    2136:	04 c0       	rjmp	.+8      	; 0x2140 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2138:	68 94       	set
    213a:	88 24       	eor	r8, r8
    213c:	81 f8       	bld	r8, 1
    213e:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2140:	c1 14       	cp	r12, r1
    2142:	d1 04       	cpc	r13, r1
    2144:	e1 04       	cpc	r14, r1
    2146:	f1 04       	cpc	r15, r1
    2148:	31 f1       	breq	.+76     	; 0x2196 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2150:	c5 01       	movw	r24, r10
    2152:	8f dd       	rcall	.-1250   	; 0x1c72 <prvBytesInBuffer>
    2154:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2156:	88 16       	cp	r8, r24
    2158:	99 06       	cpc	r9, r25
    215a:	40 f0       	brcs	.+16     	; 0x216c <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 a7 19 	call	0x334e	; 0x334e <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2164:	22 d6       	rcall	.+3140   	; 0x2daa <xTaskGetCurrentTaskHandle>
    2166:	f5 01       	movw	r30, r10
    2168:	91 87       	std	Z+9, r25	; 0x09
    216a:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    216c:	0f 90       	pop	r0
    216e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2170:	80 16       	cp	r8, r16
    2172:	91 06       	cpc	r9, r17
    2174:	b0 f0       	brcs	.+44     	; 0x21a2 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2176:	00 e0       	ldi	r16, 0x00	; 0
    2178:	10 e0       	ldi	r17, 0x00	; 0
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	a9 01       	movw	r20, r18
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	cb 01       	movw	r24, r22
    2186:	58 d7       	rcall	.+3760   	; 0x3038 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2188:	f5 01       	movw	r30, r10
    218a:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    218c:	10 86       	std	Z+8, r1	; 0x08
    218e:	c5 01       	movw	r24, r10
    2190:	70 dd       	rcall	.-1312   	; 0x1c72 <prvBytesInBuffer>
    2192:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2194:	03 c0       	rjmp	.+6      	; 0x219c <xStreamBufferReceive+0xa4>
    2196:	c5 01       	movw	r24, r10
    2198:	6c dd       	rcall	.-1320   	; 0x1c72 <prvBytesInBuffer>
    219a:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    219c:	80 16       	cp	r8, r16
    219e:	91 06       	cpc	r9, r17
    21a0:	b8 f5       	brcc	.+110    	; 0x2210 <__stack+0x11>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    21a2:	81 14       	cp	r8, r1
    21a4:	91 04       	cpc	r9, r1
    21a6:	c1 f0       	breq	.+48     	; 0x21d8 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    21a8:	f5 01       	movw	r30, r10
    21aa:	e0 80       	ld	r14, Z
    21ac:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    21ae:	98 01       	movw	r18, r16
    21b0:	a4 01       	movw	r20, r8
    21b2:	be 01       	movw	r22, r28
    21b4:	6f 5f       	subi	r22, 0xFF	; 255
    21b6:	7f 4f       	sbci	r23, 0xFF	; 255
    21b8:	c5 01       	movw	r24, r10
    21ba:	f7 dd       	rcall	.-1042   	; 0x1daa <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    21c0:	08 19       	sub	r16, r8
    21c2:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    21c4:	68 16       	cp	r6, r24
    21c6:	79 06       	cpc	r7, r25
    21c8:	30 f4       	brcc	.+12     	; 0x21d6 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    21ca:	f5 01       	movw	r30, r10
    21cc:	f1 82       	std	Z+1, r15	; 0x01
    21ce:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    21d0:	61 2c       	mov	r6, r1
    21d2:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    21d6:	3c 01       	movw	r6, r24
    21d8:	98 01       	movw	r18, r16
    21da:	a3 01       	movw	r20, r6
    21dc:	b2 01       	movw	r22, r4
    21de:	c5 01       	movw	r24, r10
    21e0:	e4 dd       	rcall	.-1080   	; 0x1daa <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    21e2:	7c 01       	movw	r14, r24
    21e4:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    21e6:	b1 f0       	breq	.+44     	; 0x2214 <__stack+0x15>
    21e8:	25 d2       	rcall	.+1098   	; 0x2634 <vTaskSuspendAll>
    21ea:	f5 01       	movw	r30, r10
    21ec:	82 85       	ldd	r24, Z+10	; 0x0a
    21ee:	93 85       	ldd	r25, Z+11	; 0x0b
    21f0:	89 2b       	or	r24, r25
    21f2:	61 f0       	breq	.+24     	; 0x220c <__stack+0xd>
    21f4:	82 85       	ldd	r24, Z+10	; 0x0a
    21f6:	93 85       	ldd	r25, Z+11	; 0x0b
    21f8:	00 e0       	ldi	r16, 0x00	; 0
    21fa:	10 e0       	ldi	r17, 0x00	; 0
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	ba 01       	movw	r22, r20
    2204:	a3 d7       	rcall	.+3910   	; 0x314c <xTaskGenericNotify>
    2206:	f5 01       	movw	r30, r10
    2208:	13 86       	std	Z+11, r1	; 0x0b
    220a:	12 86       	std	Z+10, r1	; 0x0a
    220c:	fc d2       	rcall	.+1528   	; 0x2806 <xTaskResumeAll>
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <__stack+0x15>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2210:	e1 2c       	mov	r14, r1
    2212:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2214:	c7 01       	movw	r24, r14
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	9f 90       	pop	r9
    2230:	8f 90       	pop	r8
    2232:	7f 90       	pop	r7
    2234:	6f 90       	pop	r6
    2236:	5f 90       	pop	r5
    2238:	4f 90       	pop	r4
    223a:	08 95       	ret

0000223c <prvResetNextTaskUnblockTime>:
    223c:	e0 91 96 1a 	lds	r30, 0x1A96	; 0x801a96 <pxDelayedTaskList>
    2240:	f0 91 97 1a 	lds	r31, 0x1A97	; 0x801a97 <pxDelayedTaskList+0x1>
    2244:	80 81       	ld	r24, Z
    2246:	81 11       	cpse	r24, r1
    2248:	0c c0       	rjmp	.+24     	; 0x2262 <prvResetNextTaskUnblockTime+0x26>
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	9f ef       	ldi	r25, 0xFF	; 255
    224e:	dc 01       	movw	r26, r24
    2250:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNextTaskUnblockTime>
    2254:	90 93 64 1a 	sts	0x1A64, r25	; 0x801a64 <xNextTaskUnblockTime+0x1>
    2258:	a0 93 65 1a 	sts	0x1A65, r26	; 0x801a65 <xNextTaskUnblockTime+0x2>
    225c:	b0 93 66 1a 	sts	0x1A66, r27	; 0x801a66 <xNextTaskUnblockTime+0x3>
    2260:	08 95       	ret
    2262:	e0 91 96 1a 	lds	r30, 0x1A96	; 0x801a96 <pxDelayedTaskList>
    2266:	f0 91 97 1a 	lds	r31, 0x1A97	; 0x801a97 <pxDelayedTaskList+0x1>
    226a:	07 80       	ldd	r0, Z+7	; 0x07
    226c:	f0 85       	ldd	r31, Z+8	; 0x08
    226e:	e0 2d       	mov	r30, r0
    2270:	00 84       	ldd	r0, Z+8	; 0x08
    2272:	f1 85       	ldd	r31, Z+9	; 0x09
    2274:	e0 2d       	mov	r30, r0
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	a4 81       	ldd	r26, Z+4	; 0x04
    227c:	b5 81       	ldd	r27, Z+5	; 0x05
    227e:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNextTaskUnblockTime>
    2282:	90 93 64 1a 	sts	0x1A64, r25	; 0x801a64 <xNextTaskUnblockTime+0x1>
    2286:	a0 93 65 1a 	sts	0x1A65, r26	; 0x801a65 <xNextTaskUnblockTime+0x2>
    228a:	b0 93 66 1a 	sts	0x1A66, r27	; 0x801a66 <xNextTaskUnblockTime+0x3>
    228e:	08 95       	ret

00002290 <prvAddCurrentTaskToDelayedList>:
    2290:	8f 92       	push	r8
    2292:	9f 92       	push	r9
    2294:	af 92       	push	r10
    2296:	bf 92       	push	r11
    2298:	cf 92       	push	r12
    229a:	df 92       	push	r13
    229c:	ef 92       	push	r14
    229e:	ff 92       	push	r15
    22a0:	cf 93       	push	r28
    22a2:	6b 01       	movw	r12, r22
    22a4:	7c 01       	movw	r14, r24
    22a6:	c4 2f       	mov	r28, r20
    22a8:	80 90 6d 1a 	lds	r8, 0x1A6D	; 0x801a6d <xTickCount>
    22ac:	90 90 6e 1a 	lds	r9, 0x1A6E	; 0x801a6e <xTickCount+0x1>
    22b0:	a0 90 6f 1a 	lds	r10, 0x1A6F	; 0x801a6f <xTickCount+0x2>
    22b4:	b0 90 70 1a 	lds	r11, 0x1A70	; 0x801a70 <xTickCount+0x3>
    22b8:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    22bc:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    22c0:	02 96       	adiw	r24, 0x02	; 2
    22c2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	c8 16       	cp	r12, r24
    22ca:	d8 06       	cpc	r13, r24
    22cc:	e8 06       	cpc	r14, r24
    22ce:	f8 06       	cpc	r15, r24
    22d0:	69 f4       	brne	.+26     	; 0x22ec <prvAddCurrentTaskToDelayedList+0x5c>
    22d2:	cc 23       	and	r28, r28
    22d4:	59 f0       	breq	.+22     	; 0x22ec <prvAddCurrentTaskToDelayedList+0x5c>
    22d6:	60 91 da 1a 	lds	r22, 0x1ADA	; 0x801ada <pxCurrentTCB>
    22da:	70 91 db 1a 	lds	r23, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    22de:	6e 5f       	subi	r22, 0xFE	; 254
    22e0:	7f 4f       	sbci	r23, 0xFF	; 255
    22e2:	82 e7       	ldi	r24, 0x72	; 114
    22e4:	9a e1       	ldi	r25, 0x1A	; 26
    22e6:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    22ea:	3f c0       	rjmp	.+126    	; 0x236a <prvAddCurrentTaskToDelayedList+0xda>
    22ec:	c8 0c       	add	r12, r8
    22ee:	d9 1c       	adc	r13, r9
    22f0:	ea 1c       	adc	r14, r10
    22f2:	fb 1c       	adc	r15, r11
    22f4:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    22f8:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    22fc:	c2 82       	std	Z+2, r12	; 0x02
    22fe:	d3 82       	std	Z+3, r13	; 0x03
    2300:	e4 82       	std	Z+4, r14	; 0x04
    2302:	f5 82       	std	Z+5, r15	; 0x05
    2304:	c8 14       	cp	r12, r8
    2306:	d9 04       	cpc	r13, r9
    2308:	ea 04       	cpc	r14, r10
    230a:	fb 04       	cpc	r15, r11
    230c:	68 f4       	brcc	.+26     	; 0x2328 <prvAddCurrentTaskToDelayedList+0x98>
    230e:	60 91 da 1a 	lds	r22, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2312:	70 91 db 1a 	lds	r23, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2316:	80 91 94 1a 	lds	r24, 0x1A94	; 0x801a94 <pxOverflowDelayedTaskList>
    231a:	90 91 95 1a 	lds	r25, 0x1A95	; 0x801a95 <pxOverflowDelayedTaskList+0x1>
    231e:	6e 5f       	subi	r22, 0xFE	; 254
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	0e 94 a8 08 	call	0x1150	; 0x1150 <vListInsert>
    2326:	21 c0       	rjmp	.+66     	; 0x236a <prvAddCurrentTaskToDelayedList+0xda>
    2328:	60 91 da 1a 	lds	r22, 0x1ADA	; 0x801ada <pxCurrentTCB>
    232c:	70 91 db 1a 	lds	r23, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2330:	80 91 96 1a 	lds	r24, 0x1A96	; 0x801a96 <pxDelayedTaskList>
    2334:	90 91 97 1a 	lds	r25, 0x1A97	; 0x801a97 <pxDelayedTaskList+0x1>
    2338:	6e 5f       	subi	r22, 0xFE	; 254
    233a:	7f 4f       	sbci	r23, 0xFF	; 255
    233c:	0e 94 a8 08 	call	0x1150	; 0x1150 <vListInsert>
    2340:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <xNextTaskUnblockTime>
    2344:	90 91 64 1a 	lds	r25, 0x1A64	; 0x801a64 <xNextTaskUnblockTime+0x1>
    2348:	a0 91 65 1a 	lds	r26, 0x1A65	; 0x801a65 <xNextTaskUnblockTime+0x2>
    234c:	b0 91 66 1a 	lds	r27, 0x1A66	; 0x801a66 <xNextTaskUnblockTime+0x3>
    2350:	c8 16       	cp	r12, r24
    2352:	d9 06       	cpc	r13, r25
    2354:	ea 06       	cpc	r14, r26
    2356:	fb 06       	cpc	r15, r27
    2358:	40 f4       	brcc	.+16     	; 0x236a <prvAddCurrentTaskToDelayedList+0xda>
    235a:	c0 92 63 1a 	sts	0x1A63, r12	; 0x801a63 <xNextTaskUnblockTime>
    235e:	d0 92 64 1a 	sts	0x1A64, r13	; 0x801a64 <xNextTaskUnblockTime+0x1>
    2362:	e0 92 65 1a 	sts	0x1A65, r14	; 0x801a65 <xNextTaskUnblockTime+0x2>
    2366:	f0 92 66 1a 	sts	0x1A66, r15	; 0x801a66 <xNextTaskUnblockTime+0x3>
    236a:	cf 91       	pop	r28
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	df 90       	pop	r13
    2372:	cf 90       	pop	r12
    2374:	bf 90       	pop	r11
    2376:	af 90       	pop	r10
    2378:	9f 90       	pop	r9
    237a:	8f 90       	pop	r8
    237c:	08 95       	ret

0000237e <xTaskCreate>:
    237e:	4f 92       	push	r4
    2380:	5f 92       	push	r5
    2382:	6f 92       	push	r6
    2384:	7f 92       	push	r7
    2386:	8f 92       	push	r8
    2388:	9f 92       	push	r9
    238a:	af 92       	push	r10
    238c:	bf 92       	push	r11
    238e:	cf 92       	push	r12
    2390:	df 92       	push	r13
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	4c 01       	movw	r8, r24
    239e:	6b 01       	movw	r12, r22
    23a0:	5a 01       	movw	r10, r20
    23a2:	29 01       	movw	r4, r18
    23a4:	ca 01       	movw	r24, r20
    23a6:	0e 94 88 07 	call	0xf10	; 0xf10 <pvPortMalloc>
    23aa:	3c 01       	movw	r6, r24
    23ac:	89 2b       	or	r24, r25
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <xTaskCreate+0x34>
    23b0:	f4 c0       	rjmp	.+488    	; 0x259a <xTaskCreate+0x21c>
    23b2:	80 e3       	ldi	r24, 0x30	; 48
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 88 07 	call	0xf10	; 0xf10 <pvPortMalloc>
    23ba:	ec 01       	movw	r28, r24
    23bc:	89 2b       	or	r24, r25
    23be:	99 f0       	breq	.+38     	; 0x23e6 <xTaskCreate+0x68>
    23c0:	7c 8e       	std	Y+28, r7	; 0x1c
    23c2:	6b 8e       	std	Y+27, r6	; 0x1b
    23c4:	a5 01       	movw	r20, r10
    23c6:	65 ea       	ldi	r22, 0xA5	; 165
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	c3 01       	movw	r24, r6
    23cc:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <memset>
    23d0:	21 e0       	ldi	r18, 0x01	; 1
    23d2:	a2 1a       	sub	r10, r18
    23d4:	b1 08       	sbc	r11, r1
    23d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23da:	a8 0e       	add	r10, r24
    23dc:	b9 1e       	adc	r11, r25
    23de:	c1 14       	cp	r12, r1
    23e0:	d1 04       	cpc	r13, r1
    23e2:	29 f4       	brne	.+10     	; 0x23ee <xTaskCreate+0x70>
    23e4:	20 c0       	rjmp	.+64     	; 0x2426 <xTaskCreate+0xa8>
    23e6:	c3 01       	movw	r24, r6
    23e8:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortFree>
    23ec:	d6 c0       	rjmp	.+428    	; 0x259a <xTaskCreate+0x21c>
    23ee:	d6 01       	movw	r26, r12
    23f0:	8c 91       	ld	r24, X
    23f2:	8d 8f       	std	Y+29, r24	; 0x1d
    23f4:	8c 91       	ld	r24, X
    23f6:	88 23       	and	r24, r24
    23f8:	a1 f0       	breq	.+40     	; 0x2422 <xTaskCreate+0xa4>
    23fa:	ae 01       	movw	r20, r28
    23fc:	42 5e       	subi	r20, 0xE2	; 226
    23fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2400:	f6 01       	movw	r30, r12
    2402:	31 96       	adiw	r30, 0x01	; 1
    2404:	b8 e0       	ldi	r27, 0x08	; 8
    2406:	cb 0e       	add	r12, r27
    2408:	d1 1c       	adc	r13, r1
    240a:	cf 01       	movw	r24, r30
    240c:	21 91       	ld	r18, Z+
    240e:	da 01       	movw	r26, r20
    2410:	2d 93       	st	X+, r18
    2412:	ad 01       	movw	r20, r26
    2414:	dc 01       	movw	r26, r24
    2416:	8c 91       	ld	r24, X
    2418:	88 23       	and	r24, r24
    241a:	19 f0       	breq	.+6      	; 0x2422 <xTaskCreate+0xa4>
    241c:	ec 15       	cp	r30, r12
    241e:	fd 05       	cpc	r31, r13
    2420:	a1 f7       	brne	.-24     	; 0x240a <xTaskCreate+0x8c>
    2422:	1c a2       	std	Y+36, r1	; 0x24
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <xTaskCreate+0xaa>
    2426:	1d 8e       	std	Y+29, r1	; 0x1d
    2428:	04 30       	cpi	r16, 0x04	; 4
    242a:	08 f0       	brcs	.+2      	; 0x242e <xTaskCreate+0xb0>
    242c:	03 e0       	ldi	r16, 0x03	; 3
    242e:	0a 8f       	std	Y+26, r16	; 0x1a
    2430:	0f a3       	std	Y+39, r16	; 0x27
    2432:	18 a6       	std	Y+40, r1	; 0x28
    2434:	6e 01       	movw	r12, r28
    2436:	b2 e0       	ldi	r27, 0x02	; 2
    2438:	cb 0e       	add	r12, r27
    243a:	d1 1c       	adc	r13, r1
    243c:	c6 01       	movw	r24, r12
    243e:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInitialiseItem>
    2442:	ce 01       	movw	r24, r28
    2444:	0e 96       	adiw	r24, 0x0e	; 14
    2446:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInitialiseItem>
    244a:	db 87       	std	Y+11, r29	; 0x0b
    244c:	ca 87       	std	Y+10, r28	; 0x0a
    244e:	84 e0       	ldi	r24, 0x04	; 4
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a0 e0       	ldi	r26, 0x00	; 0
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	80 1b       	sub	r24, r16
    2458:	91 09       	sbc	r25, r1
    245a:	a1 09       	sbc	r26, r1
    245c:	b1 09       	sbc	r27, r1
    245e:	8e 87       	std	Y+14, r24	; 0x0e
    2460:	9f 87       	std	Y+15, r25	; 0x0f
    2462:	a8 8b       	std	Y+16, r26	; 0x10
    2464:	b9 8b       	std	Y+17, r27	; 0x11
    2466:	df 8b       	std	Y+23, r29	; 0x17
    2468:	ce 8b       	std	Y+22, r28	; 0x16
    246a:	1a a6       	std	Y+42, r1	; 0x2a
    246c:	19 a6       	std	Y+41, r1	; 0x29
    246e:	1b a6       	std	Y+43, r1	; 0x2b
    2470:	1c a6       	std	Y+44, r1	; 0x2c
    2472:	1d a6       	std	Y+45, r1	; 0x2d
    2474:	1e a6       	std	Y+46, r1	; 0x2e
    2476:	1f a6       	std	Y+47, r1	; 0x2f
    2478:	a2 01       	movw	r20, r4
    247a:	b4 01       	movw	r22, r8
    247c:	c5 01       	movw	r24, r10
    247e:	0e 94 0c 09 	call	0x1218	; 0x1218 <pxPortInitialiseStack>
    2482:	99 83       	std	Y+1, r25	; 0x01
    2484:	88 83       	st	Y, r24
    2486:	e1 14       	cp	r14, r1
    2488:	f1 04       	cpc	r15, r1
    248a:	19 f0       	breq	.+6      	; 0x2492 <xTaskCreate+0x114>
    248c:	f7 01       	movw	r30, r14
    248e:	d1 83       	std	Z+1, r29	; 0x01
    2490:	c0 83       	st	Z, r28
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	0f 92       	push	r0
    2498:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxCurrentNumberOfTasks>
    249c:	8f 5f       	subi	r24, 0xFF	; 255
    249e:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxCurrentNumberOfTasks>
    24a2:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    24a6:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    24aa:	89 2b       	or	r24, r25
    24ac:	d1 f5       	brne	.+116    	; 0x2522 <xTaskCreate+0x1a4>
    24ae:	d0 93 db 1a 	sts	0x1ADB, r29	; 0x801adb <pxCurrentTCB+0x1>
    24b2:	c0 93 da 1a 	sts	0x1ADA, r28	; 0x801ada <pxCurrentTCB>
    24b6:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxCurrentNumberOfTasks>
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <xTaskCreate+0x142>
    24be:	41 c0       	rjmp	.+130    	; 0x2542 <xTaskCreate+0x1c4>
    24c0:	8e ea       	ldi	r24, 0xAE	; 174
    24c2:	9a e1       	ldi	r25, 0x1A	; 26
    24c4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    24c8:	89 eb       	ldi	r24, 0xB9	; 185
    24ca:	9a e1       	ldi	r25, 0x1A	; 26
    24cc:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    24d0:	84 ec       	ldi	r24, 0xC4	; 196
    24d2:	9a e1       	ldi	r25, 0x1A	; 26
    24d4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    24d8:	8f ec       	ldi	r24, 0xCF	; 207
    24da:	9a e1       	ldi	r25, 0x1A	; 26
    24dc:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    24e0:	83 ea       	ldi	r24, 0xA3	; 163
    24e2:	9a e1       	ldi	r25, 0x1A	; 26
    24e4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    24e8:	88 e9       	ldi	r24, 0x98	; 152
    24ea:	9a e1       	ldi	r25, 0x1A	; 26
    24ec:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    24f0:	89 e8       	ldi	r24, 0x89	; 137
    24f2:	9a e1       	ldi	r25, 0x1A	; 26
    24f4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    24f8:	8e e7       	ldi	r24, 0x7E	; 126
    24fa:	9a e1       	ldi	r25, 0x1A	; 26
    24fc:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    2500:	82 e7       	ldi	r24, 0x72	; 114
    2502:	9a e1       	ldi	r25, 0x1A	; 26
    2504:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    2508:	83 ea       	ldi	r24, 0xA3	; 163
    250a:	9a e1       	ldi	r25, 0x1A	; 26
    250c:	90 93 97 1a 	sts	0x1A97, r25	; 0x801a97 <pxDelayedTaskList+0x1>
    2510:	80 93 96 1a 	sts	0x1A96, r24	; 0x801a96 <pxDelayedTaskList>
    2514:	88 e9       	ldi	r24, 0x98	; 152
    2516:	9a e1       	ldi	r25, 0x1A	; 26
    2518:	90 93 95 1a 	sts	0x1A95, r25	; 0x801a95 <pxOverflowDelayedTaskList+0x1>
    251c:	80 93 94 1a 	sts	0x1A94, r24	; 0x801a94 <pxOverflowDelayedTaskList>
    2520:	10 c0       	rjmp	.+32     	; 0x2542 <xTaskCreate+0x1c4>
    2522:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <xSchedulerRunning>
    2526:	81 11       	cpse	r24, r1
    2528:	0c c0       	rjmp	.+24     	; 0x2542 <xTaskCreate+0x1c4>
    252a:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    252e:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2532:	92 8d       	ldd	r25, Z+26	; 0x1a
    2534:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2536:	89 17       	cp	r24, r25
    2538:	20 f0       	brcs	.+8      	; 0x2542 <xTaskCreate+0x1c4>
    253a:	d0 93 db 1a 	sts	0x1ADB, r29	; 0x801adb <pxCurrentTCB+0x1>
    253e:	c0 93 da 1a 	sts	0x1ADA, r28	; 0x801ada <pxCurrentTCB>
    2542:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <uxTaskNumber>
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTaskNumber>
    254c:	8d a3       	std	Y+37, r24	; 0x25
    254e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2550:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2554:	98 17       	cp	r25, r24
    2556:	10 f4       	brcc	.+4      	; 0x255c <xTaskCreate+0x1de>
    2558:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    255c:	fb e0       	ldi	r31, 0x0B	; 11
    255e:	8f 9f       	mul	r24, r31
    2560:	c0 01       	movw	r24, r0
    2562:	11 24       	eor	r1, r1
    2564:	b6 01       	movw	r22, r12
    2566:	82 55       	subi	r24, 0x52	; 82
    2568:	95 4e       	sbci	r25, 0xE5	; 229
    256a:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <xSchedulerRunning>
    2576:	88 23       	and	r24, r24
    2578:	61 f0       	breq	.+24     	; 0x2592 <xTaskCreate+0x214>
    257a:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    257e:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2582:	92 8d       	ldd	r25, Z+26	; 0x1a
    2584:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2586:	98 17       	cp	r25, r24
    2588:	30 f4       	brcc	.+12     	; 0x2596 <xTaskCreate+0x218>
    258a:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	05 c0       	rjmp	.+10     	; 0x259c <xTaskCreate+0x21e>
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	03 c0       	rjmp	.+6      	; 0x259c <xTaskCreate+0x21e>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	01 c0       	rjmp	.+2      	; 0x259c <xTaskCreate+0x21e>
    259a:	8f ef       	ldi	r24, 0xFF	; 255
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	df 90       	pop	r13
    25a8:	cf 90       	pop	r12
    25aa:	bf 90       	pop	r11
    25ac:	af 90       	pop	r10
    25ae:	9f 90       	pop	r9
    25b0:	8f 90       	pop	r8
    25b2:	7f 90       	pop	r7
    25b4:	6f 90       	pop	r6
    25b6:	5f 90       	pop	r5
    25b8:	4f 90       	pop	r4
    25ba:	08 95       	ret

000025bc <vTaskStartScheduler>:
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	0f 2e       	mov	r0, r31
    25c4:	f1 e6       	ldi	r31, 0x61	; 97
    25c6:	ef 2e       	mov	r14, r31
    25c8:	fa e1       	ldi	r31, 0x1A	; 26
    25ca:	ff 2e       	mov	r15, r31
    25cc:	f0 2d       	mov	r31, r0
    25ce:	00 e0       	ldi	r16, 0x00	; 0
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 ec       	ldi	r20, 0xC0	; 192
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	6e e0       	ldi	r22, 0x0E	; 14
    25da:	77 e0       	ldi	r23, 0x07	; 7
    25dc:	8d ec       	ldi	r24, 0xCD	; 205
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	ce de       	rcall	.-612    	; 0x237e <xTaskCreate>
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	19 f5       	brne	.+70     	; 0x262c <vTaskStartScheduler+0x70>
    25e6:	39 d7       	rcall	.+3698   	; 0x345a <xTimerCreateTimerTask>
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	01 f5       	brne	.+64     	; 0x262c <vTaskStartScheduler+0x70>
    25ec:	f8 94       	cli
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	9f ef       	ldi	r25, 0xFF	; 255
    25f2:	dc 01       	movw	r26, r24
    25f4:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNextTaskUnblockTime>
    25f8:	90 93 64 1a 	sts	0x1A64, r25	; 0x801a64 <xNextTaskUnblockTime+0x1>
    25fc:	a0 93 65 1a 	sts	0x1A65, r26	; 0x801a65 <xNextTaskUnblockTime+0x2>
    2600:	b0 93 66 1a 	sts	0x1A66, r27	; 0x801a66 <xNextTaskUnblockTime+0x3>
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 6b 1a 	sts	0x1A6B, r24	; 0x801a6b <xSchedulerRunning>
    260a:	10 92 6d 1a 	sts	0x1A6D, r1	; 0x801a6d <xTickCount>
    260e:	10 92 6e 1a 	sts	0x1A6E, r1	; 0x801a6e <xTickCount+0x1>
    2612:	10 92 6f 1a 	sts	0x1A6F, r1	; 0x801a6f <xTickCount+0x2>
    2616:	10 92 70 1a 	sts	0x1A70, r1	; 0x801a70 <xTickCount+0x3>
    261a:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    261e:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2622:	81 a5       	ldd	r24, Z+41	; 0x29
    2624:	0e 94 a2 05 	call	0xb44	; 0xb44 <task_switch_in>
    2628:	0e 94 7e 09 	call	0x12fc	; 0x12fc <xPortStartScheduler>
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	08 95       	ret

00002634 <vTaskSuspendAll>:
    2634:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    2638:	8f 5f       	subi	r24, 0xFF	; 255
    263a:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <uxSchedulerSuspended>
    263e:	08 95       	ret

00002640 <xTaskGetTickCount>:
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	0f 92       	push	r0
    2646:	60 91 6d 1a 	lds	r22, 0x1A6D	; 0x801a6d <xTickCount>
    264a:	70 91 6e 1a 	lds	r23, 0x1A6E	; 0x801a6e <xTickCount+0x1>
    264e:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <xTickCount+0x2>
    2652:	90 91 70 1a 	lds	r25, 0x1A70	; 0x801a70 <xTickCount+0x3>
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	08 95       	ret

0000265c <xTaskIncrementTick>:
    265c:	9f 92       	push	r9
    265e:	af 92       	push	r10
    2660:	bf 92       	push	r11
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    2676:	81 11       	cpse	r24, r1
    2678:	ad c0       	rjmp	.+346    	; 0x27d4 <xTaskIncrementTick+0x178>
    267a:	c0 90 6d 1a 	lds	r12, 0x1A6D	; 0x801a6d <xTickCount>
    267e:	d0 90 6e 1a 	lds	r13, 0x1A6E	; 0x801a6e <xTickCount+0x1>
    2682:	e0 90 6f 1a 	lds	r14, 0x1A6F	; 0x801a6f <xTickCount+0x2>
    2686:	f0 90 70 1a 	lds	r15, 0x1A70	; 0x801a70 <xTickCount+0x3>
    268a:	8f ef       	ldi	r24, 0xFF	; 255
    268c:	c8 1a       	sub	r12, r24
    268e:	d8 0a       	sbc	r13, r24
    2690:	e8 0a       	sbc	r14, r24
    2692:	f8 0a       	sbc	r15, r24
    2694:	c0 92 6d 1a 	sts	0x1A6D, r12	; 0x801a6d <xTickCount>
    2698:	d0 92 6e 1a 	sts	0x1A6E, r13	; 0x801a6e <xTickCount+0x1>
    269c:	e0 92 6f 1a 	sts	0x1A6F, r14	; 0x801a6f <xTickCount+0x2>
    26a0:	f0 92 70 1a 	sts	0x1A70, r15	; 0x801a70 <xTickCount+0x3>
    26a4:	c1 14       	cp	r12, r1
    26a6:	d1 04       	cpc	r13, r1
    26a8:	e1 04       	cpc	r14, r1
    26aa:	f1 04       	cpc	r15, r1
    26ac:	b1 f4       	brne	.+44     	; 0x26da <xTaskIncrementTick+0x7e>
    26ae:	80 91 96 1a 	lds	r24, 0x1A96	; 0x801a96 <pxDelayedTaskList>
    26b2:	90 91 97 1a 	lds	r25, 0x1A97	; 0x801a97 <pxDelayedTaskList+0x1>
    26b6:	20 91 94 1a 	lds	r18, 0x1A94	; 0x801a94 <pxOverflowDelayedTaskList>
    26ba:	30 91 95 1a 	lds	r19, 0x1A95	; 0x801a95 <pxOverflowDelayedTaskList+0x1>
    26be:	30 93 97 1a 	sts	0x1A97, r19	; 0x801a97 <pxDelayedTaskList+0x1>
    26c2:	20 93 96 1a 	sts	0x1A96, r18	; 0x801a96 <pxDelayedTaskList>
    26c6:	90 93 95 1a 	sts	0x1A95, r25	; 0x801a95 <pxOverflowDelayedTaskList+0x1>
    26ca:	80 93 94 1a 	sts	0x1A94, r24	; 0x801a94 <pxOverflowDelayedTaskList>
    26ce:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xNumOfOverflows>
    26d2:	8f 5f       	subi	r24, 0xFF	; 255
    26d4:	80 93 68 1a 	sts	0x1A68, r24	; 0x801a68 <xNumOfOverflows>
    26d8:	b1 dd       	rcall	.-1182   	; 0x223c <prvResetNextTaskUnblockTime>
    26da:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <xNextTaskUnblockTime>
    26de:	90 91 64 1a 	lds	r25, 0x1A64	; 0x801a64 <xNextTaskUnblockTime+0x1>
    26e2:	a0 91 65 1a 	lds	r26, 0x1A65	; 0x801a65 <xNextTaskUnblockTime+0x2>
    26e6:	b0 91 66 1a 	lds	r27, 0x1A66	; 0x801a66 <xNextTaskUnblockTime+0x3>
    26ea:	c8 16       	cp	r12, r24
    26ec:	d9 06       	cpc	r13, r25
    26ee:	ea 06       	cpc	r14, r26
    26f0:	fb 06       	cpc	r15, r27
    26f2:	10 f4       	brcc	.+4      	; 0x26f8 <xTaskIncrementTick+0x9c>
    26f4:	b1 2c       	mov	r11, r1
    26f6:	5d c0       	rjmp	.+186    	; 0x27b2 <xTaskIncrementTick+0x156>
    26f8:	b1 2c       	mov	r11, r1
    26fa:	0f 2e       	mov	r0, r31
    26fc:	fb e0       	ldi	r31, 0x0B	; 11
    26fe:	af 2e       	mov	r10, r31
    2700:	f0 2d       	mov	r31, r0
    2702:	99 24       	eor	r9, r9
    2704:	93 94       	inc	r9
    2706:	e0 91 96 1a 	lds	r30, 0x1A96	; 0x801a96 <pxDelayedTaskList>
    270a:	f0 91 97 1a 	lds	r31, 0x1A97	; 0x801a97 <pxDelayedTaskList+0x1>
    270e:	80 81       	ld	r24, Z
    2710:	81 11       	cpse	r24, r1
    2712:	0c c0       	rjmp	.+24     	; 0x272c <xTaskIncrementTick+0xd0>
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	9f ef       	ldi	r25, 0xFF	; 255
    2718:	dc 01       	movw	r26, r24
    271a:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNextTaskUnblockTime>
    271e:	90 93 64 1a 	sts	0x1A64, r25	; 0x801a64 <xNextTaskUnblockTime+0x1>
    2722:	a0 93 65 1a 	sts	0x1A65, r26	; 0x801a65 <xNextTaskUnblockTime+0x2>
    2726:	b0 93 66 1a 	sts	0x1A66, r27	; 0x801a66 <xNextTaskUnblockTime+0x3>
    272a:	43 c0       	rjmp	.+134    	; 0x27b2 <xTaskIncrementTick+0x156>
    272c:	e0 91 96 1a 	lds	r30, 0x1A96	; 0x801a96 <pxDelayedTaskList>
    2730:	f0 91 97 1a 	lds	r31, 0x1A97	; 0x801a97 <pxDelayedTaskList+0x1>
    2734:	07 80       	ldd	r0, Z+7	; 0x07
    2736:	f0 85       	ldd	r31, Z+8	; 0x08
    2738:	e0 2d       	mov	r30, r0
    273a:	c0 85       	ldd	r28, Z+8	; 0x08
    273c:	d1 85       	ldd	r29, Z+9	; 0x09
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	9b 81       	ldd	r25, Y+3	; 0x03
    2742:	ac 81       	ldd	r26, Y+4	; 0x04
    2744:	bd 81       	ldd	r27, Y+5	; 0x05
    2746:	c8 16       	cp	r12, r24
    2748:	d9 06       	cpc	r13, r25
    274a:	ea 06       	cpc	r14, r26
    274c:	fb 06       	cpc	r15, r27
    274e:	48 f4       	brcc	.+18     	; 0x2762 <xTaskIncrementTick+0x106>
    2750:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNextTaskUnblockTime>
    2754:	90 93 64 1a 	sts	0x1A64, r25	; 0x801a64 <xNextTaskUnblockTime+0x1>
    2758:	a0 93 65 1a 	sts	0x1A65, r26	; 0x801a65 <xNextTaskUnblockTime+0x2>
    275c:	b0 93 66 1a 	sts	0x1A66, r27	; 0x801a66 <xNextTaskUnblockTime+0x3>
    2760:	28 c0       	rjmp	.+80     	; 0x27b2 <xTaskIncrementTick+0x156>
    2762:	8e 01       	movw	r16, r28
    2764:	0e 5f       	subi	r16, 0xFE	; 254
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	c8 01       	movw	r24, r16
    276a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    276e:	88 8d       	ldd	r24, Y+24	; 0x18
    2770:	99 8d       	ldd	r25, Y+25	; 0x19
    2772:	89 2b       	or	r24, r25
    2774:	21 f0       	breq	.+8      	; 0x277e <xTaskIncrementTick+0x122>
    2776:	ce 01       	movw	r24, r28
    2778:	0e 96       	adiw	r24, 0x0e	; 14
    277a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    277e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2780:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2784:	98 17       	cp	r25, r24
    2786:	10 f4       	brcc	.+4      	; 0x278c <xTaskIncrementTick+0x130>
    2788:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    278c:	a8 9e       	mul	r10, r24
    278e:	c0 01       	movw	r24, r0
    2790:	11 24       	eor	r1, r1
    2792:	b8 01       	movw	r22, r16
    2794:	82 55       	subi	r24, 0x52	; 82
    2796:	95 4e       	sbci	r25, 0xE5	; 229
    2798:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    279c:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    27a0:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    27a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    27a8:	98 17       	cp	r25, r24
    27aa:	08 f4       	brcc	.+2      	; 0x27ae <xTaskIncrementTick+0x152>
    27ac:	ac cf       	rjmp	.-168    	; 0x2706 <xTaskIncrementTick+0xaa>
    27ae:	b9 2c       	mov	r11, r9
    27b0:	aa cf       	rjmp	.-172    	; 0x2706 <xTaskIncrementTick+0xaa>
    27b2:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    27b6:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    27ba:	e2 8d       	ldd	r30, Z+26	; 0x1a
    27bc:	8b e0       	ldi	r24, 0x0B	; 11
    27be:	e8 9f       	mul	r30, r24
    27c0:	f0 01       	movw	r30, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	e2 55       	subi	r30, 0x52	; 82
    27c6:	f5 4e       	sbci	r31, 0xE5	; 229
    27c8:	80 81       	ld	r24, Z
    27ca:	82 30       	cpi	r24, 0x02	; 2
    27cc:	48 f0       	brcs	.+18     	; 0x27e0 <xTaskIncrementTick+0x184>
    27ce:	bb 24       	eor	r11, r11
    27d0:	b3 94       	inc	r11
    27d2:	06 c0       	rjmp	.+12     	; 0x27e0 <xTaskIncrementTick+0x184>
    27d4:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxPendedTicks>
    27d8:	8f 5f       	subi	r24, 0xFF	; 255
    27da:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <uxPendedTicks>
    27de:	b1 2c       	mov	r11, r1
    27e0:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <xYieldPending>
    27e4:	88 23       	and	r24, r24
    27e6:	11 f0       	breq	.+4      	; 0x27ec <xTaskIncrementTick+0x190>
    27e8:	bb 24       	eor	r11, r11
    27ea:	b3 94       	inc	r11
    27ec:	8b 2d       	mov	r24, r11
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	ff 90       	pop	r15
    27f8:	ef 90       	pop	r14
    27fa:	df 90       	pop	r13
    27fc:	cf 90       	pop	r12
    27fe:	bf 90       	pop	r11
    2800:	af 90       	pop	r10
    2802:	9f 90       	pop	r9
    2804:	08 95       	ret

00002806 <xTaskResumeAll>:
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	0f 92       	push	r0
    281c:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    2820:	81 50       	subi	r24, 0x01	; 1
    2822:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <uxSchedulerSuspended>
    2826:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    282a:	81 11       	cpse	r24, r1
    282c:	5a c0       	rjmp	.+180    	; 0x28e2 <xTaskResumeAll+0xdc>
    282e:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxCurrentNumberOfTasks>
    2832:	81 11       	cpse	r24, r1
    2834:	2c c0       	rjmp	.+88     	; 0x288e <xTaskResumeAll+0x88>
    2836:	58 c0       	rjmp	.+176    	; 0x28e8 <xTaskResumeAll+0xe2>
    2838:	d7 01       	movw	r26, r14
    283a:	17 96       	adiw	r26, 0x07	; 7
    283c:	ed 91       	ld	r30, X+
    283e:	fc 91       	ld	r31, X
    2840:	18 97       	sbiw	r26, 0x08	; 8
    2842:	c0 85       	ldd	r28, Z+8	; 0x08
    2844:	d1 85       	ldd	r29, Z+9	; 0x09
    2846:	ce 01       	movw	r24, r28
    2848:	0e 96       	adiw	r24, 0x0e	; 14
    284a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    284e:	8e 01       	movw	r16, r28
    2850:	0e 5f       	subi	r16, 0xFE	; 254
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	c8 01       	movw	r24, r16
    2856:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    285a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    285c:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2860:	98 17       	cp	r25, r24
    2862:	10 f4       	brcc	.+4      	; 0x2868 <xTaskResumeAll+0x62>
    2864:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    2868:	d8 9e       	mul	r13, r24
    286a:	c0 01       	movw	r24, r0
    286c:	11 24       	eor	r1, r1
    286e:	b8 01       	movw	r22, r16
    2870:	82 55       	subi	r24, 0x52	; 82
    2872:	95 4e       	sbci	r25, 0xE5	; 229
    2874:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2878:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    287c:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2880:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2882:	82 8d       	ldd	r24, Z+26	; 0x1a
    2884:	98 17       	cp	r25, r24
    2886:	88 f0       	brcs	.+34     	; 0x28aa <xTaskResumeAll+0xa4>
    2888:	c0 92 69 1a 	sts	0x1A69, r12	; 0x801a69 <xYieldPending>
    288c:	0e c0       	rjmp	.+28     	; 0x28aa <xTaskResumeAll+0xa4>
    288e:	c0 e0       	ldi	r28, 0x00	; 0
    2890:	d0 e0       	ldi	r29, 0x00	; 0
    2892:	0f 2e       	mov	r0, r31
    2894:	f9 e8       	ldi	r31, 0x89	; 137
    2896:	ef 2e       	mov	r14, r31
    2898:	fa e1       	ldi	r31, 0x1A	; 26
    289a:	ff 2e       	mov	r15, r31
    289c:	f0 2d       	mov	r31, r0
    289e:	0f 2e       	mov	r0, r31
    28a0:	fb e0       	ldi	r31, 0x0B	; 11
    28a2:	df 2e       	mov	r13, r31
    28a4:	f0 2d       	mov	r31, r0
    28a6:	cc 24       	eor	r12, r12
    28a8:	c3 94       	inc	r12
    28aa:	f7 01       	movw	r30, r14
    28ac:	80 81       	ld	r24, Z
    28ae:	81 11       	cpse	r24, r1
    28b0:	c3 cf       	rjmp	.-122    	; 0x2838 <xTaskResumeAll+0x32>
    28b2:	cd 2b       	or	r28, r29
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <xTaskResumeAll+0xb2>
    28b6:	c2 dc       	rcall	.-1660   	; 0x223c <prvResetNextTaskUnblockTime>
    28b8:	c0 91 6a 1a 	lds	r28, 0x1A6A	; 0x801a6a <uxPendedTicks>
    28bc:	cc 23       	and	r28, r28
    28be:	49 f0       	breq	.+18     	; 0x28d2 <xTaskResumeAll+0xcc>
    28c0:	d1 e0       	ldi	r29, 0x01	; 1
    28c2:	cc de       	rcall	.-616    	; 0x265c <xTaskIncrementTick>
    28c4:	81 11       	cpse	r24, r1
    28c6:	d0 93 69 1a 	sts	0x1A69, r29	; 0x801a69 <xYieldPending>
    28ca:	c1 50       	subi	r28, 0x01	; 1
    28cc:	d1 f7       	brne	.-12     	; 0x28c2 <xTaskResumeAll+0xbc>
    28ce:	10 92 6a 1a 	sts	0x1A6A, r1	; 0x801a6a <uxPendedTicks>
    28d2:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <xYieldPending>
    28d6:	88 23       	and	r24, r24
    28d8:	31 f0       	breq	.+12     	; 0x28e6 <xTaskResumeAll+0xe0>
    28da:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	03 c0       	rjmp	.+6      	; 0x28e8 <xTaskResumeAll+0xe2>
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	01 c0       	rjmp	.+2      	; 0x28e8 <xTaskResumeAll+0xe2>
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	08 95       	ret

000028fe <vTaskDelayUntil>:
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	ec 01       	movw	r28, r24
    2910:	6a 01       	movw	r12, r20
    2912:	7b 01       	movw	r14, r22
    2914:	8f de       	rcall	.-738    	; 0x2634 <vTaskSuspendAll>
    2916:	00 91 6d 1a 	lds	r16, 0x1A6D	; 0x801a6d <xTickCount>
    291a:	10 91 6e 1a 	lds	r17, 0x1A6E	; 0x801a6e <xTickCount+0x1>
    291e:	20 91 6f 1a 	lds	r18, 0x1A6F	; 0x801a6f <xTickCount+0x2>
    2922:	30 91 70 1a 	lds	r19, 0x1A70	; 0x801a70 <xTickCount+0x3>
    2926:	88 81       	ld	r24, Y
    2928:	99 81       	ldd	r25, Y+1	; 0x01
    292a:	aa 81       	ldd	r26, Y+2	; 0x02
    292c:	bb 81       	ldd	r27, Y+3	; 0x03
    292e:	ac 01       	movw	r20, r24
    2930:	bd 01       	movw	r22, r26
    2932:	4c 0d       	add	r20, r12
    2934:	5d 1d       	adc	r21, r13
    2936:	6e 1d       	adc	r22, r14
    2938:	7f 1d       	adc	r23, r15
    293a:	08 17       	cp	r16, r24
    293c:	19 07       	cpc	r17, r25
    293e:	2a 07       	cpc	r18, r26
    2940:	3b 07       	cpc	r19, r27
    2942:	78 f4       	brcc	.+30     	; 0x2962 <vTaskDelayUntil+0x64>
    2944:	48 17       	cp	r20, r24
    2946:	59 07       	cpc	r21, r25
    2948:	6a 07       	cpc	r22, r26
    294a:	7b 07       	cpc	r23, r27
    294c:	40 f5       	brcc	.+80     	; 0x299e <vTaskDelayUntil+0xa0>
    294e:	48 83       	st	Y, r20
    2950:	59 83       	std	Y+1, r21	; 0x01
    2952:	6a 83       	std	Y+2, r22	; 0x02
    2954:	7b 83       	std	Y+3, r23	; 0x03
    2956:	04 17       	cp	r16, r20
    2958:	15 07       	cpc	r17, r21
    295a:	26 07       	cpc	r18, r22
    295c:	37 07       	cpc	r19, r23
    295e:	a0 f4       	brcc	.+40     	; 0x2988 <vTaskDelayUntil+0x8a>
    2960:	0b c0       	rjmp	.+22     	; 0x2978 <vTaskDelayUntil+0x7a>
    2962:	48 17       	cp	r20, r24
    2964:	59 07       	cpc	r21, r25
    2966:	6a 07       	cpc	r22, r26
    2968:	7b 07       	cpc	r23, r27
    296a:	a0 f0       	brcs	.+40     	; 0x2994 <vTaskDelayUntil+0x96>
    296c:	04 17       	cp	r16, r20
    296e:	15 07       	cpc	r17, r21
    2970:	26 07       	cpc	r18, r22
    2972:	37 07       	cpc	r19, r23
    2974:	78 f0       	brcs	.+30     	; 0x2994 <vTaskDelayUntil+0x96>
    2976:	13 c0       	rjmp	.+38     	; 0x299e <vTaskDelayUntil+0xa0>
    2978:	cb 01       	movw	r24, r22
    297a:	ba 01       	movw	r22, r20
    297c:	60 1b       	sub	r22, r16
    297e:	71 0b       	sbc	r23, r17
    2980:	82 0b       	sbc	r24, r18
    2982:	93 0b       	sbc	r25, r19
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	84 dc       	rcall	.-1784   	; 0x2290 <prvAddCurrentTaskToDelayedList>
    2988:	3e df       	rcall	.-388    	; 0x2806 <xTaskResumeAll>
    298a:	81 11       	cpse	r24, r1
    298c:	0d c0       	rjmp	.+26     	; 0x29a8 <vTaskDelayUntil+0xaa>
    298e:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
    2992:	0a c0       	rjmp	.+20     	; 0x29a8 <vTaskDelayUntil+0xaa>
    2994:	48 83       	st	Y, r20
    2996:	59 83       	std	Y+1, r21	; 0x01
    2998:	6a 83       	std	Y+2, r22	; 0x02
    299a:	7b 83       	std	Y+3, r23	; 0x03
    299c:	ed cf       	rjmp	.-38     	; 0x2978 <vTaskDelayUntil+0x7a>
    299e:	48 83       	st	Y, r20
    29a0:	59 83       	std	Y+1, r21	; 0x01
    29a2:	6a 83       	std	Y+2, r22	; 0x02
    29a4:	7b 83       	std	Y+3, r23	; 0x03
    29a6:	f0 cf       	rjmp	.-32     	; 0x2988 <vTaskDelayUntil+0x8a>
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	ef 90       	pop	r14
    29b4:	df 90       	pop	r13
    29b6:	cf 90       	pop	r12
    29b8:	08 95       	ret

000029ba <vTaskDelay>:
    29ba:	cf 92       	push	r12
    29bc:	df 92       	push	r13
    29be:	ef 92       	push	r14
    29c0:	ff 92       	push	r15
    29c2:	6b 01       	movw	r12, r22
    29c4:	7c 01       	movw	r14, r24
    29c6:	67 2b       	or	r22, r23
    29c8:	68 2b       	or	r22, r24
    29ca:	69 2b       	or	r22, r25
    29cc:	41 f0       	breq	.+16     	; 0x29de <vTaskDelay+0x24>
    29ce:	32 de       	rcall	.-924    	; 0x2634 <vTaskSuspendAll>
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	c7 01       	movw	r24, r14
    29d4:	b6 01       	movw	r22, r12
    29d6:	5c dc       	rcall	.-1864   	; 0x2290 <prvAddCurrentTaskToDelayedList>
    29d8:	16 df       	rcall	.-468    	; 0x2806 <xTaskResumeAll>
    29da:	81 11       	cpse	r24, r1
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <vTaskDelay+0x28>
    29de:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	08 95       	ret

000029ec <vTaskSetApplicationTaskTag>:
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	21 f4       	brne	.+8      	; 0x29f8 <vTaskSetApplicationTaskTag+0xc>
    29f0:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    29f4:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	0f 92       	push	r0
    29fe:	fc 01       	movw	r30, r24
    2a00:	72 a7       	std	Z+42, r23	; 0x2a
    2a02:	61 a7       	std	Z+41, r22	; 0x29
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	08 95       	ret

00002a0a <vTaskSwitchContext>:
    2a0a:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    2a0e:	88 23       	and	r24, r24
    2a10:	21 f0       	breq	.+8      	; 0x2a1a <vTaskSwitchContext+0x10>
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <xYieldPending>
    2a18:	08 95       	ret
    2a1a:	10 92 69 1a 	sts	0x1A69, r1	; 0x801a69 <xYieldPending>
    2a1e:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2a22:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2a26:	81 a5       	ldd	r24, Z+41	; 0x29
    2a28:	0e 94 ac 05 	call	0xb58	; 0xb58 <task_switch_out>
    2a2c:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2a30:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2a34:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2a38:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2a3c:	2d 91       	ld	r18, X+
    2a3e:	3c 91       	ld	r19, X
    2a40:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a42:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a44:	82 17       	cp	r24, r18
    2a46:	93 07       	cpc	r25, r19
    2a48:	58 f0       	brcs	.+22     	; 0x2a60 <vTaskSwitchContext+0x56>
    2a4a:	60 91 da 1a 	lds	r22, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2a4e:	70 91 db 1a 	lds	r23, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2a52:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2a56:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2a5a:	63 5e       	subi	r22, 0xE3	; 227
    2a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5e:	20 d6       	rcall	.+3136   	; 0x36a0 <vApplicationStackOverflowHook>
    2a60:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	9b e0       	ldi	r25, 0x0B	; 11
    2a6a:	89 9f       	mul	r24, r25
    2a6c:	f0 01       	movw	r30, r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	e2 55       	subi	r30, 0x52	; 82
    2a72:	f5 4e       	sbci	r31, 0xE5	; 229
    2a74:	90 81       	ld	r25, Z
    2a76:	91 11       	cpse	r25, r1
    2a78:	0e c0       	rjmp	.+28     	; 0x2a96 <vTaskSwitchContext+0x8c>
    2a7a:	4b e0       	ldi	r20, 0x0B	; 11
    2a7c:	81 50       	subi	r24, 0x01	; 1
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	42 9f       	mul	r20, r18
    2a84:	f0 01       	movw	r30, r0
    2a86:	43 9f       	mul	r20, r19
    2a88:	f0 0d       	add	r31, r0
    2a8a:	11 24       	eor	r1, r1
    2a8c:	e2 55       	subi	r30, 0x52	; 82
    2a8e:	f5 4e       	sbci	r31, 0xE5	; 229
    2a90:	90 81       	ld	r25, Z
    2a92:	99 23       	and	r25, r25
    2a94:	99 f3       	breq	.-26     	; 0x2a7c <vTaskSwitchContext+0x72>
    2a96:	9b e0       	ldi	r25, 0x0B	; 11
    2a98:	92 9f       	mul	r25, r18
    2a9a:	a0 01       	movw	r20, r0
    2a9c:	93 9f       	mul	r25, r19
    2a9e:	50 0d       	add	r21, r0
    2aa0:	11 24       	eor	r1, r1
    2aa2:	da 01       	movw	r26, r20
    2aa4:	a2 55       	subi	r26, 0x52	; 82
    2aa6:	b5 4e       	sbci	r27, 0xE5	; 229
    2aa8:	11 96       	adiw	r26, 0x01	; 1
    2aaa:	ed 91       	ld	r30, X+
    2aac:	fc 91       	ld	r31, X
    2aae:	12 97       	sbiw	r26, 0x02	; 2
    2ab0:	04 80       	ldd	r0, Z+4	; 0x04
    2ab2:	f5 81       	ldd	r31, Z+5	; 0x05
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	12 96       	adiw	r26, 0x02	; 2
    2ab8:	fc 93       	st	X, r31
    2aba:	ee 93       	st	-X, r30
    2abc:	11 97       	sbiw	r26, 0x01	; 1
    2abe:	4f 54       	subi	r20, 0x4F	; 79
    2ac0:	55 4e       	sbci	r21, 0xE5	; 229
    2ac2:	e4 17       	cp	r30, r20
    2ac4:	f5 07       	cpc	r31, r21
    2ac6:	29 f4       	brne	.+10     	; 0x2ad2 <vTaskSwitchContext+0xc8>
    2ac8:	44 81       	ldd	r20, Z+4	; 0x04
    2aca:	55 81       	ldd	r21, Z+5	; 0x05
    2acc:	fd 01       	movw	r30, r26
    2ace:	52 83       	std	Z+2, r21	; 0x02
    2ad0:	41 83       	std	Z+1, r20	; 0x01
    2ad2:	9b e0       	ldi	r25, 0x0B	; 11
    2ad4:	92 9f       	mul	r25, r18
    2ad6:	f0 01       	movw	r30, r0
    2ad8:	93 9f       	mul	r25, r19
    2ada:	f0 0d       	add	r31, r0
    2adc:	11 24       	eor	r1, r1
    2ade:	e2 55       	subi	r30, 0x52	; 82
    2ae0:	f5 4e       	sbci	r31, 0xE5	; 229
    2ae2:	01 80       	ldd	r0, Z+1	; 0x01
    2ae4:	f2 81       	ldd	r31, Z+2	; 0x02
    2ae6:	e0 2d       	mov	r30, r0
    2ae8:	20 85       	ldd	r18, Z+8	; 0x08
    2aea:	31 85       	ldd	r19, Z+9	; 0x09
    2aec:	30 93 db 1a 	sts	0x1ADB, r19	; 0x801adb <pxCurrentTCB+0x1>
    2af0:	20 93 da 1a 	sts	0x1ADA, r18	; 0x801ada <pxCurrentTCB>
    2af4:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    2af8:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2afc:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2b00:	81 a5       	ldd	r24, Z+41	; 0x29
    2b02:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <task_switch_in>
    2b06:	08 95       	ret

00002b08 <vTaskPlaceOnEventList>:
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	6a 01       	movw	r12, r20
    2b12:	7b 01       	movw	r14, r22
    2b14:	60 91 da 1a 	lds	r22, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2b18:	70 91 db 1a 	lds	r23, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2b1c:	62 5f       	subi	r22, 0xF2	; 242
    2b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b20:	0e 94 a8 08 	call	0x1150	; 0x1150 <vListInsert>
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	c7 01       	movw	r24, r14
    2b28:	b6 01       	movw	r22, r12
    2b2a:	b2 db       	rcall	.-2204   	; 0x2290 <prvAddCurrentTaskToDelayedList>
    2b2c:	ff 90       	pop	r15
    2b2e:	ef 90       	pop	r14
    2b30:	df 90       	pop	r13
    2b32:	cf 90       	pop	r12
    2b34:	08 95       	ret

00002b36 <vTaskPlaceOnUnorderedEventList>:
    2b36:	cf 92       	push	r12
    2b38:	df 92       	push	r13
    2b3a:	ef 92       	push	r14
    2b3c:	ff 92       	push	r15
    2b3e:	0f 93       	push	r16
    2b40:	1f 93       	push	r17
    2b42:	68 01       	movw	r12, r16
    2b44:	79 01       	movw	r14, r18
    2b46:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2b4a:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2b4e:	70 68       	ori	r23, 0x80	; 128
    2b50:	46 87       	std	Z+14, r20	; 0x0e
    2b52:	57 87       	std	Z+15, r21	; 0x0f
    2b54:	60 8b       	std	Z+16, r22	; 0x10
    2b56:	71 8b       	std	Z+17, r23	; 0x11
    2b58:	60 91 da 1a 	lds	r22, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2b5c:	70 91 db 1a 	lds	r23, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2b60:	62 5f       	subi	r22, 0xF2	; 242
    2b62:	7f 4f       	sbci	r23, 0xFF	; 255
    2b64:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2b68:	41 e0       	ldi	r20, 0x01	; 1
    2b6a:	c7 01       	movw	r24, r14
    2b6c:	b6 01       	movw	r22, r12
    2b6e:	90 db       	rcall	.-2272   	; 0x2290 <prvAddCurrentTaskToDelayedList>
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	ef 90       	pop	r14
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	08 95       	ret

00002b7e <vTaskPlaceOnEventListRestricted>:
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	cf 93       	push	r28
    2b88:	6a 01       	movw	r12, r20
    2b8a:	7b 01       	movw	r14, r22
    2b8c:	c2 2f       	mov	r28, r18
    2b8e:	60 91 da 1a 	lds	r22, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2b92:	70 91 db 1a 	lds	r23, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2b96:	62 5f       	subi	r22, 0xF2	; 242
    2b98:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9a:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2b9e:	cc 23       	and	r28, r28
    2ba0:	21 f0       	breq	.+8      	; 0x2baa <vTaskPlaceOnEventListRestricted+0x2c>
    2ba2:	cc 24       	eor	r12, r12
    2ba4:	ca 94       	dec	r12
    2ba6:	dc 2c       	mov	r13, r12
    2ba8:	76 01       	movw	r14, r12
    2baa:	4c 2f       	mov	r20, r28
    2bac:	c7 01       	movw	r24, r14
    2bae:	b6 01       	movw	r22, r12
    2bb0:	6f db       	rcall	.-2338   	; 0x2290 <prvAddCurrentTaskToDelayedList>
    2bb2:	cf 91       	pop	r28
    2bb4:	ff 90       	pop	r15
    2bb6:	ef 90       	pop	r14
    2bb8:	df 90       	pop	r13
    2bba:	cf 90       	pop	r12
    2bbc:	08 95       	ret

00002bbe <xTaskRemoveFromEventList>:
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	17 96       	adiw	r26, 0x07	; 7
    2bca:	ed 91       	ld	r30, X+
    2bcc:	fc 91       	ld	r31, X
    2bce:	18 97       	sbiw	r26, 0x08	; 8
    2bd0:	c0 85       	ldd	r28, Z+8	; 0x08
    2bd2:	d1 85       	ldd	r29, Z+9	; 0x09
    2bd4:	8e 01       	movw	r16, r28
    2bd6:	02 5f       	subi	r16, 0xF2	; 242
    2bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bda:	c8 01       	movw	r24, r16
    2bdc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    2be0:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    2be4:	81 11       	cpse	r24, r1
    2be6:	16 c0       	rjmp	.+44     	; 0x2c14 <xTaskRemoveFromEventList+0x56>
    2be8:	0c 50       	subi	r16, 0x0C	; 12
    2bea:	11 09       	sbc	r17, r1
    2bec:	c8 01       	movw	r24, r16
    2bee:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    2bf2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bf4:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2bf8:	98 17       	cp	r25, r24
    2bfa:	10 f4       	brcc	.+4      	; 0x2c00 <xTaskRemoveFromEventList+0x42>
    2bfc:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    2c00:	bb e0       	ldi	r27, 0x0B	; 11
    2c02:	8b 9f       	mul	r24, r27
    2c04:	c0 01       	movw	r24, r0
    2c06:	11 24       	eor	r1, r1
    2c08:	b8 01       	movw	r22, r16
    2c0a:	82 55       	subi	r24, 0x52	; 82
    2c0c:	95 4e       	sbci	r25, 0xE5	; 229
    2c0e:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <xTaskRemoveFromEventList+0x60>
    2c14:	b8 01       	movw	r22, r16
    2c16:	89 e8       	ldi	r24, 0x89	; 137
    2c18:	9a e1       	ldi	r25, 0x1A	; 26
    2c1a:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2c1e:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2c22:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2c26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c2a:	89 17       	cp	r24, r25
    2c2c:	20 f4       	brcc	.+8      	; 0x2c36 <xTaskRemoveFromEventList+0x78>
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <xYieldPending>
    2c34:	01 c0       	rjmp	.+2      	; 0x2c38 <xTaskRemoveFromEventList+0x7a>
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	08 95       	ret

00002c42 <vTaskRemoveFromUnorderedEventList>:
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	70 68       	ori	r23, 0x80	; 128
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	40 83       	st	Z, r20
    2c50:	51 83       	std	Z+1, r21	; 0x01
    2c52:	62 83       	std	Z+2, r22	; 0x02
    2c54:	73 83       	std	Z+3, r23	; 0x03
    2c56:	c0 85       	ldd	r28, Z+8	; 0x08
    2c58:	d1 85       	ldd	r29, Z+9	; 0x09
    2c5a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    2c5e:	8e 01       	movw	r16, r28
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskRemoveFromUnorderedEventList+0x36>
    2c74:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    2c78:	fb e0       	ldi	r31, 0x0B	; 11
    2c7a:	8f 9f       	mul	r24, r31
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	82 55       	subi	r24, 0x52	; 82
    2c84:	95 4e       	sbci	r25, 0xE5	; 229
    2c86:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2c8a:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2c8e:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	89 17       	cp	r24, r25
    2c98:	18 f4       	brcc	.+6      	; 0x2ca0 <vTaskRemoveFromUnorderedEventList+0x5e>
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <xYieldPending>
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	08 95       	ret

00002caa <vTaskSetTimeOutState>:
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	0f 92       	push	r0
    2cb0:	20 91 68 1a 	lds	r18, 0x1A68	; 0x801a68 <xNumOfOverflows>
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	20 83       	st	Z, r18
    2cb8:	40 91 6d 1a 	lds	r20, 0x1A6D	; 0x801a6d <xTickCount>
    2cbc:	50 91 6e 1a 	lds	r21, 0x1A6E	; 0x801a6e <xTickCount+0x1>
    2cc0:	60 91 6f 1a 	lds	r22, 0x1A6F	; 0x801a6f <xTickCount+0x2>
    2cc4:	70 91 70 1a 	lds	r23, 0x1A70	; 0x801a70 <xTickCount+0x3>
    2cc8:	41 83       	std	Z+1, r20	; 0x01
    2cca:	52 83       	std	Z+2, r21	; 0x02
    2ccc:	63 83       	std	Z+3, r22	; 0x03
    2cce:	74 83       	std	Z+4, r23	; 0x04
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	08 95       	ret

00002cd6 <vTaskInternalSetTimeOutState>:
    2cd6:	20 91 68 1a 	lds	r18, 0x1A68	; 0x801a68 <xNumOfOverflows>
    2cda:	fc 01       	movw	r30, r24
    2cdc:	20 83       	st	Z, r18
    2cde:	40 91 6d 1a 	lds	r20, 0x1A6D	; 0x801a6d <xTickCount>
    2ce2:	50 91 6e 1a 	lds	r21, 0x1A6E	; 0x801a6e <xTickCount+0x1>
    2ce6:	60 91 6f 1a 	lds	r22, 0x1A6F	; 0x801a6f <xTickCount+0x2>
    2cea:	70 91 70 1a 	lds	r23, 0x1A70	; 0x801a70 <xTickCount+0x3>
    2cee:	41 83       	std	Z+1, r20	; 0x01
    2cf0:	52 83       	std	Z+2, r21	; 0x02
    2cf2:	63 83       	std	Z+3, r22	; 0x03
    2cf4:	74 83       	std	Z+4, r23	; 0x04
    2cf6:	08 95       	ret

00002cf8 <xTaskCheckForTimeOut>:
    2cf8:	cf 92       	push	r12
    2cfa:	df 92       	push	r13
    2cfc:	ef 92       	push	r14
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	fb 01       	movw	r30, r22
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	0f 92       	push	r0
    2d10:	40 91 6d 1a 	lds	r20, 0x1A6D	; 0x801a6d <xTickCount>
    2d14:	50 91 6e 1a 	lds	r21, 0x1A6E	; 0x801a6e <xTickCount+0x1>
    2d18:	60 91 6f 1a 	lds	r22, 0x1A6F	; 0x801a6f <xTickCount+0x2>
    2d1c:	70 91 70 1a 	lds	r23, 0x1A70	; 0x801a70 <xTickCount+0x3>
    2d20:	00 81       	ld	r16, Z
    2d22:	11 81       	ldd	r17, Z+1	; 0x01
    2d24:	22 81       	ldd	r18, Z+2	; 0x02
    2d26:	33 81       	ldd	r19, Z+3	; 0x03
    2d28:	0f 3f       	cpi	r16, 0xFF	; 255
    2d2a:	af ef       	ldi	r26, 0xFF	; 255
    2d2c:	1a 07       	cpc	r17, r26
    2d2e:	2a 07       	cpc	r18, r26
    2d30:	3a 07       	cpc	r19, r26
    2d32:	49 f1       	breq	.+82     	; 0x2d86 <xTaskCheckForTimeOut+0x8e>
    2d34:	ec 01       	movw	r28, r24
    2d36:	c9 80       	ldd	r12, Y+1	; 0x01
    2d38:	da 80       	ldd	r13, Y+2	; 0x02
    2d3a:	eb 80       	ldd	r14, Y+3	; 0x03
    2d3c:	fc 80       	ldd	r15, Y+4	; 0x04
    2d3e:	a0 91 68 1a 	lds	r26, 0x1A68	; 0x801a68 <xNumOfOverflows>
    2d42:	b8 81       	ld	r27, Y
    2d44:	ba 17       	cp	r27, r26
    2d46:	29 f0       	breq	.+10     	; 0x2d52 <xTaskCheckForTimeOut+0x5a>
    2d48:	4c 15       	cp	r20, r12
    2d4a:	5d 05       	cpc	r21, r13
    2d4c:	6e 05       	cpc	r22, r14
    2d4e:	7f 05       	cpc	r23, r15
    2d50:	e0 f4       	brcc	.+56     	; 0x2d8a <xTaskCheckForTimeOut+0x92>
    2d52:	4c 19       	sub	r20, r12
    2d54:	5d 09       	sbc	r21, r13
    2d56:	6e 09       	sbc	r22, r14
    2d58:	7f 09       	sbc	r23, r15
    2d5a:	40 17       	cp	r20, r16
    2d5c:	51 07       	cpc	r21, r17
    2d5e:	62 07       	cpc	r22, r18
    2d60:	73 07       	cpc	r23, r19
    2d62:	58 f4       	brcc	.+22     	; 0x2d7a <xTaskCheckForTimeOut+0x82>
    2d64:	04 1b       	sub	r16, r20
    2d66:	15 0b       	sbc	r17, r21
    2d68:	26 0b       	sbc	r18, r22
    2d6a:	37 0b       	sbc	r19, r23
    2d6c:	00 83       	st	Z, r16
    2d6e:	11 83       	std	Z+1, r17	; 0x01
    2d70:	22 83       	std	Z+2, r18	; 0x02
    2d72:	33 83       	std	Z+3, r19	; 0x03
    2d74:	b0 df       	rcall	.-160    	; 0x2cd6 <vTaskInternalSetTimeOutState>
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	09 c0       	rjmp	.+18     	; 0x2d8c <xTaskCheckForTimeOut+0x94>
    2d7a:	10 82       	st	Z, r1
    2d7c:	11 82       	std	Z+1, r1	; 0x01
    2d7e:	12 82       	std	Z+2, r1	; 0x02
    2d80:	13 82       	std	Z+3, r1	; 0x03
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	03 c0       	rjmp	.+6      	; 0x2d8c <xTaskCheckForTimeOut+0x94>
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <xTaskCheckForTimeOut+0x94>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0f 90       	pop	r0
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	ff 90       	pop	r15
    2d9a:	ef 90       	pop	r14
    2d9c:	df 90       	pop	r13
    2d9e:	cf 90       	pop	r12
    2da0:	08 95       	ret

00002da2 <vTaskMissedYield>:
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <xYieldPending>
    2da8:	08 95       	ret

00002daa <xTaskGetCurrentTaskHandle>:
    2daa:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2dae:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2db2:	08 95       	ret

00002db4 <xTaskGetSchedulerState>:
    2db4:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <xSchedulerRunning>
    2db8:	88 23       	and	r24, r24
    2dba:	31 f0       	breq	.+12     	; 0x2dc8 <xTaskGetSchedulerState+0x14>
    2dbc:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    2dc0:	88 23       	and	r24, r24
    2dc2:	21 f0       	breq	.+8      	; 0x2dcc <xTaskGetSchedulerState+0x18>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	08 95       	ret
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	08 95       	ret
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	08 95       	ret

00002dd0 <xTaskPriorityInherit>:
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	fc 01       	movw	r30, r24
    2dda:	89 2b       	or	r24, r25
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <xTaskPriorityInherit+0x10>
    2dde:	60 c0       	rjmp	.+192    	; 0x2ea0 <xTaskPriorityInherit+0xd0>
    2de0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2de2:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2de6:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2dea:	5a 96       	adiw	r26, 0x1a	; 26
    2dec:	9c 91       	ld	r25, X
    2dee:	89 17       	cp	r24, r25
    2df0:	08 f0       	brcs	.+2      	; 0x2df4 <xTaskPriorityInherit+0x24>
    2df2:	4a c0       	rjmp	.+148    	; 0x2e88 <xTaskPriorityInherit+0xb8>
    2df4:	46 85       	ldd	r20, Z+14	; 0x0e
    2df6:	57 85       	ldd	r21, Z+15	; 0x0f
    2df8:	60 89       	ldd	r22, Z+16	; 0x10
    2dfa:	71 89       	ldd	r23, Z+17	; 0x11
    2dfc:	77 23       	and	r23, r23
    2dfe:	94 f0       	brlt	.+36     	; 0x2e24 <xTaskPriorityInherit+0x54>
    2e00:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2e04:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2e08:	5a 96       	adiw	r26, 0x1a	; 26
    2e0a:	9c 91       	ld	r25, X
    2e0c:	44 e0       	ldi	r20, 0x04	; 4
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	60 e0       	ldi	r22, 0x00	; 0
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	49 1b       	sub	r20, r25
    2e16:	51 09       	sbc	r21, r1
    2e18:	61 09       	sbc	r22, r1
    2e1a:	71 09       	sbc	r23, r1
    2e1c:	46 87       	std	Z+14, r20	; 0x0e
    2e1e:	57 87       	std	Z+15, r21	; 0x0f
    2e20:	60 8b       	std	Z+16, r22	; 0x10
    2e22:	71 8b       	std	Z+17, r23	; 0x11
    2e24:	2b e0       	ldi	r18, 0x0B	; 11
    2e26:	82 9f       	mul	r24, r18
    2e28:	c0 01       	movw	r24, r0
    2e2a:	11 24       	eor	r1, r1
    2e2c:	82 55       	subi	r24, 0x52	; 82
    2e2e:	95 4e       	sbci	r25, 0xE5	; 229
    2e30:	24 85       	ldd	r18, Z+12	; 0x0c
    2e32:	35 85       	ldd	r19, Z+13	; 0x0d
    2e34:	28 17       	cp	r18, r24
    2e36:	39 07       	cpc	r19, r25
    2e38:	f1 f4       	brne	.+60     	; 0x2e76 <xTaskPriorityInherit+0xa6>
    2e3a:	8f 01       	movw	r16, r30
    2e3c:	ef 01       	movw	r28, r30
    2e3e:	22 96       	adiw	r28, 0x02	; 2
    2e40:	ce 01       	movw	r24, r28
    2e42:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    2e46:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2e4a:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2e4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e50:	f8 01       	movw	r30, r16
    2e52:	82 8f       	std	Z+26, r24	; 0x1a
    2e54:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2e58:	98 17       	cp	r25, r24
    2e5a:	10 f4       	brcc	.+4      	; 0x2e60 <xTaskPriorityInherit+0x90>
    2e5c:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    2e60:	fb e0       	ldi	r31, 0x0B	; 11
    2e62:	8f 9f       	mul	r24, r31
    2e64:	c0 01       	movw	r24, r0
    2e66:	11 24       	eor	r1, r1
    2e68:	be 01       	movw	r22, r28
    2e6a:	82 55       	subi	r24, 0x52	; 82
    2e6c:	95 4e       	sbci	r25, 0xE5	; 229
    2e6e:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	16 c0       	rjmp	.+44     	; 0x2ea2 <xTaskPriorityInherit+0xd2>
    2e76:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2e7a:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2e7e:	5a 96       	adiw	r26, 0x1a	; 26
    2e80:	8c 91       	ld	r24, X
    2e82:	82 8f       	std	Z+26, r24	; 0x1a
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	0d c0       	rjmp	.+26     	; 0x2ea2 <xTaskPriorityInherit+0xd2>
    2e88:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2e8c:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	27 a1       	ldd	r18, Z+39	; 0x27
    2e94:	5a 96       	adiw	r26, 0x1a	; 26
    2e96:	9c 91       	ld	r25, X
    2e98:	29 17       	cp	r18, r25
    2e9a:	18 f0       	brcs	.+6      	; 0x2ea2 <xTaskPriorityInherit+0xd2>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <xTaskPriorityInherit+0xd2>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	08 95       	ret

00002eac <xTaskPriorityDisinherit>:
    2eac:	0f 93       	push	r16
    2eae:	1f 93       	push	r17
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	89 2b       	or	r24, r25
    2eb8:	79 f1       	breq	.+94     	; 0x2f18 <xTaskPriorityDisinherit+0x6c>
    2eba:	80 a5       	ldd	r24, Z+40	; 0x28
    2ebc:	81 50       	subi	r24, 0x01	; 1
    2ebe:	80 a7       	std	Z+40, r24	; 0x28
    2ec0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ec2:	97 a1       	ldd	r25, Z+39	; 0x27
    2ec4:	29 17       	cp	r18, r25
    2ec6:	51 f1       	breq	.+84     	; 0x2f1c <xTaskPriorityDisinherit+0x70>
    2ec8:	81 11       	cpse	r24, r1
    2eca:	2a c0       	rjmp	.+84     	; 0x2f20 <xTaskPriorityDisinherit+0x74>
    2ecc:	ef 01       	movw	r28, r30
    2ece:	8f 01       	movw	r16, r30
    2ed0:	0e 5f       	subi	r16, 0xFE	; 254
    2ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed4:	c8 01       	movw	r24, r16
    2ed6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    2eda:	8f a1       	ldd	r24, Y+39	; 0x27
    2edc:	8a 8f       	std	Y+26, r24	; 0x1a
    2ede:	44 e0       	ldi	r20, 0x04	; 4
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	48 1b       	sub	r20, r24
    2ee8:	51 09       	sbc	r21, r1
    2eea:	61 09       	sbc	r22, r1
    2eec:	71 09       	sbc	r23, r1
    2eee:	4e 87       	std	Y+14, r20	; 0x0e
    2ef0:	5f 87       	std	Y+15, r21	; 0x0f
    2ef2:	68 8b       	std	Y+16, r22	; 0x10
    2ef4:	79 8b       	std	Y+17, r23	; 0x11
    2ef6:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2efa:	98 17       	cp	r25, r24
    2efc:	10 f4       	brcc	.+4      	; 0x2f02 <xTaskPriorityDisinherit+0x56>
    2efe:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    2f02:	2b e0       	ldi	r18, 0x0B	; 11
    2f04:	82 9f       	mul	r24, r18
    2f06:	c0 01       	movw	r24, r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	b8 01       	movw	r22, r16
    2f0c:	82 55       	subi	r24, 0x52	; 82
    2f0e:	95 4e       	sbci	r25, 0xE5	; 229
    2f10:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	05 c0       	rjmp	.+10     	; 0x2f22 <xTaskPriorityDisinherit+0x76>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <xTaskPriorityDisinherit+0x76>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <xTaskPriorityDisinherit+0x76>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	08 95       	ret

00002f2c <vTaskPriorityDisinheritAfterTimeout>:
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	fc 01       	movw	r30, r24
    2f36:	89 2b       	or	r24, r25
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <vTaskPriorityDisinheritAfterTimeout+0x10>
    2f3a:	3f c0       	rjmp	.+126    	; 0x2fba <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f3c:	87 a1       	ldd	r24, Z+39	; 0x27
    2f3e:	86 17       	cp	r24, r22
    2f40:	08 f4       	brcc	.+2      	; 0x2f44 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2f42:	86 2f       	mov	r24, r22
    2f44:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f46:	98 17       	cp	r25, r24
    2f48:	c1 f1       	breq	.+112    	; 0x2fba <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f4a:	20 a5       	ldd	r18, Z+40	; 0x28
    2f4c:	21 30       	cpi	r18, 0x01	; 1
    2f4e:	a9 f5       	brne	.+106    	; 0x2fba <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f50:	82 8f       	std	Z+26, r24	; 0x1a
    2f52:	46 85       	ldd	r20, Z+14	; 0x0e
    2f54:	57 85       	ldd	r21, Z+15	; 0x0f
    2f56:	60 89       	ldd	r22, Z+16	; 0x10
    2f58:	71 89       	ldd	r23, Z+17	; 0x11
    2f5a:	77 23       	and	r23, r23
    2f5c:	64 f0       	brlt	.+24     	; 0x2f76 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2f5e:	44 e0       	ldi	r20, 0x04	; 4
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	48 1b       	sub	r20, r24
    2f68:	51 09       	sbc	r21, r1
    2f6a:	61 09       	sbc	r22, r1
    2f6c:	71 09       	sbc	r23, r1
    2f6e:	46 87       	std	Z+14, r20	; 0x0e
    2f70:	57 87       	std	Z+15, r21	; 0x0f
    2f72:	60 8b       	std	Z+16, r22	; 0x10
    2f74:	71 8b       	std	Z+17, r23	; 0x11
    2f76:	2b e0       	ldi	r18, 0x0B	; 11
    2f78:	92 9f       	mul	r25, r18
    2f7a:	c0 01       	movw	r24, r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	82 55       	subi	r24, 0x52	; 82
    2f80:	95 4e       	sbci	r25, 0xE5	; 229
    2f82:	24 85       	ldd	r18, Z+12	; 0x0c
    2f84:	35 85       	ldd	r19, Z+13	; 0x0d
    2f86:	28 17       	cp	r18, r24
    2f88:	39 07       	cpc	r19, r25
    2f8a:	b9 f4       	brne	.+46     	; 0x2fba <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f8c:	ef 01       	movw	r28, r30
    2f8e:	8f 01       	movw	r16, r30
    2f90:	0e 5f       	subi	r16, 0xFE	; 254
    2f92:	1f 4f       	sbci	r17, 0xFF	; 255
    2f94:	c8 01       	movw	r24, r16
    2f96:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    2f9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f9c:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    2fa0:	98 17       	cp	r25, r24
    2fa2:	10 f4       	brcc	.+4      	; 0x2fa8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2fa4:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    2fa8:	2b e0       	ldi	r18, 0x0B	; 11
    2faa:	82 9f       	mul	r24, r18
    2fac:	c0 01       	movw	r24, r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	b8 01       	movw	r22, r16
    2fb2:	82 55       	subi	r24, 0x52	; 82
    2fb4:	95 4e       	sbci	r25, 0xE5	; 229
    2fb6:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	08 95       	ret

00002fc4 <uxTaskResetEventItemValue>:
    2fc4:	cf 92       	push	r12
    2fc6:	df 92       	push	r13
    2fc8:	ef 92       	push	r14
    2fca:	ff 92       	push	r15
    2fcc:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2fd0:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2fd4:	66 85       	ldd	r22, Z+14	; 0x0e
    2fd6:	77 85       	ldd	r23, Z+15	; 0x0f
    2fd8:	80 89       	ldd	r24, Z+16	; 0x10
    2fda:	91 89       	ldd	r25, Z+17	; 0x11
    2fdc:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2fe0:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2fe4:	a0 91 da 1a 	lds	r26, 0x1ADA	; 0x801ada <pxCurrentTCB>
    2fe8:	b0 91 db 1a 	lds	r27, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    2fec:	5a 96       	adiw	r26, 0x1a	; 26
    2fee:	2c 91       	ld	r18, X
    2ff0:	c1 2c       	mov	r12, r1
    2ff2:	d1 2c       	mov	r13, r1
    2ff4:	76 01       	movw	r14, r12
    2ff6:	68 94       	set
    2ff8:	c2 f8       	bld	r12, 2
    2ffa:	c2 1a       	sub	r12, r18
    2ffc:	d1 08       	sbc	r13, r1
    2ffe:	e1 08       	sbc	r14, r1
    3000:	f1 08       	sbc	r15, r1
    3002:	c6 86       	std	Z+14, r12	; 0x0e
    3004:	d7 86       	std	Z+15, r13	; 0x0f
    3006:	e0 8a       	std	Z+16, r14	; 0x10
    3008:	f1 8a       	std	Z+17, r15	; 0x11
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	df 90       	pop	r13
    3010:	cf 90       	pop	r12
    3012:	08 95       	ret

00003014 <pvTaskIncrementMutexHeldCount>:
    3014:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3018:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    301c:	89 2b       	or	r24, r25
    301e:	39 f0       	breq	.+14     	; 0x302e <pvTaskIncrementMutexHeldCount+0x1a>
    3020:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3024:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    3028:	80 a5       	ldd	r24, Z+40	; 0x28
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	80 a7       	std	Z+40, r24	; 0x28
    302e:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3032:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    3036:	08 95       	ret

00003038 <xTaskNotifyWait>:
    3038:	4f 92       	push	r4
    303a:	5f 92       	push	r5
    303c:	6f 92       	push	r6
    303e:	7f 92       	push	r7
    3040:	8f 92       	push	r8
    3042:	9f 92       	push	r9
    3044:	af 92       	push	r10
    3046:	bf 92       	push	r11
    3048:	cf 92       	push	r12
    304a:	df 92       	push	r13
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	0f 93       	push	r16
    3052:	1f 93       	push	r17
    3054:	49 01       	movw	r8, r18
    3056:	5a 01       	movw	r10, r20
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	0f 92       	push	r0
    305e:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3062:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    3066:	27 a5       	ldd	r18, Z+47	; 0x2f
    3068:	22 30       	cpi	r18, 0x02	; 2
    306a:	39 f1       	breq	.+78     	; 0x30ba <xTaskNotifyWait+0x82>
    306c:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3070:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    3074:	43 a4       	ldd	r4, Z+43	; 0x2b
    3076:	54 a4       	ldd	r5, Z+44	; 0x2c
    3078:	65 a4       	ldd	r6, Z+45	; 0x2d
    307a:	76 a4       	ldd	r7, Z+46	; 0x2e
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	80 95       	com	r24
    3082:	90 95       	com	r25
    3084:	a0 95       	com	r26
    3086:	b0 95       	com	r27
    3088:	84 21       	and	r24, r4
    308a:	95 21       	and	r25, r5
    308c:	a6 21       	and	r26, r6
    308e:	b7 21       	and	r27, r7
    3090:	83 a7       	std	Z+43, r24	; 0x2b
    3092:	94 a7       	std	Z+44, r25	; 0x2c
    3094:	a5 a7       	std	Z+45, r26	; 0x2d
    3096:	b6 a7       	std	Z+46, r27	; 0x2e
    3098:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    309c:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	87 a7       	std	Z+47, r24	; 0x2f
    30a4:	c1 14       	cp	r12, r1
    30a6:	d1 04       	cpc	r13, r1
    30a8:	e1 04       	cpc	r14, r1
    30aa:	f1 04       	cpc	r15, r1
    30ac:	31 f0       	breq	.+12     	; 0x30ba <xTaskNotifyWait+0x82>
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	c7 01       	movw	r24, r14
    30b2:	b6 01       	movw	r22, r12
    30b4:	ed d8       	rcall	.-3622   	; 0x2290 <prvAddCurrentTaskToDelayedList>
    30b6:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
    30ba:	0f 90       	pop	r0
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	0f 92       	push	r0
    30c4:	01 15       	cp	r16, r1
    30c6:	11 05       	cpc	r17, r1
    30c8:	69 f0       	breq	.+26     	; 0x30e4 <xTaskNotifyWait+0xac>
    30ca:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    30ce:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    30d2:	83 a5       	ldd	r24, Z+43	; 0x2b
    30d4:	94 a5       	ldd	r25, Z+44	; 0x2c
    30d6:	a5 a5       	ldd	r26, Z+45	; 0x2d
    30d8:	b6 a5       	ldd	r27, Z+46	; 0x2e
    30da:	f8 01       	movw	r30, r16
    30dc:	80 83       	st	Z, r24
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	a2 83       	std	Z+2, r26	; 0x02
    30e2:	b3 83       	std	Z+3, r27	; 0x03
    30e4:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    30e8:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    30ec:	87 a5       	ldd	r24, Z+47	; 0x2f
    30ee:	82 30       	cpi	r24, 0x02	; 2
    30f0:	b1 f4       	brne	.+44     	; 0x311e <xTaskNotifyWait+0xe6>
    30f2:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    30f6:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    30fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    30fc:	94 a5       	ldd	r25, Z+44	; 0x2c
    30fe:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3100:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3102:	80 94       	com	r8
    3104:	90 94       	com	r9
    3106:	a0 94       	com	r10
    3108:	b0 94       	com	r11
    310a:	88 22       	and	r8, r24
    310c:	99 22       	and	r9, r25
    310e:	aa 22       	and	r10, r26
    3110:	bb 22       	and	r11, r27
    3112:	83 a6       	std	Z+43, r8	; 0x2b
    3114:	94 a6       	std	Z+44, r9	; 0x2c
    3116:	a5 a6       	std	Z+45, r10	; 0x2d
    3118:	b6 a6       	std	Z+46, r11	; 0x2e
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <xTaskNotifyWait+0xe8>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3124:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    3128:	17 a6       	std	Z+47, r1	; 0x2f
    312a:	0f 90       	pop	r0
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	1f 91       	pop	r17
    3130:	0f 91       	pop	r16
    3132:	ff 90       	pop	r15
    3134:	ef 90       	pop	r14
    3136:	df 90       	pop	r13
    3138:	cf 90       	pop	r12
    313a:	bf 90       	pop	r11
    313c:	af 90       	pop	r10
    313e:	9f 90       	pop	r9
    3140:	8f 90       	pop	r8
    3142:	7f 90       	pop	r7
    3144:	6f 90       	pop	r6
    3146:	5f 90       	pop	r5
    3148:	4f 90       	pop	r4
    314a:	08 95       	ret

0000314c <xTaskGenericNotify>:
    314c:	0f 93       	push	r16
    314e:	1f 93       	push	r17
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	fc 01       	movw	r30, r24
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	0f 92       	push	r0
    315c:	01 15       	cp	r16, r1
    315e:	11 05       	cpc	r17, r1
    3160:	49 f0       	breq	.+18     	; 0x3174 <xTaskGenericNotify+0x28>
    3162:	83 a5       	ldd	r24, Z+43	; 0x2b
    3164:	94 a5       	ldd	r25, Z+44	; 0x2c
    3166:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3168:	b6 a5       	ldd	r27, Z+46	; 0x2e
    316a:	e8 01       	movw	r28, r16
    316c:	88 83       	st	Y, r24
    316e:	99 83       	std	Y+1, r25	; 0x01
    3170:	aa 83       	std	Y+2, r26	; 0x02
    3172:	bb 83       	std	Y+3, r27	; 0x03
    3174:	87 a5       	ldd	r24, Z+47	; 0x2f
    3176:	92 e0       	ldi	r25, 0x02	; 2
    3178:	97 a7       	std	Z+47, r25	; 0x2f
    317a:	22 30       	cpi	r18, 0x02	; 2
    317c:	b1 f0       	breq	.+44     	; 0x31aa <xTaskGenericNotify+0x5e>
    317e:	18 f4       	brcc	.+6      	; 0x3186 <xTaskGenericNotify+0x3a>
    3180:	21 30       	cpi	r18, 0x01	; 1
    3182:	31 f0       	breq	.+12     	; 0x3190 <xTaskGenericNotify+0x44>
    3184:	2a c0       	rjmp	.+84     	; 0x31da <xTaskGenericNotify+0x8e>
    3186:	23 30       	cpi	r18, 0x03	; 3
    3188:	e9 f0       	breq	.+58     	; 0x31c4 <xTaskGenericNotify+0x78>
    318a:	24 30       	cpi	r18, 0x04	; 4
    318c:	01 f1       	breq	.+64     	; 0x31ce <xTaskGenericNotify+0x82>
    318e:	25 c0       	rjmp	.+74     	; 0x31da <xTaskGenericNotify+0x8e>
    3190:	03 a5       	ldd	r16, Z+43	; 0x2b
    3192:	14 a5       	ldd	r17, Z+44	; 0x2c
    3194:	25 a5       	ldd	r18, Z+45	; 0x2d
    3196:	36 a5       	ldd	r19, Z+46	; 0x2e
    3198:	40 2b       	or	r20, r16
    319a:	51 2b       	or	r21, r17
    319c:	62 2b       	or	r22, r18
    319e:	73 2b       	or	r23, r19
    31a0:	43 a7       	std	Z+43, r20	; 0x2b
    31a2:	54 a7       	std	Z+44, r21	; 0x2c
    31a4:	65 a7       	std	Z+45, r22	; 0x2d
    31a6:	76 a7       	std	Z+46, r23	; 0x2e
    31a8:	18 c0       	rjmp	.+48     	; 0x31da <xTaskGenericNotify+0x8e>
    31aa:	43 a5       	ldd	r20, Z+43	; 0x2b
    31ac:	54 a5       	ldd	r21, Z+44	; 0x2c
    31ae:	65 a5       	ldd	r22, Z+45	; 0x2d
    31b0:	76 a5       	ldd	r23, Z+46	; 0x2e
    31b2:	4f 5f       	subi	r20, 0xFF	; 255
    31b4:	5f 4f       	sbci	r21, 0xFF	; 255
    31b6:	6f 4f       	sbci	r22, 0xFF	; 255
    31b8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ba:	43 a7       	std	Z+43, r20	; 0x2b
    31bc:	54 a7       	std	Z+44, r21	; 0x2c
    31be:	65 a7       	std	Z+45, r22	; 0x2d
    31c0:	76 a7       	std	Z+46, r23	; 0x2e
    31c2:	0b c0       	rjmp	.+22     	; 0x31da <xTaskGenericNotify+0x8e>
    31c4:	43 a7       	std	Z+43, r20	; 0x2b
    31c6:	54 a7       	std	Z+44, r21	; 0x2c
    31c8:	65 a7       	std	Z+45, r22	; 0x2d
    31ca:	76 a7       	std	Z+46, r23	; 0x2e
    31cc:	06 c0       	rjmp	.+12     	; 0x31da <xTaskGenericNotify+0x8e>
    31ce:	82 30       	cpi	r24, 0x02	; 2
    31d0:	49 f1       	breq	.+82     	; 0x3224 <xTaskGenericNotify+0xd8>
    31d2:	43 a7       	std	Z+43, r20	; 0x2b
    31d4:	54 a7       	std	Z+44, r21	; 0x2c
    31d6:	65 a7       	std	Z+45, r22	; 0x2d
    31d8:	76 a7       	std	Z+46, r23	; 0x2e
    31da:	81 30       	cpi	r24, 0x01	; 1
    31dc:	29 f5       	brne	.+74     	; 0x3228 <xTaskGenericNotify+0xdc>
    31de:	ef 01       	movw	r28, r30
    31e0:	8f 01       	movw	r16, r30
    31e2:	0e 5f       	subi	r16, 0xFE	; 254
    31e4:	1f 4f       	sbci	r17, 0xFF	; 255
    31e6:	c8 01       	movw	r24, r16
    31e8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    31ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31ee:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    31f2:	98 17       	cp	r25, r24
    31f4:	10 f4       	brcc	.+4      	; 0x31fa <xTaskGenericNotify+0xae>
    31f6:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    31fa:	2b e0       	ldi	r18, 0x0B	; 11
    31fc:	82 9f       	mul	r24, r18
    31fe:	c0 01       	movw	r24, r0
    3200:	11 24       	eor	r1, r1
    3202:	b8 01       	movw	r22, r16
    3204:	82 55       	subi	r24, 0x52	; 82
    3206:	95 4e       	sbci	r25, 0xE5	; 229
    3208:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    320c:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3210:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    3214:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3216:	82 8d       	ldd	r24, Z+26	; 0x1a
    3218:	89 17       	cp	r24, r25
    321a:	40 f4       	brcc	.+16     	; 0x322c <xTaskGenericNotify+0xe0>
    321c:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	05 c0       	rjmp	.+10     	; 0x322e <xTaskGenericNotify+0xe2>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	03 c0       	rjmp	.+6      	; 0x322e <xTaskGenericNotify+0xe2>
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	01 c0       	rjmp	.+2      	; 0x322e <xTaskGenericNotify+0xe2>
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	0f 90       	pop	r0
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	08 95       	ret

0000323c <xTaskGenericNotifyFromISR>:
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	fc 01       	movw	r30, r24
    324a:	01 15       	cp	r16, r1
    324c:	11 05       	cpc	r17, r1
    324e:	49 f0       	breq	.+18     	; 0x3262 <xTaskGenericNotifyFromISR+0x26>
    3250:	83 a5       	ldd	r24, Z+43	; 0x2b
    3252:	94 a5       	ldd	r25, Z+44	; 0x2c
    3254:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3256:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3258:	e8 01       	movw	r28, r16
    325a:	88 83       	st	Y, r24
    325c:	99 83       	std	Y+1, r25	; 0x01
    325e:	aa 83       	std	Y+2, r26	; 0x02
    3260:	bb 83       	std	Y+3, r27	; 0x03
    3262:	87 a5       	ldd	r24, Z+47	; 0x2f
    3264:	92 e0       	ldi	r25, 0x02	; 2
    3266:	97 a7       	std	Z+47, r25	; 0x2f
    3268:	22 30       	cpi	r18, 0x02	; 2
    326a:	b1 f0       	breq	.+44     	; 0x3298 <xTaskGenericNotifyFromISR+0x5c>
    326c:	18 f4       	brcc	.+6      	; 0x3274 <xTaskGenericNotifyFromISR+0x38>
    326e:	21 30       	cpi	r18, 0x01	; 1
    3270:	31 f0       	breq	.+12     	; 0x327e <xTaskGenericNotifyFromISR+0x42>
    3272:	2a c0       	rjmp	.+84     	; 0x32c8 <xTaskGenericNotifyFromISR+0x8c>
    3274:	23 30       	cpi	r18, 0x03	; 3
    3276:	e9 f0       	breq	.+58     	; 0x32b2 <xTaskGenericNotifyFromISR+0x76>
    3278:	24 30       	cpi	r18, 0x04	; 4
    327a:	01 f1       	breq	.+64     	; 0x32bc <xTaskGenericNotifyFromISR+0x80>
    327c:	25 c0       	rjmp	.+74     	; 0x32c8 <xTaskGenericNotifyFromISR+0x8c>
    327e:	03 a5       	ldd	r16, Z+43	; 0x2b
    3280:	14 a5       	ldd	r17, Z+44	; 0x2c
    3282:	25 a5       	ldd	r18, Z+45	; 0x2d
    3284:	36 a5       	ldd	r19, Z+46	; 0x2e
    3286:	40 2b       	or	r20, r16
    3288:	51 2b       	or	r21, r17
    328a:	62 2b       	or	r22, r18
    328c:	73 2b       	or	r23, r19
    328e:	43 a7       	std	Z+43, r20	; 0x2b
    3290:	54 a7       	std	Z+44, r21	; 0x2c
    3292:	65 a7       	std	Z+45, r22	; 0x2d
    3294:	76 a7       	std	Z+46, r23	; 0x2e
    3296:	18 c0       	rjmp	.+48     	; 0x32c8 <xTaskGenericNotifyFromISR+0x8c>
    3298:	43 a5       	ldd	r20, Z+43	; 0x2b
    329a:	54 a5       	ldd	r21, Z+44	; 0x2c
    329c:	65 a5       	ldd	r22, Z+45	; 0x2d
    329e:	76 a5       	ldd	r23, Z+46	; 0x2e
    32a0:	4f 5f       	subi	r20, 0xFF	; 255
    32a2:	5f 4f       	sbci	r21, 0xFF	; 255
    32a4:	6f 4f       	sbci	r22, 0xFF	; 255
    32a6:	7f 4f       	sbci	r23, 0xFF	; 255
    32a8:	43 a7       	std	Z+43, r20	; 0x2b
    32aa:	54 a7       	std	Z+44, r21	; 0x2c
    32ac:	65 a7       	std	Z+45, r22	; 0x2d
    32ae:	76 a7       	std	Z+46, r23	; 0x2e
    32b0:	0b c0       	rjmp	.+22     	; 0x32c8 <xTaskGenericNotifyFromISR+0x8c>
    32b2:	43 a7       	std	Z+43, r20	; 0x2b
    32b4:	54 a7       	std	Z+44, r21	; 0x2c
    32b6:	65 a7       	std	Z+45, r22	; 0x2d
    32b8:	76 a7       	std	Z+46, r23	; 0x2e
    32ba:	06 c0       	rjmp	.+12     	; 0x32c8 <xTaskGenericNotifyFromISR+0x8c>
    32bc:	82 30       	cpi	r24, 0x02	; 2
    32be:	d9 f1       	breq	.+118    	; 0x3336 <xTaskGenericNotifyFromISR+0xfa>
    32c0:	43 a7       	std	Z+43, r20	; 0x2b
    32c2:	54 a7       	std	Z+44, r21	; 0x2c
    32c4:	65 a7       	std	Z+45, r22	; 0x2d
    32c6:	76 a7       	std	Z+46, r23	; 0x2e
    32c8:	81 30       	cpi	r24, 0x01	; 1
    32ca:	b9 f5       	brne	.+110    	; 0x333a <xTaskGenericNotifyFromISR+0xfe>
    32cc:	ef 01       	movw	r28, r30
    32ce:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <uxSchedulerSuspended>
    32d2:	81 11       	cpse	r24, r1
    32d4:	17 c0       	rjmp	.+46     	; 0x3304 <xTaskGenericNotifyFromISR+0xc8>
    32d6:	8f 01       	movw	r16, r30
    32d8:	0e 5f       	subi	r16, 0xFE	; 254
    32da:	1f 4f       	sbci	r17, 0xFF	; 255
    32dc:	c8 01       	movw	r24, r16
    32de:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
    32e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32e4:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <uxTopReadyPriority>
    32e8:	98 17       	cp	r25, r24
    32ea:	10 f4       	brcc	.+4      	; 0x32f0 <xTaskGenericNotifyFromISR+0xb4>
    32ec:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTopReadyPriority>
    32f0:	eb e0       	ldi	r30, 0x0B	; 11
    32f2:	8e 9f       	mul	r24, r30
    32f4:	c0 01       	movw	r24, r0
    32f6:	11 24       	eor	r1, r1
    32f8:	b8 01       	movw	r22, r16
    32fa:	82 55       	subi	r24, 0x52	; 82
    32fc:	95 4e       	sbci	r25, 0xE5	; 229
    32fe:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    3302:	07 c0       	rjmp	.+14     	; 0x3312 <xTaskGenericNotifyFromISR+0xd6>
    3304:	bf 01       	movw	r22, r30
    3306:	62 5f       	subi	r22, 0xF2	; 242
    3308:	7f 4f       	sbci	r23, 0xFF	; 255
    330a:	89 e8       	ldi	r24, 0x89	; 137
    330c:	9a e1       	ldi	r25, 0x1A	; 26
    330e:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsertEnd>
    3312:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3316:	f0 91 db 1a 	lds	r31, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>
    331a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    331c:	82 8d       	ldd	r24, Z+26	; 0x1a
    331e:	89 17       	cp	r24, r25
    3320:	70 f4       	brcc	.+28     	; 0x333e <xTaskGenericNotifyFromISR+0x102>
    3322:	e1 14       	cp	r14, r1
    3324:	f1 04       	cpc	r15, r1
    3326:	19 f0       	breq	.+6      	; 0x332e <xTaskGenericNotifyFromISR+0xf2>
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	e7 01       	movw	r28, r14
    332c:	88 83       	st	Y, r24
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <xYieldPending>
    3334:	05 c0       	rjmp	.+10     	; 0x3340 <xTaskGenericNotifyFromISR+0x104>
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	03 c0       	rjmp	.+6      	; 0x3340 <xTaskGenericNotifyFromISR+0x104>
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	01 c0       	rjmp	.+2      	; 0x3340 <xTaskGenericNotifyFromISR+0x104>
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	df 91       	pop	r29
    3342:	cf 91       	pop	r28
    3344:	1f 91       	pop	r17
    3346:	0f 91       	pop	r16
    3348:	ff 90       	pop	r15
    334a:	ef 90       	pop	r14
    334c:	08 95       	ret

0000334e <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	21 f4       	brne	.+8      	; 0x335a <xTaskNotifyStateClear+0xc>
    3352:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxCurrentTCB>
    3356:	90 91 db 1a 	lds	r25, 0x1ADB	; 0x801adb <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3360:	fc 01       	movw	r30, r24
    3362:	27 a5       	ldd	r18, Z+47	; 0x2f
    3364:	22 30       	cpi	r18, 0x02	; 2
    3366:	19 f4       	brne	.+6      	; 0x336e <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3368:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	01 c0       	rjmp	.+2      	; 0x3370 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    336e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3370:	0f 90       	pop	r0
    3372:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3374:	08 95       	ret

00003376 <prvInsertTimerInActiveList>:
    3376:	cf 92       	push	r12
    3378:	df 92       	push	r13
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	fc 01       	movw	r30, r24
    3384:	42 83       	std	Z+2, r20	; 0x02
    3386:	53 83       	std	Z+3, r21	; 0x03
    3388:	64 83       	std	Z+4, r22	; 0x04
    338a:	75 83       	std	Z+5, r23	; 0x05
    338c:	93 87       	std	Z+11, r25	; 0x0b
    338e:	82 87       	std	Z+10, r24	; 0x0a
    3390:	04 17       	cp	r16, r20
    3392:	15 07       	cpc	r17, r21
    3394:	26 07       	cpc	r18, r22
    3396:	37 07       	cpc	r19, r23
    3398:	c0 f0       	brcs	.+48     	; 0x33ca <prvInsertTimerInActiveList+0x54>
    339a:	0c 19       	sub	r16, r12
    339c:	1d 09       	sbc	r17, r13
    339e:	2e 09       	sbc	r18, r14
    33a0:	3f 09       	sbc	r19, r15
    33a2:	86 85       	ldd	r24, Z+14	; 0x0e
    33a4:	97 85       	ldd	r25, Z+15	; 0x0f
    33a6:	a0 89       	ldd	r26, Z+16	; 0x10
    33a8:	b1 89       	ldd	r27, Z+17	; 0x11
    33aa:	08 17       	cp	r16, r24
    33ac:	19 07       	cpc	r17, r25
    33ae:	2a 07       	cpc	r18, r26
    33b0:	3b 07       	cpc	r19, r27
    33b2:	00 f5       	brcc	.+64     	; 0x33f4 <prvInsertTimerInActiveList+0x7e>
    33b4:	bf 01       	movw	r22, r30
    33b6:	6e 5f       	subi	r22, 0xFE	; 254
    33b8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ba:	80 91 e4 1a 	lds	r24, 0x1AE4	; 0x801ae4 <pxOverflowTimerList>
    33be:	90 91 e5 1a 	lds	r25, 0x1AE5	; 0x801ae5 <pxOverflowTimerList+0x1>
    33c2:	0e 94 a8 08 	call	0x1150	; 0x1150 <vListInsert>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	18 c0       	rjmp	.+48     	; 0x33fa <prvInsertTimerInActiveList+0x84>
    33ca:	0c 15       	cp	r16, r12
    33cc:	1d 05       	cpc	r17, r13
    33ce:	2e 05       	cpc	r18, r14
    33d0:	3f 05       	cpc	r19, r15
    33d2:	28 f4       	brcc	.+10     	; 0x33de <prvInsertTimerInActiveList+0x68>
    33d4:	4c 15       	cp	r20, r12
    33d6:	5d 05       	cpc	r21, r13
    33d8:	6e 05       	cpc	r22, r14
    33da:	7f 05       	cpc	r23, r15
    33dc:	68 f4       	brcc	.+26     	; 0x33f8 <prvInsertTimerInActiveList+0x82>
    33de:	bf 01       	movw	r22, r30
    33e0:	6e 5f       	subi	r22, 0xFE	; 254
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	80 91 e6 1a 	lds	r24, 0x1AE6	; 0x801ae6 <pxCurrentTimerList>
    33e8:	90 91 e7 1a 	lds	r25, 0x1AE7	; 0x801ae7 <pxCurrentTimerList+0x1>
    33ec:	0e 94 a8 08 	call	0x1150	; 0x1150 <vListInsert>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	03 c0       	rjmp	.+6      	; 0x33fa <prvInsertTimerInActiveList+0x84>
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <prvInsertTimerInActiveList+0x84>
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	1f 91       	pop	r17
    33fc:	0f 91       	pop	r16
    33fe:	ff 90       	pop	r15
    3400:	ef 90       	pop	r14
    3402:	df 90       	pop	r13
    3404:	cf 90       	pop	r12
    3406:	08 95       	ret

00003408 <prvCheckForValidListAndQueue>:
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	0f 92       	push	r0
    340e:	80 91 e2 1a 	lds	r24, 0x1AE2	; 0x801ae2 <xTimerQueue>
    3412:	90 91 e3 1a 	lds	r25, 0x1AE3	; 0x801ae3 <xTimerQueue+0x1>
    3416:	89 2b       	or	r24, r25
    3418:	e9 f4       	brne	.+58     	; 0x3454 <prvCheckForValidListAndQueue+0x4c>
    341a:	83 ef       	ldi	r24, 0xF3	; 243
    341c:	9a e1       	ldi	r25, 0x1A	; 26
    341e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    3422:	88 ee       	ldi	r24, 0xE8	; 232
    3424:	9a e1       	ldi	r25, 0x1A	; 26
    3426:	0e 94 72 08 	call	0x10e4	; 0x10e4 <vListInitialise>
    342a:	83 ef       	ldi	r24, 0xF3	; 243
    342c:	9a e1       	ldi	r25, 0x1A	; 26
    342e:	90 93 e7 1a 	sts	0x1AE7, r25	; 0x801ae7 <pxCurrentTimerList+0x1>
    3432:	80 93 e6 1a 	sts	0x1AE6, r24	; 0x801ae6 <pxCurrentTimerList>
    3436:	88 ee       	ldi	r24, 0xE8	; 232
    3438:	9a e1       	ldi	r25, 0x1A	; 26
    343a:	90 93 e5 1a 	sts	0x1AE5, r25	; 0x801ae5 <pxOverflowTimerList+0x1>
    343e:	80 93 e4 1a 	sts	0x1AE4, r24	; 0x801ae4 <pxOverflowTimerList>
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	67 e0       	ldi	r22, 0x07	; 7
    3446:	8a e0       	ldi	r24, 0x0A	; 10
    3448:	0e 94 96 0b 	call	0x172c	; 0x172c <xQueueGenericCreate>
    344c:	90 93 e3 1a 	sts	0x1AE3, r25	; 0x801ae3 <xTimerQueue+0x1>
    3450:	80 93 e2 1a 	sts	0x1AE2, r24	; 0x801ae2 <xTimerQueue>
    3454:	0f 90       	pop	r0
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	08 95       	ret

0000345a <xTimerCreateTimerTask>:
    345a:	ef 92       	push	r14
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	d3 df       	rcall	.-90     	; 0x3408 <prvCheckForValidListAndQueue>
    3462:	80 91 e2 1a 	lds	r24, 0x1AE2	; 0x801ae2 <xTimerQueue>
    3466:	90 91 e3 1a 	lds	r25, 0x1AE3	; 0x801ae3 <xTimerQueue+0x1>
    346a:	89 2b       	or	r24, r25
    346c:	91 f0       	breq	.+36     	; 0x3492 <xTimerCreateTimerTask+0x38>
    346e:	0f 2e       	mov	r0, r31
    3470:	f0 ee       	ldi	r31, 0xE0	; 224
    3472:	ef 2e       	mov	r14, r31
    3474:	fa e1       	ldi	r31, 0x1A	; 26
    3476:	ff 2e       	mov	r15, r31
    3478:	f0 2d       	mov	r31, r0
    347a:	03 e0       	ldi	r16, 0x03	; 3
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	45 e5       	ldi	r20, 0x55	; 85
    3482:	50 e0       	ldi	r21, 0x00	; 0
    3484:	63 e1       	ldi	r22, 0x13	; 19
    3486:	77 e0       	ldi	r23, 0x07	; 7
    3488:	84 e0       	ldi	r24, 0x04	; 4
    348a:	91 e0       	ldi	r25, 0x01	; 1
    348c:	0e 94 bf 11 	call	0x237e	; 0x237e <xTaskCreate>
    3490:	01 c0       	rjmp	.+2      	; 0x3494 <xTimerCreateTimerTask+0x3a>
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	08 95       	ret

0000349c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    349c:	8f 92       	push	r8
    349e:	9f 92       	push	r9
    34a0:	af 92       	push	r10
    34a2:	bf 92       	push	r11
    34a4:	cf 92       	push	r12
    34a6:	df 92       	push	r13
    34a8:	ef 92       	push	r14
    34aa:	ff 92       	push	r15
    34ac:	0f 93       	push	r16
    34ae:	1f 93       	push	r17
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	27 97       	sbiw	r28, 0x07	; 7
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    34c4:	e0 91 e2 1a 	lds	r30, 0x1AE2	; 0x801ae2 <xTimerQueue>
    34c8:	f0 91 e3 1a 	lds	r31, 0x1AE3	; 0x801ae3 <xTimerQueue+0x1>
    34cc:	30 97       	sbiw	r30, 0x00	; 0
    34ce:	81 f1       	breq	.+96     	; 0x3530 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    34d0:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    34d2:	2a 83       	std	Y+2, r18	; 0x02
    34d4:	3b 83       	std	Y+3, r19	; 0x03
    34d6:	4c 83       	std	Y+4, r20	; 0x04
    34d8:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    34da:	9f 83       	std	Y+7, r25	; 0x07
    34dc:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    34de:	66 30       	cpi	r22, 0x06	; 6
    34e0:	f4 f4       	brge	.+60     	; 0x351e <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    34e2:	68 dc       	rcall	.-1840   	; 0x2db4 <xTaskGetSchedulerState>
    34e4:	82 30       	cpi	r24, 0x02	; 2
    34e6:	69 f4       	brne	.+26     	; 0x3502 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    34e8:	00 e0       	ldi	r16, 0x00	; 0
    34ea:	a7 01       	movw	r20, r14
    34ec:	96 01       	movw	r18, r12
    34ee:	be 01       	movw	r22, r28
    34f0:	6f 5f       	subi	r22, 0xFF	; 255
    34f2:	7f 4f       	sbci	r23, 0xFF	; 255
    34f4:	80 91 e2 1a 	lds	r24, 0x1AE2	; 0x801ae2 <xTimerQueue>
    34f8:	90 91 e3 1a 	lds	r25, 0x1AE3	; 0x801ae3 <xTimerQueue+0x1>
    34fc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xQueueGenericSend>
    3500:	18 c0       	rjmp	.+48     	; 0x3532 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3502:	00 e0       	ldi	r16, 0x00	; 0
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	a9 01       	movw	r20, r18
    350a:	be 01       	movw	r22, r28
    350c:	6f 5f       	subi	r22, 0xFF	; 255
    350e:	7f 4f       	sbci	r23, 0xFF	; 255
    3510:	80 91 e2 1a 	lds	r24, 0x1AE2	; 0x801ae2 <xTimerQueue>
    3514:	90 91 e3 1a 	lds	r25, 0x1AE3	; 0x801ae3 <xTimerQueue+0x1>
    3518:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xQueueGenericSend>
    351c:	0a c0       	rjmp	.+20     	; 0x3532 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	a8 01       	movw	r20, r16
    3522:	be 01       	movw	r22, r28
    3524:	6f 5f       	subi	r22, 0xFF	; 255
    3526:	7f 4f       	sbci	r23, 0xFF	; 255
    3528:	cf 01       	movw	r24, r30
    352a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <xQueueGenericSendFromISR>
    352e:	01 c0       	rjmp	.+2      	; 0x3532 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3530:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3532:	27 96       	adiw	r28, 0x07	; 7
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	1f 91       	pop	r17
    3544:	0f 91       	pop	r16
    3546:	ff 90       	pop	r15
    3548:	ef 90       	pop	r14
    354a:	df 90       	pop	r13
    354c:	cf 90       	pop	r12
    354e:	bf 90       	pop	r11
    3550:	af 90       	pop	r10
    3552:	9f 90       	pop	r9
    3554:	8f 90       	pop	r8
    3556:	08 95       	ret

00003558 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3558:	2f 92       	push	r2
    355a:	3f 92       	push	r3
    355c:	4f 92       	push	r4
    355e:	5f 92       	push	r5
    3560:	6f 92       	push	r6
    3562:	7f 92       	push	r7
    3564:	8f 92       	push	r8
    3566:	9f 92       	push	r9
    3568:	af 92       	push	r10
    356a:	bf 92       	push	r11
    356c:	cf 92       	push	r12
    356e:	df 92       	push	r13
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    357e:	60 d8       	rcall	.-3904   	; 0x2640 <xTaskGetTickCount>
    3580:	2b 01       	movw	r4, r22
    3582:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3584:	80 91 dc 1a 	lds	r24, 0x1ADC	; 0x801adc <xLastTime.2432>
    3588:	90 91 dd 1a 	lds	r25, 0x1ADD	; 0x801add <xLastTime.2432+0x1>
    358c:	a0 91 de 1a 	lds	r26, 0x1ADE	; 0x801ade <xLastTime.2432+0x2>
    3590:	b0 91 df 1a 	lds	r27, 0x1ADF	; 0x801adf <xLastTime.2432+0x3>
    3594:	48 16       	cp	r4, r24
    3596:	59 06       	cpc	r5, r25
    3598:	6a 06       	cpc	r6, r26
    359a:	7b 06       	cpc	r7, r27
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <prvSampleTimeNow+0x48>
    359e:	53 c0       	rjmp	.+166    	; 0x3646 <prvSampleTimeNow+0xee>
    35a0:	3b c0       	rjmp	.+118    	; 0x3618 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    35a2:	07 80       	ldd	r0, Z+7	; 0x07
    35a4:	f0 85       	ldd	r31, Z+8	; 0x08
    35a6:	e0 2d       	mov	r30, r0
    35a8:	80 80       	ld	r8, Z
    35aa:	91 80       	ldd	r9, Z+1	; 0x01
    35ac:	a2 80       	ldd	r10, Z+2	; 0x02
    35ae:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    35b0:	c0 85       	ldd	r28, Z+8	; 0x08
    35b2:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    35b4:	8e 01       	movw	r16, r28
    35b6:	0e 5f       	subi	r16, 0xFE	; 254
    35b8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ba:	c8 01       	movw	r24, r16
    35bc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    35c0:	ec 89       	ldd	r30, Y+20	; 0x14
    35c2:	fd 89       	ldd	r31, Y+21	; 0x15
    35c4:	ce 01       	movw	r24, r28
    35c6:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35c8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ca:	82 ff       	sbrs	r24, 2
    35cc:	25 c0       	rjmp	.+74     	; 0x3618 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    35ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    35d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    35d2:	a8 89       	ldd	r26, Y+16	; 0x10
    35d4:	b9 89       	ldd	r27, Y+17	; 0x11
    35d6:	88 0d       	add	r24, r8
    35d8:	99 1d       	adc	r25, r9
    35da:	aa 1d       	adc	r26, r10
    35dc:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    35de:	88 16       	cp	r8, r24
    35e0:	99 06       	cpc	r9, r25
    35e2:	aa 06       	cpc	r10, r26
    35e4:	bb 06       	cpc	r11, r27
    35e6:	70 f4       	brcc	.+28     	; 0x3604 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    35e8:	8a 83       	std	Y+2, r24	; 0x02
    35ea:	9b 83       	std	Y+3, r25	; 0x03
    35ec:	ac 83       	std	Y+4, r26	; 0x04
    35ee:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    35f0:	db 87       	std	Y+11, r29	; 0x0b
    35f2:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    35f4:	b8 01       	movw	r22, r16
    35f6:	80 91 e6 1a 	lds	r24, 0x1AE6	; 0x801ae6 <pxCurrentTimerList>
    35fa:	90 91 e7 1a 	lds	r25, 0x1AE7	; 0x801ae7 <pxCurrentTimerList+0x1>
    35fe:	0e 94 a8 08 	call	0x1150	; 0x1150 <vListInsert>
    3602:	0a c0       	rjmp	.+20     	; 0x3618 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3604:	c1 2c       	mov	r12, r1
    3606:	d1 2c       	mov	r13, r1
    3608:	76 01       	movw	r14, r12
    360a:	00 e0       	ldi	r16, 0x00	; 0
    360c:	10 e0       	ldi	r17, 0x00	; 0
    360e:	a5 01       	movw	r20, r10
    3610:	94 01       	movw	r18, r8
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	ce 01       	movw	r24, r28
    3616:	42 df       	rcall	.-380    	; 0x349c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3618:	e0 91 e6 1a 	lds	r30, 0x1AE6	; 0x801ae6 <pxCurrentTimerList>
    361c:	f0 91 e7 1a 	lds	r31, 0x1AE7	; 0x801ae7 <pxCurrentTimerList+0x1>
    3620:	80 81       	ld	r24, Z
    3622:	81 11       	cpse	r24, r1
    3624:	be cf       	rjmp	.-132    	; 0x35a2 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3626:	80 91 e4 1a 	lds	r24, 0x1AE4	; 0x801ae4 <pxOverflowTimerList>
    362a:	90 91 e5 1a 	lds	r25, 0x1AE5	; 0x801ae5 <pxOverflowTimerList+0x1>
    362e:	90 93 e7 1a 	sts	0x1AE7, r25	; 0x801ae7 <pxCurrentTimerList+0x1>
    3632:	80 93 e6 1a 	sts	0x1AE6, r24	; 0x801ae6 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3636:	f0 93 e5 1a 	sts	0x1AE5, r31	; 0x801ae5 <pxOverflowTimerList+0x1>
    363a:	e0 93 e4 1a 	sts	0x1AE4, r30	; 0x801ae4 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	f1 01       	movw	r30, r2
    3642:	80 83       	st	Z, r24
    3644:	02 c0       	rjmp	.+4      	; 0x364a <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3646:	f1 01       	movw	r30, r2
    3648:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    364a:	40 92 dc 1a 	sts	0x1ADC, r4	; 0x801adc <xLastTime.2432>
    364e:	50 92 dd 1a 	sts	0x1ADD, r5	; 0x801add <xLastTime.2432+0x1>
    3652:	60 92 de 1a 	sts	0x1ADE, r6	; 0x801ade <xLastTime.2432+0x2>
    3656:	70 92 df 1a 	sts	0x1ADF, r7	; 0x801adf <xLastTime.2432+0x3>

    return xTimeNow;
}
    365a:	c3 01       	movw	r24, r6
    365c:	b2 01       	movw	r22, r4
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	1f 91       	pop	r17
    3664:	0f 91       	pop	r16
    3666:	ff 90       	pop	r15
    3668:	ef 90       	pop	r14
    366a:	df 90       	pop	r13
    366c:	cf 90       	pop	r12
    366e:	bf 90       	pop	r11
    3670:	af 90       	pop	r10
    3672:	9f 90       	pop	r9
    3674:	8f 90       	pop	r8
    3676:	7f 90       	pop	r7
    3678:	6f 90       	pop	r6
    367a:	5f 90       	pop	r5
    367c:	4f 90       	pop	r4
    367e:	3f 90       	pop	r3
    3680:	2f 90       	pop	r2
    3682:	08 95       	ret

00003684 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3684:	08 95       	ret

00003686 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3686:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3688:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    368a:	2f ef       	ldi	r18, 0xFF	; 255
    368c:	80 e7       	ldi	r24, 0x70	; 112
    368e:	92 e0       	ldi	r25, 0x02	; 2
    3690:	21 50       	subi	r18, 0x01	; 1
    3692:	80 40       	sbci	r24, 0x00	; 0
    3694:	90 40       	sbci	r25, 0x00	; 0
    3696:	e1 f7       	brne	.-8      	; 0x3690 <vApplicationMallocFailedHook+0xa>
    3698:	00 c0       	rjmp	.+0      	; 0x369a <vApplicationMallocFailedHook+0x14>
    369a:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    369c:	1f 9a       	sbi	0x03, 7	; 3
    369e:	f5 cf       	rjmp	.-22     	; 0x368a <vApplicationMallocFailedHook+0x4>

000036a0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    36a0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    36a2:	2f 9a       	sbi	0x05, 7	; 5
    36a4:	2f ef       	ldi	r18, 0xFF	; 255
    36a6:	87 ea       	ldi	r24, 0xA7	; 167
    36a8:	91 e6       	ldi	r25, 0x61	; 97
    36aa:	21 50       	subi	r18, 0x01	; 1
    36ac:	80 40       	sbci	r24, 0x00	; 0
    36ae:	90 40       	sbci	r25, 0x00	; 0
    36b0:	e1 f7       	brne	.-8      	; 0x36aa <vApplicationStackOverflowHook+0xa>
    36b2:	00 c0       	rjmp	.+0      	; 0x36b4 <vApplicationStackOverflowHook+0x14>
    36b4:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    36b6:	1f 9a       	sbi	0x03, 7	; 3
    36b8:	f5 cf       	rjmp	.-22     	; 0x36a4 <vApplicationStackOverflowHook+0x4>

000036ba <task1>:
	, NULL);
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
    36be:	00 d0       	rcall	.+0      	; 0x36c0 <task1+0x6>
    36c0:	1f 92       	push	r1
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    36c6:	61 e0       	ldi	r22, 0x01	; 1
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	8e d9       	rcall	.-3300   	; 0x29ec <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    36d0:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskGetTickCount>
    36d4:	69 83       	std	Y+1, r22	; 0x01
    36d6:	7a 83       	std	Y+2, r23	; 0x02
    36d8:	8b 83       	std	Y+3, r24	; 0x03
    36da:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    36dc:	11 e0       	ldi	r17, 0x01	; 1
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    36de:	4f e1       	ldi	r20, 0x1F	; 31
    36e0:	50 e0       	ldi	r21, 0x00	; 0
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	ce 01       	movw	r24, r28
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	09 d9       	rcall	.-3566   	; 0x28fe <vTaskDelayUntil>
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    36ec:	82 b1       	in	r24, 0x02	; 2
    36ee:	81 27       	eor	r24, r17
    36f0:	82 b9       	out	0x02, r24	; 2
    36f2:	f5 cf       	rjmp	.-22     	; 0x36de <task1+0x24>

000036f4 <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	00 d0       	rcall	.+0      	; 0x36fa <task2+0x6>
    36fa:	1f 92       	push	r1
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    3700:	62 e0       	ldi	r22, 0x02	; 2
    3702:	70 e0       	ldi	r23, 0x00	; 0
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	71 d9       	rcall	.-3358   	; 0x29ec <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    370a:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskGetTickCount>
    370e:	69 83       	std	Y+1, r22	; 0x01
    3710:	7a 83       	std	Y+2, r23	; 0x02
    3712:	8b 83       	std	Y+3, r24	; 0x03
    3714:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    3716:	4e e3       	ldi	r20, 0x3E	; 62
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	70 e0       	ldi	r23, 0x00	; 0
    371e:	ce 01       	movw	r24, r28
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	ed d8       	rcall	.-3622   	; 0x28fe <vTaskDelayUntil>
		//puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA7);
    3724:	82 b1       	in	r24, 0x02	; 2
    3726:	80 58       	subi	r24, 0x80	; 128
    3728:	82 b9       	out	0x02, r24	; 2
    372a:	f5 cf       	rjmp	.-22     	; 0x3716 <task2+0x22>

0000372c <create_tasks_and_semaphores>:
/*-----------------------------------------------------------*/



void create_tasks_and_semaphores(void)
{
    372c:	8f 92       	push	r8
    372e:	9f 92       	push	r9
    3730:	af 92       	push	r10
    3732:	bf 92       	push	r11
    3734:	cf 92       	push	r12
    3736:	df 92       	push	r13
    3738:	ef 92       	push	r14
    373a:	ff 92       	push	r15
    373c:	0f 93       	push	r16
    373e:	1f 93       	push	r17
    3740:	cf 93       	push	r28
    3742:	df 93       	push	r29
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	28 97       	sbiw	r28, 0x08	; 8
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3754:	80 91 5c 1c 	lds	r24, 0x1C5C	; 0x801c5c <xTestSemaphore>
    3758:	90 91 5d 1c 	lds	r25, 0x1C5D	; 0x801c5d <xTestSemaphore+0x1>
    375c:	89 2b       	or	r24, r25
    375e:	89 f4       	brne	.+34     	; 0x3782 <create_tasks_and_semaphores+0x56>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <xQueueCreateMutex>
    3766:	90 93 5d 1c 	sts	0x1C5D, r25	; 0x801c5d <xTestSemaphore+0x1>
    376a:	80 93 5c 1c 	sts	0x1C5C, r24	; 0x801c5c <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    376e:	00 97       	sbiw	r24, 0x00	; 0
    3770:	41 f0       	breq	.+16     	; 0x3782 <create_tasks_and_semaphores+0x56>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3772:	00 e0       	ldi	r16, 0x00	; 0
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	a9 01       	movw	r20, r18
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    3782:	e1 2c       	mov	r14, r1
    3784:	f1 2c       	mov	r15, r1
    3786:	02 e0       	ldi	r16, 0x02	; 2
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	40 ec       	ldi	r20, 0xC0	; 192
    378e:	50 e0       	ldi	r21, 0x00	; 0
    3790:	6b e1       	ldi	r22, 0x1B	; 27
    3792:	77 e0       	ldi	r23, 0x07	; 7
    3794:	8d e5       	ldi	r24, 0x5D	; 93
    3796:	9b e1       	ldi	r25, 0x1B	; 27
    3798:	0e 94 bf 11 	call	0x237e	; 0x237e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    379c:	01 e0       	ldi	r16, 0x01	; 1
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 ec       	ldi	r20, 0xC0	; 192
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	61 e2       	ldi	r22, 0x21	; 33
    37a8:	77 e0       	ldi	r23, 0x07	; 7
    37aa:	8a e7       	ldi	r24, 0x7A	; 122
    37ac:	9b e1       	ldi	r25, 0x1B	; 27
    37ae:	0e 94 bf 11 	call	0x237e	; 0x237e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	CO2_t CO2Sensor = createCO2();
    37b2:	0e 94 b6 03 	call	0x76c	; 0x76c <createCO2>
    37b6:	8c 01       	movw	r16, r24
	Temp_Hum_t TempHumSensor = createTempHumid();
    37b8:	0e 94 de 04 	call	0x9bc	; 0x9bc <createTempHumid>
    37bc:	4c 01       	movw	r8, r24
	Sound_t soundSensor = createSound();
    37be:	0e 94 d7 04 	call	0x9ae	; 0x9ae <createSound>
	EventGroupHandle_t measureEventGroup = xEventGroupCreate();
    37c2:	0e 94 b2 05 	call	0xb64	; 0xb64 <xEventGroupCreate>
    37c6:	5c 01       	movw	r10, r24
	EventGroupHandle_t dataReadyEventGroup = xEventGroupCreate();
    37c8:	0e 94 b2 05 	call	0xb64	; 0xb64 <xEventGroupCreate>
    37cc:	6c 01       	movw	r12, r24
	
	void* pvParameters[4];
	
	pvParameters[0] = CO2Sensor;
    37ce:	1a 83       	std	Y+2, r17	; 0x02
    37d0:	09 83       	std	Y+1, r16	; 0x01
	pvParameters[1] = measureEventGroup;
    37d2:	bc 82       	std	Y+4, r11	; 0x04
    37d4:	ab 82       	std	Y+3, r10	; 0x03
	pvParameters[2] = dataReadyEventGroup;
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
	
	xTaskCreate(
    37da:	03 e0       	ldi	r16, 0x03	; 3
    37dc:	9e 01       	movw	r18, r28
    37de:	2f 5f       	subi	r18, 0xFF	; 255
    37e0:	3f 4f       	sbci	r19, 0xFF	; 255
    37e2:	40 ec       	ldi	r20, 0xC0	; 192
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	67 e2       	ldi	r22, 0x27	; 39
    37e8:	77 e0       	ldi	r23, 0x07	; 7
    37ea:	8a ed       	ldi	r24, 0xDA	; 218
    37ec:	93 e0       	ldi	r25, 0x03	; 3
    37ee:	0e 94 bf 11 	call	0x237e	; 0x237e <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, pvParameters
	, 3
	, NULL);
	
	pvParameters[0] = TempHumSensor;
    37f2:	9a 82       	std	Y+2, r9	; 0x02
    37f4:	89 82       	std	Y+1, r8	; 0x01
	pvParameters[1] = measureEventGroup;
    37f6:	bc 82       	std	Y+4, r11	; 0x04
    37f8:	ab 82       	std	Y+3, r10	; 0x03
	pvParameters[2] = dataReadyEventGroup;
    37fa:	de 82       	std	Y+6, r13	; 0x06
    37fc:	cd 82       	std	Y+5, r12	; 0x05
	
	xTaskCreate(
    37fe:	9e 01       	movw	r18, r28
    3800:	2f 5f       	subi	r18, 0xFF	; 255
    3802:	3f 4f       	sbci	r19, 0xFF	; 255
    3804:	40 ec       	ldi	r20, 0xC0	; 192
    3806:	50 e0       	ldi	r21, 0x00	; 0
    3808:	62 e3       	ldi	r22, 0x32	; 50
    380a:	77 e0       	ldi	r23, 0x07	; 7
    380c:	8f e5       	ldi	r24, 0x5F	; 95
    380e:	95 e0       	ldi	r25, 0x05	; 5
    3810:	0e 94 bf 11 	call	0x237e	; 0x237e <xTaskCreate>
	, "TH sensor"
	, configMINIMAL_STACK_SIZE
	, pvParameters
	, 3
	, NULL);
}
    3814:	28 96       	adiw	r28, 0x08	; 8
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	ff 90       	pop	r15
    382a:	ef 90       	pop	r14
    382c:	df 90       	pop	r13
    382e:	cf 90       	pop	r12
    3830:	bf 90       	pop	r11
    3832:	af 90       	pop	r10
    3834:	9f 90       	pop	r9
    3836:	8f 90       	pop	r8
    3838:	08 95       	ret

0000383a <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	
	mh_z19_create(ser_USART3, &my_co2_call_back);
    383a:	61 eb       	ldi	r22, 0xB1	; 177
    383c:	73 e0       	ldi	r23, 0x03	; 3
    383e:	83 e0       	ldi	r24, 0x03	; 3
    3840:	c2 d7       	rcall	.+3972   	; 0x47c6 <mh_z19_create>
	
	if ( HIH8120_OK != hih8120Create() )
    3842:	81 d0       	rcall	.+258    	; 0x3946 <hih8120Create>
    3844:	88 23       	and	r24, r24
    3846:	29 f0       	breq	.+10     	; 0x3852 <initialiseSystem+0x18>
    3848:	8c e3       	ldi	r24, 0x3C	; 60
	{
		puts("driver not created OK");
    384a:	97 e0       	ldi	r25, 0x07	; 7
    384c:	0c 94 96 2d 	jmp	0x5b2c	; 0x5b2c <puts>
    3850:	08 95       	ret
		return 1;
    3852:	81 b1       	in	r24, 0x01	; 1
	}
	
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3854:	81 68       	ori	r24, 0x81	; 129
    3856:	81 b9       	out	0x01, r24	; 1
    3858:	0e 94 9c 05 	call	0xb38	; 0xb38 <trace_init>
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    385c:	80 e0       	ldi	r24, 0x00	; 0
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    385e:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <stdioCreate>
	// Let's create some tasks
	create_tasks_and_semaphores();
    3862:	64 df       	rcall	.-312    	; 0x372c <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3864:	85 e0       	ldi	r24, 0x05	; 5
    3866:	10 d0       	rcall	.+32     	; 0x3888 <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	ae d3       	rcall	.+1884   	; 0x3fcc <lora_driver_create>
    3870:	83 e0       	ldi	r24, 0x03	; 3
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    3872:	0c 94 9d 03 	jmp	0x73a	; 0x73a <lora_handler_create>
    3876:	08 95       	ret

00003878 <main>:
    3878:	e0 df       	rcall	.-64     	; 0x383a <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	
	printf("Program Started!!\n");
    387a:	82 e5       	ldi	r24, 0x52	; 82
    387c:	97 e0       	ldi	r25, 0x07	; 7
    387e:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3882:	0e 94 de 12 	call	0x25bc	; 0x25bc <vTaskStartScheduler>
    3886:	ff cf       	rjmp	.-2      	; 0x3886 <main+0xe>

00003888 <hal_create>:
    3888:	ee e5       	ldi	r30, 0x5E	; 94
    388a:	fc e1       	ldi	r31, 0x1C	; 28
    388c:	2b e3       	ldi	r18, 0x3B	; 59
    388e:	33 e2       	ldi	r19, 0x23	; 35
    3890:	31 83       	std	Z+1, r19	; 0x01
    3892:	20 83       	st	Z, r18
    3894:	2e e3       	ldi	r18, 0x3E	; 62
    3896:	33 e2       	ldi	r19, 0x23	; 35
    3898:	33 83       	std	Z+3, r19	; 0x03
    389a:	22 83       	std	Z+2, r18	; 0x02
    389c:	29 e4       	ldi	r18, 0x49	; 73
    389e:	33 e2       	ldi	r19, 0x23	; 35
    38a0:	35 83       	std	Z+5, r19	; 0x05
    38a2:	24 83       	std	Z+4, r18	; 0x04
    38a4:	2d e4       	ldi	r18, 0x4D	; 77
    38a6:	33 e2       	ldi	r19, 0x23	; 35
    38a8:	37 83       	std	Z+7, r19	; 0x07
    38aa:	26 83       	std	Z+6, r18	; 0x06
    38ac:	23 e5       	ldi	r18, 0x53	; 83
    38ae:	33 e2       	ldi	r19, 0x23	; 35
    38b0:	31 87       	std	Z+9, r19	; 0x09
    38b2:	20 87       	std	Z+8, r18	; 0x08
    38b4:	2f e5       	ldi	r18, 0x5F	; 95
    38b6:	33 e2       	ldi	r19, 0x23	; 35
    38b8:	33 87       	std	Z+11, r19	; 0x0b
    38ba:	22 87       	std	Z+10, r18	; 0x0a
    38bc:	24 e6       	ldi	r18, 0x64	; 100
    38be:	33 e2       	ldi	r19, 0x23	; 35
    38c0:	35 87       	std	Z+13, r19	; 0x0d
    38c2:	24 87       	std	Z+12, r18	; 0x0c
    38c4:	20 e7       	ldi	r18, 0x70	; 112
    38c6:	33 e2       	ldi	r19, 0x23	; 35
    38c8:	37 87       	std	Z+15, r19	; 0x0f
    38ca:	26 87       	std	Z+14, r18	; 0x0e
    38cc:	20 e5       	ldi	r18, 0x50	; 80
    38ce:	33 e2       	ldi	r19, 0x23	; 35
    38d0:	31 8b       	std	Z+17, r19	; 0x11
    38d2:	20 8b       	std	Z+16, r18	; 0x10
    38d4:	25 e7       	ldi	r18, 0x75	; 117
    38d6:	33 e2       	ldi	r19, 0x23	; 35
    38d8:	33 8b       	std	Z+19, r19	; 0x13
    38da:	22 8b       	std	Z+18, r18	; 0x12
    38dc:	22 e8       	ldi	r18, 0x82	; 130
    38de:	33 e2       	ldi	r19, 0x23	; 35
    38e0:	35 8b       	std	Z+21, r19	; 0x15
    38e2:	24 8b       	std	Z+20, r18	; 0x14
    38e4:	68 2f       	mov	r22, r24
    38e6:	cf 01       	movw	r24, r30
    38e8:	3d c1       	rjmp	.+634    	; 0x3b64 <led_create>
    38ea:	08 95       	ret

000038ec <_hihTwiCallback>:
    38ec:	65 30       	cpi	r22, 0x05	; 5
    38ee:	f1 f4       	brne	.+60     	; 0x392c <_hihTwiCallback+0x40>
    38f0:	fa 01       	movw	r30, r20
    38f2:	80 81       	ld	r24, Z
    38f4:	8f 73       	andi	r24, 0x3F	; 63
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	98 2f       	mov	r25, r24
    38fa:	88 27       	eor	r24, r24
    38fc:	21 81       	ldd	r18, Z+1	; 0x01
    38fe:	82 2b       	or	r24, r18
    3900:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3904:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	f0 e4       	ldi	r31, 0x40	; 64
    390c:	8f 9f       	mul	r24, r31
    390e:	c0 01       	movw	r24, r0
    3910:	11 24       	eor	r1, r1
    3912:	fa 01       	movw	r30, r20
    3914:	23 81       	ldd	r18, Z+3	; 0x03
    3916:	26 95       	lsr	r18
    3918:	26 95       	lsr	r18
    391a:	82 2b       	or	r24, r18
    391c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3920:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	80 93 fe 1a 	sts	0x1AFE, r24	; 0x801afe <_measuringIsReady>
    392a:	08 95       	ret
    392c:	64 30       	cpi	r22, 0x04	; 4
    392e:	51 f0       	breq	.+20     	; 0x3944 <_hihTwiCallback+0x58>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e4       	ldi	r25, 0x40	; 64
    3934:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3938:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    393c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3940:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3944:	08 95       	ret

00003946 <hih8120Create>:
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	06 e7       	ldi	r16, 0x76	; 118
    394c:	1c e1       	ldi	r17, 0x1C	; 28
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	34 e2       	ldi	r19, 0x24	; 36
    3952:	44 ef       	ldi	r20, 0xF4	; 244
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	87 e2       	ldi	r24, 0x27	; 39
    395a:	0e 94 28 28 	call	0x5050	; 0x5050 <twiCreate>
    395e:	90 93 00 1b 	sts	0x1B00, r25	; 0x801b00 <_hih8120Handler+0x1>
    3962:	80 93 ff 1a 	sts	0x1AFF, r24	; 0x801aff <_hih8120Handler>
    3966:	21 e0       	ldi	r18, 0x01	; 1
    3968:	89 2b       	or	r24, r25
    396a:	09 f0       	breq	.+2      	; 0x396e <hih8120Create+0x28>
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	82 2f       	mov	r24, r18
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	08 95       	ret

00003976 <hih8120IsReady>:
    3976:	80 91 fe 1a 	lds	r24, 0x1AFE	; 0x801afe <_measuringIsReady>
    397a:	08 95       	ret

0000397c <hih8120Wakeup>:
    397c:	80 91 ff 1a 	lds	r24, 0x1AFF	; 0x801aff <_hih8120Handler>
    3980:	90 91 00 1b 	lds	r25, 0x1B00	; 0x801b00 <_hih8120Handler+0x1>
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	59 f0       	breq	.+22     	; 0x399e <hih8120Wakeup+0x22>
    3988:	40 e0       	ldi	r20, 0x00	; 0
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twiTransmit>
    3992:	84 30       	cpi	r24, 0x04	; 4
    3994:	31 f4       	brne	.+12     	; 0x39a2 <hih8120Wakeup+0x26>
    3996:	10 92 fe 1a 	sts	0x1AFE, r1	; 0x801afe <_measuringIsReady>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	08 95       	ret
    399e:	82 e0       	ldi	r24, 0x02	; 2
    39a0:	08 95       	ret
    39a2:	83 e0       	ldi	r24, 0x03	; 3
    39a4:	08 95       	ret

000039a6 <hih8120Meassure>:
    39a6:	80 91 ff 1a 	lds	r24, 0x1AFF	; 0x801aff <_hih8120Handler>
    39aa:	90 91 00 1b 	lds	r25, 0x1B00	; 0x801b00 <_hih8120Handler+0x1>
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	39 f0       	breq	.+14     	; 0x39c0 <hih8120Meassure+0x1a>
    39b2:	64 e0       	ldi	r22, 0x04	; 4
    39b4:	0e 94 c5 28 	call	0x518a	; 0x518a <twiReceive>
    39b8:	85 30       	cpi	r24, 0x05	; 5
    39ba:	21 f0       	breq	.+8      	; 0x39c4 <hih8120Meassure+0x1e>
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	08 95       	ret
    39c0:	82 e0       	ldi	r24, 0x02	; 2
    39c2:	08 95       	ret
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	08 95       	ret

000039c8 <hih8120GetHumidity>:
    39c8:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    39cc:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	0e 94 ca 2a 	call	0x5594	; 0x5594 <__floatunsisf>
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	48 ec       	ldi	r20, 0xC8	; 200
    39de:	52 e4       	ldi	r21, 0x42	; 66
    39e0:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <__mulsf3>
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	38 ef       	ldi	r19, 0xF8	; 248
    39e8:	4f e7       	ldi	r20, 0x7F	; 127
    39ea:	56 e4       	ldi	r21, 0x46	; 70
    39ec:	0c 94 36 2a 	jmp	0x546c	; 0x546c <__divsf3>
    39f0:	08 95       	ret

000039f2 <hih8120GetTemperature>:
    39f2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    39f6:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	0e 94 ca 2a 	call	0x5594	; 0x5594 <__floatunsisf>
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	45 e2       	ldi	r20, 0x25	; 37
    3a08:	53 e4       	ldi	r21, 0x43	; 67
    3a0a:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <__mulsf3>
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	38 ef       	ldi	r19, 0xF8	; 248
    3a12:	4f e7       	ldi	r20, 0x7F	; 127
    3a14:	56 e4       	ldi	r21, 0x46	; 70
    3a16:	0e 94 36 2a 	call	0x546c	; 0x546c <__divsf3>
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e2       	ldi	r20, 0x20	; 32
    3a20:	52 e4       	ldi	r21, 0x42	; 66
    3a22:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__subsf3>
    3a26:	08 95       	ret

00003a28 <_turn_off>:
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	fc 01       	movw	r30, r24
    3a30:	ee 0f       	add	r30, r30
    3a32:	ff 1f       	adc	r31, r31
    3a34:	e8 0f       	add	r30, r24
    3a36:	f9 1f       	adc	r31, r25
    3a38:	ee 0f       	add	r30, r30
    3a3a:	ff 1f       	adc	r31, r31
    3a3c:	ef 5f       	subi	r30, 0xFF	; 255
    3a3e:	f4 4e       	sbci	r31, 0xE4	; 228
    3a40:	23 81       	ldd	r18, Z+3	; 0x03
    3a42:	21 11       	cpse	r18, r1
    3a44:	0a c0       	rjmp	.+20     	; 0x3a5a <_turn_off+0x32>
    3a46:	ef 01       	movw	r28, r30
    3a48:	e0 91 66 1c 	lds	r30, 0x1C66	; 0x801c66 <register_access+0x8>
    3a4c:	f0 91 67 1c 	lds	r31, 0x1C67	; 0x801c67 <register_access+0x9>
    3a50:	6a 81       	ldd	r22, Y+2	; 0x02
    3a52:	88 81       	ld	r24, Y
    3a54:	99 81       	ldd	r25, Y+1	; 0x01
    3a56:	19 95       	eicall
    3a58:	12 c0       	rjmp	.+36     	; 0x3a7e <_turn_off+0x56>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	aa 0f       	add	r26, r26
    3a5e:	bb 1f       	adc	r27, r27
    3a60:	ed 01       	movw	r28, r26
    3a62:	c8 0f       	add	r28, r24
    3a64:	d9 1f       	adc	r29, r25
    3a66:	cc 0f       	add	r28, r28
    3a68:	dd 1f       	adc	r29, r29
    3a6a:	cf 5f       	subi	r28, 0xFF	; 255
    3a6c:	d4 4e       	sbci	r29, 0xE4	; 228
    3a6e:	e0 91 70 1c 	lds	r30, 0x1C70	; 0x801c70 <register_access+0x12>
    3a72:	f0 91 71 1c 	lds	r31, 0x1C71	; 0x801c71 <register_access+0x13>
    3a76:	6a 81       	ldd	r22, Y+2	; 0x02
    3a78:	88 81       	ld	r24, Y
    3a7a:	99 81       	ldd	r25, Y+1	; 0x01
    3a7c:	19 95       	eicall
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	08 95       	ret

00003a84 <_turn_on>:
    3a84:	cf 93       	push	r28
    3a86:	df 93       	push	r29
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	ee 0f       	add	r30, r30
    3a8e:	ff 1f       	adc	r31, r31
    3a90:	e8 0f       	add	r30, r24
    3a92:	f9 1f       	adc	r31, r25
    3a94:	ee 0f       	add	r30, r30
    3a96:	ff 1f       	adc	r31, r31
    3a98:	ef 5f       	subi	r30, 0xFF	; 255
    3a9a:	f4 4e       	sbci	r31, 0xE4	; 228
    3a9c:	23 81       	ldd	r18, Z+3	; 0x03
    3a9e:	21 11       	cpse	r18, r1
    3aa0:	0a c0       	rjmp	.+20     	; 0x3ab6 <_turn_on+0x32>
    3aa2:	ef 01       	movw	r28, r30
    3aa4:	e0 91 70 1c 	lds	r30, 0x1C70	; 0x801c70 <register_access+0x12>
    3aa8:	f0 91 71 1c 	lds	r31, 0x1C71	; 0x801c71 <register_access+0x13>
    3aac:	6a 81       	ldd	r22, Y+2	; 0x02
    3aae:	88 81       	ld	r24, Y
    3ab0:	99 81       	ldd	r25, Y+1	; 0x01
    3ab2:	19 95       	eicall
    3ab4:	12 c0       	rjmp	.+36     	; 0x3ada <_turn_on+0x56>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	aa 0f       	add	r26, r26
    3aba:	bb 1f       	adc	r27, r27
    3abc:	ed 01       	movw	r28, r26
    3abe:	c8 0f       	add	r28, r24
    3ac0:	d9 1f       	adc	r29, r25
    3ac2:	cc 0f       	add	r28, r28
    3ac4:	dd 1f       	adc	r29, r29
    3ac6:	cf 5f       	subi	r28, 0xFF	; 255
    3ac8:	d4 4e       	sbci	r29, 0xE4	; 228
    3aca:	e0 91 66 1c 	lds	r30, 0x1C66	; 0x801c66 <register_access+0x8>
    3ace:	f0 91 67 1c 	lds	r31, 0x1C67	; 0x801c67 <register_access+0x9>
    3ad2:	6a 81       	ldd	r22, Y+2	; 0x02
    3ad4:	88 81       	ld	r24, Y
    3ad6:	99 81       	ldd	r25, Y+1	; 0x01
    3ad8:	19 95       	eicall
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	08 95       	ret

00003ae0 <_hal_led_task>:
    3ae0:	0f 2e       	mov	r0, r31
    3ae2:	fe e5       	ldi	r31, 0x5E	; 94
    3ae4:	cf 2e       	mov	r12, r31
    3ae6:	fc e1       	ldi	r31, 0x1C	; 28
    3ae8:	df 2e       	mov	r13, r31
    3aea:	f0 2d       	mov	r31, r0
    3aec:	04 e0       	ldi	r16, 0x04	; 4
    3aee:	c1 e0       	ldi	r28, 0x01	; 1
    3af0:	db e1       	ldi	r29, 0x1B	; 27
    3af2:	10 e0       	ldi	r17, 0x00	; 0
    3af4:	8c 81       	ldd	r24, Y+4	; 0x04
    3af6:	81 30       	cpi	r24, 0x01	; 1
    3af8:	69 f0       	breq	.+26     	; 0x3b14 <_hal_led_task+0x34>
    3afa:	e8 f0       	brcs	.+58     	; 0x3b36 <_hal_led_task+0x56>
    3afc:	82 30       	cpi	r24, 0x02	; 2
    3afe:	39 f5       	brne	.+78     	; 0x3b4e <_hal_led_task+0x6e>
    3b00:	d6 01       	movw	r26, r12
    3b02:	1c 96       	adiw	r26, 0x0c	; 12
    3b04:	ed 91       	ld	r30, X+
    3b06:	fc 91       	ld	r31, X
    3b08:	1d 97       	sbiw	r26, 0x0d	; 13
    3b0a:	6a 81       	ldd	r22, Y+2	; 0x02
    3b0c:	88 81       	ld	r24, Y
    3b0e:	99 81       	ldd	r25, Y+1	; 0x01
    3b10:	19 95       	eicall
    3b12:	1d c0       	rjmp	.+58     	; 0x3b4e <_hal_led_task+0x6e>
    3b14:	8d 81       	ldd	r24, Y+5	; 0x05
    3b16:	8f 5f       	subi	r24, 0xFF	; 255
    3b18:	8a 30       	cpi	r24, 0x0A	; 10
    3b1a:	10 f4       	brcc	.+4      	; 0x3b20 <_hal_led_task+0x40>
    3b1c:	8d 83       	std	Y+5, r24	; 0x05
    3b1e:	17 c0       	rjmp	.+46     	; 0x3b4e <_hal_led_task+0x6e>
    3b20:	1d 82       	std	Y+5, r1	; 0x05
    3b22:	d6 01       	movw	r26, r12
    3b24:	1c 96       	adiw	r26, 0x0c	; 12
    3b26:	ed 91       	ld	r30, X+
    3b28:	fc 91       	ld	r31, X
    3b2a:	1d 97       	sbiw	r26, 0x0d	; 13
    3b2c:	6a 81       	ldd	r22, Y+2	; 0x02
    3b2e:	88 81       	ld	r24, Y
    3b30:	99 81       	ldd	r25, Y+1	; 0x01
    3b32:	19 95       	eicall
    3b34:	0c c0       	rjmp	.+24     	; 0x3b4e <_hal_led_task+0x6e>
    3b36:	8d 81       	ldd	r24, Y+5	; 0x05
    3b38:	88 23       	and	r24, r24
    3b3a:	31 f0       	breq	.+12     	; 0x3b48 <_hal_led_task+0x68>
    3b3c:	81 2f       	mov	r24, r17
    3b3e:	a2 df       	rcall	.-188    	; 0x3a84 <_turn_on>
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	81 50       	subi	r24, 0x01	; 1
    3b44:	8d 83       	std	Y+5, r24	; 0x05
    3b46:	03 c0       	rjmp	.+6      	; 0x3b4e <_hal_led_task+0x6e>
    3b48:	0c 83       	std	Y+4, r16	; 0x04
    3b4a:	81 2f       	mov	r24, r17
    3b4c:	6d df       	rcall	.-294    	; 0x3a28 <_turn_off>
    3b4e:	1f 5f       	subi	r17, 0xFF	; 255
    3b50:	26 96       	adiw	r28, 0x06	; 6
    3b52:	14 30       	cpi	r17, 0x04	; 4
    3b54:	79 f6       	brne	.-98     	; 0x3af4 <_hal_led_task+0x14>
    3b56:	65 e0       	ldi	r22, 0x05	; 5
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskDelay>
    3b62:	c5 cf       	rjmp	.-118    	; 0x3aee <_hal_led_task+0xe>

00003b64 <led_create>:
    3b64:	cf 92       	push	r12
    3b66:	df 92       	push	r13
    3b68:	ef 92       	push	r14
    3b6a:	ff 92       	push	r15
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	06 2f       	mov	r16, r22
    3b76:	0f 2e       	mov	r0, r31
    3b78:	fe e5       	ldi	r31, 0x5E	; 94
    3b7a:	ef 2e       	mov	r14, r31
    3b7c:	fc e1       	ldi	r31, 0x1C	; 28
    3b7e:	ff 2e       	mov	r15, r31
    3b80:	f0 2d       	mov	r31, r0
    3b82:	d7 01       	movw	r26, r14
    3b84:	18 96       	adiw	r26, 0x08	; 8
    3b86:	ed 91       	ld	r30, X+
    3b88:	fc 91       	ld	r31, X
    3b8a:	19 97       	sbiw	r26, 0x09	; 9
    3b8c:	66 e0       	ldi	r22, 0x06	; 6
    3b8e:	87 e2       	ldi	r24, 0x27	; 39
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	19 95       	eicall
    3b94:	c1 e0       	ldi	r28, 0x01	; 1
    3b96:	db e1       	ldi	r29, 0x1B	; 27
    3b98:	0f 2e       	mov	r0, r31
    3b9a:	f8 e2       	ldi	r31, 0x28	; 40
    3b9c:	cf 2e       	mov	r12, r31
    3b9e:	d1 2c       	mov	r13, r1
    3ba0:	f0 2d       	mov	r31, r0
    3ba2:	d9 82       	std	Y+1, r13	; 0x01
    3ba4:	c8 82       	st	Y, r12
    3ba6:	86 e0       	ldi	r24, 0x06	; 6
    3ba8:	8a 83       	std	Y+2, r24	; 0x02
    3baa:	1b 82       	std	Y+3, r1	; 0x03
    3bac:	14 e0       	ldi	r17, 0x04	; 4
    3bae:	1c 83       	std	Y+4, r17	; 0x04
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	3a df       	rcall	.-396    	; 0x3a28 <_turn_off>
    3bb4:	d7 01       	movw	r26, r14
    3bb6:	18 96       	adiw	r26, 0x08	; 8
    3bb8:	ed 91       	ld	r30, X+
    3bba:	fc 91       	ld	r31, X
    3bbc:	19 97       	sbiw	r26, 0x09	; 9
    3bbe:	67 e0       	ldi	r22, 0x07	; 7
    3bc0:	87 e2       	ldi	r24, 0x27	; 39
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	19 95       	eicall
    3bc6:	df 82       	std	Y+7, r13	; 0x07
    3bc8:	ce 82       	std	Y+6, r12	; 0x06
    3bca:	87 e0       	ldi	r24, 0x07	; 7
    3bcc:	88 87       	std	Y+8, r24	; 0x08
    3bce:	19 86       	std	Y+9, r1	; 0x09
    3bd0:	1a 87       	std	Y+10, r17	; 0x0a
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	29 df       	rcall	.-430    	; 0x3a28 <_turn_off>
    3bd6:	d7 01       	movw	r26, r14
    3bd8:	18 96       	adiw	r26, 0x08	; 8
    3bda:	ed 91       	ld	r30, X+
    3bdc:	fc 91       	ld	r31, X
    3bde:	19 97       	sbiw	r26, 0x09	; 9
    3be0:	65 e0       	ldi	r22, 0x05	; 5
    3be2:	83 e3       	ldi	r24, 0x33	; 51
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	19 95       	eicall
    3be8:	d7 01       	movw	r26, r14
    3bea:	18 96       	adiw	r26, 0x08	; 8
    3bec:	ed 91       	ld	r30, X+
    3bee:	fc 91       	ld	r31, X
    3bf0:	19 97       	sbiw	r26, 0x09	; 9
    3bf2:	61 e0       	ldi	r22, 0x01	; 1
    3bf4:	84 e3       	ldi	r24, 0x34	; 52
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	19 95       	eicall
    3bfa:	84 e3       	ldi	r24, 0x34	; 52
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	9d 87       	std	Y+13, r25	; 0x0d
    3c00:	8c 87       	std	Y+12, r24	; 0x0c
    3c02:	85 e0       	ldi	r24, 0x05	; 5
    3c04:	8e 87       	std	Y+14, r24	; 0x0e
    3c06:	1f 86       	std	Y+15, r1	; 0x0f
    3c08:	18 8b       	std	Y+16, r17	; 0x10
    3c0a:	82 e0       	ldi	r24, 0x02	; 2
    3c0c:	0d df       	rcall	.-486    	; 0x3a28 <_turn_off>
    3c0e:	d7 01       	movw	r26, r14
    3c10:	18 96       	adiw	r26, 0x08	; 8
    3c12:	ed 91       	ld	r30, X+
    3c14:	fc 91       	ld	r31, X
    3c16:	19 97       	sbiw	r26, 0x09	; 9
    3c18:	64 e0       	ldi	r22, 0x04	; 4
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	91 e0       	ldi	r25, 0x01	; 1
    3c1e:	19 95       	eicall
    3c20:	d7 01       	movw	r26, r14
    3c22:	18 96       	adiw	r26, 0x08	; 8
    3c24:	ed 91       	ld	r30, X+
    3c26:	fc 91       	ld	r31, X
    3c28:	19 97       	sbiw	r26, 0x09	; 9
    3c2a:	61 e0       	ldi	r22, 0x01	; 1
    3c2c:	82 e0       	ldi	r24, 0x02	; 2
    3c2e:	91 e0       	ldi	r25, 0x01	; 1
    3c30:	19 95       	eicall
    3c32:	82 e0       	ldi	r24, 0x02	; 2
    3c34:	91 e0       	ldi	r25, 0x01	; 1
    3c36:	9b 8b       	std	Y+19, r25	; 0x13
    3c38:	8a 8b       	std	Y+18, r24	; 0x12
    3c3a:	1c 8b       	std	Y+20, r17	; 0x14
    3c3c:	1d 8a       	std	Y+21, r1	; 0x15
    3c3e:	1e 8b       	std	Y+22, r17	; 0x16
    3c40:	83 e0       	ldi	r24, 0x03	; 3
    3c42:	f2 de       	rcall	.-540    	; 0x3a28 <_turn_off>
    3c44:	e1 2c       	mov	r14, r1
    3c46:	f1 2c       	mov	r15, r1
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	40 ec       	ldi	r20, 0xC0	; 192
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	64 e6       	ldi	r22, 0x64	; 100
    3c52:	77 e0       	ldi	r23, 0x07	; 7
    3c54:	80 e7       	ldi	r24, 0x70	; 112
    3c56:	9d e1       	ldi	r25, 0x1D	; 29
    3c58:	0e 94 bf 11 	call	0x237e	; 0x237e <xTaskCreate>
    3c5c:	df 91       	pop	r29
    3c5e:	cf 91       	pop	r28
    3c60:	1f 91       	pop	r17
    3c62:	0f 91       	pop	r16
    3c64:	ff 90       	pop	r15
    3c66:	ef 90       	pop	r14
    3c68:	df 90       	pop	r13
    3c6a:	cf 90       	pop	r12
    3c6c:	08 95       	ret

00003c6e <led_slow_blink>:
    3c6e:	0f 93       	push	r16
    3c70:	1f 93       	push	r17
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	c8 2f       	mov	r28, r24
    3c78:	d0 e0       	ldi	r29, 0x00	; 0
    3c7a:	8e 01       	movw	r16, r28
    3c7c:	00 0f       	add	r16, r16
    3c7e:	11 1f       	adc	r17, r17
    3c80:	d8 01       	movw	r26, r16
    3c82:	ac 0f       	add	r26, r28
    3c84:	bd 1f       	adc	r27, r29
    3c86:	aa 0f       	add	r26, r26
    3c88:	bb 1f       	adc	r27, r27
    3c8a:	af 5f       	subi	r26, 0xFF	; 255
    3c8c:	b4 4e       	sbci	r27, 0xE4	; 228
    3c8e:	e0 91 6a 1c 	lds	r30, 0x1C6A	; 0x801c6a <register_access+0xc>
    3c92:	f0 91 6b 1c 	lds	r31, 0x1C6B	; 0x801c6b <register_access+0xd>
    3c96:	12 96       	adiw	r26, 0x02	; 2
    3c98:	6c 91       	ld	r22, X
    3c9a:	12 97       	sbiw	r26, 0x02	; 2
    3c9c:	8d 91       	ld	r24, X+
    3c9e:	9c 91       	ld	r25, X
    3ca0:	19 95       	eicall
    3ca2:	c0 0f       	add	r28, r16
    3ca4:	d1 1f       	adc	r29, r17
    3ca6:	cc 0f       	add	r28, r28
    3ca8:	dd 1f       	adc	r29, r29
    3caa:	cf 5f       	subi	r28, 0xFF	; 255
    3cac:	d4 4e       	sbci	r29, 0xE4	; 228
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	8c 83       	std	Y+4, r24	; 0x04
    3cb2:	df 91       	pop	r29
    3cb4:	cf 91       	pop	r28
    3cb6:	1f 91       	pop	r17
    3cb8:	0f 91       	pop	r16
    3cba:	08 95       	ret

00003cbc <led_fast_blink>:
    3cbc:	0f 93       	push	r16
    3cbe:	1f 93       	push	r17
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	c8 2f       	mov	r28, r24
    3cc6:	d0 e0       	ldi	r29, 0x00	; 0
    3cc8:	8e 01       	movw	r16, r28
    3cca:	00 0f       	add	r16, r16
    3ccc:	11 1f       	adc	r17, r17
    3cce:	d8 01       	movw	r26, r16
    3cd0:	ac 0f       	add	r26, r28
    3cd2:	bd 1f       	adc	r27, r29
    3cd4:	aa 0f       	add	r26, r26
    3cd6:	bb 1f       	adc	r27, r27
    3cd8:	af 5f       	subi	r26, 0xFF	; 255
    3cda:	b4 4e       	sbci	r27, 0xE4	; 228
    3cdc:	e0 91 6a 1c 	lds	r30, 0x1C6A	; 0x801c6a <register_access+0xc>
    3ce0:	f0 91 6b 1c 	lds	r31, 0x1C6B	; 0x801c6b <register_access+0xd>
    3ce4:	12 96       	adiw	r26, 0x02	; 2
    3ce6:	6c 91       	ld	r22, X
    3ce8:	12 97       	sbiw	r26, 0x02	; 2
    3cea:	8d 91       	ld	r24, X+
    3cec:	9c 91       	ld	r25, X
    3cee:	19 95       	eicall
    3cf0:	c0 0f       	add	r28, r16
    3cf2:	d1 1f       	adc	r29, r17
    3cf4:	cc 0f       	add	r28, r28
    3cf6:	dd 1f       	adc	r29, r29
    3cf8:	cf 5f       	subi	r28, 0xFF	; 255
    3cfa:	d4 4e       	sbci	r29, 0xE4	; 228
    3cfc:	82 e0       	ldi	r24, 0x02	; 2
    3cfe:	8c 83       	std	Y+4, r24	; 0x04
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	1f 91       	pop	r17
    3d06:	0f 91       	pop	r16
    3d08:	08 95       	ret

00003d0a <led_led_on>:
    3d0a:	28 2f       	mov	r18, r24
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	f9 01       	movw	r30, r18
    3d10:	ee 0f       	add	r30, r30
    3d12:	ff 1f       	adc	r31, r31
    3d14:	e2 0f       	add	r30, r18
    3d16:	f3 1f       	adc	r31, r19
    3d18:	ee 0f       	add	r30, r30
    3d1a:	ff 1f       	adc	r31, r31
    3d1c:	ef 5f       	subi	r30, 0xFF	; 255
    3d1e:	f4 4e       	sbci	r31, 0xE4	; 228
    3d20:	93 e0       	ldi	r25, 0x03	; 3
    3d22:	94 83       	std	Z+4, r25	; 0x04
    3d24:	af ce       	rjmp	.-674    	; 0x3a84 <_turn_on>
    3d26:	08 95       	ret

00003d28 <led_led_off>:
    3d28:	28 2f       	mov	r18, r24
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	f9 01       	movw	r30, r18
    3d2e:	ee 0f       	add	r30, r30
    3d30:	ff 1f       	adc	r31, r31
    3d32:	e2 0f       	add	r30, r18
    3d34:	f3 1f       	adc	r31, r19
    3d36:	ee 0f       	add	r30, r30
    3d38:	ff 1f       	adc	r31, r31
    3d3a:	ef 5f       	subi	r30, 0xFF	; 255
    3d3c:	f4 4e       	sbci	r31, 0xE4	; 228
    3d3e:	94 e0       	ldi	r25, 0x04	; 4
    3d40:	94 83       	std	Z+4, r25	; 0x04
    3d42:	72 ce       	rjmp	.-796    	; 0x3a28 <_turn_off>
    3d44:	08 95       	ret

00003d46 <led_long_puls>:
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	fc 01       	movw	r30, r24
    3d4a:	ee 0f       	add	r30, r30
    3d4c:	ff 1f       	adc	r31, r31
    3d4e:	df 01       	movw	r26, r30
    3d50:	a8 0f       	add	r26, r24
    3d52:	b9 1f       	adc	r27, r25
    3d54:	aa 0f       	add	r26, r26
    3d56:	bb 1f       	adc	r27, r27
    3d58:	af 5f       	subi	r26, 0xFF	; 255
    3d5a:	b4 4e       	sbci	r27, 0xE4	; 228
    3d5c:	24 e0       	ldi	r18, 0x04	; 4
    3d5e:	15 96       	adiw	r26, 0x05	; 5
    3d60:	2c 93       	st	X, r18
    3d62:	15 97       	sbiw	r26, 0x05	; 5
    3d64:	fd 01       	movw	r30, r26
    3d66:	14 82       	std	Z+4, r1	; 0x04
    3d68:	08 95       	ret

00003d6a <led_short_puls>:
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	ee 0f       	add	r30, r30
    3d70:	ff 1f       	adc	r31, r31
    3d72:	df 01       	movw	r26, r30
    3d74:	a8 0f       	add	r26, r24
    3d76:	b9 1f       	adc	r27, r25
    3d78:	aa 0f       	add	r26, r26
    3d7a:	bb 1f       	adc	r27, r27
    3d7c:	af 5f       	subi	r26, 0xFF	; 255
    3d7e:	b4 4e       	sbci	r27, 0xE4	; 228
    3d80:	21 e0       	ldi	r18, 0x01	; 1
    3d82:	15 96       	adiw	r26, 0x05	; 5
    3d84:	2c 93       	st	X, r18
    3d86:	15 97       	sbiw	r26, 0x05	; 5
    3d88:	fd 01       	movw	r30, r26
    3d8a:	14 82       	std	Z+4, r1	; 0x04
    3d8c:	08 95       	ret

00003d8e <_serial_call_back>:
    3d8e:	0f 93       	push	r16
    3d90:	1f 93       	push	r17
    3d92:	cf 93       	push	r28
    3d94:	df 93       	push	r29
    3d96:	1f 92       	push	r1
    3d98:	1f 92       	push	r1
    3d9a:	cd b7       	in	r28, 0x3d	; 61
    3d9c:	de b7       	in	r29, 0x3e	; 62
    3d9e:	8c 01       	movw	r16, r24
    3da0:	19 82       	std	Y+1, r1	; 0x01
    3da2:	2d c0       	rjmp	.+90     	; 0x3dfe <_serial_call_back+0x70>
    3da4:	e0 91 7d 1b 	lds	r30, 0x1B7D	; 0x801b7d <rec_buf_inp.2947>
    3da8:	ec 32       	cpi	r30, 0x2C	; 44
    3daa:	50 f4       	brcc	.+20     	; 0x3dc0 <_serial_call_back+0x32>
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	8e 0f       	add	r24, r30
    3db0:	80 93 7d 1b 	sts	0x1B7D, r24	; 0x801b7d <rec_buf_inp.2947>
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	e1 55       	subi	r30, 0x51	; 81
    3db8:	f4 4e       	sbci	r31, 0xE4	; 228
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	80 83       	st	Z, r24
    3dbe:	02 c0       	rjmp	.+4      	; 0x3dc4 <_serial_call_back+0x36>
    3dc0:	10 92 7d 1b 	sts	0x1B7D, r1	; 0x801b7d <rec_buf_inp.2947>
    3dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc6:	8a 30       	cpi	r24, 0x0A	; 10
    3dc8:	d1 f4       	brne	.+52     	; 0x3dfe <_serial_call_back+0x70>
    3dca:	40 91 7d 1b 	lds	r20, 0x1B7D	; 0x801b7d <rec_buf_inp.2947>
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	fa 01       	movw	r30, r20
    3dd2:	e3 55       	subi	r30, 0x53	; 83
    3dd4:	f4 4e       	sbci	r31, 0xE4	; 228
    3dd6:	10 82       	st	Z, r1
    3dd8:	41 50       	subi	r20, 0x01	; 1
    3dda:	51 09       	sbc	r21, r1
    3ddc:	9e 01       	movw	r18, r28
    3dde:	2f 5f       	subi	r18, 0xFF	; 255
    3de0:	3f 4f       	sbci	r19, 0xFF	; 255
    3de2:	6f ea       	ldi	r22, 0xAF	; 175
    3de4:	7b e1       	ldi	r23, 0x1B	; 27
    3de6:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <_serial_reply_buffer_handle>
    3dea:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <_serial_reply_buffer_handle+0x1>
    3dee:	0e 94 39 10 	call	0x2072	; 0x2072 <xStreamBufferSendFromISR>
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	81 11       	cpse	r24, r1
    3df6:	0e 94 ba 09 	call	0x1374	; 0x1374 <vPortYield>
    3dfa:	10 92 7d 1b 	sts	0x1B7D, r1	; 0x801b7d <rec_buf_inp.2947>
    3dfe:	be 01       	movw	r22, r28
    3e00:	6e 5f       	subi	r22, 0xFE	; 254
    3e02:	7f 4f       	sbci	r23, 0xFF	; 255
    3e04:	c8 01       	movw	r24, r16
    3e06:	58 d6       	rcall	.+3248   	; 0x4ab8 <serial_get_byte>
    3e08:	88 23       	and	r24, r24
    3e0a:	61 f2       	breq	.-104    	; 0x3da4 <_serial_call_back+0x16>
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	08 95       	ret

00003e1a <_upload_message>:
    3e1a:	0f 93       	push	r16
    3e1c:	1f 93       	push	r17
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	8c 01       	movw	r16, r24
    3e24:	eb 01       	movw	r28, r22
    3e26:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <_serial_reply_buffer_handle>
    3e2a:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <_serial_reply_buffer_handle+0x1>
    3e2e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xStreamBufferReset>
    3e32:	b8 01       	movw	r22, r16
    3e34:	89 e1       	ldi	r24, 0x19	; 25
    3e36:	9b e1       	ldi	r25, 0x1B	; 27
    3e38:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <strcpy>
    3e3c:	20 97       	sbiw	r28, 0x00	; 0
    3e3e:	79 f0       	breq	.+30     	; 0x3e5e <_upload_message+0x44>
    3e40:	e9 e1       	ldi	r30, 0x19	; 25
    3e42:	fb e1       	ldi	r31, 0x1B	; 27
    3e44:	01 90       	ld	r0, Z+
    3e46:	00 20       	and	r0, r0
    3e48:	e9 f7       	brne	.-6      	; 0x3e44 <_upload_message+0x2a>
    3e4a:	31 97       	sbiw	r30, 0x01	; 1
    3e4c:	80 e2       	ldi	r24, 0x20	; 32
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	80 83       	st	Z, r24
    3e54:	be 01       	movw	r22, r28
    3e56:	89 e1       	ldi	r24, 0x19	; 25
    3e58:	9b e1       	ldi	r25, 0x1B	; 27
    3e5a:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <strcat>
    3e5e:	e9 e1       	ldi	r30, 0x19	; 25
    3e60:	fb e1       	ldi	r31, 0x1B	; 27
    3e62:	df 01       	movw	r26, r30
    3e64:	0d 90       	ld	r0, X+
    3e66:	00 20       	and	r0, r0
    3e68:	e9 f7       	brne	.-6      	; 0x3e64 <_upload_message+0x4a>
    3e6a:	11 97       	sbiw	r26, 0x01	; 1
    3e6c:	8d e0       	ldi	r24, 0x0D	; 13
    3e6e:	9a e0       	ldi	r25, 0x0A	; 10
    3e70:	11 96       	adiw	r26, 0x01	; 1
    3e72:	9c 93       	st	X, r25
    3e74:	8e 93       	st	-X, r24
    3e76:	12 96       	adiw	r26, 0x02	; 2
    3e78:	1c 92       	st	X, r1
    3e7a:	01 90       	ld	r0, Z+
    3e7c:	00 20       	and	r0, r0
    3e7e:	e9 f7       	brne	.-6      	; 0x3e7a <_upload_message+0x60>
    3e80:	31 97       	sbiw	r30, 0x01	; 1
    3e82:	e9 51       	subi	r30, 0x19	; 25
    3e84:	fb 41       	sbci	r31, 0x1B	; 27
    3e86:	ae 2f       	mov	r26, r30
    3e88:	89 e1       	ldi	r24, 0x19	; 25
    3e8a:	9b e1       	ldi	r25, 0x1B	; 27
    3e8c:	ac 01       	movw	r20, r24
    3e8e:	6a 2f       	mov	r22, r26
    3e90:	80 91 82 1b 	lds	r24, 0x1B82	; 0x801b82 <_rn2483_serial>
    3e94:	90 91 83 1b 	lds	r25, 0x1B83	; 0x801b83 <_rn2483_serial+0x1>
    3e98:	bf d5       	rcall	.+2942   	; 0x4a18 <serial_send_bytes>
    3e9a:	81 11       	cpse	r24, r1
    3e9c:	11 c0       	rjmp	.+34     	; 0x3ec0 <_upload_message+0xa6>
    3e9e:	08 e2       	ldi	r16, 0x28	; 40
    3ea0:	15 e0       	ldi	r17, 0x05	; 5
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	4d e2       	ldi	r20, 0x2D	; 45
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	69 e0       	ldi	r22, 0x09	; 9
    3eac:	7c e1       	ldi	r23, 0x1C	; 28
    3eae:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <_serial_reply_buffer_handle>
    3eb2:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <_serial_reply_buffer_handle+0x1>
    3eb6:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xStreamBufferReceive>
    3eba:	89 e0       	ldi	r24, 0x09	; 9
    3ebc:	9c e1       	ldi	r25, 0x1C	; 28
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <_upload_message+0xaa>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	1f 91       	pop	r17
    3eca:	0f 91       	pop	r16
    3ecc:	08 95       	ret

00003ece <_reply2return_code>:
    3ece:	2f 92       	push	r2
    3ed0:	3f 92       	push	r3
    3ed2:	4f 92       	push	r4
    3ed4:	5f 92       	push	r5
    3ed6:	6f 92       	push	r6
    3ed8:	7f 92       	push	r7
    3eda:	8f 92       	push	r8
    3edc:	9f 92       	push	r9
    3ede:	af 92       	push	r10
    3ee0:	bf 92       	push	r11
    3ee2:	cf 92       	push	r12
    3ee4:	df 92       	push	r13
    3ee6:	ef 92       	push	r14
    3ee8:	ff 92       	push	r15
    3eea:	0f 93       	push	r16
    3eec:	1f 93       	push	r17
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	5c 01       	movw	r10, r24
    3ef4:	fc 01       	movw	r30, r24
    3ef6:	01 90       	ld	r0, Z+
    3ef8:	00 20       	and	r0, r0
    3efa:	e9 f7       	brne	.-6      	; 0x3ef6 <_reply2return_code+0x28>
    3efc:	31 97       	sbiw	r30, 0x01	; 1
    3efe:	6f 01       	movw	r12, r30
    3f00:	c8 1a       	sub	r12, r24
    3f02:	d9 0a       	sbc	r13, r25
    3f04:	5c 2c       	mov	r5, r12
    3f06:	0f 2e       	mov	r0, r31
    3f08:	f5 e0       	ldi	r31, 0x05	; 5
    3f0a:	8f 2e       	mov	r8, r31
    3f0c:	fa e0       	ldi	r31, 0x0A	; 10
    3f0e:	9f 2e       	mov	r9, r31
    3f10:	f0 2d       	mov	r31, r0
    3f12:	e1 2c       	mov	r14, r1
    3f14:	f1 2c       	mov	r15, r1
    3f16:	4c 2c       	mov	r4, r12
    3f18:	37 01       	movw	r6, r14
    3f1a:	f4 01       	movw	r30, r8
    3f1c:	01 81       	ldd	r16, Z+1	; 0x01
    3f1e:	12 81       	ldd	r17, Z+2	; 0x02
    3f20:	e8 01       	movw	r28, r16
    3f22:	09 90       	ld	r0, Y+
    3f24:	00 20       	and	r0, r0
    3f26:	e9 f7       	brne	.-6      	; 0x3f22 <_reply2return_code+0x54>
    3f28:	21 97       	sbiw	r28, 0x01	; 1
    3f2a:	c0 1b       	sub	r28, r16
    3f2c:	d1 0b       	sbc	r29, r17
    3f2e:	3c 2e       	mov	r3, r28
    3f30:	f9 e0       	ldi	r31, 0x09	; 9
    3f32:	cf 16       	cp	r12, r31
    3f34:	d1 04       	cpc	r13, r1
    3f36:	58 f0       	brcs	.+22     	; 0x3f4e <_reply2return_code+0x80>
    3f38:	f4 01       	movw	r30, r8
    3f3a:	20 80       	ld	r2, Z
    3f3c:	fe e0       	ldi	r31, 0x0E	; 14
    3f3e:	2f 12       	cpse	r2, r31
    3f40:	06 c0       	rjmp	.+12     	; 0x3f4e <_reply2return_code+0x80>
    3f42:	b8 01       	movw	r22, r16
    3f44:	c5 01       	movw	r24, r10
    3f46:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <strcasestr>
    3f4a:	89 2b       	or	r24, r25
    3f4c:	09 f5       	brne	.+66     	; 0x3f90 <_reply2return_code+0xc2>
    3f4e:	44 2d       	mov	r20, r4
    3f50:	35 14       	cp	r3, r5
    3f52:	08 f4       	brcc	.+2      	; 0x3f56 <_reply2return_code+0x88>
    3f54:	4c 2f       	mov	r20, r28
    3f56:	50 e0       	ldi	r21, 0x00	; 0
    3f58:	b8 01       	movw	r22, r16
    3f5a:	c5 01       	movw	r24, r10
    3f5c:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <strncasecmp>
    3f60:	89 2b       	or	r24, r25
    3f62:	49 f4       	brne	.+18     	; 0x3f76 <_reply2return_code+0xa8>
    3f64:	f3 01       	movw	r30, r6
    3f66:	ee 0f       	add	r30, r30
    3f68:	ff 1f       	adc	r31, r31
    3f6a:	e6 0d       	add	r30, r6
    3f6c:	f7 1d       	adc	r31, r7
    3f6e:	eb 5f       	subi	r30, 0xFB	; 251
    3f70:	f5 4f       	sbci	r31, 0xF5	; 245
    3f72:	20 80       	ld	r2, Z
    3f74:	0d c0       	rjmp	.+26     	; 0x3f90 <_reply2return_code+0xc2>
    3f76:	8f ef       	ldi	r24, 0xFF	; 255
    3f78:	e8 1a       	sub	r14, r24
    3f7a:	f8 0a       	sbc	r15, r24
    3f7c:	e3 e0       	ldi	r30, 0x03	; 3
    3f7e:	8e 0e       	add	r8, r30
    3f80:	91 1c       	adc	r9, r1
    3f82:	f1 e1       	ldi	r31, 0x11	; 17
    3f84:	ef 16       	cp	r14, r31
    3f86:	f1 04       	cpc	r15, r1
    3f88:	39 f6       	brne	.-114    	; 0x3f18 <_reply2return_code+0x4a>
    3f8a:	68 94       	set
    3f8c:	22 24       	eor	r2, r2
    3f8e:	24 f8       	bld	r2, 4
    3f90:	82 2d       	mov	r24, r2
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	1f 91       	pop	r17
    3f98:	0f 91       	pop	r16
    3f9a:	ff 90       	pop	r15
    3f9c:	ef 90       	pop	r14
    3f9e:	df 90       	pop	r13
    3fa0:	cf 90       	pop	r12
    3fa2:	bf 90       	pop	r11
    3fa4:	af 90       	pop	r10
    3fa6:	9f 90       	pop	r9
    3fa8:	8f 90       	pop	r8
    3faa:	7f 90       	pop	r7
    3fac:	6f 90       	pop	r6
    3fae:	5f 90       	pop	r5
    3fb0:	4f 90       	pop	r4
    3fb2:	3f 90       	pop	r3
    3fb4:	2f 90       	pop	r2
    3fb6:	08 95       	ret

00003fb8 <_upload_message_rc>:
    3fb8:	30 df       	rcall	.-416    	; 0x3e1a <_upload_message>
    3fba:	89 cf       	rjmp	.-238    	; 0x3ece <_reply2return_code>
    3fbc:	08 95       	ret

00003fbe <lora_driver_flush_buffers>:
    3fbe:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <_serial_reply_buffer_handle>
    3fc2:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <_serial_reply_buffer_handle+0x1>
    3fc6:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <xStreamBufferReset>
    3fca:	08 95       	ret

00003fcc <lora_driver_create>:
    3fcc:	8f 92       	push	r8
    3fce:	9f 92       	push	r9
    3fd0:	af 92       	push	r10
    3fd2:	cf 92       	push	r12
    3fd4:	ef 92       	push	r14
    3fd6:	0f 93       	push	r16
    3fd8:	1f 93       	push	r17
    3fda:	cf 93       	push	r28
    3fdc:	c8 2f       	mov	r28, r24
    3fde:	8b 01       	movw	r16, r22
    3fe0:	41 e0       	ldi	r20, 0x01	; 1
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	70 e0       	ldi	r23, 0x00	; 0
    3fe6:	88 ec       	ldi	r24, 0xC8	; 200
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xStreamBufferGenericCreate>
    3fee:	90 93 81 1b 	sts	0x1B81, r25	; 0x801b81 <_serial_reply_buffer_handle+0x1>
    3ff2:	80 93 80 1b 	sts	0x1B80, r24	; 0x801b80 <_serial_reply_buffer_handle>
    3ff6:	10 93 7f 1b 	sts	0x1B7F, r17	; 0x801b7f <_downlinkMessageBuffer+0x1>
    3ffa:	00 93 7e 1b 	sts	0x1B7E, r16	; 0x801b7e <_downlinkMessageBuffer>
    3ffe:	0f 2e       	mov	r0, r31
    4000:	f7 ec       	ldi	r31, 0xC7	; 199
    4002:	8f 2e       	mov	r8, r31
    4004:	fe e1       	ldi	r31, 0x1E	; 30
    4006:	9f 2e       	mov	r9, r31
    4008:	f0 2d       	mov	r31, r0
    400a:	68 94       	set
    400c:	aa 24       	eor	r10, r10
    400e:	a6 f8       	bld	r10, 6
    4010:	68 94       	set
    4012:	cc 24       	eor	r12, r12
    4014:	c6 f8       	bld	r12, 6
    4016:	e1 2c       	mov	r14, r1
    4018:	00 e0       	ldi	r16, 0x00	; 0
    401a:	23 e0       	ldi	r18, 0x03	; 3
    401c:	40 e0       	ldi	r20, 0x00	; 0
    401e:	51 ee       	ldi	r21, 0xE1	; 225
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	8c 2f       	mov	r24, r28
    4026:	3d d4       	rcall	.+2170   	; 0x48a2 <serial_new_instance>
    4028:	90 93 83 1b 	sts	0x1B83, r25	; 0x801b83 <_rn2483_serial+0x1>
    402c:	80 93 82 1b 	sts	0x1B82, r24	; 0x801b82 <_rn2483_serial>
    4030:	e0 91 66 1c 	lds	r30, 0x1C66	; 0x801c66 <register_access+0x8>
    4034:	f0 91 67 1c 	lds	r31, 0x1C67	; 0x801c67 <register_access+0x9>
    4038:	64 e0       	ldi	r22, 0x04	; 4
    403a:	87 e0       	ldi	r24, 0x07	; 7
    403c:	91 e0       	ldi	r25, 0x01	; 1
    403e:	19 95       	eicall
    4040:	cf 91       	pop	r28
    4042:	1f 91       	pop	r17
    4044:	0f 91       	pop	r16
    4046:	ef 90       	pop	r14
    4048:	cf 90       	pop	r12
    404a:	af 90       	pop	r10
    404c:	9f 90       	pop	r9
    404e:	8f 90       	pop	r8
    4050:	08 95       	ret

00004052 <lora_driver_reset_rn2483>:
    4052:	88 23       	and	r24, r24
    4054:	49 f0       	breq	.+18     	; 0x4068 <lora_driver_reset_rn2483+0x16>
    4056:	e0 91 70 1c 	lds	r30, 0x1C70	; 0x801c70 <register_access+0x12>
    405a:	f0 91 71 1c 	lds	r31, 0x1C71	; 0x801c71 <register_access+0x13>
    405e:	64 e0       	ldi	r22, 0x04	; 4
    4060:	88 e0       	ldi	r24, 0x08	; 8
    4062:	91 e0       	ldi	r25, 0x01	; 1
    4064:	19 95       	eicall
    4066:	08 95       	ret
    4068:	e0 91 66 1c 	lds	r30, 0x1C66	; 0x801c66 <register_access+0x8>
    406c:	f0 91 67 1c 	lds	r31, 0x1C67	; 0x801c67 <register_access+0x9>
    4070:	64 e0       	ldi	r22, 0x04	; 4
    4072:	88 e0       	ldi	r24, 0x08	; 8
    4074:	91 e0       	ldi	r25, 0x01	; 1
    4076:	19 95       	eicall
    4078:	08 95       	ret

0000407a <lora_driver_rn2483_factory_reset>:
    407a:	60 e0       	ldi	r22, 0x00	; 0
    407c:	70 e0       	ldi	r23, 0x00	; 0
    407e:	8b e8       	ldi	r24, 0x8B	; 139
    4080:	97 e0       	ldi	r25, 0x07	; 7
    4082:	cb de       	rcall	.-618    	; 0x3e1a <_upload_message>
    4084:	e9 e0       	ldi	r30, 0x09	; 9
    4086:	fc e1       	ldi	r31, 0x1C	; 28
    4088:	01 90       	ld	r0, Z+
    408a:	00 20       	and	r0, r0
    408c:	e9 f7       	brne	.-6      	; 0x4088 <lora_driver_rn2483_factory_reset+0xe>
    408e:	31 97       	sbiw	r30, 0x01	; 1
    4090:	e9 50       	subi	r30, 0x09	; 9
    4092:	fc 41       	sbci	r31, 0x1C	; 28
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	75 97       	sbiw	r30, 0x15	; 21
    4098:	08 f0       	brcs	.+2      	; 0x409c <lora_driver_rn2483_factory_reset+0x22>
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	08 95       	ret

0000409e <lora_driver_get_rn2483_hweui>:
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	ec 01       	movw	r28, r24
    40a4:	60 e0       	ldi	r22, 0x00	; 0
    40a6:	70 e0       	ldi	r23, 0x00	; 0
    40a8:	8c e9       	ldi	r24, 0x9C	; 156
    40aa:	97 e0       	ldi	r25, 0x07	; 7
    40ac:	b6 de       	rcall	.-660    	; 0x3e1a <_upload_message>
    40ae:	e9 e0       	ldi	r30, 0x09	; 9
    40b0:	fc e1       	ldi	r31, 0x1C	; 28
    40b2:	01 90       	ld	r0, Z+
    40b4:	00 20       	and	r0, r0
    40b6:	e9 f7       	brne	.-6      	; 0x40b2 <lora_driver_get_rn2483_hweui+0x14>
    40b8:	ea 51       	subi	r30, 0x1A	; 26
    40ba:	fc 41       	sbci	r31, 0x1C	; 28
    40bc:	39 f4       	brne	.+14     	; 0x40cc <lora_driver_get_rn2483_hweui+0x2e>
    40be:	69 e0       	ldi	r22, 0x09	; 9
    40c0:	7c e1       	ldi	r23, 0x1C	; 28
    40c2:	ce 01       	movw	r24, r28
    40c4:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <strcpy>
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <lora_driver_get_rn2483_hweui+0x32>
    40cc:	18 82       	st	Y, r1
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	08 95       	ret

000040d6 <lora_driver_set_device_identifier>:
    40d6:	fc 01       	movw	r30, r24
    40d8:	01 90       	ld	r0, Z+
    40da:	00 20       	and	r0, r0
    40dc:	e9 f7       	brne	.-6      	; 0x40d8 <lora_driver_set_device_identifier+0x2>
    40de:	9f 01       	movw	r18, r30
    40e0:	21 51       	subi	r18, 0x11	; 17
    40e2:	31 09       	sbc	r19, r1
    40e4:	28 17       	cp	r18, r24
    40e6:	39 07       	cpc	r19, r25
    40e8:	29 f4       	brne	.+10     	; 0x40f4 <lora_driver_set_device_identifier+0x1e>
    40ea:	bc 01       	movw	r22, r24
    40ec:	8a ec       	ldi	r24, 0xCA	; 202
    40ee:	97 e0       	ldi	r25, 0x07	; 7
    40f0:	63 cf       	rjmp	.-314    	; 0x3fb8 <_upload_message_rc>
    40f2:	08 95       	ret
    40f4:	89 e0       	ldi	r24, 0x09	; 9
    40f6:	08 95       	ret

000040f8 <lora_driver_set_application_identifier>:
    40f8:	fc 01       	movw	r30, r24
    40fa:	01 90       	ld	r0, Z+
    40fc:	00 20       	and	r0, r0
    40fe:	e9 f7       	brne	.-6      	; 0x40fa <lora_driver_set_application_identifier+0x2>
    4100:	9f 01       	movw	r18, r30
    4102:	21 51       	subi	r18, 0x11	; 17
    4104:	31 09       	sbc	r19, r1
    4106:	28 17       	cp	r18, r24
    4108:	39 07       	cpc	r19, r25
    410a:	29 f4       	brne	.+10     	; 0x4116 <lora_driver_set_application_identifier+0x1e>
    410c:	bc 01       	movw	r22, r24
    410e:	89 ed       	ldi	r24, 0xD9	; 217
    4110:	97 e0       	ldi	r25, 0x07	; 7
    4112:	52 cf       	rjmp	.-348    	; 0x3fb8 <_upload_message_rc>
    4114:	08 95       	ret
    4116:	89 e0       	ldi	r24, 0x09	; 9
    4118:	08 95       	ret

0000411a <lora_driver_set_application_key>:
    411a:	fc 01       	movw	r30, r24
    411c:	01 90       	ld	r0, Z+
    411e:	00 20       	and	r0, r0
    4120:	e9 f7       	brne	.-6      	; 0x411c <lora_driver_set_application_key+0x2>
    4122:	9f 01       	movw	r18, r30
    4124:	21 52       	subi	r18, 0x21	; 33
    4126:	31 09       	sbc	r19, r1
    4128:	28 17       	cp	r18, r24
    412a:	39 07       	cpc	r19, r25
    412c:	29 f4       	brne	.+10     	; 0x4138 <lora_driver_set_application_key+0x1e>
    412e:	bc 01       	movw	r22, r24
    4130:	88 ee       	ldi	r24, 0xE8	; 232
    4132:	97 e0       	ldi	r25, 0x07	; 7
    4134:	41 cf       	rjmp	.-382    	; 0x3fb8 <_upload_message_rc>
    4136:	08 95       	ret
    4138:	89 e0       	ldi	r24, 0x09	; 9
    413a:	08 95       	ret

0000413c <lora_driver_save_mac>:
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	87 e2       	ldi	r24, 0x27	; 39
    4142:	98 e0       	ldi	r25, 0x08	; 8
    4144:	39 cf       	rjmp	.-398    	; 0x3fb8 <_upload_message_rc>
    4146:	08 95       	ret

00004148 <lora_driver_join>:
    4148:	0f 93       	push	r16
    414a:	1f 93       	push	r17
    414c:	e8 2f       	mov	r30, r24
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	ee 0f       	add	r30, r30
    4152:	ff 1f       	adc	r31, r31
    4154:	ef 5f       	subi	r30, 0xFF	; 255
    4156:	f5 4f       	sbci	r31, 0xF5	; 245
    4158:	60 81       	ld	r22, Z
    415a:	71 81       	ldd	r23, Z+1	; 0x01
    415c:	80 e3       	ldi	r24, 0x30	; 48
    415e:	98 e0       	ldi	r25, 0x08	; 8
    4160:	2b df       	rcall	.-426    	; 0x3fb8 <_upload_message_rc>
    4162:	81 11       	cpse	r24, r1
    4164:	14 c0       	rjmp	.+40     	; 0x418e <lora_driver_join+0x46>
    4166:	08 e2       	ldi	r16, 0x28	; 40
    4168:	15 e0       	ldi	r17, 0x05	; 5
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	4d e2       	ldi	r20, 0x2D	; 45
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	69 e0       	ldi	r22, 0x09	; 9
    4174:	7c e1       	ldi	r23, 0x1C	; 28
    4176:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <_serial_reply_buffer_handle>
    417a:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <_serial_reply_buffer_handle+0x1>
    417e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xStreamBufferReceive>
    4182:	88 23       	and	r24, r24
    4184:	21 f0       	breq	.+8      	; 0x418e <lora_driver_join+0x46>
    4186:	89 e0       	ldi	r24, 0x09	; 9
    4188:	9c e1       	ldi	r25, 0x1C	; 28
    418a:	a1 de       	rcall	.-702    	; 0x3ece <_reply2return_code>
    418c:	03 c0       	rjmp	.+6      	; 0x4194 <lora_driver_join+0x4c>
    418e:	89 e0       	ldi	r24, 0x09	; 9
    4190:	9c e1       	ldi	r25, 0x1C	; 28
    4192:	9d de       	rcall	.-710    	; 0x3ece <_reply2return_code>
    4194:	1f 91       	pop	r17
    4196:	0f 91       	pop	r16
    4198:	08 95       	ret

0000419a <lora_driver_sent_upload_message>:
    419a:	0f 93       	push	r16
    419c:	1f 93       	push	r17
    419e:	cf 93       	push	r28
    41a0:	df 93       	push	r29
    41a2:	1f 92       	push	r1
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	db 01       	movw	r26, r22
    41aa:	11 96       	adiw	r26, 0x01	; 1
    41ac:	9c 91       	ld	r25, X
    41ae:	11 97       	sbiw	r26, 0x01	; 1
    41b0:	95 31       	cpi	r25, 0x15	; 21
    41b2:	08 f0       	brcs	.+2      	; 0x41b6 <lora_driver_sent_upload_message+0x1c>
    41b4:	b4 c0       	rjmp	.+360    	; 0x431e <lora_driver_sent_upload_message+0x184>
    41b6:	99 23       	and	r25, r25
    41b8:	81 f1       	breq	.+96     	; 0x421a <lora_driver_sent_upload_message+0x80>
    41ba:	60 e0       	ldi	r22, 0x00	; 0
    41bc:	70 e0       	ldi	r23, 0x00	; 0
    41be:	27 2f       	mov	r18, r23
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	46 2f       	mov	r20, r22
    41c4:	50 e0       	ldi	r21, 0x00	; 0
    41c6:	fd 01       	movw	r30, r26
    41c8:	e4 0f       	add	r30, r20
    41ca:	f5 1f       	adc	r31, r21
    41cc:	92 81       	ldd	r25, Z+2	; 0x02
    41ce:	92 95       	swap	r25
    41d0:	9f 70       	andi	r25, 0x0F	; 15
    41d2:	9a 30       	cpi	r25, 0x0A	; 10
    41d4:	10 f0       	brcs	.+4      	; 0x41da <lora_driver_sent_upload_message+0x40>
    41d6:	99 5c       	subi	r25, 0xC9	; 201
    41d8:	01 c0       	rjmp	.+2      	; 0x41dc <lora_driver_sent_upload_message+0x42>
    41da:	90 5d       	subi	r25, 0xD0	; 208
    41dc:	f9 01       	movw	r30, r18
    41de:	e6 56       	subi	r30, 0x66	; 102
    41e0:	f4 4e       	sbci	r31, 0xE4	; 228
    41e2:	90 83       	st	Z, r25
    41e4:	2f 5f       	subi	r18, 0xFF	; 255
    41e6:	3f 4f       	sbci	r19, 0xFF	; 255
    41e8:	fd 01       	movw	r30, r26
    41ea:	e4 0f       	add	r30, r20
    41ec:	f5 1f       	adc	r31, r21
    41ee:	92 81       	ldd	r25, Z+2	; 0x02
    41f0:	9f 70       	andi	r25, 0x0F	; 15
    41f2:	49 2f       	mov	r20, r25
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	4a 30       	cpi	r20, 0x0A	; 10
    41f8:	51 05       	cpc	r21, r1
    41fa:	14 f0       	brlt	.+4      	; 0x4200 <lora_driver_sent_upload_message+0x66>
    41fc:	99 5c       	subi	r25, 0xC9	; 201
    41fe:	01 c0       	rjmp	.+2      	; 0x4202 <lora_driver_sent_upload_message+0x68>
    4200:	90 5d       	subi	r25, 0xD0	; 208
    4202:	f9 01       	movw	r30, r18
    4204:	e6 56       	subi	r30, 0x66	; 102
    4206:	f4 4e       	sbci	r31, 0xE4	; 228
    4208:	90 83       	st	Z, r25
    420a:	7e 5f       	subi	r23, 0xFE	; 254
    420c:	6f 5f       	subi	r22, 0xFF	; 255
    420e:	11 96       	adiw	r26, 0x01	; 1
    4210:	9c 91       	ld	r25, X
    4212:	11 97       	sbiw	r26, 0x01	; 1
    4214:	69 17       	cp	r22, r25
    4216:	98 f2       	brcs	.-90     	; 0x41be <lora_driver_sent_upload_message+0x24>
    4218:	01 c0       	rjmp	.+2      	; 0x421c <lora_driver_sent_upload_message+0x82>
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	e7 2f       	mov	r30, r23
    421e:	f0 e0       	ldi	r31, 0x00	; 0
    4220:	e6 56       	subi	r30, 0x66	; 102
    4222:	f4 4e       	sbci	r31, 0xE4	; 228
    4224:	10 82       	st	Z, r1
    4226:	4c 91       	ld	r20, X
    4228:	81 11       	cpse	r24, r1
    422a:	03 c0       	rjmp	.+6      	; 0x4232 <lora_driver_sent_upload_message+0x98>
    422c:	89 e3       	ldi	r24, 0x39	; 57
    422e:	98 e0       	ldi	r25, 0x08	; 8
    4230:	02 c0       	rjmp	.+4      	; 0x4236 <lora_driver_sent_upload_message+0x9c>
    4232:	8b e3       	ldi	r24, 0x3B	; 59
    4234:	98 e0       	ldi	r25, 0x08	; 8
    4236:	2a e9       	ldi	r18, 0x9A	; 154
    4238:	3b e1       	ldi	r19, 0x1B	; 27
    423a:	3f 93       	push	r19
    423c:	2f 93       	push	r18
    423e:	1f 92       	push	r1
    4240:	4f 93       	push	r20
    4242:	9f 93       	push	r25
    4244:	8f 93       	push	r24
    4246:	8f e3       	ldi	r24, 0x3F	; 63
    4248:	98 e0       	ldi	r25, 0x08	; 8
    424a:	9f 93       	push	r25
    424c:	8f 93       	push	r24
    424e:	8c ed       	ldi	r24, 0xDC	; 220
    4250:	9b e1       	ldi	r25, 0x1B	; 27
    4252:	9f 93       	push	r25
    4254:	8f 93       	push	r24
    4256:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
    425a:	60 e0       	ldi	r22, 0x00	; 0
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	8c ed       	ldi	r24, 0xDC	; 220
    4260:	9b e1       	ldi	r25, 0x1B	; 27
    4262:	aa de       	rcall	.-684    	; 0x3fb8 <_upload_message_rc>
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	81 11       	cpse	r24, r1
    4270:	59 c0       	rjmp	.+178    	; 0x4324 <lora_driver_sent_upload_message+0x18a>
    4272:	08 e2       	ldi	r16, 0x28	; 40
    4274:	15 e0       	ldi	r17, 0x05	; 5
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	4d e2       	ldi	r20, 0x2D	; 45
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	69 e0       	ldi	r22, 0x09	; 9
    4280:	7c e1       	ldi	r23, 0x1C	; 28
    4282:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <_serial_reply_buffer_handle>
    4286:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <_serial_reply_buffer_handle+0x1>
    428a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xStreamBufferReceive>
    428e:	88 23       	and	r24, r24
    4290:	09 f4       	brne	.+2      	; 0x4294 <lora_driver_sent_upload_message+0xfa>
    4292:	47 c0       	rjmp	.+142    	; 0x4322 <lora_driver_sent_upload_message+0x188>
    4294:	89 e0       	ldi	r24, 0x09	; 9
    4296:	9c e1       	ldi	r25, 0x1C	; 28
    4298:	1a de       	rcall	.-972    	; 0x3ece <_reply2return_code>
    429a:	8e 30       	cpi	r24, 0x0E	; 14
    429c:	09 f0       	breq	.+2      	; 0x42a0 <lora_driver_sent_upload_message+0x106>
    429e:	42 c0       	rjmp	.+132    	; 0x4324 <lora_driver_sent_upload_message+0x18a>
    42a0:	87 e0       	ldi	r24, 0x07	; 7
    42a2:	89 83       	std	Y+1, r24	; 0x01
    42a4:	80 91 7e 1b 	lds	r24, 0x1B7E	; 0x801b7e <_downlinkMessageBuffer>
    42a8:	90 91 7f 1b 	lds	r25, 0x1B7F	; 0x801b7f <_downlinkMessageBuffer+0x1>
    42ac:	89 2b       	or	r24, r25
    42ae:	a9 f1       	breq	.+106    	; 0x431a <lora_driver_sent_upload_message+0x180>
    42b0:	be 01       	movw	r22, r28
    42b2:	6f 5f       	subi	r22, 0xFF	; 255
    42b4:	7f 4f       	sbci	r23, 0xFF	; 255
    42b6:	89 e0       	ldi	r24, 0x09	; 9
    42b8:	9c e1       	ldi	r25, 0x1C	; 28
    42ba:	68 d1       	rcall	.+720    	; 0x458c <decode_port_no>
    42bc:	80 93 84 1b 	sts	0x1B84, r24	; 0x801b84 <_downlink_payload>
    42c0:	e9 81       	ldd	r30, Y+1	; 0x01
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	e7 5f       	subi	r30, 0xF7	; 247
    42c6:	f3 4e       	sbci	r31, 0xE3	; 227
    42c8:	df 01       	movw	r26, r30
    42ca:	0d 90       	ld	r0, X+
    42cc:	00 20       	and	r0, r0
    42ce:	e9 f7       	brne	.-6      	; 0x42ca <lora_driver_sent_upload_message+0x130>
    42d0:	11 97       	sbiw	r26, 0x01	; 1
    42d2:	ae 1b       	sub	r26, r30
    42d4:	bf 0b       	sbc	r27, r31
    42d6:	aa 23       	and	r26, r26
    42d8:	91 f0       	breq	.+36     	; 0x42fe <lora_driver_sent_upload_message+0x164>
    42da:	bb 27       	eor	r27, r27
    42dc:	cd 01       	movw	r24, r26
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	9c 01       	movw	r18, r24
    42e2:	12 f4       	brpl	.+4      	; 0x42e8 <lora_driver_sent_upload_message+0x14e>
    42e4:	2f 5f       	subi	r18, 0xFF	; 255
    42e6:	3f 4f       	sbci	r19, 0xFF	; 255
    42e8:	35 95       	asr	r19
    42ea:	27 95       	ror	r18
    42ec:	20 93 85 1b 	sts	0x1B85, r18	; 0x801b85 <_downlink_payload+0x1>
    42f0:	af 01       	movw	r20, r30
    42f2:	4f 5f       	subi	r20, 0xFF	; 255
    42f4:	5f 4f       	sbci	r21, 0xFF	; 255
    42f6:	64 e1       	ldi	r22, 0x14	; 20
    42f8:	86 e8       	ldi	r24, 0x86	; 134
    42fa:	9b e1       	ldi	r25, 0x1B	; 27
    42fc:	73 d1       	rcall	.+742    	; 0x45e4 <decode_hexadecimal_string_bytes>
    42fe:	01 e0       	ldi	r16, 0x01	; 1
    4300:	10 e0       	ldi	r17, 0x00	; 0
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	46 e1       	ldi	r20, 0x16	; 22
    4308:	50 e0       	ldi	r21, 0x00	; 0
    430a:	64 e8       	ldi	r22, 0x84	; 132
    430c:	7b e1       	ldi	r23, 0x1B	; 27
    430e:	80 91 7e 1b 	lds	r24, 0x1B7E	; 0x801b7e <_downlinkMessageBuffer>
    4312:	90 91 7f 1b 	lds	r25, 0x1B7F	; 0x801b7f <_downlinkMessageBuffer+0x1>
    4316:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xStreamBufferSend>
    431a:	8e e0       	ldi	r24, 0x0E	; 14
    431c:	03 c0       	rjmp	.+6      	; 0x4324 <lora_driver_sent_upload_message+0x18a>
    431e:	84 e1       	ldi	r24, 0x14	; 20
    4320:	01 c0       	rjmp	.+2      	; 0x4324 <lora_driver_sent_upload_message+0x18a>
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	0f 90       	pop	r0
    4326:	df 91       	pop	r29
    4328:	cf 91       	pop	r28
    432a:	1f 91       	pop	r17
    432c:	0f 91       	pop	r16
    432e:	08 95       	ret

00004330 <lora_driver_set_adaptive_data_rate>:
    4330:	81 30       	cpi	r24, 0x01	; 1
    4332:	19 f0       	breq	.+6      	; 0x433a <lora_driver_set_adaptive_data_rate+0xa>
    4334:	6f e4       	ldi	r22, 0x4F	; 79
    4336:	78 e0       	ldi	r23, 0x08	; 8
    4338:	02 c0       	rjmp	.+4      	; 0x433e <lora_driver_set_adaptive_data_rate+0xe>
    433a:	68 e2       	ldi	r22, 0x28	; 40
    433c:	79 e0       	ldi	r23, 0x09	; 9
    433e:	83 e5       	ldi	r24, 0x53	; 83
    4340:	98 e0       	ldi	r25, 0x08	; 8
    4342:	3a ce       	rjmp	.-908    	; 0x3fb8 <_upload_message_rc>
    4344:	08 95       	ret

00004346 <lora_driver_set_receive_delay>:
    4346:	9f 93       	push	r25
    4348:	8f 93       	push	r24
    434a:	84 e8       	ldi	r24, 0x84	; 132
    434c:	98 e0       	ldi	r25, 0x08	; 8
    434e:	9f 93       	push	r25
    4350:	8f 93       	push	r24
    4352:	8c ed       	ldi	r24, 0xDC	; 220
    4354:	9b e1       	ldi	r25, 0x1B	; 27
    4356:	9f 93       	push	r25
    4358:	8f 93       	push	r24
    435a:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
    435e:	60 e0       	ldi	r22, 0x00	; 0
    4360:	70 e0       	ldi	r23, 0x00	; 0
    4362:	8c ed       	ldi	r24, 0xDC	; 220
    4364:	9b e1       	ldi	r25, 0x1B	; 27
    4366:	28 de       	rcall	.-944    	; 0x3fb8 <_upload_message_rc>
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	08 95       	ret

00004376 <lora_driver_configure_to_eu868>:
    4376:	2f 92       	push	r2
    4378:	3f 92       	push	r3
    437a:	4f 92       	push	r4
    437c:	5f 92       	push	r5
    437e:	6f 92       	push	r6
    4380:	7f 92       	push	r7
    4382:	8f 92       	push	r8
    4384:	9f 92       	push	r9
    4386:	af 92       	push	r10
    4388:	bf 92       	push	r11
    438a:	cf 92       	push	r12
    438c:	df 92       	push	r13
    438e:	ef 92       	push	r14
    4390:	ff 92       	push	r15
    4392:	0f 93       	push	r16
    4394:	1f 93       	push	r17
    4396:	cf 93       	push	r28
    4398:	df 93       	push	r29
    439a:	cd b7       	in	r28, 0x3d	; 61
    439c:	de b7       	in	r29, 0x3e	; 62
    439e:	a0 97       	sbiw	r28, 0x20	; 32
    43a0:	0f b6       	in	r0, 0x3f	; 63
    43a2:	f8 94       	cli
    43a4:	de bf       	out	0x3e, r29	; 62
    43a6:	0f be       	out	0x3f, r0	; 63
    43a8:	cd bf       	out	0x3d, r28	; 61
    43aa:	61 eb       	ldi	r22, 0xB1	; 177
    43ac:	78 e0       	ldi	r23, 0x08	; 8
    43ae:	8d eb       	ldi	r24, 0xBD	; 189
    43b0:	98 e0       	ldi	r25, 0x08	; 8
    43b2:	33 dd       	rcall	.-1434   	; 0x3e1a <_upload_message>
    43b4:	8c dd       	rcall	.-1256   	; 0x3ece <_reply2return_code>
    43b6:	81 11       	cpse	r24, r1
    43b8:	a3 c0       	rjmp	.+326    	; 0x4500 <lora_driver_configure_to_eu868+0x18a>
    43ba:	80 e2       	ldi	r24, 0x20	; 32
    43bc:	e1 e2       	ldi	r30, 0x21	; 33
    43be:	f2 e0       	ldi	r31, 0x02	; 2
    43c0:	de 01       	movw	r26, r28
    43c2:	11 96       	adiw	r26, 0x01	; 1
    43c4:	01 90       	ld	r0, Z+
    43c6:	0d 92       	st	X+, r0
    43c8:	8a 95       	dec	r24
    43ca:	e1 f7       	brne	.-8      	; 0x43c4 <lora_driver_configure_to_eu868+0x4e>
    43cc:	9e 01       	movw	r18, r28
    43ce:	2f 5f       	subi	r18, 0xFF	; 255
    43d0:	3f 4f       	sbci	r19, 0xFF	; 255
    43d2:	69 01       	movw	r12, r18
    43d4:	e1 2c       	mov	r14, r1
    43d6:	f1 2c       	mov	r15, r1
    43d8:	0f 2e       	mov	r0, r31
    43da:	f9 ec       	ldi	r31, 0xC9	; 201
    43dc:	af 2e       	mov	r10, r31
    43de:	f8 e0       	ldi	r31, 0x08	; 8
    43e0:	bf 2e       	mov	r11, r31
    43e2:	f0 2d       	mov	r31, r0
    43e4:	0c ed       	ldi	r16, 0xDC	; 220
    43e6:	1b e1       	ldi	r17, 0x1B	; 27
    43e8:	0f 2e       	mov	r0, r31
    43ea:	f2 ee       	ldi	r31, 0xE2	; 226
    43ec:	4f 2e       	mov	r4, r31
    43ee:	f8 e0       	ldi	r31, 0x08	; 8
    43f0:	5f 2e       	mov	r5, r31
    43f2:	f0 2d       	mov	r31, r0
    43f4:	0f 2e       	mov	r0, r31
    43f6:	f9 ef       	ldi	r31, 0xF9	; 249
    43f8:	8f 2e       	mov	r8, r31
    43fa:	f8 e0       	ldi	r31, 0x08	; 8
    43fc:	9f 2e       	mov	r9, r31
    43fe:	f0 2d       	mov	r31, r0
    4400:	0f 2e       	mov	r0, r31
    4402:	f3 e1       	ldi	r31, 0x13	; 19
    4404:	6f 2e       	mov	r6, r31
    4406:	f9 e0       	ldi	r31, 0x09	; 9
    4408:	7f 2e       	mov	r7, r31
    440a:	f0 2d       	mov	r31, r0
    440c:	3e 2c       	mov	r3, r14
    440e:	2f 2c       	mov	r2, r15
    4410:	ff 92       	push	r15
    4412:	ef 92       	push	r14
    4414:	bf 92       	push	r11
    4416:	af 92       	push	r10
    4418:	1f 93       	push	r17
    441a:	0f 93       	push	r16
    441c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	c8 01       	movw	r24, r16
    4426:	f9 dc       	rcall	.-1550   	; 0x3e1a <_upload_message>
    4428:	52 dd       	rcall	.-1372   	; 0x3ece <_reply2return_code>
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	81 11       	cpse	r24, r1
    4438:	63 c0       	rjmp	.+198    	; 0x4500 <lora_driver_configure_to_eu868+0x18a>
    443a:	32 e0       	ldi	r19, 0x02	; 2
    443c:	3e 15       	cp	r19, r14
    443e:	e8 f4       	brcc	.+58     	; 0x447a <lora_driver_configure_to_eu868+0x104>
    4440:	f6 01       	movw	r30, r12
    4442:	83 81       	ldd	r24, Z+3	; 0x03
    4444:	8f 93       	push	r24
    4446:	82 81       	ldd	r24, Z+2	; 0x02
    4448:	8f 93       	push	r24
    444a:	81 81       	ldd	r24, Z+1	; 0x01
    444c:	8f 93       	push	r24
    444e:	80 81       	ld	r24, Z
    4450:	8f 93       	push	r24
    4452:	ff 92       	push	r15
    4454:	ef 92       	push	r14
    4456:	5f 92       	push	r5
    4458:	4f 92       	push	r4
    445a:	1f 93       	push	r17
    445c:	0f 93       	push	r16
    445e:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
    4462:	60 e0       	ldi	r22, 0x00	; 0
    4464:	70 e0       	ldi	r23, 0x00	; 0
    4466:	c8 01       	movw	r24, r16
    4468:	d8 dc       	rcall	.-1616   	; 0x3e1a <_upload_message>
    446a:	31 dd       	rcall	.-1438   	; 0x3ece <_reply2return_code>
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	81 11       	cpse	r24, r1
    4478:	43 c0       	rjmp	.+134    	; 0x4500 <lora_driver_configure_to_eu868+0x18a>
    447a:	2f 92       	push	r2
    447c:	3f 92       	push	r3
    447e:	9f 92       	push	r9
    4480:	8f 92       	push	r8
    4482:	1f 93       	push	r17
    4484:	0f 93       	push	r16
    4486:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
    448a:	60 e0       	ldi	r22, 0x00	; 0
    448c:	70 e0       	ldi	r23, 0x00	; 0
    448e:	c8 01       	movw	r24, r16
    4490:	c4 dc       	rcall	.-1656   	; 0x3e1a <_upload_message>
    4492:	1d dd       	rcall	.-1478   	; 0x3ece <_reply2return_code>
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	81 11       	cpse	r24, r1
    44a2:	2e c0       	rjmp	.+92     	; 0x4500 <lora_driver_configure_to_eu868+0x18a>
    44a4:	2f 92       	push	r2
    44a6:	3f 92       	push	r3
    44a8:	7f 92       	push	r7
    44aa:	6f 92       	push	r6
    44ac:	1f 93       	push	r17
    44ae:	0f 93       	push	r16
    44b0:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <sprintf>
    44b4:	60 e0       	ldi	r22, 0x00	; 0
    44b6:	70 e0       	ldi	r23, 0x00	; 0
    44b8:	c8 01       	movw	r24, r16
    44ba:	af dc       	rcall	.-1698   	; 0x3e1a <_upload_message>
    44bc:	08 dd       	rcall	.-1520   	; 0x3ece <_reply2return_code>
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	0f 90       	pop	r0
    44ca:	81 11       	cpse	r24, r1
    44cc:	19 c0       	rjmp	.+50     	; 0x4500 <lora_driver_configure_to_eu868+0x18a>
    44ce:	3f ef       	ldi	r19, 0xFF	; 255
    44d0:	e3 1a       	sub	r14, r19
    44d2:	f3 0a       	sbc	r15, r19
    44d4:	84 e0       	ldi	r24, 0x04	; 4
    44d6:	c8 0e       	add	r12, r24
    44d8:	d1 1c       	adc	r13, r1
    44da:	98 e0       	ldi	r25, 0x08	; 8
    44dc:	e9 16       	cp	r14, r25
    44de:	f1 04       	cpc	r15, r1
    44e0:	09 f0       	breq	.+2      	; 0x44e4 <lora_driver_configure_to_eu868+0x16e>
    44e2:	94 cf       	rjmp	.-216    	; 0x440c <lora_driver_configure_to_eu868+0x96>
    44e4:	60 e0       	ldi	r22, 0x00	; 0
    44e6:	70 e0       	ldi	r23, 0x00	; 0
    44e8:	8b e2       	ldi	r24, 0x2B	; 43
    44ea:	99 e0       	ldi	r25, 0x09	; 9
    44ec:	96 dc       	rcall	.-1748   	; 0x3e1a <_upload_message>
    44ee:	ef dc       	rcall	.-1570   	; 0x3ece <_reply2return_code>
    44f0:	81 11       	cpse	r24, r1
    44f2:	06 c0       	rjmp	.+12     	; 0x4500 <lora_driver_configure_to_eu868+0x18a>
    44f4:	60 e0       	ldi	r22, 0x00	; 0
    44f6:	70 e0       	ldi	r23, 0x00	; 0
    44f8:	8c e3       	ldi	r24, 0x3C	; 60
    44fa:	99 e0       	ldi	r25, 0x09	; 9
    44fc:	8e dc       	rcall	.-1764   	; 0x3e1a <_upload_message>
    44fe:	e7 dc       	rcall	.-1586   	; 0x3ece <_reply2return_code>
    4500:	a0 96       	adiw	r28, 0x20	; 32
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	f8 94       	cli
    4506:	de bf       	out	0x3e, r29	; 62
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	cd bf       	out	0x3d, r28	; 61
    450c:	df 91       	pop	r29
    450e:	cf 91       	pop	r28
    4510:	1f 91       	pop	r17
    4512:	0f 91       	pop	r16
    4514:	ff 90       	pop	r15
    4516:	ef 90       	pop	r14
    4518:	df 90       	pop	r13
    451a:	cf 90       	pop	r12
    451c:	bf 90       	pop	r11
    451e:	af 90       	pop	r10
    4520:	9f 90       	pop	r9
    4522:	8f 90       	pop	r8
    4524:	7f 90       	pop	r7
    4526:	6f 90       	pop	r6
    4528:	5f 90       	pop	r5
    452a:	4f 90       	pop	r4
    452c:	3f 90       	pop	r3
    452e:	2f 90       	pop	r2
    4530:	08 95       	ret

00004532 <lora_driver_set_otaa_identity>:
    4532:	ef 92       	push	r14
    4534:	ff 92       	push	r15
    4536:	0f 93       	push	r16
    4538:	1f 93       	push	r17
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	ec 01       	movw	r28, r24
    4540:	8b 01       	movw	r16, r22
    4542:	7a 01       	movw	r14, r20
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	f4 de       	rcall	.-536    	; 0x4330 <lora_driver_set_adaptive_data_rate>
    4548:	81 11       	cpse	r24, r1
    454a:	0d c0       	rjmp	.+26     	; 0x4566 <lora_driver_set_otaa_identity+0x34>
    454c:	ce 01       	movw	r24, r28
    454e:	d4 dd       	rcall	.-1112   	; 0x40f8 <lora_driver_set_application_identifier>
    4550:	81 11       	cpse	r24, r1
    4552:	09 c0       	rjmp	.+18     	; 0x4566 <lora_driver_set_otaa_identity+0x34>
    4554:	c8 01       	movw	r24, r16
    4556:	e1 dd       	rcall	.-1086   	; 0x411a <lora_driver_set_application_key>
    4558:	81 11       	cpse	r24, r1
    455a:	05 c0       	rjmp	.+10     	; 0x4566 <lora_driver_set_otaa_identity+0x34>
    455c:	c7 01       	movw	r24, r14
    455e:	bb dd       	rcall	.-1162   	; 0x40d6 <lora_driver_set_device_identifier>
    4560:	81 11       	cpse	r24, r1
    4562:	01 c0       	rjmp	.+2      	; 0x4566 <lora_driver_set_otaa_identity+0x34>
    4564:	eb dd       	rcall	.-1066   	; 0x413c <lora_driver_save_mac>
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	ff 90       	pop	r15
    4570:	ef 90       	pop	r14
    4572:	08 95       	ret

00004574 <lora_driver_map_return_code_to_text>:
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	fc 01       	movw	r30, r24
    4578:	ee 0f       	add	r30, r30
    457a:	ff 1f       	adc	r31, r31
    457c:	8e 0f       	add	r24, r30
    457e:	9f 1f       	adc	r25, r31
    4580:	fc 01       	movw	r30, r24
    4582:	eb 5f       	subi	r30, 0xFB	; 251
    4584:	f5 4f       	sbci	r31, 0xF5	; 245
    4586:	81 81       	ldd	r24, Z+1	; 0x01
    4588:	92 81       	ldd	r25, Z+2	; 0x02
    458a:	08 95       	ret

0000458c <decode_port_no>:
    458c:	dc 01       	movw	r26, r24
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	29 f1       	breq	.+74     	; 0x45dc <decode_port_no+0x50>
    4592:	fb 01       	movw	r30, r22
    4594:	20 81       	ld	r18, Z
    4596:	fc 01       	movw	r30, r24
    4598:	01 90       	ld	r0, Z+
    459a:	00 20       	and	r0, r0
    459c:	e9 f7       	brne	.-6      	; 0x4598 <decode_port_no+0xc>
    459e:	31 97       	sbiw	r30, 0x01	; 1
    45a0:	e8 1b       	sub	r30, r24
    45a2:	f9 0b       	sbc	r31, r25
    45a4:	82 2f       	mov	r24, r18
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	e8 17       	cp	r30, r24
    45aa:	f9 07       	cpc	r31, r25
    45ac:	c8 f0       	brcs	.+50     	; 0x45e0 <decode_port_no+0x54>
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	08 c0       	rjmp	.+16     	; 0x45c2 <decode_port_no+0x36>
    45b2:	88 0f       	add	r24, r24
    45b4:	38 2f       	mov	r19, r24
    45b6:	33 0f       	add	r19, r19
    45b8:	33 0f       	add	r19, r19
    45ba:	83 0f       	add	r24, r19
    45bc:	80 53       	subi	r24, 0x30	; 48
    45be:	89 0f       	add	r24, r25
    45c0:	2f 5f       	subi	r18, 0xFF	; 255
    45c2:	fd 01       	movw	r30, r26
    45c4:	e2 0f       	add	r30, r18
    45c6:	f1 1d       	adc	r31, r1
    45c8:	90 81       	ld	r25, Z
    45ca:	30 ed       	ldi	r19, 0xD0	; 208
    45cc:	39 0f       	add	r19, r25
    45ce:	3a 30       	cpi	r19, 0x0A	; 10
    45d0:	10 f4       	brcc	.+4      	; 0x45d6 <decode_port_no+0x4a>
    45d2:	91 11       	cpse	r25, r1
    45d4:	ee cf       	rjmp	.-36     	; 0x45b2 <decode_port_no+0x26>
    45d6:	fb 01       	movw	r30, r22
    45d8:	20 83       	st	Z, r18
    45da:	08 95       	ret
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	08 95       	ret
    45e0:	80 e0       	ldi	r24, 0x00	; 0
    45e2:	08 95       	ret

000045e4 <decode_hexadecimal_string_bytes>:
    45e4:	0f 93       	push	r16
    45e6:	1f 93       	push	r17
    45e8:	cf 93       	push	r28
    45ea:	df 93       	push	r29
    45ec:	dc 01       	movw	r26, r24
    45ee:	ea 01       	movw	r28, r20
    45f0:	20 97       	sbiw	r28, 0x00	; 0
    45f2:	e1 f1       	breq	.+120    	; 0x466c <decode_hexadecimal_string_bytes+0x88>
    45f4:	fa 01       	movw	r30, r20
    45f6:	01 90       	ld	r0, Z+
    45f8:	00 20       	and	r0, r0
    45fa:	e9 f7       	brne	.-6      	; 0x45f6 <decode_hexadecimal_string_bytes+0x12>
    45fc:	31 97       	sbiw	r30, 0x01	; 1
    45fe:	e4 1b       	sub	r30, r20
    4600:	f5 0b       	sbc	r31, r21
    4602:	32 97       	sbiw	r30, 0x02	; 2
    4604:	10 f5       	brcc	.+68     	; 0x464a <decode_hexadecimal_string_bytes+0x66>
    4606:	32 c0       	rjmp	.+100    	; 0x466c <decode_hexadecimal_string_bytes+0x88>
    4608:	8d 01       	movw	r16, r26
    460a:	04 0f       	add	r16, r20
    460c:	15 1f       	adc	r17, r21
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	ae 01       	movw	r20, r28
    4612:	42 0f       	add	r20, r18
    4614:	53 1f       	adc	r21, r19
    4616:	fa 01       	movw	r30, r20
    4618:	90 81       	ld	r25, Z
    461a:	91 34       	cpi	r25, 0x41	; 65
    461c:	28 f0       	brcs	.+10     	; 0x4628 <decode_hexadecimal_string_bytes+0x44>
    461e:	97 53       	subi	r25, 0x37	; 55
    4620:	59 2f       	mov	r21, r25
    4622:	52 95       	swap	r21
    4624:	50 7f       	andi	r21, 0xF0	; 240
    4626:	03 c0       	rjmp	.+6      	; 0x462e <decode_hexadecimal_string_bytes+0x4a>
    4628:	59 2f       	mov	r21, r25
    462a:	52 95       	swap	r21
    462c:	50 7f       	andi	r21, 0xF0	; 240
    462e:	2c 0f       	add	r18, r28
    4630:	3d 1f       	adc	r19, r29
    4632:	f9 01       	movw	r30, r18
    4634:	91 81       	ldd	r25, Z+1	; 0x01
    4636:	91 34       	cpi	r25, 0x41	; 65
    4638:	10 f0       	brcs	.+4      	; 0x463e <decode_hexadecimal_string_bytes+0x5a>
    463a:	97 53       	subi	r25, 0x37	; 55
    463c:	01 c0       	rjmp	.+2      	; 0x4640 <decode_hexadecimal_string_bytes+0x5c>
    463e:	90 53       	subi	r25, 0x30	; 48
    4640:	95 0f       	add	r25, r21
    4642:	f8 01       	movw	r30, r16
    4644:	90 83       	st	Z, r25
    4646:	8f 5f       	subi	r24, 0xFF	; 255
    4648:	01 c0       	rjmp	.+2      	; 0x464c <decode_hexadecimal_string_bytes+0x68>
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	28 2f       	mov	r18, r24
    464e:	22 0f       	add	r18, r18
    4650:	48 2f       	mov	r20, r24
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	fe 01       	movw	r30, r28
    4656:	01 90       	ld	r0, Z+
    4658:	00 20       	and	r0, r0
    465a:	e9 f7       	brne	.-6      	; 0x4656 <decode_hexadecimal_string_bytes+0x72>
    465c:	31 97       	sbiw	r30, 0x01	; 1
    465e:	ec 1b       	sub	r30, r28
    4660:	fd 0b       	sbc	r31, r29
    4662:	4e 17       	cp	r20, r30
    4664:	5f 07       	cpc	r21, r31
    4666:	10 f4       	brcc	.+4      	; 0x466c <decode_hexadecimal_string_bytes+0x88>
    4668:	86 13       	cpse	r24, r22
    466a:	ce cf       	rjmp	.-100    	; 0x4608 <decode_hexadecimal_string_bytes+0x24>
    466c:	df 91       	pop	r29
    466e:	cf 91       	pop	r28
    4670:	1f 91       	pop	r17
    4672:	0f 91       	pop	r16
    4674:	08 95       	ret

00004676 <reg_read_register>:
    4676:	fc 01       	movw	r30, r24
    4678:	80 81       	ld	r24, Z
    467a:	08 95       	ret

0000467c <reg_read_bit>:
    467c:	fc 01       	movw	r30, r24
    467e:	20 81       	ld	r18, Z
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	02 c0       	rjmp	.+4      	; 0x468a <reg_read_bit+0xe>
    4686:	88 0f       	add	r24, r24
    4688:	99 1f       	adc	r25, r25
    468a:	6a 95       	dec	r22
    468c:	e2 f7       	brpl	.-8      	; 0x4686 <reg_read_bit+0xa>
    468e:	82 23       	and	r24, r18
    4690:	08 95       	ret

00004692 <reg_read_bits>:
    4692:	fc 01       	movw	r30, r24
    4694:	80 81       	ld	r24, Z
    4696:	86 23       	and	r24, r22
    4698:	08 95       	ret

0000469a <reg_set_register>:
    469a:	fc 01       	movw	r30, r24
    469c:	60 83       	st	Z, r22
    469e:	08 95       	ret

000046a0 <reg_clear_register>:
    46a0:	fc 01       	movw	r30, r24
    46a2:	10 82       	st	Z, r1
    46a4:	08 95       	ret

000046a6 <reg_set_bit>:
    46a6:	fc 01       	movw	r30, r24
    46a8:	40 81       	ld	r20, Z
    46aa:	21 e0       	ldi	r18, 0x01	; 1
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	02 c0       	rjmp	.+4      	; 0x46b4 <reg_set_bit+0xe>
    46b0:	22 0f       	add	r18, r18
    46b2:	33 1f       	adc	r19, r19
    46b4:	6a 95       	dec	r22
    46b6:	e2 f7       	brpl	.-8      	; 0x46b0 <reg_set_bit+0xa>
    46b8:	24 2b       	or	r18, r20
    46ba:	20 83       	st	Z, r18
    46bc:	08 95       	ret

000046be <reg_set_bits>:
    46be:	fc 01       	movw	r30, r24
    46c0:	20 81       	ld	r18, Z
    46c2:	62 2b       	or	r22, r18
    46c4:	60 83       	st	Z, r22
    46c6:	08 95       	ret

000046c8 <reg_toggle_bit>:
    46c8:	fc 01       	movw	r30, r24
    46ca:	40 81       	ld	r20, Z
    46cc:	21 e0       	ldi	r18, 0x01	; 1
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	02 c0       	rjmp	.+4      	; 0x46d6 <reg_toggle_bit+0xe>
    46d2:	22 0f       	add	r18, r18
    46d4:	33 1f       	adc	r19, r19
    46d6:	6a 95       	dec	r22
    46d8:	e2 f7       	brpl	.-8      	; 0x46d2 <reg_toggle_bit+0xa>
    46da:	24 27       	eor	r18, r20
    46dc:	20 83       	st	Z, r18
    46de:	08 95       	ret

000046e0 <reg_toggle_bits>:
    46e0:	fc 01       	movw	r30, r24
    46e2:	20 81       	ld	r18, Z
    46e4:	62 27       	eor	r22, r18
    46e6:	60 83       	st	Z, r22
    46e8:	08 95       	ret

000046ea <reg_clear_bit>:
    46ea:	fc 01       	movw	r30, r24
    46ec:	90 81       	ld	r25, Z
    46ee:	21 e0       	ldi	r18, 0x01	; 1
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	02 c0       	rjmp	.+4      	; 0x46f8 <reg_clear_bit+0xe>
    46f4:	22 0f       	add	r18, r18
    46f6:	33 1f       	adc	r19, r19
    46f8:	6a 95       	dec	r22
    46fa:	e2 f7       	brpl	.-8      	; 0x46f4 <reg_clear_bit+0xa>
    46fc:	20 95       	com	r18
    46fe:	29 23       	and	r18, r25
    4700:	20 83       	st	Z, r18
    4702:	08 95       	ret

00004704 <reg_clear_bits>:
    4704:	fc 01       	movw	r30, r24
    4706:	90 81       	ld	r25, Z
    4708:	60 95       	com	r22
    470a:	69 23       	and	r22, r25
    470c:	60 83       	st	Z, r22
    470e:	08 95       	ret

00004710 <_serial_call_back>:
    4710:	80 91 39 1c 	lds	r24, 0x1C39	; 0x801c39 <crc_sum.1941>
    4714:	86 0f       	add	r24, r22
    4716:	80 93 39 1c 	sts	0x1C39, r24	; 0x801c39 <crc_sum.1941>
    471a:	90 91 3c 1c 	lds	r25, 0x1C3C	; 0x801c3c <_mh_state>
    471e:	91 30       	cpi	r25, 0x01	; 1
    4720:	79 f0       	breq	.+30     	; 0x4740 <_serial_call_back+0x30>
    4722:	28 f0       	brcs	.+10     	; 0x472e <_serial_call_back+0x1e>
    4724:	92 30       	cpi	r25, 0x02	; 2
    4726:	a9 f0       	breq	.+42     	; 0x4752 <_serial_call_back+0x42>
    4728:	93 30       	cpi	r25, 0x03	; 3
    472a:	19 f1       	breq	.+70     	; 0x4772 <_serial_call_back+0x62>
    472c:	08 95       	ret
    472e:	6f 3f       	cpi	r22, 0xFF	; 255
    4730:	09 f0       	breq	.+2      	; 0x4734 <_serial_call_back+0x24>
    4732:	48 c0       	rjmp	.+144    	; 0x47c4 <_serial_call_back+0xb4>
    4734:	10 92 39 1c 	sts	0x1C39, r1	; 0x801c39 <crc_sum.1941>
    4738:	81 e0       	ldi	r24, 0x01	; 1
    473a:	80 93 3c 1c 	sts	0x1C3C, r24	; 0x801c3c <_mh_state>
    473e:	08 95       	ret
    4740:	66 38       	cpi	r22, 0x86	; 134
    4742:	09 f0       	breq	.+2      	; 0x4746 <_serial_call_back+0x36>
    4744:	3f c0       	rjmp	.+126    	; 0x47c4 <_serial_call_back+0xb4>
    4746:	10 92 38 1c 	sts	0x1C38, r1	; 0x801c38 <inDex.1939>
    474a:	82 e0       	ldi	r24, 0x02	; 2
    474c:	80 93 3c 1c 	sts	0x1C3C, r24	; 0x801c3c <_mh_state>
    4750:	08 95       	ret
    4752:	e0 91 38 1c 	lds	r30, 0x1C38	; 0x801c38 <inDex.1939>
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	8e 0f       	add	r24, r30
    475a:	80 93 38 1c 	sts	0x1C38, r24	; 0x801c38 <inDex.1939>
    475e:	f0 e0       	ldi	r31, 0x00	; 0
    4760:	ea 5c       	subi	r30, 0xCA	; 202
    4762:	f3 4e       	sbci	r31, 0xE3	; 227
    4764:	60 83       	st	Z, r22
    4766:	82 30       	cpi	r24, 0x02	; 2
    4768:	69 f5       	brne	.+90     	; 0x47c4 <_serial_call_back+0xb4>
    476a:	83 e0       	ldi	r24, 0x03	; 3
    476c:	80 93 3c 1c 	sts	0x1C3C, r24	; 0x801c3c <_mh_state>
    4770:	08 95       	ret
    4772:	90 91 38 1c 	lds	r25, 0x1C38	; 0x801c38 <inDex.1939>
    4776:	21 e0       	ldi	r18, 0x01	; 1
    4778:	29 0f       	add	r18, r25
    477a:	20 93 38 1c 	sts	0x1C38, r18	; 0x801c38 <inDex.1939>
    477e:	96 30       	cpi	r25, 0x06	; 6
    4780:	09 f5       	brne	.+66     	; 0x47c4 <_serial_call_back+0xb4>
    4782:	81 11       	cpse	r24, r1
    4784:	0e c0       	rjmp	.+28     	; 0x47a2 <_serial_call_back+0x92>
    4786:	e6 e3       	ldi	r30, 0x36	; 54
    4788:	fc e1       	ldi	r31, 0x1C	; 28
    478a:	80 81       	ld	r24, Z
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	98 2f       	mov	r25, r24
    4790:	88 27       	eor	r24, r24
    4792:	21 81       	ldd	r18, Z+1	; 0x01
    4794:	82 0f       	add	r24, r18
    4796:	91 1d       	adc	r25, r1
    4798:	90 93 3e 1c 	sts	0x1C3E, r25	; 0x801c3e <_ppm+0x1>
    479c:	80 93 3d 1c 	sts	0x1C3D, r24	; 0x801c3d <_ppm>
    47a0:	04 c0       	rjmp	.+8      	; 0x47aa <_serial_call_back+0x9a>
    47a2:	10 92 3e 1c 	sts	0x1C3E, r1	; 0x801c3e <_ppm+0x1>
    47a6:	10 92 3d 1c 	sts	0x1C3D, r1	; 0x801c3d <_ppm>
    47aa:	10 92 3c 1c 	sts	0x1C3C, r1	; 0x801c3c <_mh_state>
    47ae:	e0 91 3a 1c 	lds	r30, 0x1C3A	; 0x801c3a <_app_call_back>
    47b2:	f0 91 3b 1c 	lds	r31, 0x1C3B	; 0x801c3b <_app_call_back+0x1>
    47b6:	30 97       	sbiw	r30, 0x00	; 0
    47b8:	29 f0       	breq	.+10     	; 0x47c4 <_serial_call_back+0xb4>
    47ba:	80 91 3d 1c 	lds	r24, 0x1C3D	; 0x801c3d <_ppm>
    47be:	90 91 3e 1c 	lds	r25, 0x1C3E	; 0x801c3e <_ppm+0x1>
    47c2:	19 95       	eicall
    47c4:	08 95       	ret

000047c6 <mh_z19_create>:
    47c6:	8f 92       	push	r8
    47c8:	9f 92       	push	r9
    47ca:	af 92       	push	r10
    47cc:	cf 92       	push	r12
    47ce:	ef 92       	push	r14
    47d0:	0f 93       	push	r16
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	eb 01       	movw	r28, r22
    47d8:	0f 2e       	mov	r0, r31
    47da:	f8 e8       	ldi	r31, 0x88	; 136
    47dc:	8f 2e       	mov	r8, r31
    47de:	f3 e2       	ldi	r31, 0x23	; 35
    47e0:	9f 2e       	mov	r9, r31
    47e2:	f0 2d       	mov	r31, r0
    47e4:	68 94       	set
    47e6:	aa 24       	eor	r10, r10
    47e8:	a4 f8       	bld	r10, 4
    47ea:	68 94       	set
    47ec:	cc 24       	eor	r12, r12
    47ee:	c4 f8       	bld	r12, 4
    47f0:	e1 2c       	mov	r14, r1
    47f2:	00 e0       	ldi	r16, 0x00	; 0
    47f4:	23 e0       	ldi	r18, 0x03	; 3
    47f6:	40 e8       	ldi	r20, 0x80	; 128
    47f8:	55 e2       	ldi	r21, 0x25	; 37
    47fa:	60 e0       	ldi	r22, 0x00	; 0
    47fc:	70 e0       	ldi	r23, 0x00	; 0
    47fe:	51 d0       	rcall	.+162    	; 0x48a2 <serial_new_instance>
    4800:	90 93 40 1c 	sts	0x1C40, r25	; 0x801c40 <_serial+0x1>
    4804:	80 93 3f 1c 	sts	0x1C3F, r24	; 0x801c3f <_serial>
    4808:	d0 93 3b 1c 	sts	0x1C3B, r29	; 0x801c3b <_app_call_back+0x1>
    480c:	c0 93 3a 1c 	sts	0x1C3A, r28	; 0x801c3a <_app_call_back>
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	0f 91       	pop	r16
    4816:	ef 90       	pop	r14
    4818:	cf 90       	pop	r12
    481a:	af 90       	pop	r10
    481c:	9f 90       	pop	r9
    481e:	8f 90       	pop	r8
    4820:	08 95       	ret

00004822 <mh_z19_take_meassuring>:
    4822:	cf 93       	push	r28
    4824:	df 93       	push	r29
    4826:	cd b7       	in	r28, 0x3d	; 61
    4828:	de b7       	in	r29, 0x3e	; 62
    482a:	29 97       	sbiw	r28, 0x09	; 9
    482c:	0f b6       	in	r0, 0x3f	; 63
    482e:	f8 94       	cli
    4830:	de bf       	out	0x3e, r29	; 62
    4832:	0f be       	out	0x3f, r0	; 63
    4834:	cd bf       	out	0x3d, r28	; 61
    4836:	89 e0       	ldi	r24, 0x09	; 9
    4838:	e1 e4       	ldi	r30, 0x41	; 65
    483a:	f2 e0       	ldi	r31, 0x02	; 2
    483c:	9e 01       	movw	r18, r28
    483e:	2f 5f       	subi	r18, 0xFF	; 255
    4840:	3f 4f       	sbci	r19, 0xFF	; 255
    4842:	d9 01       	movw	r26, r18
    4844:	01 90       	ld	r0, Z+
    4846:	0d 92       	st	X+, r0
    4848:	8a 95       	dec	r24
    484a:	e1 f7       	brne	.-8      	; 0x4844 <mh_z19_take_meassuring+0x22>
    484c:	10 92 3e 1c 	sts	0x1C3E, r1	; 0x801c3e <_ppm+0x1>
    4850:	10 92 3d 1c 	sts	0x1C3D, r1	; 0x801c3d <_ppm>
    4854:	80 91 3f 1c 	lds	r24, 0x1C3F	; 0x801c3f <_serial>
    4858:	90 91 40 1c 	lds	r25, 0x1C40	; 0x801c40 <_serial+0x1>
    485c:	00 97       	sbiw	r24, 0x00	; 0
    485e:	31 f0       	breq	.+12     	; 0x486c <mh_z19_take_meassuring+0x4a>
    4860:	42 2f       	mov	r20, r18
    4862:	53 2f       	mov	r21, r19
    4864:	69 e0       	ldi	r22, 0x09	; 9
    4866:	d8 d0       	rcall	.+432    	; 0x4a18 <serial_send_bytes>
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	01 c0       	rjmp	.+2      	; 0x486e <mh_z19_take_meassuring+0x4c>
    486c:	82 e0       	ldi	r24, 0x02	; 2
    486e:	29 96       	adiw	r28, 0x09	; 9
    4870:	0f b6       	in	r0, 0x3f	; 63
    4872:	f8 94       	cli
    4874:	de bf       	out	0x3e, r29	; 62
    4876:	0f be       	out	0x3f, r0	; 63
    4878:	cd bf       	out	0x3d, r28	; 61
    487a:	df 91       	pop	r29
    487c:	cf 91       	pop	r28
    487e:	08 95       	ret

00004880 <mh_z19_get_co2_ppm>:
    4880:	20 91 3d 1c 	lds	r18, 0x1C3D	; 0x801c3d <_ppm>
    4884:	30 91 3e 1c 	lds	r19, 0x1C3E	; 0x801c3e <_ppm+0x1>
    4888:	21 15       	cp	r18, r1
    488a:	31 05       	cpc	r19, r1
    488c:	29 f4       	brne	.+10     	; 0x4898 <mh_z19_get_co2_ppm+0x18>
    488e:	fc 01       	movw	r30, r24
    4890:	11 82       	std	Z+1, r1	; 0x01
    4892:	10 82       	st	Z, r1
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	08 95       	ret
    4898:	fc 01       	movw	r30, r24
    489a:	31 83       	std	Z+1, r19	; 0x01
    489c:	20 83       	st	Z, r18
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	08 95       	ret

000048a2 <serial_new_instance>:
    48a2:	2f 92       	push	r2
    48a4:	3f 92       	push	r3
    48a6:	4f 92       	push	r4
    48a8:	5f 92       	push	r5
    48aa:	6f 92       	push	r6
    48ac:	7f 92       	push	r7
    48ae:	8f 92       	push	r8
    48b0:	9f 92       	push	r9
    48b2:	af 92       	push	r10
    48b4:	cf 92       	push	r12
    48b6:	ef 92       	push	r14
    48b8:	ff 92       	push	r15
    48ba:	0f 93       	push	r16
    48bc:	1f 93       	push	r17
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
    48c2:	cd b7       	in	r28, 0x3d	; 61
    48c4:	de b7       	in	r29, 0x3e	; 62
    48c6:	f8 2e       	mov	r15, r24
    48c8:	2a 01       	movw	r4, r20
    48ca:	3b 01       	movw	r6, r22
    48cc:	88 e0       	ldi	r24, 0x08	; 8
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	96 d7       	rcall	.+3884   	; 0x57fe <malloc>
    48d2:	8c 01       	movw	r16, r24
    48d4:	8f 2d       	mov	r24, r15
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	88 0f       	add	r24, r24
    48da:	99 1f       	adc	r25, r25
    48dc:	fc 01       	movw	r30, r24
    48de:	ef 5b       	subi	r30, 0xBF	; 191
    48e0:	f3 4e       	sbci	r31, 0xE3	; 227
    48e2:	11 83       	std	Z+1, r17	; 0x01
    48e4:	00 83       	st	Z, r16
    48e6:	fc 01       	movw	r30, r24
    48e8:	e6 5f       	subi	r30, 0xF6	; 246
    48ea:	fd 4f       	sbci	r31, 0xFD	; 253
    48ec:	80 81       	ld	r24, Z
    48ee:	91 81       	ldd	r25, Z+1	; 0x01
    48f0:	d8 01       	movw	r26, r16
    48f2:	8d 93       	st	X+, r24
    48f4:	9c 93       	st	X, r25
    48f6:	6c 2d       	mov	r22, r12
    48f8:	70 e0       	ldi	r23, 0x00	; 0
    48fa:	84 e0       	ldi	r24, 0x04	; 4
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	65 d7       	rcall	.+3786   	; 0x57ca <calloc>
    4900:	1c 01       	movw	r2, r24
    4902:	61 e0       	ldi	r22, 0x01	; 1
    4904:	70 e0       	ldi	r23, 0x00	; 0
    4906:	86 e0       	ldi	r24, 0x06	; 6
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	5f d7       	rcall	.+3774   	; 0x57ca <calloc>
    490c:	7c 01       	movw	r14, r24
    490e:	4c 2d       	mov	r20, r12
    4910:	b1 01       	movw	r22, r2
    4912:	2b d5       	rcall	.+2646   	; 0x536a <fifo_init>
    4914:	f8 01       	movw	r30, r16
    4916:	f5 82       	std	Z+5, r15	; 0x05
    4918:	e4 82       	std	Z+4, r14	; 0x04
    491a:	6a 2d       	mov	r22, r10
    491c:	70 e0       	ldi	r23, 0x00	; 0
    491e:	84 e0       	ldi	r24, 0x04	; 4
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	53 d7       	rcall	.+3750   	; 0x57ca <calloc>
    4924:	1c 01       	movw	r2, r24
    4926:	61 e0       	ldi	r22, 0x01	; 1
    4928:	70 e0       	ldi	r23, 0x00	; 0
    492a:	86 e0       	ldi	r24, 0x06	; 6
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	4d d7       	rcall	.+3738   	; 0x57ca <calloc>
    4930:	7c 01       	movw	r14, r24
    4932:	4a 2d       	mov	r20, r10
    4934:	b1 01       	movw	r22, r2
    4936:	19 d5       	rcall	.+2610   	; 0x536a <fifo_init>
    4938:	d8 01       	movw	r26, r16
    493a:	13 96       	adiw	r26, 0x03	; 3
    493c:	fc 92       	st	X, r15
    493e:	ee 92       	st	-X, r14
    4940:	12 97       	sbiw	r26, 0x02	; 2
    4942:	17 96       	adiw	r26, 0x07	; 7
    4944:	9c 92       	st	X, r9
    4946:	8e 92       	st	-X, r8
    4948:	16 97       	sbiw	r26, 0x06	; 6
    494a:	ff b6       	in	r15, 0x3f	; 63
    494c:	f8 94       	cli
    494e:	ed 91       	ld	r30, X+
    4950:	fc 91       	ld	r31, X
    4952:	11 97       	sbiw	r26, 0x01	; 1
    4954:	36 97       	sbiw	r30, 0x06	; 6
    4956:	80 81       	ld	r24, Z
    4958:	82 60       	ori	r24, 0x02	; 2
    495a:	80 83       	st	Z, r24
    495c:	8d 90       	ld	r8, X+
    495e:	9c 90       	ld	r9, X
    4960:	c3 01       	movw	r24, r6
    4962:	b2 01       	movw	r22, r4
    4964:	17 d6       	rcall	.+3118   	; 0x5594 <__floatunsisf>
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	40 e0       	ldi	r20, 0x00	; 0
    496c:	51 e4       	ldi	r21, 0x41	; 65
    496e:	a0 d6       	rcall	.+3392   	; 0x56b0 <__mulsf3>
    4970:	9b 01       	movw	r18, r22
    4972:	ac 01       	movw	r20, r24
    4974:	60 e0       	ldi	r22, 0x00	; 0
    4976:	74 e2       	ldi	r23, 0x24	; 36
    4978:	84 e7       	ldi	r24, 0x74	; 116
    497a:	9b e4       	ldi	r25, 0x4B	; 75
    497c:	77 d5       	rcall	.+2798   	; 0x546c <__divsf3>
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	40 e8       	ldi	r20, 0x80	; 128
    4984:	5f e3       	ldi	r21, 0x3F	; 63
    4986:	0d d5       	rcall	.+2586   	; 0x53a2 <__subsf3>
    4988:	d9 d5       	rcall	.+2994   	; 0x553c <__fixunssfsi>
    498a:	f4 01       	movw	r30, r8
    498c:	32 97       	sbiw	r30, 0x02	; 2
    498e:	60 83       	st	Z, r22
    4990:	d8 01       	movw	r26, r16
    4992:	ed 91       	ld	r30, X+
    4994:	fc 91       	ld	r31, X
    4996:	11 97       	sbiw	r26, 0x01	; 1
    4998:	35 97       	sbiw	r30, 0x05	; 5
    499a:	88 e9       	ldi	r24, 0x98	; 152
    499c:	80 83       	st	Z, r24
    499e:	ed 91       	ld	r30, X+
    49a0:	fc 91       	ld	r31, X
    49a2:	34 97       	sbiw	r30, 0x04	; 4
    49a4:	86 e0       	ldi	r24, 0x06	; 6
    49a6:	80 83       	st	Z, r24
    49a8:	ff be       	out	0x3f, r15	; 63
    49aa:	c8 01       	movw	r24, r16
    49ac:	df 91       	pop	r29
    49ae:	cf 91       	pop	r28
    49b0:	1f 91       	pop	r17
    49b2:	0f 91       	pop	r16
    49b4:	ff 90       	pop	r15
    49b6:	ef 90       	pop	r14
    49b8:	cf 90       	pop	r12
    49ba:	af 90       	pop	r10
    49bc:	9f 90       	pop	r9
    49be:	8f 90       	pop	r8
    49c0:	7f 90       	pop	r7
    49c2:	6f 90       	pop	r6
    49c4:	5f 90       	pop	r5
    49c6:	4f 90       	pop	r4
    49c8:	3f 90       	pop	r3
    49ca:	2f 90       	pop	r2
    49cc:	08 95       	ret

000049ce <serial_send_byte>:
    49ce:	cf 93       	push	r28
    49d0:	df 93       	push	r29
    49d2:	ec 01       	movw	r28, r24
    49d4:	ea 81       	ldd	r30, Y+2	; 0x02
    49d6:	fb 81       	ldd	r31, Y+3	; 0x03
    49d8:	93 81       	ldd	r25, Z+3	; 0x03
    49da:	82 81       	ldd	r24, Z+2	; 0x02
    49dc:	25 81       	ldd	r18, Z+5	; 0x05
    49de:	98 1b       	sub	r25, r24
    49e0:	92 23       	and	r25, r18
    49e2:	84 81       	ldd	r24, Z+4	; 0x04
    49e4:	98 17       	cp	r25, r24
    49e6:	a1 f0       	breq	.+40     	; 0x4a10 <serial_send_byte+0x42>
    49e8:	93 81       	ldd	r25, Z+3	; 0x03
    49ea:	26 95       	lsr	r18
    49ec:	29 23       	and	r18, r25
    49ee:	a0 81       	ld	r26, Z
    49f0:	b1 81       	ldd	r27, Z+1	; 0x01
    49f2:	a2 0f       	add	r26, r18
    49f4:	b1 1d       	adc	r27, r1
    49f6:	6c 93       	st	X, r22
    49f8:	9f 5f       	subi	r25, 0xFF	; 255
    49fa:	25 81       	ldd	r18, Z+5	; 0x05
    49fc:	92 23       	and	r25, r18
    49fe:	93 83       	std	Z+3, r25	; 0x03
    4a00:	e8 81       	ld	r30, Y
    4a02:	f9 81       	ldd	r31, Y+1	; 0x01
    4a04:	35 97       	sbiw	r30, 0x05	; 5
    4a06:	80 81       	ld	r24, Z
    4a08:	80 62       	ori	r24, 0x20	; 32
    4a0a:	80 83       	st	Z, r24
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	01 c0       	rjmp	.+2      	; 0x4a12 <serial_send_byte+0x44>
    4a10:	82 e0       	ldi	r24, 0x02	; 2
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	08 95       	ret

00004a18 <serial_send_bytes>:
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	7c 01       	movw	r14, r24
    4a26:	dc 01       	movw	r26, r24
    4a28:	12 96       	adiw	r26, 0x02	; 2
    4a2a:	ed 91       	ld	r30, X+
    4a2c:	fc 91       	ld	r31, X
    4a2e:	13 97       	sbiw	r26, 0x03	; 3
    4a30:	93 81       	ldd	r25, Z+3	; 0x03
    4a32:	82 81       	ldd	r24, Z+2	; 0x02
    4a34:	98 1b       	sub	r25, r24
    4a36:	85 81       	ldd	r24, Z+5	; 0x05
    4a38:	98 23       	and	r25, r24
    4a3a:	84 81       	ldd	r24, Z+4	; 0x04
    4a3c:	89 1b       	sub	r24, r25
    4a3e:	86 17       	cp	r24, r22
    4a40:	98 f1       	brcs	.+102    	; 0x4aa8 <serial_send_bytes+0x90>
    4a42:	66 23       	and	r22, r22
    4a44:	41 f1       	breq	.+80     	; 0x4a96 <serial_send_bytes+0x7e>
    4a46:	84 2f       	mov	r24, r20
    4a48:	95 2f       	mov	r25, r21
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	61 50       	subi	r22, 0x01	; 1
    4a4e:	46 2f       	mov	r20, r22
    4a50:	50 e0       	ldi	r21, 0x00	; 0
    4a52:	4f 5f       	subi	r20, 0xFF	; 255
    4a54:	5f 4f       	sbci	r21, 0xFF	; 255
    4a56:	48 0f       	add	r20, r24
    4a58:	59 1f       	adc	r21, r25
    4a5a:	e7 01       	movw	r28, r14
    4a5c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a5e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a60:	93 81       	ldd	r25, Z+3	; 0x03
    4a62:	82 81       	ldd	r24, Z+2	; 0x02
    4a64:	25 81       	ldd	r18, Z+5	; 0x05
    4a66:	98 1b       	sub	r25, r24
    4a68:	92 23       	and	r25, r18
    4a6a:	84 81       	ldd	r24, Z+4	; 0x04
    4a6c:	98 17       	cp	r25, r24
    4a6e:	79 f0       	breq	.+30     	; 0x4a8e <serial_send_bytes+0x76>
    4a70:	8c 91       	ld	r24, X
    4a72:	93 81       	ldd	r25, Z+3	; 0x03
    4a74:	26 95       	lsr	r18
    4a76:	29 23       	and	r18, r25
    4a78:	60 81       	ld	r22, Z
    4a7a:	71 81       	ldd	r23, Z+1	; 0x01
    4a7c:	8b 01       	movw	r16, r22
    4a7e:	02 0f       	add	r16, r18
    4a80:	11 1d       	adc	r17, r1
    4a82:	e8 01       	movw	r28, r16
    4a84:	88 83       	st	Y, r24
    4a86:	9f 5f       	subi	r25, 0xFF	; 255
    4a88:	85 81       	ldd	r24, Z+5	; 0x05
    4a8a:	98 23       	and	r25, r24
    4a8c:	93 83       	std	Z+3, r25	; 0x03
    4a8e:	11 96       	adiw	r26, 0x01	; 1
    4a90:	a4 17       	cp	r26, r20
    4a92:	b5 07       	cpc	r27, r21
    4a94:	11 f7       	brne	.-60     	; 0x4a5a <serial_send_bytes+0x42>
    4a96:	d7 01       	movw	r26, r14
    4a98:	ed 91       	ld	r30, X+
    4a9a:	fc 91       	ld	r31, X
    4a9c:	35 97       	sbiw	r30, 0x05	; 5
    4a9e:	80 81       	ld	r24, Z
    4aa0:	80 62       	ori	r24, 0x20	; 32
    4aa2:	80 83       	st	Z, r24
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	01 c0       	rjmp	.+2      	; 0x4aaa <serial_send_bytes+0x92>
    4aa8:	82 e0       	ldi	r24, 0x02	; 2
    4aaa:	df 91       	pop	r29
    4aac:	cf 91       	pop	r28
    4aae:	1f 91       	pop	r17
    4ab0:	0f 91       	pop	r16
    4ab2:	ff 90       	pop	r15
    4ab4:	ef 90       	pop	r14
    4ab6:	08 95       	ret

00004ab8 <serial_get_byte>:
    4ab8:	dc 01       	movw	r26, r24
    4aba:	14 96       	adiw	r26, 0x04	; 4
    4abc:	ed 91       	ld	r30, X+
    4abe:	fc 91       	ld	r31, X
    4ac0:	15 97       	sbiw	r26, 0x05	; 5
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	82 81       	ldd	r24, Z+2	; 0x02
    4ac6:	98 17       	cp	r25, r24
    4ac8:	89 f0       	breq	.+34     	; 0x4aec <serial_get_byte+0x34>
    4aca:	92 81       	ldd	r25, Z+2	; 0x02
    4acc:	85 81       	ldd	r24, Z+5	; 0x05
    4ace:	86 95       	lsr	r24
    4ad0:	89 23       	and	r24, r25
    4ad2:	a0 81       	ld	r26, Z
    4ad4:	b1 81       	ldd	r27, Z+1	; 0x01
    4ad6:	a8 0f       	add	r26, r24
    4ad8:	b1 1d       	adc	r27, r1
    4ada:	8c 91       	ld	r24, X
    4adc:	db 01       	movw	r26, r22
    4ade:	8c 93       	st	X, r24
    4ae0:	9f 5f       	subi	r25, 0xFF	; 255
    4ae2:	85 81       	ldd	r24, Z+5	; 0x05
    4ae4:	98 23       	and	r25, r24
    4ae6:	92 83       	std	Z+2, r25	; 0x02
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	08 95       	ret
    4aec:	83 e0       	ldi	r24, 0x03	; 3
    4aee:	08 95       	ret

00004af0 <__vector_25>:
    4af0:	1f 92       	push	r1
    4af2:	0f 92       	push	r0
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	0f 92       	push	r0
    4af8:	11 24       	eor	r1, r1
    4afa:	0b b6       	in	r0, 0x3b	; 59
    4afc:	0f 92       	push	r0
    4afe:	2f 93       	push	r18
    4b00:	3f 93       	push	r19
    4b02:	4f 93       	push	r20
    4b04:	5f 93       	push	r21
    4b06:	6f 93       	push	r22
    4b08:	7f 93       	push	r23
    4b0a:	8f 93       	push	r24
    4b0c:	9f 93       	push	r25
    4b0e:	af 93       	push	r26
    4b10:	bf 93       	push	r27
    4b12:	cf 93       	push	r28
    4b14:	df 93       	push	r29
    4b16:	ef 93       	push	r30
    4b18:	ff 93       	push	r31
    4b1a:	a0 91 41 1c 	lds	r26, 0x1C41	; 0x801c41 <_ser_handle>
    4b1e:	b0 91 42 1c 	lds	r27, 0x1C42	; 0x801c42 <_ser_handle+0x1>
    4b22:	10 97       	sbiw	r26, 0x00	; 0
    4b24:	11 f1       	breq	.+68     	; 0x4b6a <__vector_25+0x7a>
    4b26:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4b2a:	14 96       	adiw	r26, 0x04	; 4
    4b2c:	ed 91       	ld	r30, X+
    4b2e:	fc 91       	ld	r31, X
    4b30:	15 97       	sbiw	r26, 0x05	; 5
    4b32:	93 81       	ldd	r25, Z+3	; 0x03
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	25 81       	ldd	r18, Z+5	; 0x05
    4b38:	98 1b       	sub	r25, r24
    4b3a:	92 23       	and	r25, r18
    4b3c:	84 81       	ldd	r24, Z+4	; 0x04
    4b3e:	98 17       	cp	r25, r24
    4b40:	61 f0       	breq	.+24     	; 0x4b5a <__vector_25+0x6a>
    4b42:	83 81       	ldd	r24, Z+3	; 0x03
    4b44:	26 95       	lsr	r18
    4b46:	28 23       	and	r18, r24
    4b48:	c0 81       	ld	r28, Z
    4b4a:	d1 81       	ldd	r29, Z+1	; 0x01
    4b4c:	c2 0f       	add	r28, r18
    4b4e:	d1 1d       	adc	r29, r1
    4b50:	68 83       	st	Y, r22
    4b52:	8f 5f       	subi	r24, 0xFF	; 255
    4b54:	95 81       	ldd	r25, Z+5	; 0x05
    4b56:	89 23       	and	r24, r25
    4b58:	83 83       	std	Z+3, r24	; 0x03
    4b5a:	16 96       	adiw	r26, 0x06	; 6
    4b5c:	ed 91       	ld	r30, X+
    4b5e:	fc 91       	ld	r31, X
    4b60:	17 97       	sbiw	r26, 0x07	; 7
    4b62:	30 97       	sbiw	r30, 0x00	; 0
    4b64:	11 f0       	breq	.+4      	; 0x4b6a <__vector_25+0x7a>
    4b66:	cd 01       	movw	r24, r26
    4b68:	19 95       	eicall
    4b6a:	ff 91       	pop	r31
    4b6c:	ef 91       	pop	r30
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	bf 91       	pop	r27
    4b74:	af 91       	pop	r26
    4b76:	9f 91       	pop	r25
    4b78:	8f 91       	pop	r24
    4b7a:	7f 91       	pop	r23
    4b7c:	6f 91       	pop	r22
    4b7e:	5f 91       	pop	r21
    4b80:	4f 91       	pop	r20
    4b82:	3f 91       	pop	r19
    4b84:	2f 91       	pop	r18
    4b86:	0f 90       	pop	r0
    4b88:	0b be       	out	0x3b, r0	; 59
    4b8a:	0f 90       	pop	r0
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	0f 90       	pop	r0
    4b90:	1f 90       	pop	r1
    4b92:	18 95       	reti

00004b94 <__vector_26>:
    4b94:	1f 92       	push	r1
    4b96:	0f 92       	push	r0
    4b98:	0f b6       	in	r0, 0x3f	; 63
    4b9a:	0f 92       	push	r0
    4b9c:	11 24       	eor	r1, r1
    4b9e:	0b b6       	in	r0, 0x3b	; 59
    4ba0:	0f 92       	push	r0
    4ba2:	2f 93       	push	r18
    4ba4:	8f 93       	push	r24
    4ba6:	9f 93       	push	r25
    4ba8:	af 93       	push	r26
    4baa:	bf 93       	push	r27
    4bac:	ef 93       	push	r30
    4bae:	ff 93       	push	r31
    4bb0:	e0 91 41 1c 	lds	r30, 0x1C41	; 0x801c41 <_ser_handle>
    4bb4:	f0 91 42 1c 	lds	r31, 0x1C42	; 0x801c42 <_ser_handle+0x1>
    4bb8:	30 97       	sbiw	r30, 0x00	; 0
    4bba:	b9 f0       	breq	.+46     	; 0x4bea <__vector_26+0x56>
    4bbc:	02 80       	ldd	r0, Z+2	; 0x02
    4bbe:	f3 81       	ldd	r31, Z+3	; 0x03
    4bc0:	e0 2d       	mov	r30, r0
    4bc2:	93 81       	ldd	r25, Z+3	; 0x03
    4bc4:	82 81       	ldd	r24, Z+2	; 0x02
    4bc6:	98 17       	cp	r25, r24
    4bc8:	b1 f0       	breq	.+44     	; 0x4bf6 <__vector_26+0x62>
    4bca:	92 81       	ldd	r25, Z+2	; 0x02
    4bcc:	85 81       	ldd	r24, Z+5	; 0x05
    4bce:	28 2f       	mov	r18, r24
    4bd0:	26 95       	lsr	r18
    4bd2:	29 23       	and	r18, r25
    4bd4:	a0 81       	ld	r26, Z
    4bd6:	b1 81       	ldd	r27, Z+1	; 0x01
    4bd8:	a2 0f       	add	r26, r18
    4bda:	b1 1d       	adc	r27, r1
    4bdc:	2c 91       	ld	r18, X
    4bde:	9f 5f       	subi	r25, 0xFF	; 255
    4be0:	89 23       	and	r24, r25
    4be2:	82 83       	std	Z+2, r24	; 0x02
    4be4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4be8:	0b c0       	rjmp	.+22     	; 0x4c00 <__vector_26+0x6c>
    4bea:	e1 ec       	ldi	r30, 0xC1	; 193
    4bec:	f0 e0       	ldi	r31, 0x00	; 0
    4bee:	80 81       	ld	r24, Z
    4bf0:	8f 7d       	andi	r24, 0xDF	; 223
    4bf2:	80 83       	st	Z, r24
    4bf4:	05 c0       	rjmp	.+10     	; 0x4c00 <__vector_26+0x6c>
    4bf6:	e1 ec       	ldi	r30, 0xC1	; 193
    4bf8:	f0 e0       	ldi	r31, 0x00	; 0
    4bfa:	80 81       	ld	r24, Z
    4bfc:	8f 7d       	andi	r24, 0xDF	; 223
    4bfe:	80 83       	st	Z, r24
    4c00:	ff 91       	pop	r31
    4c02:	ef 91       	pop	r30
    4c04:	bf 91       	pop	r27
    4c06:	af 91       	pop	r26
    4c08:	9f 91       	pop	r25
    4c0a:	8f 91       	pop	r24
    4c0c:	2f 91       	pop	r18
    4c0e:	0f 90       	pop	r0
    4c10:	0b be       	out	0x3b, r0	; 59
    4c12:	0f 90       	pop	r0
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	0f 90       	pop	r0
    4c18:	1f 90       	pop	r1
    4c1a:	18 95       	reti

00004c1c <__vector_36>:
    4c1c:	1f 92       	push	r1
    4c1e:	0f 92       	push	r0
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	0f 92       	push	r0
    4c24:	11 24       	eor	r1, r1
    4c26:	0b b6       	in	r0, 0x3b	; 59
    4c28:	0f 92       	push	r0
    4c2a:	2f 93       	push	r18
    4c2c:	3f 93       	push	r19
    4c2e:	4f 93       	push	r20
    4c30:	5f 93       	push	r21
    4c32:	6f 93       	push	r22
    4c34:	7f 93       	push	r23
    4c36:	8f 93       	push	r24
    4c38:	9f 93       	push	r25
    4c3a:	af 93       	push	r26
    4c3c:	bf 93       	push	r27
    4c3e:	cf 93       	push	r28
    4c40:	df 93       	push	r29
    4c42:	ef 93       	push	r30
    4c44:	ff 93       	push	r31
    4c46:	a0 91 43 1c 	lds	r26, 0x1C43	; 0x801c43 <_ser_handle+0x2>
    4c4a:	b0 91 44 1c 	lds	r27, 0x1C44	; 0x801c44 <_ser_handle+0x3>
    4c4e:	10 97       	sbiw	r26, 0x00	; 0
    4c50:	11 f1       	breq	.+68     	; 0x4c96 <__vector_36+0x7a>
    4c52:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4c56:	14 96       	adiw	r26, 0x04	; 4
    4c58:	ed 91       	ld	r30, X+
    4c5a:	fc 91       	ld	r31, X
    4c5c:	15 97       	sbiw	r26, 0x05	; 5
    4c5e:	93 81       	ldd	r25, Z+3	; 0x03
    4c60:	82 81       	ldd	r24, Z+2	; 0x02
    4c62:	25 81       	ldd	r18, Z+5	; 0x05
    4c64:	98 1b       	sub	r25, r24
    4c66:	92 23       	and	r25, r18
    4c68:	84 81       	ldd	r24, Z+4	; 0x04
    4c6a:	98 17       	cp	r25, r24
    4c6c:	61 f0       	breq	.+24     	; 0x4c86 <__vector_36+0x6a>
    4c6e:	83 81       	ldd	r24, Z+3	; 0x03
    4c70:	26 95       	lsr	r18
    4c72:	28 23       	and	r18, r24
    4c74:	c0 81       	ld	r28, Z
    4c76:	d1 81       	ldd	r29, Z+1	; 0x01
    4c78:	c2 0f       	add	r28, r18
    4c7a:	d1 1d       	adc	r29, r1
    4c7c:	68 83       	st	Y, r22
    4c7e:	8f 5f       	subi	r24, 0xFF	; 255
    4c80:	95 81       	ldd	r25, Z+5	; 0x05
    4c82:	89 23       	and	r24, r25
    4c84:	83 83       	std	Z+3, r24	; 0x03
    4c86:	16 96       	adiw	r26, 0x06	; 6
    4c88:	ed 91       	ld	r30, X+
    4c8a:	fc 91       	ld	r31, X
    4c8c:	17 97       	sbiw	r26, 0x07	; 7
    4c8e:	30 97       	sbiw	r30, 0x00	; 0
    4c90:	11 f0       	breq	.+4      	; 0x4c96 <__vector_36+0x7a>
    4c92:	cd 01       	movw	r24, r26
    4c94:	19 95       	eicall
    4c96:	ff 91       	pop	r31
    4c98:	ef 91       	pop	r30
    4c9a:	df 91       	pop	r29
    4c9c:	cf 91       	pop	r28
    4c9e:	bf 91       	pop	r27
    4ca0:	af 91       	pop	r26
    4ca2:	9f 91       	pop	r25
    4ca4:	8f 91       	pop	r24
    4ca6:	7f 91       	pop	r23
    4ca8:	6f 91       	pop	r22
    4caa:	5f 91       	pop	r21
    4cac:	4f 91       	pop	r20
    4cae:	3f 91       	pop	r19
    4cb0:	2f 91       	pop	r18
    4cb2:	0f 90       	pop	r0
    4cb4:	0b be       	out	0x3b, r0	; 59
    4cb6:	0f 90       	pop	r0
    4cb8:	0f be       	out	0x3f, r0	; 63
    4cba:	0f 90       	pop	r0
    4cbc:	1f 90       	pop	r1
    4cbe:	18 95       	reti

00004cc0 <__vector_37>:
    4cc0:	1f 92       	push	r1
    4cc2:	0f 92       	push	r0
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	0f 92       	push	r0
    4cc8:	11 24       	eor	r1, r1
    4cca:	0b b6       	in	r0, 0x3b	; 59
    4ccc:	0f 92       	push	r0
    4cce:	2f 93       	push	r18
    4cd0:	8f 93       	push	r24
    4cd2:	9f 93       	push	r25
    4cd4:	af 93       	push	r26
    4cd6:	bf 93       	push	r27
    4cd8:	ef 93       	push	r30
    4cda:	ff 93       	push	r31
    4cdc:	e0 91 43 1c 	lds	r30, 0x1C43	; 0x801c43 <_ser_handle+0x2>
    4ce0:	f0 91 44 1c 	lds	r31, 0x1C44	; 0x801c44 <_ser_handle+0x3>
    4ce4:	30 97       	sbiw	r30, 0x00	; 0
    4ce6:	b9 f0       	breq	.+46     	; 0x4d16 <__vector_37+0x56>
    4ce8:	02 80       	ldd	r0, Z+2	; 0x02
    4cea:	f3 81       	ldd	r31, Z+3	; 0x03
    4cec:	e0 2d       	mov	r30, r0
    4cee:	93 81       	ldd	r25, Z+3	; 0x03
    4cf0:	82 81       	ldd	r24, Z+2	; 0x02
    4cf2:	98 17       	cp	r25, r24
    4cf4:	b1 f0       	breq	.+44     	; 0x4d22 <__vector_37+0x62>
    4cf6:	92 81       	ldd	r25, Z+2	; 0x02
    4cf8:	85 81       	ldd	r24, Z+5	; 0x05
    4cfa:	28 2f       	mov	r18, r24
    4cfc:	26 95       	lsr	r18
    4cfe:	29 23       	and	r18, r25
    4d00:	a0 81       	ld	r26, Z
    4d02:	b1 81       	ldd	r27, Z+1	; 0x01
    4d04:	a2 0f       	add	r26, r18
    4d06:	b1 1d       	adc	r27, r1
    4d08:	2c 91       	ld	r18, X
    4d0a:	9f 5f       	subi	r25, 0xFF	; 255
    4d0c:	89 23       	and	r24, r25
    4d0e:	82 83       	std	Z+2, r24	; 0x02
    4d10:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4d14:	0b c0       	rjmp	.+22     	; 0x4d2c <__vector_37+0x6c>
    4d16:	e9 ec       	ldi	r30, 0xC9	; 201
    4d18:	f0 e0       	ldi	r31, 0x00	; 0
    4d1a:	80 81       	ld	r24, Z
    4d1c:	8f 7d       	andi	r24, 0xDF	; 223
    4d1e:	80 83       	st	Z, r24
    4d20:	05 c0       	rjmp	.+10     	; 0x4d2c <__vector_37+0x6c>
    4d22:	e9 ec       	ldi	r30, 0xC9	; 201
    4d24:	f0 e0       	ldi	r31, 0x00	; 0
    4d26:	80 81       	ld	r24, Z
    4d28:	8f 7d       	andi	r24, 0xDF	; 223
    4d2a:	80 83       	st	Z, r24
    4d2c:	ff 91       	pop	r31
    4d2e:	ef 91       	pop	r30
    4d30:	bf 91       	pop	r27
    4d32:	af 91       	pop	r26
    4d34:	9f 91       	pop	r25
    4d36:	8f 91       	pop	r24
    4d38:	2f 91       	pop	r18
    4d3a:	0f 90       	pop	r0
    4d3c:	0b be       	out	0x3b, r0	; 59
    4d3e:	0f 90       	pop	r0
    4d40:	0f be       	out	0x3f, r0	; 63
    4d42:	0f 90       	pop	r0
    4d44:	1f 90       	pop	r1
    4d46:	18 95       	reti

00004d48 <__vector_51>:
    4d48:	1f 92       	push	r1
    4d4a:	0f 92       	push	r0
    4d4c:	0f b6       	in	r0, 0x3f	; 63
    4d4e:	0f 92       	push	r0
    4d50:	11 24       	eor	r1, r1
    4d52:	0b b6       	in	r0, 0x3b	; 59
    4d54:	0f 92       	push	r0
    4d56:	2f 93       	push	r18
    4d58:	3f 93       	push	r19
    4d5a:	4f 93       	push	r20
    4d5c:	5f 93       	push	r21
    4d5e:	6f 93       	push	r22
    4d60:	7f 93       	push	r23
    4d62:	8f 93       	push	r24
    4d64:	9f 93       	push	r25
    4d66:	af 93       	push	r26
    4d68:	bf 93       	push	r27
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	ef 93       	push	r30
    4d70:	ff 93       	push	r31
    4d72:	a0 91 45 1c 	lds	r26, 0x1C45	; 0x801c45 <_ser_handle+0x4>
    4d76:	b0 91 46 1c 	lds	r27, 0x1C46	; 0x801c46 <_ser_handle+0x5>
    4d7a:	10 97       	sbiw	r26, 0x00	; 0
    4d7c:	11 f1       	breq	.+68     	; 0x4dc2 <__vector_51+0x7a>
    4d7e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4d82:	14 96       	adiw	r26, 0x04	; 4
    4d84:	ed 91       	ld	r30, X+
    4d86:	fc 91       	ld	r31, X
    4d88:	15 97       	sbiw	r26, 0x05	; 5
    4d8a:	93 81       	ldd	r25, Z+3	; 0x03
    4d8c:	82 81       	ldd	r24, Z+2	; 0x02
    4d8e:	25 81       	ldd	r18, Z+5	; 0x05
    4d90:	98 1b       	sub	r25, r24
    4d92:	92 23       	and	r25, r18
    4d94:	84 81       	ldd	r24, Z+4	; 0x04
    4d96:	98 17       	cp	r25, r24
    4d98:	61 f0       	breq	.+24     	; 0x4db2 <__vector_51+0x6a>
    4d9a:	83 81       	ldd	r24, Z+3	; 0x03
    4d9c:	26 95       	lsr	r18
    4d9e:	28 23       	and	r18, r24
    4da0:	c0 81       	ld	r28, Z
    4da2:	d1 81       	ldd	r29, Z+1	; 0x01
    4da4:	c2 0f       	add	r28, r18
    4da6:	d1 1d       	adc	r29, r1
    4da8:	68 83       	st	Y, r22
    4daa:	8f 5f       	subi	r24, 0xFF	; 255
    4dac:	95 81       	ldd	r25, Z+5	; 0x05
    4dae:	89 23       	and	r24, r25
    4db0:	83 83       	std	Z+3, r24	; 0x03
    4db2:	16 96       	adiw	r26, 0x06	; 6
    4db4:	ed 91       	ld	r30, X+
    4db6:	fc 91       	ld	r31, X
    4db8:	17 97       	sbiw	r26, 0x07	; 7
    4dba:	30 97       	sbiw	r30, 0x00	; 0
    4dbc:	11 f0       	breq	.+4      	; 0x4dc2 <__vector_51+0x7a>
    4dbe:	cd 01       	movw	r24, r26
    4dc0:	19 95       	eicall
    4dc2:	ff 91       	pop	r31
    4dc4:	ef 91       	pop	r30
    4dc6:	df 91       	pop	r29
    4dc8:	cf 91       	pop	r28
    4dca:	bf 91       	pop	r27
    4dcc:	af 91       	pop	r26
    4dce:	9f 91       	pop	r25
    4dd0:	8f 91       	pop	r24
    4dd2:	7f 91       	pop	r23
    4dd4:	6f 91       	pop	r22
    4dd6:	5f 91       	pop	r21
    4dd8:	4f 91       	pop	r20
    4dda:	3f 91       	pop	r19
    4ddc:	2f 91       	pop	r18
    4dde:	0f 90       	pop	r0
    4de0:	0b be       	out	0x3b, r0	; 59
    4de2:	0f 90       	pop	r0
    4de4:	0f be       	out	0x3f, r0	; 63
    4de6:	0f 90       	pop	r0
    4de8:	1f 90       	pop	r1
    4dea:	18 95       	reti

00004dec <__vector_52>:
    4dec:	1f 92       	push	r1
    4dee:	0f 92       	push	r0
    4df0:	0f b6       	in	r0, 0x3f	; 63
    4df2:	0f 92       	push	r0
    4df4:	11 24       	eor	r1, r1
    4df6:	0b b6       	in	r0, 0x3b	; 59
    4df8:	0f 92       	push	r0
    4dfa:	2f 93       	push	r18
    4dfc:	8f 93       	push	r24
    4dfe:	9f 93       	push	r25
    4e00:	af 93       	push	r26
    4e02:	bf 93       	push	r27
    4e04:	ef 93       	push	r30
    4e06:	ff 93       	push	r31
    4e08:	e0 91 45 1c 	lds	r30, 0x1C45	; 0x801c45 <_ser_handle+0x4>
    4e0c:	f0 91 46 1c 	lds	r31, 0x1C46	; 0x801c46 <_ser_handle+0x5>
    4e10:	30 97       	sbiw	r30, 0x00	; 0
    4e12:	b9 f0       	breq	.+46     	; 0x4e42 <__vector_52+0x56>
    4e14:	02 80       	ldd	r0, Z+2	; 0x02
    4e16:	f3 81       	ldd	r31, Z+3	; 0x03
    4e18:	e0 2d       	mov	r30, r0
    4e1a:	93 81       	ldd	r25, Z+3	; 0x03
    4e1c:	82 81       	ldd	r24, Z+2	; 0x02
    4e1e:	98 17       	cp	r25, r24
    4e20:	b1 f0       	breq	.+44     	; 0x4e4e <__vector_52+0x62>
    4e22:	92 81       	ldd	r25, Z+2	; 0x02
    4e24:	85 81       	ldd	r24, Z+5	; 0x05
    4e26:	28 2f       	mov	r18, r24
    4e28:	26 95       	lsr	r18
    4e2a:	29 23       	and	r18, r25
    4e2c:	a0 81       	ld	r26, Z
    4e2e:	b1 81       	ldd	r27, Z+1	; 0x01
    4e30:	a2 0f       	add	r26, r18
    4e32:	b1 1d       	adc	r27, r1
    4e34:	2c 91       	ld	r18, X
    4e36:	9f 5f       	subi	r25, 0xFF	; 255
    4e38:	89 23       	and	r24, r25
    4e3a:	82 83       	std	Z+2, r24	; 0x02
    4e3c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4e40:	0b c0       	rjmp	.+22     	; 0x4e58 <__vector_52+0x6c>
    4e42:	e1 ed       	ldi	r30, 0xD1	; 209
    4e44:	f0 e0       	ldi	r31, 0x00	; 0
    4e46:	80 81       	ld	r24, Z
    4e48:	8f 7d       	andi	r24, 0xDF	; 223
    4e4a:	80 83       	st	Z, r24
    4e4c:	05 c0       	rjmp	.+10     	; 0x4e58 <__vector_52+0x6c>
    4e4e:	e1 ed       	ldi	r30, 0xD1	; 209
    4e50:	f0 e0       	ldi	r31, 0x00	; 0
    4e52:	80 81       	ld	r24, Z
    4e54:	8f 7d       	andi	r24, 0xDF	; 223
    4e56:	80 83       	st	Z, r24
    4e58:	ff 91       	pop	r31
    4e5a:	ef 91       	pop	r30
    4e5c:	bf 91       	pop	r27
    4e5e:	af 91       	pop	r26
    4e60:	9f 91       	pop	r25
    4e62:	8f 91       	pop	r24
    4e64:	2f 91       	pop	r18
    4e66:	0f 90       	pop	r0
    4e68:	0b be       	out	0x3b, r0	; 59
    4e6a:	0f 90       	pop	r0
    4e6c:	0f be       	out	0x3f, r0	; 63
    4e6e:	0f 90       	pop	r0
    4e70:	1f 90       	pop	r1
    4e72:	18 95       	reti

00004e74 <__vector_54>:
    4e74:	1f 92       	push	r1
    4e76:	0f 92       	push	r0
    4e78:	0f b6       	in	r0, 0x3f	; 63
    4e7a:	0f 92       	push	r0
    4e7c:	11 24       	eor	r1, r1
    4e7e:	0b b6       	in	r0, 0x3b	; 59
    4e80:	0f 92       	push	r0
    4e82:	2f 93       	push	r18
    4e84:	3f 93       	push	r19
    4e86:	4f 93       	push	r20
    4e88:	5f 93       	push	r21
    4e8a:	6f 93       	push	r22
    4e8c:	7f 93       	push	r23
    4e8e:	8f 93       	push	r24
    4e90:	9f 93       	push	r25
    4e92:	af 93       	push	r26
    4e94:	bf 93       	push	r27
    4e96:	cf 93       	push	r28
    4e98:	df 93       	push	r29
    4e9a:	ef 93       	push	r30
    4e9c:	ff 93       	push	r31
    4e9e:	a0 91 47 1c 	lds	r26, 0x1C47	; 0x801c47 <_ser_handle+0x6>
    4ea2:	b0 91 48 1c 	lds	r27, 0x1C48	; 0x801c48 <_ser_handle+0x7>
    4ea6:	10 97       	sbiw	r26, 0x00	; 0
    4ea8:	11 f1       	breq	.+68     	; 0x4eee <__vector_54+0x7a>
    4eaa:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4eae:	14 96       	adiw	r26, 0x04	; 4
    4eb0:	ed 91       	ld	r30, X+
    4eb2:	fc 91       	ld	r31, X
    4eb4:	15 97       	sbiw	r26, 0x05	; 5
    4eb6:	93 81       	ldd	r25, Z+3	; 0x03
    4eb8:	82 81       	ldd	r24, Z+2	; 0x02
    4eba:	25 81       	ldd	r18, Z+5	; 0x05
    4ebc:	98 1b       	sub	r25, r24
    4ebe:	92 23       	and	r25, r18
    4ec0:	84 81       	ldd	r24, Z+4	; 0x04
    4ec2:	98 17       	cp	r25, r24
    4ec4:	61 f0       	breq	.+24     	; 0x4ede <__vector_54+0x6a>
    4ec6:	83 81       	ldd	r24, Z+3	; 0x03
    4ec8:	26 95       	lsr	r18
    4eca:	28 23       	and	r18, r24
    4ecc:	c0 81       	ld	r28, Z
    4ece:	d1 81       	ldd	r29, Z+1	; 0x01
    4ed0:	c2 0f       	add	r28, r18
    4ed2:	d1 1d       	adc	r29, r1
    4ed4:	68 83       	st	Y, r22
    4ed6:	8f 5f       	subi	r24, 0xFF	; 255
    4ed8:	95 81       	ldd	r25, Z+5	; 0x05
    4eda:	89 23       	and	r24, r25
    4edc:	83 83       	std	Z+3, r24	; 0x03
    4ede:	16 96       	adiw	r26, 0x06	; 6
    4ee0:	ed 91       	ld	r30, X+
    4ee2:	fc 91       	ld	r31, X
    4ee4:	17 97       	sbiw	r26, 0x07	; 7
    4ee6:	30 97       	sbiw	r30, 0x00	; 0
    4ee8:	11 f0       	breq	.+4      	; 0x4eee <__vector_54+0x7a>
    4eea:	cd 01       	movw	r24, r26
    4eec:	19 95       	eicall
    4eee:	ff 91       	pop	r31
    4ef0:	ef 91       	pop	r30
    4ef2:	df 91       	pop	r29
    4ef4:	cf 91       	pop	r28
    4ef6:	bf 91       	pop	r27
    4ef8:	af 91       	pop	r26
    4efa:	9f 91       	pop	r25
    4efc:	8f 91       	pop	r24
    4efe:	7f 91       	pop	r23
    4f00:	6f 91       	pop	r22
    4f02:	5f 91       	pop	r21
    4f04:	4f 91       	pop	r20
    4f06:	3f 91       	pop	r19
    4f08:	2f 91       	pop	r18
    4f0a:	0f 90       	pop	r0
    4f0c:	0b be       	out	0x3b, r0	; 59
    4f0e:	0f 90       	pop	r0
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	0f 90       	pop	r0
    4f14:	1f 90       	pop	r1
    4f16:	18 95       	reti

00004f18 <__vector_55>:
    4f18:	1f 92       	push	r1
    4f1a:	0f 92       	push	r0
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	0f 92       	push	r0
    4f20:	11 24       	eor	r1, r1
    4f22:	0b b6       	in	r0, 0x3b	; 59
    4f24:	0f 92       	push	r0
    4f26:	2f 93       	push	r18
    4f28:	8f 93       	push	r24
    4f2a:	9f 93       	push	r25
    4f2c:	af 93       	push	r26
    4f2e:	bf 93       	push	r27
    4f30:	ef 93       	push	r30
    4f32:	ff 93       	push	r31
    4f34:	e0 91 47 1c 	lds	r30, 0x1C47	; 0x801c47 <_ser_handle+0x6>
    4f38:	f0 91 48 1c 	lds	r31, 0x1C48	; 0x801c48 <_ser_handle+0x7>
    4f3c:	30 97       	sbiw	r30, 0x00	; 0
    4f3e:	b9 f0       	breq	.+46     	; 0x4f6e <__vector_55+0x56>
    4f40:	02 80       	ldd	r0, Z+2	; 0x02
    4f42:	f3 81       	ldd	r31, Z+3	; 0x03
    4f44:	e0 2d       	mov	r30, r0
    4f46:	93 81       	ldd	r25, Z+3	; 0x03
    4f48:	82 81       	ldd	r24, Z+2	; 0x02
    4f4a:	98 17       	cp	r25, r24
    4f4c:	b1 f0       	breq	.+44     	; 0x4f7a <__vector_55+0x62>
    4f4e:	92 81       	ldd	r25, Z+2	; 0x02
    4f50:	85 81       	ldd	r24, Z+5	; 0x05
    4f52:	28 2f       	mov	r18, r24
    4f54:	26 95       	lsr	r18
    4f56:	29 23       	and	r18, r25
    4f58:	a0 81       	ld	r26, Z
    4f5a:	b1 81       	ldd	r27, Z+1	; 0x01
    4f5c:	a2 0f       	add	r26, r18
    4f5e:	b1 1d       	adc	r27, r1
    4f60:	2c 91       	ld	r18, X
    4f62:	9f 5f       	subi	r25, 0xFF	; 255
    4f64:	89 23       	and	r24, r25
    4f66:	82 83       	std	Z+2, r24	; 0x02
    4f68:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f6c:	0b c0       	rjmp	.+22     	; 0x4f84 <__vector_55+0x6c>
    4f6e:	e1 e3       	ldi	r30, 0x31	; 49
    4f70:	f1 e0       	ldi	r31, 0x01	; 1
    4f72:	80 81       	ld	r24, Z
    4f74:	8f 7d       	andi	r24, 0xDF	; 223
    4f76:	80 83       	st	Z, r24
    4f78:	05 c0       	rjmp	.+10     	; 0x4f84 <__vector_55+0x6c>
    4f7a:	e1 e3       	ldi	r30, 0x31	; 49
    4f7c:	f1 e0       	ldi	r31, 0x01	; 1
    4f7e:	80 81       	ld	r24, Z
    4f80:	8f 7d       	andi	r24, 0xDF	; 223
    4f82:	80 83       	st	Z, r24
    4f84:	ff 91       	pop	r31
    4f86:	ef 91       	pop	r30
    4f88:	bf 91       	pop	r27
    4f8a:	af 91       	pop	r26
    4f8c:	9f 91       	pop	r25
    4f8e:	8f 91       	pop	r24
    4f90:	2f 91       	pop	r18
    4f92:	0f 90       	pop	r0
    4f94:	0b be       	out	0x3b, r0	; 59
    4f96:	0f 90       	pop	r0
    4f98:	0f be       	out	0x3f, r0	; 63
    4f9a:	0f 90       	pop	r0
    4f9c:	1f 90       	pop	r1
    4f9e:	18 95       	reti

00004fa0 <usart_getchar>:
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	1f 92       	push	r1
    4fa6:	cd b7       	in	r28, 0x3d	; 61
    4fa8:	de b7       	in	r29, 0x3e	; 62
    4faa:	be 01       	movw	r22, r28
    4fac:	6f 5f       	subi	r22, 0xFF	; 255
    4fae:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb0:	80 91 49 1c 	lds	r24, 0x1C49	; 0x801c49 <_com_serial_instance>
    4fb4:	90 91 4a 1c 	lds	r25, 0x1C4A	; 0x801c4a <_com_serial_instance+0x1>
    4fb8:	7f dd       	rcall	.-1282   	; 0x4ab8 <serial_get_byte>
    4fba:	81 11       	cpse	r24, r1
    4fbc:	f6 cf       	rjmp	.-20     	; 0x4faa <usart_getchar+0xa>
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	0f 90       	pop	r0
    4fc4:	df 91       	pop	r29
    4fc6:	cf 91       	pop	r28
    4fc8:	08 95       	ret

00004fca <usart_putchar>:
    4fca:	68 2f       	mov	r22, r24
    4fcc:	80 91 49 1c 	lds	r24, 0x1C49	; 0x801c49 <_com_serial_instance>
    4fd0:	90 91 4a 1c 	lds	r25, 0x1C4A	; 0x801c4a <_com_serial_instance+0x1>
    4fd4:	fc dc       	rcall	.-1544   	; 0x49ce <serial_send_byte>
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	08 95       	ret

00004fdc <stdioCreate>:
    4fdc:	8f 92       	push	r8
    4fde:	9f 92       	push	r9
    4fe0:	af 92       	push	r10
    4fe2:	cf 92       	push	r12
    4fe4:	ef 92       	push	r14
    4fe6:	0f 93       	push	r16
    4fe8:	81 2c       	mov	r8, r1
    4fea:	91 2c       	mov	r9, r1
    4fec:	68 94       	set
    4fee:	aa 24       	eor	r10, r10
    4ff0:	a7 f8       	bld	r10, 7
    4ff2:	68 94       	set
    4ff4:	cc 24       	eor	r12, r12
    4ff6:	c7 f8       	bld	r12, 7
    4ff8:	e1 2c       	mov	r14, r1
    4ffa:	00 e0       	ldi	r16, 0x00	; 0
    4ffc:	23 e0       	ldi	r18, 0x03	; 3
    4ffe:	40 e0       	ldi	r20, 0x00	; 0
    5000:	51 ee       	ldi	r21, 0xE1	; 225
    5002:	60 e0       	ldi	r22, 0x00	; 0
    5004:	70 e0       	ldi	r23, 0x00	; 0
    5006:	4d dc       	rcall	.-1894   	; 0x48a2 <serial_new_instance>
    5008:	90 93 4a 1c 	sts	0x1C4A, r25	; 0x801c4a <_com_serial_instance+0x1>
    500c:	80 93 49 1c 	sts	0x1C49, r24	; 0x801c49 <_com_serial_instance>
    5010:	e8 e7       	ldi	r30, 0x78	; 120
    5012:	fc e1       	ldi	r31, 0x1C	; 28
    5014:	82 e1       	ldi	r24, 0x12	; 18
    5016:	92 e0       	ldi	r25, 0x02	; 2
    5018:	91 83       	std	Z+1, r25	; 0x01
    501a:	80 83       	st	Z, r24
    501c:	93 83       	std	Z+3, r25	; 0x03
    501e:	82 83       	std	Z+2, r24	; 0x02
    5020:	0f 91       	pop	r16
    5022:	ef 90       	pop	r14
    5024:	cf 90       	pop	r12
    5026:	af 90       	pop	r10
    5028:	9f 90       	pop	r9
    502a:	8f 90       	pop	r8
    502c:	08 95       	ret

0000502e <_initTwiInterface>:
    502e:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <_twiIsInitiated>
    5032:	81 11       	cpse	r24, r1
    5034:	0c c0       	rjmp	.+24     	; 0x504e <_initTwiInterface+0x20>
    5036:	8c e0       	ldi	r24, 0x0C	; 12
    5038:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    503c:	8f ef       	ldi	r24, 0xFF	; 255
    503e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5042:	84 e0       	ldi	r24, 0x04	; 4
    5044:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	80 93 59 1c 	sts	0x1C59, r24	; 0x801c59 <_twiIsInitiated>
    504e:	08 95       	ret

00005050 <twiCreate>:
    5050:	af 92       	push	r10
    5052:	bf 92       	push	r11
    5054:	cf 92       	push	r12
    5056:	df 92       	push	r13
    5058:	ef 92       	push	r14
    505a:	ff 92       	push	r15
    505c:	0f 93       	push	r16
    505e:	1f 93       	push	r17
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	a8 2e       	mov	r10, r24
    5066:	b6 2e       	mov	r11, r22
    5068:	69 01       	movw	r12, r18
    506a:	7a 01       	movw	r14, r20
    506c:	84 e0       	ldi	r24, 0x04	; 4
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	c6 d3       	rcall	.+1932   	; 0x57fe <malloc>
    5072:	ec 01       	movw	r28, r24
    5074:	89 2b       	or	r24, r25
    5076:	61 f1       	breq	.+88     	; 0x50d0 <twiCreate+0x80>
    5078:	a8 82       	st	Y, r10
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	b8 12       	cpse	r11, r24
    507e:	12 c0       	rjmp	.+36     	; 0x50a4 <twiCreate+0x54>
    5080:	c7 01       	movw	r24, r14
    5082:	b6 01       	movw	r22, r12
    5084:	20 ea       	ldi	r18, 0xA0	; 160
    5086:	36 e8       	ldi	r19, 0x86	; 134
    5088:	41 e0       	ldi	r20, 0x01	; 1
    508a:	50 e0       	ldi	r21, 0x00	; 0
    508c:	74 d3       	rcall	.+1768   	; 0x5776 <__udivmodsi4>
    508e:	da 01       	movw	r26, r20
    5090:	c9 01       	movw	r24, r18
    5092:	40 97       	sbiw	r24, 0x10	; 16
    5094:	a1 09       	sbc	r26, r1
    5096:	b1 09       	sbc	r27, r1
    5098:	b6 95       	lsr	r27
    509a:	a7 95       	ror	r26
    509c:	97 95       	ror	r25
    509e:	87 95       	ror	r24
    50a0:	89 83       	std	Y+1, r24	; 0x01
    50a2:	11 c0       	rjmp	.+34     	; 0x50c6 <twiCreate+0x76>
    50a4:	c7 01       	movw	r24, r14
    50a6:	b6 01       	movw	r22, r12
    50a8:	20 e8       	ldi	r18, 0x80	; 128
    50aa:	3a e1       	ldi	r19, 0x1A	; 26
    50ac:	46 e0       	ldi	r20, 0x06	; 6
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	62 d3       	rcall	.+1732   	; 0x5776 <__udivmodsi4>
    50b2:	da 01       	movw	r26, r20
    50b4:	c9 01       	movw	r24, r18
    50b6:	40 97       	sbiw	r24, 0x10	; 16
    50b8:	a1 09       	sbc	r26, r1
    50ba:	b1 09       	sbc	r27, r1
    50bc:	b6 95       	lsr	r27
    50be:	a7 95       	ror	r26
    50c0:	97 95       	ror	r25
    50c2:	87 95       	ror	r24
    50c4:	89 83       	std	Y+1, r24	; 0x01
    50c6:	1b 83       	std	Y+3, r17	; 0x03
    50c8:	0a 83       	std	Y+2, r16	; 0x02
    50ca:	8c 2f       	mov	r24, r28
    50cc:	9d 2f       	mov	r25, r29
    50ce:	02 c0       	rjmp	.+4      	; 0x50d4 <twiCreate+0x84>
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	df 91       	pop	r29
    50d6:	cf 91       	pop	r28
    50d8:	1f 91       	pop	r17
    50da:	0f 91       	pop	r16
    50dc:	ff 90       	pop	r15
    50de:	ef 90       	pop	r14
    50e0:	df 90       	pop	r13
    50e2:	cf 90       	pop	r12
    50e4:	bf 90       	pop	r11
    50e6:	af 90       	pop	r10
    50e8:	08 95       	ret

000050ea <twiIsBusy>:
    50ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    50ee:	81 70       	andi	r24, 0x01	; 1
    50f0:	08 95       	ret

000050f2 <twiTransmit>:
    50f2:	ff 92       	push	r15
    50f4:	0f 93       	push	r16
    50f6:	1f 93       	push	r17
    50f8:	cf 93       	push	r28
    50fa:	df 93       	push	r29
    50fc:	00 97       	sbiw	r24, 0x00	; 0
    50fe:	d1 f1       	breq	.+116    	; 0x5174 <twiTransmit+0x82>
    5100:	4a 30       	cpi	r20, 0x0A	; 10
    5102:	d0 f5       	brcc	.+116    	; 0x5178 <twiTransmit+0x86>
    5104:	f4 2e       	mov	r15, r20
    5106:	8b 01       	movw	r16, r22
    5108:	ec 01       	movw	r28, r24
    510a:	ef df       	rcall	.-34     	; 0x50ea <twiIsBusy>
    510c:	81 11       	cpse	r24, r1
    510e:	36 c0       	rjmp	.+108    	; 0x517c <twiTransmit+0x8a>
    5110:	80 91 4c 1c 	lds	r24, 0x1C4C	; 0x801c4c <_twiCurrentHandler>
    5114:	90 91 4d 1c 	lds	r25, 0x1C4D	; 0x801c4d <_twiCurrentHandler+0x1>
    5118:	c8 17       	cp	r28, r24
    511a:	d9 07       	cpc	r29, r25
    511c:	41 f0       	breq	.+16     	; 0x512e <twiTransmit+0x3c>
    511e:	87 df       	rcall	.-242    	; 0x502e <_initTwiInterface>
    5120:	89 81       	ldd	r24, Y+1	; 0x01
    5122:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5126:	d0 93 4d 1c 	sts	0x1C4D, r29	; 0x801c4d <_twiCurrentHandler+0x1>
    512a:	c0 93 4c 1c 	sts	0x1C4C, r28	; 0x801c4c <_twiCurrentHandler>
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	8f 0d       	add	r24, r15
    5132:	80 93 4e 1c 	sts	0x1C4E, r24	; 0x801c4e <_twiMessageLen>
    5136:	88 81       	ld	r24, Y
    5138:	88 0f       	add	r24, r24
    513a:	80 93 4f 1c 	sts	0x1C4F, r24	; 0x801c4f <_twiMessageBuffer>
    513e:	ff 20       	and	r15, r15
    5140:	89 f0       	breq	.+34     	; 0x5164 <twiTransmit+0x72>
    5142:	f8 01       	movw	r30, r16
    5144:	a0 e5       	ldi	r26, 0x50	; 80
    5146:	bc e1       	ldi	r27, 0x1C	; 28
    5148:	4f ef       	ldi	r20, 0xFF	; 255
    514a:	4f 0d       	add	r20, r15
    514c:	64 2f       	mov	r22, r20
    514e:	70 e0       	ldi	r23, 0x00	; 0
    5150:	cb 01       	movw	r24, r22
    5152:	01 96       	adiw	r24, 0x01	; 1
    5154:	b8 01       	movw	r22, r16
    5156:	68 0f       	add	r22, r24
    5158:	79 1f       	adc	r23, r25
    515a:	81 91       	ld	r24, Z+
    515c:	8d 93       	st	X+, r24
    515e:	e6 17       	cp	r30, r22
    5160:	f7 07       	cpc	r31, r23
    5162:	d9 f7       	brne	.-10     	; 0x515a <twiTransmit+0x68>
    5164:	88 ef       	ldi	r24, 0xF8	; 248
    5166:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    516a:	85 ea       	ldi	r24, 0xA5	; 165
    516c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5170:	84 e0       	ldi	r24, 0x04	; 4
    5172:	05 c0       	rjmp	.+10     	; 0x517e <twiTransmit+0x8c>
    5174:	86 e0       	ldi	r24, 0x06	; 6
    5176:	03 c0       	rjmp	.+6      	; 0x517e <twiTransmit+0x8c>
    5178:	87 e0       	ldi	r24, 0x07	; 7
    517a:	01 c0       	rjmp	.+2      	; 0x517e <twiTransmit+0x8c>
    517c:	82 e0       	ldi	r24, 0x02	; 2
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	1f 91       	pop	r17
    5184:	0f 91       	pop	r16
    5186:	ff 90       	pop	r15
    5188:	08 95       	ret

0000518a <twiReceive>:
    518a:	1f 93       	push	r17
    518c:	cf 93       	push	r28
    518e:	df 93       	push	r29
    5190:	00 97       	sbiw	r24, 0x00	; 0
    5192:	29 f1       	breq	.+74     	; 0x51de <twiReceive+0x54>
    5194:	6b 30       	cpi	r22, 0x0B	; 11
    5196:	28 f5       	brcc	.+74     	; 0x51e2 <twiReceive+0x58>
    5198:	16 2f       	mov	r17, r22
    519a:	ec 01       	movw	r28, r24
    519c:	a6 df       	rcall	.-180    	; 0x50ea <twiIsBusy>
    519e:	81 11       	cpse	r24, r1
    51a0:	22 c0       	rjmp	.+68     	; 0x51e6 <twiReceive+0x5c>
    51a2:	80 91 4c 1c 	lds	r24, 0x1C4C	; 0x801c4c <_twiCurrentHandler>
    51a6:	90 91 4d 1c 	lds	r25, 0x1C4D	; 0x801c4d <_twiCurrentHandler+0x1>
    51aa:	c8 17       	cp	r28, r24
    51ac:	d9 07       	cpc	r29, r25
    51ae:	41 f0       	breq	.+16     	; 0x51c0 <twiReceive+0x36>
    51b0:	3e df       	rcall	.-388    	; 0x502e <_initTwiInterface>
    51b2:	89 81       	ldd	r24, Y+1	; 0x01
    51b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    51b8:	d0 93 4d 1c 	sts	0x1C4D, r29	; 0x801c4d <_twiCurrentHandler+0x1>
    51bc:	c0 93 4c 1c 	sts	0x1C4C, r28	; 0x801c4c <_twiCurrentHandler>
    51c0:	10 93 4e 1c 	sts	0x1C4E, r17	; 0x801c4e <_twiMessageLen>
    51c4:	88 81       	ld	r24, Y
    51c6:	88 0f       	add	r24, r24
    51c8:	81 60       	ori	r24, 0x01	; 1
    51ca:	80 93 4f 1c 	sts	0x1C4F, r24	; 0x801c4f <_twiMessageBuffer>
    51ce:	88 ef       	ldi	r24, 0xF8	; 248
    51d0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    51d4:	85 ea       	ldi	r24, 0xA5	; 165
    51d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51da:	85 e0       	ldi	r24, 0x05	; 5
    51dc:	05 c0       	rjmp	.+10     	; 0x51e8 <twiReceive+0x5e>
    51de:	86 e0       	ldi	r24, 0x06	; 6
    51e0:	03 c0       	rjmp	.+6      	; 0x51e8 <twiReceive+0x5e>
    51e2:	87 e0       	ldi	r24, 0x07	; 7
    51e4:	01 c0       	rjmp	.+2      	; 0x51e8 <twiReceive+0x5e>
    51e6:	82 e0       	ldi	r24, 0x02	; 2
    51e8:	df 91       	pop	r29
    51ea:	cf 91       	pop	r28
    51ec:	1f 91       	pop	r17
    51ee:	08 95       	ret

000051f0 <__vector_39>:
    51f0:	1f 92       	push	r1
    51f2:	0f 92       	push	r0
    51f4:	0f b6       	in	r0, 0x3f	; 63
    51f6:	0f 92       	push	r0
    51f8:	11 24       	eor	r1, r1
    51fa:	0b b6       	in	r0, 0x3b	; 59
    51fc:	0f 92       	push	r0
    51fe:	2f 93       	push	r18
    5200:	3f 93       	push	r19
    5202:	4f 93       	push	r20
    5204:	5f 93       	push	r21
    5206:	6f 93       	push	r22
    5208:	7f 93       	push	r23
    520a:	8f 93       	push	r24
    520c:	9f 93       	push	r25
    520e:	af 93       	push	r26
    5210:	bf 93       	push	r27
    5212:	ef 93       	push	r30
    5214:	ff 93       	push	r31
    5216:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    521a:	8e 2f       	mov	r24, r30
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	fc 01       	movw	r30, r24
    5220:	38 97       	sbiw	r30, 0x08	; 8
    5222:	e1 35       	cpi	r30, 0x51	; 81
    5224:	f1 05       	cpc	r31, r1
    5226:	08 f0       	brcs	.+2      	; 0x522a <__vector_39+0x3a>
    5228:	75 c0       	rjmp	.+234    	; 0x5314 <__vector_39+0x124>
    522a:	88 27       	eor	r24, r24
    522c:	e4 58       	subi	r30, 0x84	; 132
    522e:	ff 4f       	sbci	r31, 0xFF	; 255
    5230:	8f 4f       	sbci	r24, 0xFF	; 255
    5232:	c3 c2       	rjmp	.+1414   	; 0x57ba <__tablejump2__>
    5234:	10 92 4b 1c 	sts	0x1C4B, r1	; 0x801c4b <_index.1885>
    5238:	e0 91 4b 1c 	lds	r30, 0x1C4B	; 0x801c4b <_index.1885>
    523c:	80 91 4e 1c 	lds	r24, 0x1C4E	; 0x801c4e <_twiMessageLen>
    5240:	e8 17       	cp	r30, r24
    5242:	70 f4       	brcc	.+28     	; 0x5260 <__vector_39+0x70>
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	8e 0f       	add	r24, r30
    5248:	80 93 4b 1c 	sts	0x1C4B, r24	; 0x801c4b <_index.1885>
    524c:	f0 e0       	ldi	r31, 0x00	; 0
    524e:	e1 5b       	subi	r30, 0xB1	; 177
    5250:	f3 4e       	sbci	r31, 0xE3	; 227
    5252:	80 81       	ld	r24, Z
    5254:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5258:	85 e8       	ldi	r24, 0x85	; 133
    525a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    525e:	72 c0       	rjmp	.+228    	; 0x5344 <__vector_39+0x154>
    5260:	84 e9       	ldi	r24, 0x94	; 148
    5262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5266:	80 91 4c 1c 	lds	r24, 0x1C4C	; 0x801c4c <_twiCurrentHandler>
    526a:	90 91 4d 1c 	lds	r25, 0x1C4D	; 0x801c4d <_twiCurrentHandler+0x1>
    526e:	dc 01       	movw	r26, r24
    5270:	12 96       	adiw	r26, 0x02	; 2
    5272:	ed 91       	ld	r30, X+
    5274:	fc 91       	ld	r31, X
    5276:	13 97       	sbiw	r26, 0x03	; 3
    5278:	30 97       	sbiw	r30, 0x00	; 0
    527a:	09 f4       	brne	.+2      	; 0x527e <__vector_39+0x8e>
    527c:	63 c0       	rjmp	.+198    	; 0x5344 <__vector_39+0x154>
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	40 e0       	ldi	r20, 0x00	; 0
    5282:	50 e0       	ldi	r21, 0x00	; 0
    5284:	64 e0       	ldi	r22, 0x04	; 4
    5286:	19 95       	eicall
    5288:	5d c0       	rjmp	.+186    	; 0x5344 <__vector_39+0x154>
    528a:	e0 91 4b 1c 	lds	r30, 0x1C4B	; 0x801c4b <_index.1885>
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	8e 0f       	add	r24, r30
    5292:	80 93 4b 1c 	sts	0x1C4B, r24	; 0x801c4b <_index.1885>
    5296:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	e1 5b       	subi	r30, 0xB1	; 177
    529e:	f3 4e       	sbci	r31, 0xE3	; 227
    52a0:	80 83       	st	Z, r24
    52a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    52a6:	80 34       	cpi	r24, 0x40	; 64
    52a8:	11 f4       	brne	.+4      	; 0x52ae <__vector_39+0xbe>
    52aa:	10 92 4b 1c 	sts	0x1C4B, r1	; 0x801c4b <_index.1885>
    52ae:	20 91 4b 1c 	lds	r18, 0x1C4B	; 0x801c4b <_index.1885>
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	80 91 4e 1c 	lds	r24, 0x1C4E	; 0x801c4e <_twiMessageLen>
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	01 97       	sbiw	r24, 0x01	; 1
    52bc:	28 17       	cp	r18, r24
    52be:	39 07       	cpc	r19, r25
    52c0:	24 f4       	brge	.+8      	; 0x52ca <__vector_39+0xda>
    52c2:	85 ec       	ldi	r24, 0xC5	; 197
    52c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52c8:	3d c0       	rjmp	.+122    	; 0x5344 <__vector_39+0x154>
    52ca:	85 e8       	ldi	r24, 0x85	; 133
    52cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52d0:	39 c0       	rjmp	.+114    	; 0x5344 <__vector_39+0x154>
    52d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    52d6:	e0 91 4b 1c 	lds	r30, 0x1C4B	; 0x801c4b <_index.1885>
    52da:	f0 e0       	ldi	r31, 0x00	; 0
    52dc:	e1 5b       	subi	r30, 0xB1	; 177
    52de:	f3 4e       	sbci	r31, 0xE3	; 227
    52e0:	80 83       	st	Z, r24
    52e2:	84 e9       	ldi	r24, 0x94	; 148
    52e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52e8:	80 91 4c 1c 	lds	r24, 0x1C4C	; 0x801c4c <_twiCurrentHandler>
    52ec:	90 91 4d 1c 	lds	r25, 0x1C4D	; 0x801c4d <_twiCurrentHandler+0x1>
    52f0:	dc 01       	movw	r26, r24
    52f2:	12 96       	adiw	r26, 0x02	; 2
    52f4:	ed 91       	ld	r30, X+
    52f6:	fc 91       	ld	r31, X
    52f8:	13 97       	sbiw	r26, 0x03	; 3
    52fa:	30 97       	sbiw	r30, 0x00	; 0
    52fc:	19 f1       	breq	.+70     	; 0x5344 <__vector_39+0x154>
    52fe:	20 91 4e 1c 	lds	r18, 0x1C4E	; 0x801c4e <_twiMessageLen>
    5302:	4f e4       	ldi	r20, 0x4F	; 79
    5304:	5c e1       	ldi	r21, 0x1C	; 28
    5306:	65 e0       	ldi	r22, 0x05	; 5
    5308:	19 95       	eicall
    530a:	1c c0       	rjmp	.+56     	; 0x5344 <__vector_39+0x154>
    530c:	85 ea       	ldi	r24, 0xA5	; 165
    530e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5312:	18 c0       	rjmp	.+48     	; 0x5344 <__vector_39+0x154>
    5314:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5318:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    531c:	84 e0       	ldi	r24, 0x04	; 4
    531e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5322:	80 91 4c 1c 	lds	r24, 0x1C4C	; 0x801c4c <_twiCurrentHandler>
    5326:	90 91 4d 1c 	lds	r25, 0x1C4D	; 0x801c4d <_twiCurrentHandler+0x1>
    532a:	dc 01       	movw	r26, r24
    532c:	12 96       	adiw	r26, 0x02	; 2
    532e:	ed 91       	ld	r30, X+
    5330:	fc 91       	ld	r31, X
    5332:	13 97       	sbiw	r26, 0x03	; 3
    5334:	30 97       	sbiw	r30, 0x00	; 0
    5336:	31 f0       	breq	.+12     	; 0x5344 <__vector_39+0x154>
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	40 e0       	ldi	r20, 0x00	; 0
    533c:	50 e0       	ldi	r21, 0x00	; 0
    533e:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    5342:	19 95       	eicall
    5344:	ff 91       	pop	r31
    5346:	ef 91       	pop	r30
    5348:	bf 91       	pop	r27
    534a:	af 91       	pop	r26
    534c:	9f 91       	pop	r25
    534e:	8f 91       	pop	r24
    5350:	7f 91       	pop	r23
    5352:	6f 91       	pop	r22
    5354:	5f 91       	pop	r21
    5356:	4f 91       	pop	r20
    5358:	3f 91       	pop	r19
    535a:	2f 91       	pop	r18
    535c:	0f 90       	pop	r0
    535e:	0b be       	out	0x3b, r0	; 59
    5360:	0f 90       	pop	r0
    5362:	0f be       	out	0x3f, r0	; 63
    5364:	0f 90       	pop	r0
    5366:	1f 90       	pop	r1
    5368:	18 95       	reti

0000536a <fifo_init>:
    536a:	fc 01       	movw	r30, r24
    536c:	41 11       	cpse	r20, r1
    536e:	01 c0       	rjmp	.+2      	; 0x5372 <fifo_init+0x8>
    5370:	67 d3       	rcall	.+1742   	; 0x5a40 <abort>
    5372:	84 2f       	mov	r24, r20
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	9c 01       	movw	r18, r24
    5378:	21 50       	subi	r18, 0x01	; 1
    537a:	31 09       	sbc	r19, r1
    537c:	82 23       	and	r24, r18
    537e:	93 23       	and	r25, r19
    5380:	89 2b       	or	r24, r25
    5382:	09 f0       	breq	.+2      	; 0x5386 <fifo_init+0x1c>
    5384:	5d d3       	rcall	.+1722   	; 0x5a40 <abort>
    5386:	41 38       	cpi	r20, 0x81	; 129
    5388:	08 f0       	brcs	.+2      	; 0x538c <fifo_init+0x22>
    538a:	5a d3       	rcall	.+1716   	; 0x5a40 <abort>
    538c:	12 82       	std	Z+2, r1	; 0x02
    538e:	13 82       	std	Z+3, r1	; 0x03
    5390:	44 83       	std	Z+4, r20	; 0x04
    5392:	44 0f       	add	r20, r20
    5394:	41 50       	subi	r20, 0x01	; 1
    5396:	45 83       	std	Z+5, r20	; 0x05
    5398:	71 83       	std	Z+1, r23	; 0x01
    539a:	60 83       	st	Z, r22
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	08 95       	ret

000053a2 <__subsf3>:
    53a2:	50 58       	subi	r21, 0x80	; 128

000053a4 <__addsf3>:
    53a4:	bb 27       	eor	r27, r27
    53a6:	aa 27       	eor	r26, r26
    53a8:	0e d0       	rcall	.+28     	; 0x53c6 <__addsf3x>
    53aa:	48 c1       	rjmp	.+656    	; 0x563c <__fp_round>
    53ac:	39 d1       	rcall	.+626    	; 0x5620 <__fp_pscA>
    53ae:	30 f0       	brcs	.+12     	; 0x53bc <__addsf3+0x18>
    53b0:	3e d1       	rcall	.+636    	; 0x562e <__fp_pscB>
    53b2:	20 f0       	brcs	.+8      	; 0x53bc <__addsf3+0x18>
    53b4:	31 f4       	brne	.+12     	; 0x53c2 <__addsf3+0x1e>
    53b6:	9f 3f       	cpi	r25, 0xFF	; 255
    53b8:	11 f4       	brne	.+4      	; 0x53be <__addsf3+0x1a>
    53ba:	1e f4       	brtc	.+6      	; 0x53c2 <__addsf3+0x1e>
    53bc:	2e c1       	rjmp	.+604    	; 0x561a <__fp_nan>
    53be:	0e f4       	brtc	.+2      	; 0x53c2 <__addsf3+0x1e>
    53c0:	e0 95       	com	r30
    53c2:	e7 fb       	bst	r30, 7
    53c4:	24 c1       	rjmp	.+584    	; 0x560e <__fp_inf>

000053c6 <__addsf3x>:
    53c6:	e9 2f       	mov	r30, r25
    53c8:	4a d1       	rcall	.+660    	; 0x565e <__fp_split3>
    53ca:	80 f3       	brcs	.-32     	; 0x53ac <__addsf3+0x8>
    53cc:	ba 17       	cp	r27, r26
    53ce:	62 07       	cpc	r22, r18
    53d0:	73 07       	cpc	r23, r19
    53d2:	84 07       	cpc	r24, r20
    53d4:	95 07       	cpc	r25, r21
    53d6:	18 f0       	brcs	.+6      	; 0x53de <__addsf3x+0x18>
    53d8:	71 f4       	brne	.+28     	; 0x53f6 <__addsf3x+0x30>
    53da:	9e f5       	brtc	.+102    	; 0x5442 <__addsf3x+0x7c>
    53dc:	62 c1       	rjmp	.+708    	; 0x56a2 <__fp_zero>
    53de:	0e f4       	brtc	.+2      	; 0x53e2 <__addsf3x+0x1c>
    53e0:	e0 95       	com	r30
    53e2:	0b 2e       	mov	r0, r27
    53e4:	ba 2f       	mov	r27, r26
    53e6:	a0 2d       	mov	r26, r0
    53e8:	0b 01       	movw	r0, r22
    53ea:	b9 01       	movw	r22, r18
    53ec:	90 01       	movw	r18, r0
    53ee:	0c 01       	movw	r0, r24
    53f0:	ca 01       	movw	r24, r20
    53f2:	a0 01       	movw	r20, r0
    53f4:	11 24       	eor	r1, r1
    53f6:	ff 27       	eor	r31, r31
    53f8:	59 1b       	sub	r21, r25
    53fa:	99 f0       	breq	.+38     	; 0x5422 <__addsf3x+0x5c>
    53fc:	59 3f       	cpi	r21, 0xF9	; 249
    53fe:	50 f4       	brcc	.+20     	; 0x5414 <__addsf3x+0x4e>
    5400:	50 3e       	cpi	r21, 0xE0	; 224
    5402:	68 f1       	brcs	.+90     	; 0x545e <__addsf3x+0x98>
    5404:	1a 16       	cp	r1, r26
    5406:	f0 40       	sbci	r31, 0x00	; 0
    5408:	a2 2f       	mov	r26, r18
    540a:	23 2f       	mov	r18, r19
    540c:	34 2f       	mov	r19, r20
    540e:	44 27       	eor	r20, r20
    5410:	58 5f       	subi	r21, 0xF8	; 248
    5412:	f3 cf       	rjmp	.-26     	; 0x53fa <__addsf3x+0x34>
    5414:	46 95       	lsr	r20
    5416:	37 95       	ror	r19
    5418:	27 95       	ror	r18
    541a:	a7 95       	ror	r26
    541c:	f0 40       	sbci	r31, 0x00	; 0
    541e:	53 95       	inc	r21
    5420:	c9 f7       	brne	.-14     	; 0x5414 <__addsf3x+0x4e>
    5422:	7e f4       	brtc	.+30     	; 0x5442 <__addsf3x+0x7c>
    5424:	1f 16       	cp	r1, r31
    5426:	ba 0b       	sbc	r27, r26
    5428:	62 0b       	sbc	r22, r18
    542a:	73 0b       	sbc	r23, r19
    542c:	84 0b       	sbc	r24, r20
    542e:	ba f0       	brmi	.+46     	; 0x545e <__addsf3x+0x98>
    5430:	91 50       	subi	r25, 0x01	; 1
    5432:	a1 f0       	breq	.+40     	; 0x545c <__addsf3x+0x96>
    5434:	ff 0f       	add	r31, r31
    5436:	bb 1f       	adc	r27, r27
    5438:	66 1f       	adc	r22, r22
    543a:	77 1f       	adc	r23, r23
    543c:	88 1f       	adc	r24, r24
    543e:	c2 f7       	brpl	.-16     	; 0x5430 <__addsf3x+0x6a>
    5440:	0e c0       	rjmp	.+28     	; 0x545e <__addsf3x+0x98>
    5442:	ba 0f       	add	r27, r26
    5444:	62 1f       	adc	r22, r18
    5446:	73 1f       	adc	r23, r19
    5448:	84 1f       	adc	r24, r20
    544a:	48 f4       	brcc	.+18     	; 0x545e <__addsf3x+0x98>
    544c:	87 95       	ror	r24
    544e:	77 95       	ror	r23
    5450:	67 95       	ror	r22
    5452:	b7 95       	ror	r27
    5454:	f7 95       	ror	r31
    5456:	9e 3f       	cpi	r25, 0xFE	; 254
    5458:	08 f0       	brcs	.+2      	; 0x545c <__addsf3x+0x96>
    545a:	b3 cf       	rjmp	.-154    	; 0x53c2 <__addsf3+0x1e>
    545c:	93 95       	inc	r25
    545e:	88 0f       	add	r24, r24
    5460:	08 f0       	brcs	.+2      	; 0x5464 <__addsf3x+0x9e>
    5462:	99 27       	eor	r25, r25
    5464:	ee 0f       	add	r30, r30
    5466:	97 95       	ror	r25
    5468:	87 95       	ror	r24
    546a:	08 95       	ret

0000546c <__divsf3>:
    546c:	0c d0       	rcall	.+24     	; 0x5486 <__divsf3x>
    546e:	e6 c0       	rjmp	.+460    	; 0x563c <__fp_round>
    5470:	de d0       	rcall	.+444    	; 0x562e <__fp_pscB>
    5472:	40 f0       	brcs	.+16     	; 0x5484 <__divsf3+0x18>
    5474:	d5 d0       	rcall	.+426    	; 0x5620 <__fp_pscA>
    5476:	30 f0       	brcs	.+12     	; 0x5484 <__divsf3+0x18>
    5478:	21 f4       	brne	.+8      	; 0x5482 <__divsf3+0x16>
    547a:	5f 3f       	cpi	r21, 0xFF	; 255
    547c:	19 f0       	breq	.+6      	; 0x5484 <__divsf3+0x18>
    547e:	c7 c0       	rjmp	.+398    	; 0x560e <__fp_inf>
    5480:	51 11       	cpse	r21, r1
    5482:	10 c1       	rjmp	.+544    	; 0x56a4 <__fp_szero>
    5484:	ca c0       	rjmp	.+404    	; 0x561a <__fp_nan>

00005486 <__divsf3x>:
    5486:	eb d0       	rcall	.+470    	; 0x565e <__fp_split3>
    5488:	98 f3       	brcs	.-26     	; 0x5470 <__divsf3+0x4>

0000548a <__divsf3_pse>:
    548a:	99 23       	and	r25, r25
    548c:	c9 f3       	breq	.-14     	; 0x5480 <__divsf3+0x14>
    548e:	55 23       	and	r21, r21
    5490:	b1 f3       	breq	.-20     	; 0x547e <__divsf3+0x12>
    5492:	95 1b       	sub	r25, r21
    5494:	55 0b       	sbc	r21, r21
    5496:	bb 27       	eor	r27, r27
    5498:	aa 27       	eor	r26, r26
    549a:	62 17       	cp	r22, r18
    549c:	73 07       	cpc	r23, r19
    549e:	84 07       	cpc	r24, r20
    54a0:	38 f0       	brcs	.+14     	; 0x54b0 <__divsf3_pse+0x26>
    54a2:	9f 5f       	subi	r25, 0xFF	; 255
    54a4:	5f 4f       	sbci	r21, 0xFF	; 255
    54a6:	22 0f       	add	r18, r18
    54a8:	33 1f       	adc	r19, r19
    54aa:	44 1f       	adc	r20, r20
    54ac:	aa 1f       	adc	r26, r26
    54ae:	a9 f3       	breq	.-22     	; 0x549a <__divsf3_pse+0x10>
    54b0:	33 d0       	rcall	.+102    	; 0x5518 <__divsf3_pse+0x8e>
    54b2:	0e 2e       	mov	r0, r30
    54b4:	3a f0       	brmi	.+14     	; 0x54c4 <__divsf3_pse+0x3a>
    54b6:	e0 e8       	ldi	r30, 0x80	; 128
    54b8:	30 d0       	rcall	.+96     	; 0x551a <__divsf3_pse+0x90>
    54ba:	91 50       	subi	r25, 0x01	; 1
    54bc:	50 40       	sbci	r21, 0x00	; 0
    54be:	e6 95       	lsr	r30
    54c0:	00 1c       	adc	r0, r0
    54c2:	ca f7       	brpl	.-14     	; 0x54b6 <__divsf3_pse+0x2c>
    54c4:	29 d0       	rcall	.+82     	; 0x5518 <__divsf3_pse+0x8e>
    54c6:	fe 2f       	mov	r31, r30
    54c8:	27 d0       	rcall	.+78     	; 0x5518 <__divsf3_pse+0x8e>
    54ca:	66 0f       	add	r22, r22
    54cc:	77 1f       	adc	r23, r23
    54ce:	88 1f       	adc	r24, r24
    54d0:	bb 1f       	adc	r27, r27
    54d2:	26 17       	cp	r18, r22
    54d4:	37 07       	cpc	r19, r23
    54d6:	48 07       	cpc	r20, r24
    54d8:	ab 07       	cpc	r26, r27
    54da:	b0 e8       	ldi	r27, 0x80	; 128
    54dc:	09 f0       	breq	.+2      	; 0x54e0 <__divsf3_pse+0x56>
    54de:	bb 0b       	sbc	r27, r27
    54e0:	80 2d       	mov	r24, r0
    54e2:	bf 01       	movw	r22, r30
    54e4:	ff 27       	eor	r31, r31
    54e6:	93 58       	subi	r25, 0x83	; 131
    54e8:	5f 4f       	sbci	r21, 0xFF	; 255
    54ea:	2a f0       	brmi	.+10     	; 0x54f6 <__divsf3_pse+0x6c>
    54ec:	9e 3f       	cpi	r25, 0xFE	; 254
    54ee:	51 05       	cpc	r21, r1
    54f0:	68 f0       	brcs	.+26     	; 0x550c <__divsf3_pse+0x82>
    54f2:	8d c0       	rjmp	.+282    	; 0x560e <__fp_inf>
    54f4:	d7 c0       	rjmp	.+430    	; 0x56a4 <__fp_szero>
    54f6:	5f 3f       	cpi	r21, 0xFF	; 255
    54f8:	ec f3       	brlt	.-6      	; 0x54f4 <__divsf3_pse+0x6a>
    54fa:	98 3e       	cpi	r25, 0xE8	; 232
    54fc:	dc f3       	brlt	.-10     	; 0x54f4 <__divsf3_pse+0x6a>
    54fe:	86 95       	lsr	r24
    5500:	77 95       	ror	r23
    5502:	67 95       	ror	r22
    5504:	b7 95       	ror	r27
    5506:	f7 95       	ror	r31
    5508:	9f 5f       	subi	r25, 0xFF	; 255
    550a:	c9 f7       	brne	.-14     	; 0x54fe <__divsf3_pse+0x74>
    550c:	88 0f       	add	r24, r24
    550e:	91 1d       	adc	r25, r1
    5510:	96 95       	lsr	r25
    5512:	87 95       	ror	r24
    5514:	97 f9       	bld	r25, 7
    5516:	08 95       	ret
    5518:	e1 e0       	ldi	r30, 0x01	; 1
    551a:	66 0f       	add	r22, r22
    551c:	77 1f       	adc	r23, r23
    551e:	88 1f       	adc	r24, r24
    5520:	bb 1f       	adc	r27, r27
    5522:	62 17       	cp	r22, r18
    5524:	73 07       	cpc	r23, r19
    5526:	84 07       	cpc	r24, r20
    5528:	ba 07       	cpc	r27, r26
    552a:	20 f0       	brcs	.+8      	; 0x5534 <__divsf3_pse+0xaa>
    552c:	62 1b       	sub	r22, r18
    552e:	73 0b       	sbc	r23, r19
    5530:	84 0b       	sbc	r24, r20
    5532:	ba 0b       	sbc	r27, r26
    5534:	ee 1f       	adc	r30, r30
    5536:	88 f7       	brcc	.-30     	; 0x551a <__divsf3_pse+0x90>
    5538:	e0 95       	com	r30
    553a:	08 95       	ret

0000553c <__fixunssfsi>:
    553c:	98 d0       	rcall	.+304    	; 0x566e <__fp_splitA>
    553e:	88 f0       	brcs	.+34     	; 0x5562 <__fixunssfsi+0x26>
    5540:	9f 57       	subi	r25, 0x7F	; 127
    5542:	90 f0       	brcs	.+36     	; 0x5568 <__fixunssfsi+0x2c>
    5544:	b9 2f       	mov	r27, r25
    5546:	99 27       	eor	r25, r25
    5548:	b7 51       	subi	r27, 0x17	; 23
    554a:	a0 f0       	brcs	.+40     	; 0x5574 <__fixunssfsi+0x38>
    554c:	d1 f0       	breq	.+52     	; 0x5582 <__fixunssfsi+0x46>
    554e:	66 0f       	add	r22, r22
    5550:	77 1f       	adc	r23, r23
    5552:	88 1f       	adc	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	1a f0       	brmi	.+6      	; 0x555e <__fixunssfsi+0x22>
    5558:	ba 95       	dec	r27
    555a:	c9 f7       	brne	.-14     	; 0x554e <__fixunssfsi+0x12>
    555c:	12 c0       	rjmp	.+36     	; 0x5582 <__fixunssfsi+0x46>
    555e:	b1 30       	cpi	r27, 0x01	; 1
    5560:	81 f0       	breq	.+32     	; 0x5582 <__fixunssfsi+0x46>
    5562:	9f d0       	rcall	.+318    	; 0x56a2 <__fp_zero>
    5564:	b1 e0       	ldi	r27, 0x01	; 1
    5566:	08 95       	ret
    5568:	9c c0       	rjmp	.+312    	; 0x56a2 <__fp_zero>
    556a:	67 2f       	mov	r22, r23
    556c:	78 2f       	mov	r23, r24
    556e:	88 27       	eor	r24, r24
    5570:	b8 5f       	subi	r27, 0xF8	; 248
    5572:	39 f0       	breq	.+14     	; 0x5582 <__fixunssfsi+0x46>
    5574:	b9 3f       	cpi	r27, 0xF9	; 249
    5576:	cc f3       	brlt	.-14     	; 0x556a <__fixunssfsi+0x2e>
    5578:	86 95       	lsr	r24
    557a:	77 95       	ror	r23
    557c:	67 95       	ror	r22
    557e:	b3 95       	inc	r27
    5580:	d9 f7       	brne	.-10     	; 0x5578 <__fixunssfsi+0x3c>
    5582:	3e f4       	brtc	.+14     	; 0x5592 <__fixunssfsi+0x56>
    5584:	90 95       	com	r25
    5586:	80 95       	com	r24
    5588:	70 95       	com	r23
    558a:	61 95       	neg	r22
    558c:	7f 4f       	sbci	r23, 0xFF	; 255
    558e:	8f 4f       	sbci	r24, 0xFF	; 255
    5590:	9f 4f       	sbci	r25, 0xFF	; 255
    5592:	08 95       	ret

00005594 <__floatunsisf>:
    5594:	e8 94       	clt
    5596:	09 c0       	rjmp	.+18     	; 0x55aa <__floatsisf+0x12>

00005598 <__floatsisf>:
    5598:	97 fb       	bst	r25, 7
    559a:	3e f4       	brtc	.+14     	; 0x55aa <__floatsisf+0x12>
    559c:	90 95       	com	r25
    559e:	80 95       	com	r24
    55a0:	70 95       	com	r23
    55a2:	61 95       	neg	r22
    55a4:	7f 4f       	sbci	r23, 0xFF	; 255
    55a6:	8f 4f       	sbci	r24, 0xFF	; 255
    55a8:	9f 4f       	sbci	r25, 0xFF	; 255
    55aa:	99 23       	and	r25, r25
    55ac:	a9 f0       	breq	.+42     	; 0x55d8 <__floatsisf+0x40>
    55ae:	f9 2f       	mov	r31, r25
    55b0:	96 e9       	ldi	r25, 0x96	; 150
    55b2:	bb 27       	eor	r27, r27
    55b4:	93 95       	inc	r25
    55b6:	f6 95       	lsr	r31
    55b8:	87 95       	ror	r24
    55ba:	77 95       	ror	r23
    55bc:	67 95       	ror	r22
    55be:	b7 95       	ror	r27
    55c0:	f1 11       	cpse	r31, r1
    55c2:	f8 cf       	rjmp	.-16     	; 0x55b4 <__floatsisf+0x1c>
    55c4:	fa f4       	brpl	.+62     	; 0x5604 <__floatsisf+0x6c>
    55c6:	bb 0f       	add	r27, r27
    55c8:	11 f4       	brne	.+4      	; 0x55ce <__floatsisf+0x36>
    55ca:	60 ff       	sbrs	r22, 0
    55cc:	1b c0       	rjmp	.+54     	; 0x5604 <__floatsisf+0x6c>
    55ce:	6f 5f       	subi	r22, 0xFF	; 255
    55d0:	7f 4f       	sbci	r23, 0xFF	; 255
    55d2:	8f 4f       	sbci	r24, 0xFF	; 255
    55d4:	9f 4f       	sbci	r25, 0xFF	; 255
    55d6:	16 c0       	rjmp	.+44     	; 0x5604 <__floatsisf+0x6c>
    55d8:	88 23       	and	r24, r24
    55da:	11 f0       	breq	.+4      	; 0x55e0 <__floatsisf+0x48>
    55dc:	96 e9       	ldi	r25, 0x96	; 150
    55de:	11 c0       	rjmp	.+34     	; 0x5602 <__floatsisf+0x6a>
    55e0:	77 23       	and	r23, r23
    55e2:	21 f0       	breq	.+8      	; 0x55ec <__floatsisf+0x54>
    55e4:	9e e8       	ldi	r25, 0x8E	; 142
    55e6:	87 2f       	mov	r24, r23
    55e8:	76 2f       	mov	r23, r22
    55ea:	05 c0       	rjmp	.+10     	; 0x55f6 <__floatsisf+0x5e>
    55ec:	66 23       	and	r22, r22
    55ee:	71 f0       	breq	.+28     	; 0x560c <__floatsisf+0x74>
    55f0:	96 e8       	ldi	r25, 0x86	; 134
    55f2:	86 2f       	mov	r24, r22
    55f4:	70 e0       	ldi	r23, 0x00	; 0
    55f6:	60 e0       	ldi	r22, 0x00	; 0
    55f8:	2a f0       	brmi	.+10     	; 0x5604 <__floatsisf+0x6c>
    55fa:	9a 95       	dec	r25
    55fc:	66 0f       	add	r22, r22
    55fe:	77 1f       	adc	r23, r23
    5600:	88 1f       	adc	r24, r24
    5602:	da f7       	brpl	.-10     	; 0x55fa <__floatsisf+0x62>
    5604:	88 0f       	add	r24, r24
    5606:	96 95       	lsr	r25
    5608:	87 95       	ror	r24
    560a:	97 f9       	bld	r25, 7
    560c:	08 95       	ret

0000560e <__fp_inf>:
    560e:	97 f9       	bld	r25, 7
    5610:	9f 67       	ori	r25, 0x7F	; 127
    5612:	80 e8       	ldi	r24, 0x80	; 128
    5614:	70 e0       	ldi	r23, 0x00	; 0
    5616:	60 e0       	ldi	r22, 0x00	; 0
    5618:	08 95       	ret

0000561a <__fp_nan>:
    561a:	9f ef       	ldi	r25, 0xFF	; 255
    561c:	80 ec       	ldi	r24, 0xC0	; 192
    561e:	08 95       	ret

00005620 <__fp_pscA>:
    5620:	00 24       	eor	r0, r0
    5622:	0a 94       	dec	r0
    5624:	16 16       	cp	r1, r22
    5626:	17 06       	cpc	r1, r23
    5628:	18 06       	cpc	r1, r24
    562a:	09 06       	cpc	r0, r25
    562c:	08 95       	ret

0000562e <__fp_pscB>:
    562e:	00 24       	eor	r0, r0
    5630:	0a 94       	dec	r0
    5632:	12 16       	cp	r1, r18
    5634:	13 06       	cpc	r1, r19
    5636:	14 06       	cpc	r1, r20
    5638:	05 06       	cpc	r0, r21
    563a:	08 95       	ret

0000563c <__fp_round>:
    563c:	09 2e       	mov	r0, r25
    563e:	03 94       	inc	r0
    5640:	00 0c       	add	r0, r0
    5642:	11 f4       	brne	.+4      	; 0x5648 <__fp_round+0xc>
    5644:	88 23       	and	r24, r24
    5646:	52 f0       	brmi	.+20     	; 0x565c <__fp_round+0x20>
    5648:	bb 0f       	add	r27, r27
    564a:	40 f4       	brcc	.+16     	; 0x565c <__fp_round+0x20>
    564c:	bf 2b       	or	r27, r31
    564e:	11 f4       	brne	.+4      	; 0x5654 <__fp_round+0x18>
    5650:	60 ff       	sbrs	r22, 0
    5652:	04 c0       	rjmp	.+8      	; 0x565c <__fp_round+0x20>
    5654:	6f 5f       	subi	r22, 0xFF	; 255
    5656:	7f 4f       	sbci	r23, 0xFF	; 255
    5658:	8f 4f       	sbci	r24, 0xFF	; 255
    565a:	9f 4f       	sbci	r25, 0xFF	; 255
    565c:	08 95       	ret

0000565e <__fp_split3>:
    565e:	57 fd       	sbrc	r21, 7
    5660:	90 58       	subi	r25, 0x80	; 128
    5662:	44 0f       	add	r20, r20
    5664:	55 1f       	adc	r21, r21
    5666:	59 f0       	breq	.+22     	; 0x567e <__fp_splitA+0x10>
    5668:	5f 3f       	cpi	r21, 0xFF	; 255
    566a:	71 f0       	breq	.+28     	; 0x5688 <__fp_splitA+0x1a>
    566c:	47 95       	ror	r20

0000566e <__fp_splitA>:
    566e:	88 0f       	add	r24, r24
    5670:	97 fb       	bst	r25, 7
    5672:	99 1f       	adc	r25, r25
    5674:	61 f0       	breq	.+24     	; 0x568e <__fp_splitA+0x20>
    5676:	9f 3f       	cpi	r25, 0xFF	; 255
    5678:	79 f0       	breq	.+30     	; 0x5698 <__fp_splitA+0x2a>
    567a:	87 95       	ror	r24
    567c:	08 95       	ret
    567e:	12 16       	cp	r1, r18
    5680:	13 06       	cpc	r1, r19
    5682:	14 06       	cpc	r1, r20
    5684:	55 1f       	adc	r21, r21
    5686:	f2 cf       	rjmp	.-28     	; 0x566c <__fp_split3+0xe>
    5688:	46 95       	lsr	r20
    568a:	f1 df       	rcall	.-30     	; 0x566e <__fp_splitA>
    568c:	08 c0       	rjmp	.+16     	; 0x569e <__fp_splitA+0x30>
    568e:	16 16       	cp	r1, r22
    5690:	17 06       	cpc	r1, r23
    5692:	18 06       	cpc	r1, r24
    5694:	99 1f       	adc	r25, r25
    5696:	f1 cf       	rjmp	.-30     	; 0x567a <__fp_splitA+0xc>
    5698:	86 95       	lsr	r24
    569a:	71 05       	cpc	r23, r1
    569c:	61 05       	cpc	r22, r1
    569e:	08 94       	sec
    56a0:	08 95       	ret

000056a2 <__fp_zero>:
    56a2:	e8 94       	clt

000056a4 <__fp_szero>:
    56a4:	bb 27       	eor	r27, r27
    56a6:	66 27       	eor	r22, r22
    56a8:	77 27       	eor	r23, r23
    56aa:	cb 01       	movw	r24, r22
    56ac:	97 f9       	bld	r25, 7
    56ae:	08 95       	ret

000056b0 <__mulsf3>:
    56b0:	0b d0       	rcall	.+22     	; 0x56c8 <__mulsf3x>
    56b2:	c4 cf       	rjmp	.-120    	; 0x563c <__fp_round>
    56b4:	b5 df       	rcall	.-150    	; 0x5620 <__fp_pscA>
    56b6:	28 f0       	brcs	.+10     	; 0x56c2 <__mulsf3+0x12>
    56b8:	ba df       	rcall	.-140    	; 0x562e <__fp_pscB>
    56ba:	18 f0       	brcs	.+6      	; 0x56c2 <__mulsf3+0x12>
    56bc:	95 23       	and	r25, r21
    56be:	09 f0       	breq	.+2      	; 0x56c2 <__mulsf3+0x12>
    56c0:	a6 cf       	rjmp	.-180    	; 0x560e <__fp_inf>
    56c2:	ab cf       	rjmp	.-170    	; 0x561a <__fp_nan>
    56c4:	11 24       	eor	r1, r1
    56c6:	ee cf       	rjmp	.-36     	; 0x56a4 <__fp_szero>

000056c8 <__mulsf3x>:
    56c8:	ca df       	rcall	.-108    	; 0x565e <__fp_split3>
    56ca:	a0 f3       	brcs	.-24     	; 0x56b4 <__mulsf3+0x4>

000056cc <__mulsf3_pse>:
    56cc:	95 9f       	mul	r25, r21
    56ce:	d1 f3       	breq	.-12     	; 0x56c4 <__mulsf3+0x14>
    56d0:	95 0f       	add	r25, r21
    56d2:	50 e0       	ldi	r21, 0x00	; 0
    56d4:	55 1f       	adc	r21, r21
    56d6:	62 9f       	mul	r22, r18
    56d8:	f0 01       	movw	r30, r0
    56da:	72 9f       	mul	r23, r18
    56dc:	bb 27       	eor	r27, r27
    56de:	f0 0d       	add	r31, r0
    56e0:	b1 1d       	adc	r27, r1
    56e2:	63 9f       	mul	r22, r19
    56e4:	aa 27       	eor	r26, r26
    56e6:	f0 0d       	add	r31, r0
    56e8:	b1 1d       	adc	r27, r1
    56ea:	aa 1f       	adc	r26, r26
    56ec:	64 9f       	mul	r22, r20
    56ee:	66 27       	eor	r22, r22
    56f0:	b0 0d       	add	r27, r0
    56f2:	a1 1d       	adc	r26, r1
    56f4:	66 1f       	adc	r22, r22
    56f6:	82 9f       	mul	r24, r18
    56f8:	22 27       	eor	r18, r18
    56fa:	b0 0d       	add	r27, r0
    56fc:	a1 1d       	adc	r26, r1
    56fe:	62 1f       	adc	r22, r18
    5700:	73 9f       	mul	r23, r19
    5702:	b0 0d       	add	r27, r0
    5704:	a1 1d       	adc	r26, r1
    5706:	62 1f       	adc	r22, r18
    5708:	83 9f       	mul	r24, r19
    570a:	a0 0d       	add	r26, r0
    570c:	61 1d       	adc	r22, r1
    570e:	22 1f       	adc	r18, r18
    5710:	74 9f       	mul	r23, r20
    5712:	33 27       	eor	r19, r19
    5714:	a0 0d       	add	r26, r0
    5716:	61 1d       	adc	r22, r1
    5718:	23 1f       	adc	r18, r19
    571a:	84 9f       	mul	r24, r20
    571c:	60 0d       	add	r22, r0
    571e:	21 1d       	adc	r18, r1
    5720:	82 2f       	mov	r24, r18
    5722:	76 2f       	mov	r23, r22
    5724:	6a 2f       	mov	r22, r26
    5726:	11 24       	eor	r1, r1
    5728:	9f 57       	subi	r25, 0x7F	; 127
    572a:	50 40       	sbci	r21, 0x00	; 0
    572c:	8a f0       	brmi	.+34     	; 0x5750 <__mulsf3_pse+0x84>
    572e:	e1 f0       	breq	.+56     	; 0x5768 <__mulsf3_pse+0x9c>
    5730:	88 23       	and	r24, r24
    5732:	4a f0       	brmi	.+18     	; 0x5746 <__mulsf3_pse+0x7a>
    5734:	ee 0f       	add	r30, r30
    5736:	ff 1f       	adc	r31, r31
    5738:	bb 1f       	adc	r27, r27
    573a:	66 1f       	adc	r22, r22
    573c:	77 1f       	adc	r23, r23
    573e:	88 1f       	adc	r24, r24
    5740:	91 50       	subi	r25, 0x01	; 1
    5742:	50 40       	sbci	r21, 0x00	; 0
    5744:	a9 f7       	brne	.-22     	; 0x5730 <__mulsf3_pse+0x64>
    5746:	9e 3f       	cpi	r25, 0xFE	; 254
    5748:	51 05       	cpc	r21, r1
    574a:	70 f0       	brcs	.+28     	; 0x5768 <__mulsf3_pse+0x9c>
    574c:	60 cf       	rjmp	.-320    	; 0x560e <__fp_inf>
    574e:	aa cf       	rjmp	.-172    	; 0x56a4 <__fp_szero>
    5750:	5f 3f       	cpi	r21, 0xFF	; 255
    5752:	ec f3       	brlt	.-6      	; 0x574e <__mulsf3_pse+0x82>
    5754:	98 3e       	cpi	r25, 0xE8	; 232
    5756:	dc f3       	brlt	.-10     	; 0x574e <__mulsf3_pse+0x82>
    5758:	86 95       	lsr	r24
    575a:	77 95       	ror	r23
    575c:	67 95       	ror	r22
    575e:	b7 95       	ror	r27
    5760:	f7 95       	ror	r31
    5762:	e7 95       	ror	r30
    5764:	9f 5f       	subi	r25, 0xFF	; 255
    5766:	c1 f7       	brne	.-16     	; 0x5758 <__mulsf3_pse+0x8c>
    5768:	fe 2b       	or	r31, r30
    576a:	88 0f       	add	r24, r24
    576c:	91 1d       	adc	r25, r1
    576e:	96 95       	lsr	r25
    5770:	87 95       	ror	r24
    5772:	97 f9       	bld	r25, 7
    5774:	08 95       	ret

00005776 <__udivmodsi4>:
    5776:	a1 e2       	ldi	r26, 0x21	; 33
    5778:	1a 2e       	mov	r1, r26
    577a:	aa 1b       	sub	r26, r26
    577c:	bb 1b       	sub	r27, r27
    577e:	fd 01       	movw	r30, r26
    5780:	0d c0       	rjmp	.+26     	; 0x579c <__udivmodsi4_ep>

00005782 <__udivmodsi4_loop>:
    5782:	aa 1f       	adc	r26, r26
    5784:	bb 1f       	adc	r27, r27
    5786:	ee 1f       	adc	r30, r30
    5788:	ff 1f       	adc	r31, r31
    578a:	a2 17       	cp	r26, r18
    578c:	b3 07       	cpc	r27, r19
    578e:	e4 07       	cpc	r30, r20
    5790:	f5 07       	cpc	r31, r21
    5792:	20 f0       	brcs	.+8      	; 0x579c <__udivmodsi4_ep>
    5794:	a2 1b       	sub	r26, r18
    5796:	b3 0b       	sbc	r27, r19
    5798:	e4 0b       	sbc	r30, r20
    579a:	f5 0b       	sbc	r31, r21

0000579c <__udivmodsi4_ep>:
    579c:	66 1f       	adc	r22, r22
    579e:	77 1f       	adc	r23, r23
    57a0:	88 1f       	adc	r24, r24
    57a2:	99 1f       	adc	r25, r25
    57a4:	1a 94       	dec	r1
    57a6:	69 f7       	brne	.-38     	; 0x5782 <__udivmodsi4_loop>
    57a8:	60 95       	com	r22
    57aa:	70 95       	com	r23
    57ac:	80 95       	com	r24
    57ae:	90 95       	com	r25
    57b0:	9b 01       	movw	r18, r22
    57b2:	ac 01       	movw	r20, r24
    57b4:	bd 01       	movw	r22, r26
    57b6:	cf 01       	movw	r24, r30
    57b8:	08 95       	ret

000057ba <__tablejump2__>:
    57ba:	ee 0f       	add	r30, r30
    57bc:	ff 1f       	adc	r31, r31
    57be:	88 1f       	adc	r24, r24
    57c0:	8b bf       	out	0x3b, r24	; 59
    57c2:	07 90       	elpm	r0, Z+
    57c4:	f6 91       	elpm	r31, Z
    57c6:	e0 2d       	mov	r30, r0
    57c8:	19 94       	eijmp

000057ca <calloc>:
    57ca:	0f 93       	push	r16
    57cc:	1f 93       	push	r17
    57ce:	cf 93       	push	r28
    57d0:	df 93       	push	r29
    57d2:	86 9f       	mul	r24, r22
    57d4:	80 01       	movw	r16, r0
    57d6:	87 9f       	mul	r24, r23
    57d8:	10 0d       	add	r17, r0
    57da:	96 9f       	mul	r25, r22
    57dc:	10 0d       	add	r17, r0
    57de:	11 24       	eor	r1, r1
    57e0:	c8 01       	movw	r24, r16
    57e2:	0d d0       	rcall	.+26     	; 0x57fe <malloc>
    57e4:	ec 01       	movw	r28, r24
    57e6:	00 97       	sbiw	r24, 0x00	; 0
    57e8:	21 f0       	breq	.+8      	; 0x57f2 <calloc+0x28>
    57ea:	a8 01       	movw	r20, r16
    57ec:	60 e0       	ldi	r22, 0x00	; 0
    57ee:	70 e0       	ldi	r23, 0x00	; 0
    57f0:	34 d1       	rcall	.+616    	; 0x5a5a <memset>
    57f2:	ce 01       	movw	r24, r28
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	1f 91       	pop	r17
    57fa:	0f 91       	pop	r16
    57fc:	08 95       	ret

000057fe <malloc>:
    57fe:	0f 93       	push	r16
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	82 30       	cpi	r24, 0x02	; 2
    5808:	91 05       	cpc	r25, r1
    580a:	10 f4       	brcc	.+4      	; 0x5810 <malloc+0x12>
    580c:	82 e0       	ldi	r24, 0x02	; 2
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	e0 91 76 1c 	lds	r30, 0x1C76	; 0x801c76 <__flp>
    5814:	f0 91 77 1c 	lds	r31, 0x1C77	; 0x801c77 <__flp+0x1>
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	a0 e0       	ldi	r26, 0x00	; 0
    581e:	b0 e0       	ldi	r27, 0x00	; 0
    5820:	30 97       	sbiw	r30, 0x00	; 0
    5822:	19 f1       	breq	.+70     	; 0x586a <malloc+0x6c>
    5824:	40 81       	ld	r20, Z
    5826:	51 81       	ldd	r21, Z+1	; 0x01
    5828:	02 81       	ldd	r16, Z+2	; 0x02
    582a:	13 81       	ldd	r17, Z+3	; 0x03
    582c:	48 17       	cp	r20, r24
    582e:	59 07       	cpc	r21, r25
    5830:	c8 f0       	brcs	.+50     	; 0x5864 <malloc+0x66>
    5832:	84 17       	cp	r24, r20
    5834:	95 07       	cpc	r25, r21
    5836:	69 f4       	brne	.+26     	; 0x5852 <malloc+0x54>
    5838:	10 97       	sbiw	r26, 0x00	; 0
    583a:	31 f0       	breq	.+12     	; 0x5848 <malloc+0x4a>
    583c:	12 96       	adiw	r26, 0x02	; 2
    583e:	0c 93       	st	X, r16
    5840:	12 97       	sbiw	r26, 0x02	; 2
    5842:	13 96       	adiw	r26, 0x03	; 3
    5844:	1c 93       	st	X, r17
    5846:	27 c0       	rjmp	.+78     	; 0x5896 <malloc+0x98>
    5848:	00 93 76 1c 	sts	0x1C76, r16	; 0x801c76 <__flp>
    584c:	10 93 77 1c 	sts	0x1C77, r17	; 0x801c77 <__flp+0x1>
    5850:	22 c0       	rjmp	.+68     	; 0x5896 <malloc+0x98>
    5852:	21 15       	cp	r18, r1
    5854:	31 05       	cpc	r19, r1
    5856:	19 f0       	breq	.+6      	; 0x585e <malloc+0x60>
    5858:	42 17       	cp	r20, r18
    585a:	53 07       	cpc	r21, r19
    585c:	18 f4       	brcc	.+6      	; 0x5864 <malloc+0x66>
    585e:	9a 01       	movw	r18, r20
    5860:	bd 01       	movw	r22, r26
    5862:	ef 01       	movw	r28, r30
    5864:	df 01       	movw	r26, r30
    5866:	f8 01       	movw	r30, r16
    5868:	db cf       	rjmp	.-74     	; 0x5820 <malloc+0x22>
    586a:	21 15       	cp	r18, r1
    586c:	31 05       	cpc	r19, r1
    586e:	f9 f0       	breq	.+62     	; 0x58ae <malloc+0xb0>
    5870:	28 1b       	sub	r18, r24
    5872:	39 0b       	sbc	r19, r25
    5874:	24 30       	cpi	r18, 0x04	; 4
    5876:	31 05       	cpc	r19, r1
    5878:	80 f4       	brcc	.+32     	; 0x589a <malloc+0x9c>
    587a:	8a 81       	ldd	r24, Y+2	; 0x02
    587c:	9b 81       	ldd	r25, Y+3	; 0x03
    587e:	61 15       	cp	r22, r1
    5880:	71 05       	cpc	r23, r1
    5882:	21 f0       	breq	.+8      	; 0x588c <malloc+0x8e>
    5884:	fb 01       	movw	r30, r22
    5886:	93 83       	std	Z+3, r25	; 0x03
    5888:	82 83       	std	Z+2, r24	; 0x02
    588a:	04 c0       	rjmp	.+8      	; 0x5894 <malloc+0x96>
    588c:	90 93 77 1c 	sts	0x1C77, r25	; 0x801c77 <__flp+0x1>
    5890:	80 93 76 1c 	sts	0x1C76, r24	; 0x801c76 <__flp>
    5894:	fe 01       	movw	r30, r28
    5896:	32 96       	adiw	r30, 0x02	; 2
    5898:	44 c0       	rjmp	.+136    	; 0x5922 <malloc+0x124>
    589a:	fe 01       	movw	r30, r28
    589c:	e2 0f       	add	r30, r18
    589e:	f3 1f       	adc	r31, r19
    58a0:	81 93       	st	Z+, r24
    58a2:	91 93       	st	Z+, r25
    58a4:	22 50       	subi	r18, 0x02	; 2
    58a6:	31 09       	sbc	r19, r1
    58a8:	39 83       	std	Y+1, r19	; 0x01
    58aa:	28 83       	st	Y, r18
    58ac:	3a c0       	rjmp	.+116    	; 0x5922 <malloc+0x124>
    58ae:	20 91 74 1c 	lds	r18, 0x1C74	; 0x801c74 <__brkval>
    58b2:	30 91 75 1c 	lds	r19, 0x1C75	; 0x801c75 <__brkval+0x1>
    58b6:	23 2b       	or	r18, r19
    58b8:	41 f4       	brne	.+16     	; 0x58ca <malloc+0xcc>
    58ba:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    58be:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    58c2:	30 93 75 1c 	sts	0x1C75, r19	; 0x801c75 <__brkval+0x1>
    58c6:	20 93 74 1c 	sts	0x1C74, r18	; 0x801c74 <__brkval>
    58ca:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    58ce:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    58d2:	21 15       	cp	r18, r1
    58d4:	31 05       	cpc	r19, r1
    58d6:	41 f4       	brne	.+16     	; 0x58e8 <malloc+0xea>
    58d8:	2d b7       	in	r18, 0x3d	; 61
    58da:	3e b7       	in	r19, 0x3e	; 62
    58dc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    58e0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    58e4:	24 1b       	sub	r18, r20
    58e6:	35 0b       	sbc	r19, r21
    58e8:	e0 91 74 1c 	lds	r30, 0x1C74	; 0x801c74 <__brkval>
    58ec:	f0 91 75 1c 	lds	r31, 0x1C75	; 0x801c75 <__brkval+0x1>
    58f0:	e2 17       	cp	r30, r18
    58f2:	f3 07       	cpc	r31, r19
    58f4:	a0 f4       	brcc	.+40     	; 0x591e <malloc+0x120>
    58f6:	2e 1b       	sub	r18, r30
    58f8:	3f 0b       	sbc	r19, r31
    58fa:	28 17       	cp	r18, r24
    58fc:	39 07       	cpc	r19, r25
    58fe:	78 f0       	brcs	.+30     	; 0x591e <malloc+0x120>
    5900:	ac 01       	movw	r20, r24
    5902:	4e 5f       	subi	r20, 0xFE	; 254
    5904:	5f 4f       	sbci	r21, 0xFF	; 255
    5906:	24 17       	cp	r18, r20
    5908:	35 07       	cpc	r19, r21
    590a:	48 f0       	brcs	.+18     	; 0x591e <malloc+0x120>
    590c:	4e 0f       	add	r20, r30
    590e:	5f 1f       	adc	r21, r31
    5910:	50 93 75 1c 	sts	0x1C75, r21	; 0x801c75 <__brkval+0x1>
    5914:	40 93 74 1c 	sts	0x1C74, r20	; 0x801c74 <__brkval>
    5918:	81 93       	st	Z+, r24
    591a:	91 93       	st	Z+, r25
    591c:	02 c0       	rjmp	.+4      	; 0x5922 <malloc+0x124>
    591e:	e0 e0       	ldi	r30, 0x00	; 0
    5920:	f0 e0       	ldi	r31, 0x00	; 0
    5922:	cf 01       	movw	r24, r30
    5924:	df 91       	pop	r29
    5926:	cf 91       	pop	r28
    5928:	1f 91       	pop	r17
    592a:	0f 91       	pop	r16
    592c:	08 95       	ret

0000592e <free>:
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	00 97       	sbiw	r24, 0x00	; 0
    5934:	09 f4       	brne	.+2      	; 0x5938 <free+0xa>
    5936:	81 c0       	rjmp	.+258    	; 0x5a3a <free+0x10c>
    5938:	fc 01       	movw	r30, r24
    593a:	32 97       	sbiw	r30, 0x02	; 2
    593c:	13 82       	std	Z+3, r1	; 0x03
    593e:	12 82       	std	Z+2, r1	; 0x02
    5940:	a0 91 76 1c 	lds	r26, 0x1C76	; 0x801c76 <__flp>
    5944:	b0 91 77 1c 	lds	r27, 0x1C77	; 0x801c77 <__flp+0x1>
    5948:	10 97       	sbiw	r26, 0x00	; 0
    594a:	81 f4       	brne	.+32     	; 0x596c <free+0x3e>
    594c:	20 81       	ld	r18, Z
    594e:	31 81       	ldd	r19, Z+1	; 0x01
    5950:	82 0f       	add	r24, r18
    5952:	93 1f       	adc	r25, r19
    5954:	20 91 74 1c 	lds	r18, 0x1C74	; 0x801c74 <__brkval>
    5958:	30 91 75 1c 	lds	r19, 0x1C75	; 0x801c75 <__brkval+0x1>
    595c:	28 17       	cp	r18, r24
    595e:	39 07       	cpc	r19, r25
    5960:	51 f5       	brne	.+84     	; 0x59b6 <free+0x88>
    5962:	f0 93 75 1c 	sts	0x1C75, r31	; 0x801c75 <__brkval+0x1>
    5966:	e0 93 74 1c 	sts	0x1C74, r30	; 0x801c74 <__brkval>
    596a:	67 c0       	rjmp	.+206    	; 0x5a3a <free+0x10c>
    596c:	ed 01       	movw	r28, r26
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	ce 17       	cp	r28, r30
    5974:	df 07       	cpc	r29, r31
    5976:	40 f4       	brcc	.+16     	; 0x5988 <free+0x5a>
    5978:	4a 81       	ldd	r20, Y+2	; 0x02
    597a:	5b 81       	ldd	r21, Y+3	; 0x03
    597c:	9e 01       	movw	r18, r28
    597e:	41 15       	cp	r20, r1
    5980:	51 05       	cpc	r21, r1
    5982:	f1 f0       	breq	.+60     	; 0x59c0 <free+0x92>
    5984:	ea 01       	movw	r28, r20
    5986:	f5 cf       	rjmp	.-22     	; 0x5972 <free+0x44>
    5988:	d3 83       	std	Z+3, r29	; 0x03
    598a:	c2 83       	std	Z+2, r28	; 0x02
    598c:	40 81       	ld	r20, Z
    598e:	51 81       	ldd	r21, Z+1	; 0x01
    5990:	84 0f       	add	r24, r20
    5992:	95 1f       	adc	r25, r21
    5994:	c8 17       	cp	r28, r24
    5996:	d9 07       	cpc	r29, r25
    5998:	59 f4       	brne	.+22     	; 0x59b0 <free+0x82>
    599a:	88 81       	ld	r24, Y
    599c:	99 81       	ldd	r25, Y+1	; 0x01
    599e:	84 0f       	add	r24, r20
    59a0:	95 1f       	adc	r25, r21
    59a2:	02 96       	adiw	r24, 0x02	; 2
    59a4:	91 83       	std	Z+1, r25	; 0x01
    59a6:	80 83       	st	Z, r24
    59a8:	8a 81       	ldd	r24, Y+2	; 0x02
    59aa:	9b 81       	ldd	r25, Y+3	; 0x03
    59ac:	93 83       	std	Z+3, r25	; 0x03
    59ae:	82 83       	std	Z+2, r24	; 0x02
    59b0:	21 15       	cp	r18, r1
    59b2:	31 05       	cpc	r19, r1
    59b4:	29 f4       	brne	.+10     	; 0x59c0 <free+0x92>
    59b6:	f0 93 77 1c 	sts	0x1C77, r31	; 0x801c77 <__flp+0x1>
    59ba:	e0 93 76 1c 	sts	0x1C76, r30	; 0x801c76 <__flp>
    59be:	3d c0       	rjmp	.+122    	; 0x5a3a <free+0x10c>
    59c0:	e9 01       	movw	r28, r18
    59c2:	fb 83       	std	Y+3, r31	; 0x03
    59c4:	ea 83       	std	Y+2, r30	; 0x02
    59c6:	49 91       	ld	r20, Y+
    59c8:	59 91       	ld	r21, Y+
    59ca:	c4 0f       	add	r28, r20
    59cc:	d5 1f       	adc	r29, r21
    59ce:	ec 17       	cp	r30, r28
    59d0:	fd 07       	cpc	r31, r29
    59d2:	61 f4       	brne	.+24     	; 0x59ec <free+0xbe>
    59d4:	80 81       	ld	r24, Z
    59d6:	91 81       	ldd	r25, Z+1	; 0x01
    59d8:	84 0f       	add	r24, r20
    59da:	95 1f       	adc	r25, r21
    59dc:	02 96       	adiw	r24, 0x02	; 2
    59de:	e9 01       	movw	r28, r18
    59e0:	99 83       	std	Y+1, r25	; 0x01
    59e2:	88 83       	st	Y, r24
    59e4:	82 81       	ldd	r24, Z+2	; 0x02
    59e6:	93 81       	ldd	r25, Z+3	; 0x03
    59e8:	9b 83       	std	Y+3, r25	; 0x03
    59ea:	8a 83       	std	Y+2, r24	; 0x02
    59ec:	e0 e0       	ldi	r30, 0x00	; 0
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	12 96       	adiw	r26, 0x02	; 2
    59f2:	8d 91       	ld	r24, X+
    59f4:	9c 91       	ld	r25, X
    59f6:	13 97       	sbiw	r26, 0x03	; 3
    59f8:	00 97       	sbiw	r24, 0x00	; 0
    59fa:	19 f0       	breq	.+6      	; 0x5a02 <free+0xd4>
    59fc:	fd 01       	movw	r30, r26
    59fe:	dc 01       	movw	r26, r24
    5a00:	f7 cf       	rjmp	.-18     	; 0x59f0 <free+0xc2>
    5a02:	8d 91       	ld	r24, X+
    5a04:	9c 91       	ld	r25, X
    5a06:	11 97       	sbiw	r26, 0x01	; 1
    5a08:	9d 01       	movw	r18, r26
    5a0a:	2e 5f       	subi	r18, 0xFE	; 254
    5a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a0e:	82 0f       	add	r24, r18
    5a10:	93 1f       	adc	r25, r19
    5a12:	20 91 74 1c 	lds	r18, 0x1C74	; 0x801c74 <__brkval>
    5a16:	30 91 75 1c 	lds	r19, 0x1C75	; 0x801c75 <__brkval+0x1>
    5a1a:	28 17       	cp	r18, r24
    5a1c:	39 07       	cpc	r19, r25
    5a1e:	69 f4       	brne	.+26     	; 0x5a3a <free+0x10c>
    5a20:	30 97       	sbiw	r30, 0x00	; 0
    5a22:	29 f4       	brne	.+10     	; 0x5a2e <free+0x100>
    5a24:	10 92 77 1c 	sts	0x1C77, r1	; 0x801c77 <__flp+0x1>
    5a28:	10 92 76 1c 	sts	0x1C76, r1	; 0x801c76 <__flp>
    5a2c:	02 c0       	rjmp	.+4      	; 0x5a32 <free+0x104>
    5a2e:	13 82       	std	Z+3, r1	; 0x03
    5a30:	12 82       	std	Z+2, r1	; 0x02
    5a32:	b0 93 75 1c 	sts	0x1C75, r27	; 0x801c75 <__brkval+0x1>
    5a36:	a0 93 74 1c 	sts	0x1C74, r26	; 0x801c74 <__brkval>
    5a3a:	df 91       	pop	r29
    5a3c:	cf 91       	pop	r28
    5a3e:	08 95       	ret

00005a40 <abort>:
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	f8 94       	cli
    5a46:	7d c3       	rjmp	.+1786   	; 0x6142 <_exit>

00005a48 <memcpy>:
    5a48:	fb 01       	movw	r30, r22
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <memcpy+0xa>
    5a4e:	01 90       	ld	r0, Z+
    5a50:	0d 92       	st	X+, r0
    5a52:	41 50       	subi	r20, 0x01	; 1
    5a54:	50 40       	sbci	r21, 0x00	; 0
    5a56:	d8 f7       	brcc	.-10     	; 0x5a4e <memcpy+0x6>
    5a58:	08 95       	ret

00005a5a <memset>:
    5a5a:	dc 01       	movw	r26, r24
    5a5c:	01 c0       	rjmp	.+2      	; 0x5a60 <memset+0x6>
    5a5e:	6d 93       	st	X+, r22
    5a60:	41 50       	subi	r20, 0x01	; 1
    5a62:	50 40       	sbci	r21, 0x00	; 0
    5a64:	e0 f7       	brcc	.-8      	; 0x5a5e <memset+0x4>
    5a66:	08 95       	ret

00005a68 <strcasestr>:
    5a68:	fb 01       	movw	r30, r22
    5a6a:	51 91       	ld	r21, Z+
    5a6c:	55 23       	and	r21, r21
    5a6e:	b1 f0       	breq	.+44     	; 0x5a9c <strcasestr+0x34>
    5a70:	bf 01       	movw	r22, r30
    5a72:	dc 01       	movw	r26, r24
    5a74:	05 2e       	mov	r0, r21
    5a76:	4d 91       	ld	r20, X+
    5a78:	44 23       	and	r20, r20
    5a7a:	69 f0       	breq	.+26     	; 0x5a96 <strcasestr+0x2e>
    5a7c:	10 d0       	rcall	.+32     	; 0x5a9e <strcasestr+0x36>
    5a7e:	d9 f7       	brne	.-10     	; 0x5a76 <strcasestr+0xe>
    5a80:	cd 01       	movw	r24, r26
    5a82:	01 90       	ld	r0, Z+
    5a84:	00 20       	and	r0, r0
    5a86:	49 f0       	breq	.+18     	; 0x5a9a <strcasestr+0x32>
    5a88:	4d 91       	ld	r20, X+
    5a8a:	41 11       	cpse	r20, r1
    5a8c:	08 d0       	rcall	.+16     	; 0x5a9e <strcasestr+0x36>
    5a8e:	c9 f3       	breq	.-14     	; 0x5a82 <strcasestr+0x1a>
    5a90:	fb 01       	movw	r30, r22
    5a92:	41 11       	cpse	r20, r1
    5a94:	ee cf       	rjmp	.-36     	; 0x5a72 <strcasestr+0xa>
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	01 97       	sbiw	r24, 0x01	; 1
    5a9c:	08 95       	ret
    5a9e:	40 25       	eor	r20, r0
    5aa0:	39 f0       	breq	.+14     	; 0x5ab0 <strcasestr+0x48>
    5aa2:	40 32       	cpi	r20, 0x20	; 32
    5aa4:	29 f4       	brne	.+10     	; 0x5ab0 <strcasestr+0x48>
    5aa6:	40 29       	or	r20, r0
    5aa8:	4b 57       	subi	r20, 0x7B	; 123
    5aaa:	46 5e       	subi	r20, 0xE6	; 230
    5aac:	08 f0       	brcs	.+2      	; 0x5ab0 <strcasestr+0x48>
    5aae:	18 94       	sez
    5ab0:	08 95       	ret

00005ab2 <strcat>:
    5ab2:	fb 01       	movw	r30, r22
    5ab4:	dc 01       	movw	r26, r24
    5ab6:	0d 90       	ld	r0, X+
    5ab8:	00 20       	and	r0, r0
    5aba:	e9 f7       	brne	.-6      	; 0x5ab6 <strcat+0x4>
    5abc:	11 97       	sbiw	r26, 0x01	; 1
    5abe:	01 90       	ld	r0, Z+
    5ac0:	0d 92       	st	X+, r0
    5ac2:	00 20       	and	r0, r0
    5ac4:	e1 f7       	brne	.-8      	; 0x5abe <strcat+0xc>
    5ac6:	08 95       	ret

00005ac8 <strcpy>:
    5ac8:	fb 01       	movw	r30, r22
    5aca:	dc 01       	movw	r26, r24
    5acc:	01 90       	ld	r0, Z+
    5ace:	0d 92       	st	X+, r0
    5ad0:	00 20       	and	r0, r0
    5ad2:	e1 f7       	brne	.-8      	; 0x5acc <strcpy+0x4>
    5ad4:	08 95       	ret

00005ad6 <strncasecmp>:
    5ad6:	fb 01       	movw	r30, r22
    5ad8:	dc 01       	movw	r26, r24
    5ada:	41 50       	subi	r20, 0x01	; 1
    5adc:	50 40       	sbci	r21, 0x00	; 0
    5ade:	88 f0       	brcs	.+34     	; 0x5b02 <strncasecmp+0x2c>
    5ae0:	8d 91       	ld	r24, X+
    5ae2:	81 34       	cpi	r24, 0x41	; 65
    5ae4:	1c f0       	brlt	.+6      	; 0x5aec <strncasecmp+0x16>
    5ae6:	8b 35       	cpi	r24, 0x5B	; 91
    5ae8:	0c f4       	brge	.+2      	; 0x5aec <strncasecmp+0x16>
    5aea:	80 5e       	subi	r24, 0xE0	; 224
    5aec:	61 91       	ld	r22, Z+
    5aee:	61 34       	cpi	r22, 0x41	; 65
    5af0:	1c f0       	brlt	.+6      	; 0x5af8 <strncasecmp+0x22>
    5af2:	6b 35       	cpi	r22, 0x5B	; 91
    5af4:	0c f4       	brge	.+2      	; 0x5af8 <strncasecmp+0x22>
    5af6:	60 5e       	subi	r22, 0xE0	; 224
    5af8:	86 1b       	sub	r24, r22
    5afa:	61 11       	cpse	r22, r1
    5afc:	71 f3       	breq	.-36     	; 0x5ada <strncasecmp+0x4>
    5afe:	99 0b       	sbc	r25, r25
    5b00:	08 95       	ret
    5b02:	88 1b       	sub	r24, r24
    5b04:	fc cf       	rjmp	.-8      	; 0x5afe <strncasecmp+0x28>

00005b06 <printf>:
    5b06:	cf 93       	push	r28
    5b08:	df 93       	push	r29
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
    5b0e:	ae 01       	movw	r20, r28
    5b10:	4a 5f       	subi	r20, 0xFA	; 250
    5b12:	5f 4f       	sbci	r21, 0xFF	; 255
    5b14:	fa 01       	movw	r30, r20
    5b16:	61 91       	ld	r22, Z+
    5b18:	71 91       	ld	r23, Z+
    5b1a:	af 01       	movw	r20, r30
    5b1c:	80 91 7a 1c 	lds	r24, 0x1C7A	; 0x801c7a <__iob+0x2>
    5b20:	90 91 7b 1c 	lds	r25, 0x1C7B	; 0x801c7b <__iob+0x3>
    5b24:	61 d0       	rcall	.+194    	; 0x5be8 <vfprintf>
    5b26:	df 91       	pop	r29
    5b28:	cf 91       	pop	r28
    5b2a:	08 95       	ret

00005b2c <puts>:
    5b2c:	0f 93       	push	r16
    5b2e:	1f 93       	push	r17
    5b30:	cf 93       	push	r28
    5b32:	df 93       	push	r29
    5b34:	e0 91 7a 1c 	lds	r30, 0x1C7A	; 0x801c7a <__iob+0x2>
    5b38:	f0 91 7b 1c 	lds	r31, 0x1C7B	; 0x801c7b <__iob+0x3>
    5b3c:	23 81       	ldd	r18, Z+3	; 0x03
    5b3e:	21 ff       	sbrs	r18, 1
    5b40:	1b c0       	rjmp	.+54     	; 0x5b78 <puts+0x4c>
    5b42:	8c 01       	movw	r16, r24
    5b44:	d0 e0       	ldi	r29, 0x00	; 0
    5b46:	c0 e0       	ldi	r28, 0x00	; 0
    5b48:	f8 01       	movw	r30, r16
    5b4a:	81 91       	ld	r24, Z+
    5b4c:	8f 01       	movw	r16, r30
    5b4e:	60 91 7a 1c 	lds	r22, 0x1C7A	; 0x801c7a <__iob+0x2>
    5b52:	70 91 7b 1c 	lds	r23, 0x1C7B	; 0x801c7b <__iob+0x3>
    5b56:	db 01       	movw	r26, r22
    5b58:	18 96       	adiw	r26, 0x08	; 8
    5b5a:	ed 91       	ld	r30, X+
    5b5c:	fc 91       	ld	r31, X
    5b5e:	19 97       	sbiw	r26, 0x09	; 9
    5b60:	88 23       	and	r24, r24
    5b62:	31 f0       	breq	.+12     	; 0x5b70 <puts+0x44>
    5b64:	19 95       	eicall
    5b66:	89 2b       	or	r24, r25
    5b68:	79 f3       	breq	.-34     	; 0x5b48 <puts+0x1c>
    5b6a:	df ef       	ldi	r29, 0xFF	; 255
    5b6c:	cf ef       	ldi	r28, 0xFF	; 255
    5b6e:	ec cf       	rjmp	.-40     	; 0x5b48 <puts+0x1c>
    5b70:	8a e0       	ldi	r24, 0x0A	; 10
    5b72:	19 95       	eicall
    5b74:	89 2b       	or	r24, r25
    5b76:	19 f0       	breq	.+6      	; 0x5b7e <puts+0x52>
    5b78:	8f ef       	ldi	r24, 0xFF	; 255
    5b7a:	9f ef       	ldi	r25, 0xFF	; 255
    5b7c:	02 c0       	rjmp	.+4      	; 0x5b82 <puts+0x56>
    5b7e:	8d 2f       	mov	r24, r29
    5b80:	9c 2f       	mov	r25, r28
    5b82:	df 91       	pop	r29
    5b84:	cf 91       	pop	r28
    5b86:	1f 91       	pop	r17
    5b88:	0f 91       	pop	r16
    5b8a:	08 95       	ret

00005b8c <sprintf>:
    5b8c:	0f 93       	push	r16
    5b8e:	1f 93       	push	r17
    5b90:	cf 93       	push	r28
    5b92:	df 93       	push	r29
    5b94:	cd b7       	in	r28, 0x3d	; 61
    5b96:	de b7       	in	r29, 0x3e	; 62
    5b98:	2e 97       	sbiw	r28, 0x0e	; 14
    5b9a:	0f b6       	in	r0, 0x3f	; 63
    5b9c:	f8 94       	cli
    5b9e:	de bf       	out	0x3e, r29	; 62
    5ba0:	0f be       	out	0x3f, r0	; 63
    5ba2:	cd bf       	out	0x3d, r28	; 61
    5ba4:	0e 89       	ldd	r16, Y+22	; 0x16
    5ba6:	1f 89       	ldd	r17, Y+23	; 0x17
    5ba8:	86 e0       	ldi	r24, 0x06	; 6
    5baa:	8c 83       	std	Y+4, r24	; 0x04
    5bac:	1a 83       	std	Y+2, r17	; 0x02
    5bae:	09 83       	std	Y+1, r16	; 0x01
    5bb0:	8f ef       	ldi	r24, 0xFF	; 255
    5bb2:	9f e7       	ldi	r25, 0x7F	; 127
    5bb4:	9e 83       	std	Y+6, r25	; 0x06
    5bb6:	8d 83       	std	Y+5, r24	; 0x05
    5bb8:	ae 01       	movw	r20, r28
    5bba:	46 5e       	subi	r20, 0xE6	; 230
    5bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5bbe:	68 8d       	ldd	r22, Y+24	; 0x18
    5bc0:	79 8d       	ldd	r23, Y+25	; 0x19
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	01 96       	adiw	r24, 0x01	; 1
    5bc6:	10 d0       	rcall	.+32     	; 0x5be8 <vfprintf>
    5bc8:	ef 81       	ldd	r30, Y+7	; 0x07
    5bca:	f8 85       	ldd	r31, Y+8	; 0x08
    5bcc:	e0 0f       	add	r30, r16
    5bce:	f1 1f       	adc	r31, r17
    5bd0:	10 82       	st	Z, r1
    5bd2:	2e 96       	adiw	r28, 0x0e	; 14
    5bd4:	0f b6       	in	r0, 0x3f	; 63
    5bd6:	f8 94       	cli
    5bd8:	de bf       	out	0x3e, r29	; 62
    5bda:	0f be       	out	0x3f, r0	; 63
    5bdc:	cd bf       	out	0x3d, r28	; 61
    5bde:	df 91       	pop	r29
    5be0:	cf 91       	pop	r28
    5be2:	1f 91       	pop	r17
    5be4:	0f 91       	pop	r16
    5be6:	08 95       	ret

00005be8 <vfprintf>:
    5be8:	2f 92       	push	r2
    5bea:	3f 92       	push	r3
    5bec:	4f 92       	push	r4
    5bee:	5f 92       	push	r5
    5bf0:	6f 92       	push	r6
    5bf2:	7f 92       	push	r7
    5bf4:	8f 92       	push	r8
    5bf6:	9f 92       	push	r9
    5bf8:	af 92       	push	r10
    5bfa:	bf 92       	push	r11
    5bfc:	cf 92       	push	r12
    5bfe:	df 92       	push	r13
    5c00:	ef 92       	push	r14
    5c02:	ff 92       	push	r15
    5c04:	0f 93       	push	r16
    5c06:	1f 93       	push	r17
    5c08:	cf 93       	push	r28
    5c0a:	df 93       	push	r29
    5c0c:	cd b7       	in	r28, 0x3d	; 61
    5c0e:	de b7       	in	r29, 0x3e	; 62
    5c10:	2b 97       	sbiw	r28, 0x0b	; 11
    5c12:	0f b6       	in	r0, 0x3f	; 63
    5c14:	f8 94       	cli
    5c16:	de bf       	out	0x3e, r29	; 62
    5c18:	0f be       	out	0x3f, r0	; 63
    5c1a:	cd bf       	out	0x3d, r28	; 61
    5c1c:	6c 01       	movw	r12, r24
    5c1e:	7b 01       	movw	r14, r22
    5c20:	8a 01       	movw	r16, r20
    5c22:	fc 01       	movw	r30, r24
    5c24:	17 82       	std	Z+7, r1	; 0x07
    5c26:	16 82       	std	Z+6, r1	; 0x06
    5c28:	83 81       	ldd	r24, Z+3	; 0x03
    5c2a:	81 ff       	sbrs	r24, 1
    5c2c:	bf c1       	rjmp	.+894    	; 0x5fac <vfprintf+0x3c4>
    5c2e:	ce 01       	movw	r24, r28
    5c30:	01 96       	adiw	r24, 0x01	; 1
    5c32:	3c 01       	movw	r6, r24
    5c34:	f6 01       	movw	r30, r12
    5c36:	93 81       	ldd	r25, Z+3	; 0x03
    5c38:	f7 01       	movw	r30, r14
    5c3a:	93 fd       	sbrc	r25, 3
    5c3c:	85 91       	lpm	r24, Z+
    5c3e:	93 ff       	sbrs	r25, 3
    5c40:	81 91       	ld	r24, Z+
    5c42:	7f 01       	movw	r14, r30
    5c44:	88 23       	and	r24, r24
    5c46:	09 f4       	brne	.+2      	; 0x5c4a <vfprintf+0x62>
    5c48:	ad c1       	rjmp	.+858    	; 0x5fa4 <vfprintf+0x3bc>
    5c4a:	85 32       	cpi	r24, 0x25	; 37
    5c4c:	39 f4       	brne	.+14     	; 0x5c5c <vfprintf+0x74>
    5c4e:	93 fd       	sbrc	r25, 3
    5c50:	85 91       	lpm	r24, Z+
    5c52:	93 ff       	sbrs	r25, 3
    5c54:	81 91       	ld	r24, Z+
    5c56:	7f 01       	movw	r14, r30
    5c58:	85 32       	cpi	r24, 0x25	; 37
    5c5a:	21 f4       	brne	.+8      	; 0x5c64 <vfprintf+0x7c>
    5c5c:	b6 01       	movw	r22, r12
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	d6 d1       	rcall	.+940    	; 0x600e <fputc>
    5c62:	e8 cf       	rjmp	.-48     	; 0x5c34 <vfprintf+0x4c>
    5c64:	91 2c       	mov	r9, r1
    5c66:	21 2c       	mov	r2, r1
    5c68:	31 2c       	mov	r3, r1
    5c6a:	ff e1       	ldi	r31, 0x1F	; 31
    5c6c:	f3 15       	cp	r31, r3
    5c6e:	d8 f0       	brcs	.+54     	; 0x5ca6 <vfprintf+0xbe>
    5c70:	8b 32       	cpi	r24, 0x2B	; 43
    5c72:	79 f0       	breq	.+30     	; 0x5c92 <vfprintf+0xaa>
    5c74:	38 f4       	brcc	.+14     	; 0x5c84 <vfprintf+0x9c>
    5c76:	80 32       	cpi	r24, 0x20	; 32
    5c78:	79 f0       	breq	.+30     	; 0x5c98 <vfprintf+0xb0>
    5c7a:	83 32       	cpi	r24, 0x23	; 35
    5c7c:	a1 f4       	brne	.+40     	; 0x5ca6 <vfprintf+0xbe>
    5c7e:	23 2d       	mov	r18, r3
    5c80:	20 61       	ori	r18, 0x10	; 16
    5c82:	1d c0       	rjmp	.+58     	; 0x5cbe <vfprintf+0xd6>
    5c84:	8d 32       	cpi	r24, 0x2D	; 45
    5c86:	61 f0       	breq	.+24     	; 0x5ca0 <vfprintf+0xb8>
    5c88:	80 33       	cpi	r24, 0x30	; 48
    5c8a:	69 f4       	brne	.+26     	; 0x5ca6 <vfprintf+0xbe>
    5c8c:	23 2d       	mov	r18, r3
    5c8e:	21 60       	ori	r18, 0x01	; 1
    5c90:	16 c0       	rjmp	.+44     	; 0x5cbe <vfprintf+0xd6>
    5c92:	83 2d       	mov	r24, r3
    5c94:	82 60       	ori	r24, 0x02	; 2
    5c96:	38 2e       	mov	r3, r24
    5c98:	e3 2d       	mov	r30, r3
    5c9a:	e4 60       	ori	r30, 0x04	; 4
    5c9c:	3e 2e       	mov	r3, r30
    5c9e:	2a c0       	rjmp	.+84     	; 0x5cf4 <vfprintf+0x10c>
    5ca0:	f3 2d       	mov	r31, r3
    5ca2:	f8 60       	ori	r31, 0x08	; 8
    5ca4:	1d c0       	rjmp	.+58     	; 0x5ce0 <vfprintf+0xf8>
    5ca6:	37 fc       	sbrc	r3, 7
    5ca8:	2d c0       	rjmp	.+90     	; 0x5d04 <vfprintf+0x11c>
    5caa:	20 ed       	ldi	r18, 0xD0	; 208
    5cac:	28 0f       	add	r18, r24
    5cae:	2a 30       	cpi	r18, 0x0A	; 10
    5cb0:	40 f0       	brcs	.+16     	; 0x5cc2 <vfprintf+0xda>
    5cb2:	8e 32       	cpi	r24, 0x2E	; 46
    5cb4:	b9 f4       	brne	.+46     	; 0x5ce4 <vfprintf+0xfc>
    5cb6:	36 fc       	sbrc	r3, 6
    5cb8:	75 c1       	rjmp	.+746    	; 0x5fa4 <vfprintf+0x3bc>
    5cba:	23 2d       	mov	r18, r3
    5cbc:	20 64       	ori	r18, 0x40	; 64
    5cbe:	32 2e       	mov	r3, r18
    5cc0:	19 c0       	rjmp	.+50     	; 0x5cf4 <vfprintf+0x10c>
    5cc2:	36 fe       	sbrs	r3, 6
    5cc4:	06 c0       	rjmp	.+12     	; 0x5cd2 <vfprintf+0xea>
    5cc6:	8a e0       	ldi	r24, 0x0A	; 10
    5cc8:	98 9e       	mul	r9, r24
    5cca:	20 0d       	add	r18, r0
    5ccc:	11 24       	eor	r1, r1
    5cce:	92 2e       	mov	r9, r18
    5cd0:	11 c0       	rjmp	.+34     	; 0x5cf4 <vfprintf+0x10c>
    5cd2:	ea e0       	ldi	r30, 0x0A	; 10
    5cd4:	2e 9e       	mul	r2, r30
    5cd6:	20 0d       	add	r18, r0
    5cd8:	11 24       	eor	r1, r1
    5cda:	22 2e       	mov	r2, r18
    5cdc:	f3 2d       	mov	r31, r3
    5cde:	f0 62       	ori	r31, 0x20	; 32
    5ce0:	3f 2e       	mov	r3, r31
    5ce2:	08 c0       	rjmp	.+16     	; 0x5cf4 <vfprintf+0x10c>
    5ce4:	8c 36       	cpi	r24, 0x6C	; 108
    5ce6:	21 f4       	brne	.+8      	; 0x5cf0 <vfprintf+0x108>
    5ce8:	83 2d       	mov	r24, r3
    5cea:	80 68       	ori	r24, 0x80	; 128
    5cec:	38 2e       	mov	r3, r24
    5cee:	02 c0       	rjmp	.+4      	; 0x5cf4 <vfprintf+0x10c>
    5cf0:	88 36       	cpi	r24, 0x68	; 104
    5cf2:	41 f4       	brne	.+16     	; 0x5d04 <vfprintf+0x11c>
    5cf4:	f7 01       	movw	r30, r14
    5cf6:	93 fd       	sbrc	r25, 3
    5cf8:	85 91       	lpm	r24, Z+
    5cfa:	93 ff       	sbrs	r25, 3
    5cfc:	81 91       	ld	r24, Z+
    5cfe:	7f 01       	movw	r14, r30
    5d00:	81 11       	cpse	r24, r1
    5d02:	b3 cf       	rjmp	.-154    	; 0x5c6a <vfprintf+0x82>
    5d04:	98 2f       	mov	r25, r24
    5d06:	9f 7d       	andi	r25, 0xDF	; 223
    5d08:	95 54       	subi	r25, 0x45	; 69
    5d0a:	93 30       	cpi	r25, 0x03	; 3
    5d0c:	28 f4       	brcc	.+10     	; 0x5d18 <vfprintf+0x130>
    5d0e:	0c 5f       	subi	r16, 0xFC	; 252
    5d10:	1f 4f       	sbci	r17, 0xFF	; 255
    5d12:	9f e3       	ldi	r25, 0x3F	; 63
    5d14:	99 83       	std	Y+1, r25	; 0x01
    5d16:	0d c0       	rjmp	.+26     	; 0x5d32 <vfprintf+0x14a>
    5d18:	83 36       	cpi	r24, 0x63	; 99
    5d1a:	31 f0       	breq	.+12     	; 0x5d28 <vfprintf+0x140>
    5d1c:	83 37       	cpi	r24, 0x73	; 115
    5d1e:	71 f0       	breq	.+28     	; 0x5d3c <vfprintf+0x154>
    5d20:	83 35       	cpi	r24, 0x53	; 83
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <vfprintf+0x13e>
    5d24:	55 c0       	rjmp	.+170    	; 0x5dd0 <vfprintf+0x1e8>
    5d26:	20 c0       	rjmp	.+64     	; 0x5d68 <vfprintf+0x180>
    5d28:	f8 01       	movw	r30, r16
    5d2a:	80 81       	ld	r24, Z
    5d2c:	89 83       	std	Y+1, r24	; 0x01
    5d2e:	0e 5f       	subi	r16, 0xFE	; 254
    5d30:	1f 4f       	sbci	r17, 0xFF	; 255
    5d32:	88 24       	eor	r8, r8
    5d34:	83 94       	inc	r8
    5d36:	91 2c       	mov	r9, r1
    5d38:	53 01       	movw	r10, r6
    5d3a:	12 c0       	rjmp	.+36     	; 0x5d60 <vfprintf+0x178>
    5d3c:	28 01       	movw	r4, r16
    5d3e:	f2 e0       	ldi	r31, 0x02	; 2
    5d40:	4f 0e       	add	r4, r31
    5d42:	51 1c       	adc	r5, r1
    5d44:	f8 01       	movw	r30, r16
    5d46:	a0 80       	ld	r10, Z
    5d48:	b1 80       	ldd	r11, Z+1	; 0x01
    5d4a:	36 fe       	sbrs	r3, 6
    5d4c:	03 c0       	rjmp	.+6      	; 0x5d54 <vfprintf+0x16c>
    5d4e:	69 2d       	mov	r22, r9
    5d50:	70 e0       	ldi	r23, 0x00	; 0
    5d52:	02 c0       	rjmp	.+4      	; 0x5d58 <vfprintf+0x170>
    5d54:	6f ef       	ldi	r22, 0xFF	; 255
    5d56:	7f ef       	ldi	r23, 0xFF	; 255
    5d58:	c5 01       	movw	r24, r10
    5d5a:	4e d1       	rcall	.+668    	; 0x5ff8 <strnlen>
    5d5c:	4c 01       	movw	r8, r24
    5d5e:	82 01       	movw	r16, r4
    5d60:	f3 2d       	mov	r31, r3
    5d62:	ff 77       	andi	r31, 0x7F	; 127
    5d64:	3f 2e       	mov	r3, r31
    5d66:	15 c0       	rjmp	.+42     	; 0x5d92 <vfprintf+0x1aa>
    5d68:	28 01       	movw	r4, r16
    5d6a:	22 e0       	ldi	r18, 0x02	; 2
    5d6c:	42 0e       	add	r4, r18
    5d6e:	51 1c       	adc	r5, r1
    5d70:	f8 01       	movw	r30, r16
    5d72:	a0 80       	ld	r10, Z
    5d74:	b1 80       	ldd	r11, Z+1	; 0x01
    5d76:	36 fe       	sbrs	r3, 6
    5d78:	03 c0       	rjmp	.+6      	; 0x5d80 <vfprintf+0x198>
    5d7a:	69 2d       	mov	r22, r9
    5d7c:	70 e0       	ldi	r23, 0x00	; 0
    5d7e:	02 c0       	rjmp	.+4      	; 0x5d84 <vfprintf+0x19c>
    5d80:	6f ef       	ldi	r22, 0xFF	; 255
    5d82:	7f ef       	ldi	r23, 0xFF	; 255
    5d84:	c5 01       	movw	r24, r10
    5d86:	2d d1       	rcall	.+602    	; 0x5fe2 <strnlen_P>
    5d88:	4c 01       	movw	r8, r24
    5d8a:	f3 2d       	mov	r31, r3
    5d8c:	f0 68       	ori	r31, 0x80	; 128
    5d8e:	3f 2e       	mov	r3, r31
    5d90:	82 01       	movw	r16, r4
    5d92:	33 fc       	sbrc	r3, 3
    5d94:	19 c0       	rjmp	.+50     	; 0x5dc8 <vfprintf+0x1e0>
    5d96:	82 2d       	mov	r24, r2
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	88 16       	cp	r8, r24
    5d9c:	99 06       	cpc	r9, r25
    5d9e:	a0 f4       	brcc	.+40     	; 0x5dc8 <vfprintf+0x1e0>
    5da0:	b6 01       	movw	r22, r12
    5da2:	80 e2       	ldi	r24, 0x20	; 32
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	33 d1       	rcall	.+614    	; 0x600e <fputc>
    5da8:	2a 94       	dec	r2
    5daa:	f5 cf       	rjmp	.-22     	; 0x5d96 <vfprintf+0x1ae>
    5dac:	f5 01       	movw	r30, r10
    5dae:	37 fc       	sbrc	r3, 7
    5db0:	85 91       	lpm	r24, Z+
    5db2:	37 fe       	sbrs	r3, 7
    5db4:	81 91       	ld	r24, Z+
    5db6:	5f 01       	movw	r10, r30
    5db8:	b6 01       	movw	r22, r12
    5dba:	90 e0       	ldi	r25, 0x00	; 0
    5dbc:	28 d1       	rcall	.+592    	; 0x600e <fputc>
    5dbe:	21 10       	cpse	r2, r1
    5dc0:	2a 94       	dec	r2
    5dc2:	21 e0       	ldi	r18, 0x01	; 1
    5dc4:	82 1a       	sub	r8, r18
    5dc6:	91 08       	sbc	r9, r1
    5dc8:	81 14       	cp	r8, r1
    5dca:	91 04       	cpc	r9, r1
    5dcc:	79 f7       	brne	.-34     	; 0x5dac <vfprintf+0x1c4>
    5dce:	e1 c0       	rjmp	.+450    	; 0x5f92 <vfprintf+0x3aa>
    5dd0:	84 36       	cpi	r24, 0x64	; 100
    5dd2:	11 f0       	breq	.+4      	; 0x5dd8 <vfprintf+0x1f0>
    5dd4:	89 36       	cpi	r24, 0x69	; 105
    5dd6:	39 f5       	brne	.+78     	; 0x5e26 <vfprintf+0x23e>
    5dd8:	f8 01       	movw	r30, r16
    5dda:	37 fe       	sbrs	r3, 7
    5ddc:	07 c0       	rjmp	.+14     	; 0x5dec <vfprintf+0x204>
    5dde:	60 81       	ld	r22, Z
    5de0:	71 81       	ldd	r23, Z+1	; 0x01
    5de2:	82 81       	ldd	r24, Z+2	; 0x02
    5de4:	93 81       	ldd	r25, Z+3	; 0x03
    5de6:	0c 5f       	subi	r16, 0xFC	; 252
    5de8:	1f 4f       	sbci	r17, 0xFF	; 255
    5dea:	08 c0       	rjmp	.+16     	; 0x5dfc <vfprintf+0x214>
    5dec:	60 81       	ld	r22, Z
    5dee:	71 81       	ldd	r23, Z+1	; 0x01
    5df0:	07 2e       	mov	r0, r23
    5df2:	00 0c       	add	r0, r0
    5df4:	88 0b       	sbc	r24, r24
    5df6:	99 0b       	sbc	r25, r25
    5df8:	0e 5f       	subi	r16, 0xFE	; 254
    5dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    5dfc:	f3 2d       	mov	r31, r3
    5dfe:	ff 76       	andi	r31, 0x6F	; 111
    5e00:	3f 2e       	mov	r3, r31
    5e02:	97 ff       	sbrs	r25, 7
    5e04:	09 c0       	rjmp	.+18     	; 0x5e18 <vfprintf+0x230>
    5e06:	90 95       	com	r25
    5e08:	80 95       	com	r24
    5e0a:	70 95       	com	r23
    5e0c:	61 95       	neg	r22
    5e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e10:	8f 4f       	sbci	r24, 0xFF	; 255
    5e12:	9f 4f       	sbci	r25, 0xFF	; 255
    5e14:	f0 68       	ori	r31, 0x80	; 128
    5e16:	3f 2e       	mov	r3, r31
    5e18:	2a e0       	ldi	r18, 0x0A	; 10
    5e1a:	30 e0       	ldi	r19, 0x00	; 0
    5e1c:	a3 01       	movw	r20, r6
    5e1e:	33 d1       	rcall	.+614    	; 0x6086 <__ultoa_invert>
    5e20:	88 2e       	mov	r8, r24
    5e22:	86 18       	sub	r8, r6
    5e24:	44 c0       	rjmp	.+136    	; 0x5eae <vfprintf+0x2c6>
    5e26:	85 37       	cpi	r24, 0x75	; 117
    5e28:	31 f4       	brne	.+12     	; 0x5e36 <vfprintf+0x24e>
    5e2a:	23 2d       	mov	r18, r3
    5e2c:	2f 7e       	andi	r18, 0xEF	; 239
    5e2e:	b2 2e       	mov	r11, r18
    5e30:	2a e0       	ldi	r18, 0x0A	; 10
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	25 c0       	rjmp	.+74     	; 0x5e80 <vfprintf+0x298>
    5e36:	93 2d       	mov	r25, r3
    5e38:	99 7f       	andi	r25, 0xF9	; 249
    5e3a:	b9 2e       	mov	r11, r25
    5e3c:	8f 36       	cpi	r24, 0x6F	; 111
    5e3e:	c1 f0       	breq	.+48     	; 0x5e70 <vfprintf+0x288>
    5e40:	18 f4       	brcc	.+6      	; 0x5e48 <vfprintf+0x260>
    5e42:	88 35       	cpi	r24, 0x58	; 88
    5e44:	79 f0       	breq	.+30     	; 0x5e64 <vfprintf+0x27c>
    5e46:	ae c0       	rjmp	.+348    	; 0x5fa4 <vfprintf+0x3bc>
    5e48:	80 37       	cpi	r24, 0x70	; 112
    5e4a:	19 f0       	breq	.+6      	; 0x5e52 <vfprintf+0x26a>
    5e4c:	88 37       	cpi	r24, 0x78	; 120
    5e4e:	21 f0       	breq	.+8      	; 0x5e58 <vfprintf+0x270>
    5e50:	a9 c0       	rjmp	.+338    	; 0x5fa4 <vfprintf+0x3bc>
    5e52:	e9 2f       	mov	r30, r25
    5e54:	e0 61       	ori	r30, 0x10	; 16
    5e56:	be 2e       	mov	r11, r30
    5e58:	b4 fe       	sbrs	r11, 4
    5e5a:	0d c0       	rjmp	.+26     	; 0x5e76 <vfprintf+0x28e>
    5e5c:	fb 2d       	mov	r31, r11
    5e5e:	f4 60       	ori	r31, 0x04	; 4
    5e60:	bf 2e       	mov	r11, r31
    5e62:	09 c0       	rjmp	.+18     	; 0x5e76 <vfprintf+0x28e>
    5e64:	34 fe       	sbrs	r3, 4
    5e66:	0a c0       	rjmp	.+20     	; 0x5e7c <vfprintf+0x294>
    5e68:	29 2f       	mov	r18, r25
    5e6a:	26 60       	ori	r18, 0x06	; 6
    5e6c:	b2 2e       	mov	r11, r18
    5e6e:	06 c0       	rjmp	.+12     	; 0x5e7c <vfprintf+0x294>
    5e70:	28 e0       	ldi	r18, 0x08	; 8
    5e72:	30 e0       	ldi	r19, 0x00	; 0
    5e74:	05 c0       	rjmp	.+10     	; 0x5e80 <vfprintf+0x298>
    5e76:	20 e1       	ldi	r18, 0x10	; 16
    5e78:	30 e0       	ldi	r19, 0x00	; 0
    5e7a:	02 c0       	rjmp	.+4      	; 0x5e80 <vfprintf+0x298>
    5e7c:	20 e1       	ldi	r18, 0x10	; 16
    5e7e:	32 e0       	ldi	r19, 0x02	; 2
    5e80:	f8 01       	movw	r30, r16
    5e82:	b7 fe       	sbrs	r11, 7
    5e84:	07 c0       	rjmp	.+14     	; 0x5e94 <vfprintf+0x2ac>
    5e86:	60 81       	ld	r22, Z
    5e88:	71 81       	ldd	r23, Z+1	; 0x01
    5e8a:	82 81       	ldd	r24, Z+2	; 0x02
    5e8c:	93 81       	ldd	r25, Z+3	; 0x03
    5e8e:	0c 5f       	subi	r16, 0xFC	; 252
    5e90:	1f 4f       	sbci	r17, 0xFF	; 255
    5e92:	06 c0       	rjmp	.+12     	; 0x5ea0 <vfprintf+0x2b8>
    5e94:	60 81       	ld	r22, Z
    5e96:	71 81       	ldd	r23, Z+1	; 0x01
    5e98:	80 e0       	ldi	r24, 0x00	; 0
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	0e 5f       	subi	r16, 0xFE	; 254
    5e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea0:	a3 01       	movw	r20, r6
    5ea2:	f1 d0       	rcall	.+482    	; 0x6086 <__ultoa_invert>
    5ea4:	88 2e       	mov	r8, r24
    5ea6:	86 18       	sub	r8, r6
    5ea8:	fb 2d       	mov	r31, r11
    5eaa:	ff 77       	andi	r31, 0x7F	; 127
    5eac:	3f 2e       	mov	r3, r31
    5eae:	36 fe       	sbrs	r3, 6
    5eb0:	0d c0       	rjmp	.+26     	; 0x5ecc <vfprintf+0x2e4>
    5eb2:	23 2d       	mov	r18, r3
    5eb4:	2e 7f       	andi	r18, 0xFE	; 254
    5eb6:	a2 2e       	mov	r10, r18
    5eb8:	89 14       	cp	r8, r9
    5eba:	58 f4       	brcc	.+22     	; 0x5ed2 <vfprintf+0x2ea>
    5ebc:	34 fe       	sbrs	r3, 4
    5ebe:	0b c0       	rjmp	.+22     	; 0x5ed6 <vfprintf+0x2ee>
    5ec0:	32 fc       	sbrc	r3, 2
    5ec2:	09 c0       	rjmp	.+18     	; 0x5ed6 <vfprintf+0x2ee>
    5ec4:	83 2d       	mov	r24, r3
    5ec6:	8e 7e       	andi	r24, 0xEE	; 238
    5ec8:	a8 2e       	mov	r10, r24
    5eca:	05 c0       	rjmp	.+10     	; 0x5ed6 <vfprintf+0x2ee>
    5ecc:	b8 2c       	mov	r11, r8
    5ece:	a3 2c       	mov	r10, r3
    5ed0:	03 c0       	rjmp	.+6      	; 0x5ed8 <vfprintf+0x2f0>
    5ed2:	b8 2c       	mov	r11, r8
    5ed4:	01 c0       	rjmp	.+2      	; 0x5ed8 <vfprintf+0x2f0>
    5ed6:	b9 2c       	mov	r11, r9
    5ed8:	a4 fe       	sbrs	r10, 4
    5eda:	0f c0       	rjmp	.+30     	; 0x5efa <vfprintf+0x312>
    5edc:	fe 01       	movw	r30, r28
    5ede:	e8 0d       	add	r30, r8
    5ee0:	f1 1d       	adc	r31, r1
    5ee2:	80 81       	ld	r24, Z
    5ee4:	80 33       	cpi	r24, 0x30	; 48
    5ee6:	21 f4       	brne	.+8      	; 0x5ef0 <vfprintf+0x308>
    5ee8:	9a 2d       	mov	r25, r10
    5eea:	99 7e       	andi	r25, 0xE9	; 233
    5eec:	a9 2e       	mov	r10, r25
    5eee:	09 c0       	rjmp	.+18     	; 0x5f02 <vfprintf+0x31a>
    5ef0:	a2 fe       	sbrs	r10, 2
    5ef2:	06 c0       	rjmp	.+12     	; 0x5f00 <vfprintf+0x318>
    5ef4:	b3 94       	inc	r11
    5ef6:	b3 94       	inc	r11
    5ef8:	04 c0       	rjmp	.+8      	; 0x5f02 <vfprintf+0x31a>
    5efa:	8a 2d       	mov	r24, r10
    5efc:	86 78       	andi	r24, 0x86	; 134
    5efe:	09 f0       	breq	.+2      	; 0x5f02 <vfprintf+0x31a>
    5f00:	b3 94       	inc	r11
    5f02:	a3 fc       	sbrc	r10, 3
    5f04:	10 c0       	rjmp	.+32     	; 0x5f26 <vfprintf+0x33e>
    5f06:	a0 fe       	sbrs	r10, 0
    5f08:	06 c0       	rjmp	.+12     	; 0x5f16 <vfprintf+0x32e>
    5f0a:	b2 14       	cp	r11, r2
    5f0c:	80 f4       	brcc	.+32     	; 0x5f2e <vfprintf+0x346>
    5f0e:	28 0c       	add	r2, r8
    5f10:	92 2c       	mov	r9, r2
    5f12:	9b 18       	sub	r9, r11
    5f14:	0d c0       	rjmp	.+26     	; 0x5f30 <vfprintf+0x348>
    5f16:	b2 14       	cp	r11, r2
    5f18:	58 f4       	brcc	.+22     	; 0x5f30 <vfprintf+0x348>
    5f1a:	b6 01       	movw	r22, r12
    5f1c:	80 e2       	ldi	r24, 0x20	; 32
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	76 d0       	rcall	.+236    	; 0x600e <fputc>
    5f22:	b3 94       	inc	r11
    5f24:	f8 cf       	rjmp	.-16     	; 0x5f16 <vfprintf+0x32e>
    5f26:	b2 14       	cp	r11, r2
    5f28:	18 f4       	brcc	.+6      	; 0x5f30 <vfprintf+0x348>
    5f2a:	2b 18       	sub	r2, r11
    5f2c:	02 c0       	rjmp	.+4      	; 0x5f32 <vfprintf+0x34a>
    5f2e:	98 2c       	mov	r9, r8
    5f30:	21 2c       	mov	r2, r1
    5f32:	a4 fe       	sbrs	r10, 4
    5f34:	0f c0       	rjmp	.+30     	; 0x5f54 <vfprintf+0x36c>
    5f36:	b6 01       	movw	r22, r12
    5f38:	80 e3       	ldi	r24, 0x30	; 48
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	68 d0       	rcall	.+208    	; 0x600e <fputc>
    5f3e:	a2 fe       	sbrs	r10, 2
    5f40:	16 c0       	rjmp	.+44     	; 0x5f6e <vfprintf+0x386>
    5f42:	a1 fc       	sbrc	r10, 1
    5f44:	03 c0       	rjmp	.+6      	; 0x5f4c <vfprintf+0x364>
    5f46:	88 e7       	ldi	r24, 0x78	; 120
    5f48:	90 e0       	ldi	r25, 0x00	; 0
    5f4a:	02 c0       	rjmp	.+4      	; 0x5f50 <vfprintf+0x368>
    5f4c:	88 e5       	ldi	r24, 0x58	; 88
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	b6 01       	movw	r22, r12
    5f52:	0c c0       	rjmp	.+24     	; 0x5f6c <vfprintf+0x384>
    5f54:	8a 2d       	mov	r24, r10
    5f56:	86 78       	andi	r24, 0x86	; 134
    5f58:	51 f0       	breq	.+20     	; 0x5f6e <vfprintf+0x386>
    5f5a:	a1 fe       	sbrs	r10, 1
    5f5c:	02 c0       	rjmp	.+4      	; 0x5f62 <vfprintf+0x37a>
    5f5e:	8b e2       	ldi	r24, 0x2B	; 43
    5f60:	01 c0       	rjmp	.+2      	; 0x5f64 <vfprintf+0x37c>
    5f62:	80 e2       	ldi	r24, 0x20	; 32
    5f64:	a7 fc       	sbrc	r10, 7
    5f66:	8d e2       	ldi	r24, 0x2D	; 45
    5f68:	b6 01       	movw	r22, r12
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	50 d0       	rcall	.+160    	; 0x600e <fputc>
    5f6e:	89 14       	cp	r8, r9
    5f70:	30 f4       	brcc	.+12     	; 0x5f7e <vfprintf+0x396>
    5f72:	b6 01       	movw	r22, r12
    5f74:	80 e3       	ldi	r24, 0x30	; 48
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	4a d0       	rcall	.+148    	; 0x600e <fputc>
    5f7a:	9a 94       	dec	r9
    5f7c:	f8 cf       	rjmp	.-16     	; 0x5f6e <vfprintf+0x386>
    5f7e:	8a 94       	dec	r8
    5f80:	f3 01       	movw	r30, r6
    5f82:	e8 0d       	add	r30, r8
    5f84:	f1 1d       	adc	r31, r1
    5f86:	80 81       	ld	r24, Z
    5f88:	b6 01       	movw	r22, r12
    5f8a:	90 e0       	ldi	r25, 0x00	; 0
    5f8c:	40 d0       	rcall	.+128    	; 0x600e <fputc>
    5f8e:	81 10       	cpse	r8, r1
    5f90:	f6 cf       	rjmp	.-20     	; 0x5f7e <vfprintf+0x396>
    5f92:	22 20       	and	r2, r2
    5f94:	09 f4       	brne	.+2      	; 0x5f98 <vfprintf+0x3b0>
    5f96:	4e ce       	rjmp	.-868    	; 0x5c34 <vfprintf+0x4c>
    5f98:	b6 01       	movw	r22, r12
    5f9a:	80 e2       	ldi	r24, 0x20	; 32
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	37 d0       	rcall	.+110    	; 0x600e <fputc>
    5fa0:	2a 94       	dec	r2
    5fa2:	f7 cf       	rjmp	.-18     	; 0x5f92 <vfprintf+0x3aa>
    5fa4:	f6 01       	movw	r30, r12
    5fa6:	86 81       	ldd	r24, Z+6	; 0x06
    5fa8:	97 81       	ldd	r25, Z+7	; 0x07
    5faa:	02 c0       	rjmp	.+4      	; 0x5fb0 <vfprintf+0x3c8>
    5fac:	8f ef       	ldi	r24, 0xFF	; 255
    5fae:	9f ef       	ldi	r25, 0xFF	; 255
    5fb0:	2b 96       	adiw	r28, 0x0b	; 11
    5fb2:	0f b6       	in	r0, 0x3f	; 63
    5fb4:	f8 94       	cli
    5fb6:	de bf       	out	0x3e, r29	; 62
    5fb8:	0f be       	out	0x3f, r0	; 63
    5fba:	cd bf       	out	0x3d, r28	; 61
    5fbc:	df 91       	pop	r29
    5fbe:	cf 91       	pop	r28
    5fc0:	1f 91       	pop	r17
    5fc2:	0f 91       	pop	r16
    5fc4:	ff 90       	pop	r15
    5fc6:	ef 90       	pop	r14
    5fc8:	df 90       	pop	r13
    5fca:	cf 90       	pop	r12
    5fcc:	bf 90       	pop	r11
    5fce:	af 90       	pop	r10
    5fd0:	9f 90       	pop	r9
    5fd2:	8f 90       	pop	r8
    5fd4:	7f 90       	pop	r7
    5fd6:	6f 90       	pop	r6
    5fd8:	5f 90       	pop	r5
    5fda:	4f 90       	pop	r4
    5fdc:	3f 90       	pop	r3
    5fde:	2f 90       	pop	r2
    5fe0:	08 95       	ret

00005fe2 <strnlen_P>:
    5fe2:	fc 01       	movw	r30, r24
    5fe4:	05 90       	lpm	r0, Z+
    5fe6:	61 50       	subi	r22, 0x01	; 1
    5fe8:	70 40       	sbci	r23, 0x00	; 0
    5fea:	01 10       	cpse	r0, r1
    5fec:	d8 f7       	brcc	.-10     	; 0x5fe4 <strnlen_P+0x2>
    5fee:	80 95       	com	r24
    5ff0:	90 95       	com	r25
    5ff2:	8e 0f       	add	r24, r30
    5ff4:	9f 1f       	adc	r25, r31
    5ff6:	08 95       	ret

00005ff8 <strnlen>:
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	61 50       	subi	r22, 0x01	; 1
    5ffc:	70 40       	sbci	r23, 0x00	; 0
    5ffe:	01 90       	ld	r0, Z+
    6000:	01 10       	cpse	r0, r1
    6002:	d8 f7       	brcc	.-10     	; 0x5ffa <strnlen+0x2>
    6004:	80 95       	com	r24
    6006:	90 95       	com	r25
    6008:	8e 0f       	add	r24, r30
    600a:	9f 1f       	adc	r25, r31
    600c:	08 95       	ret

0000600e <fputc>:
    600e:	0f 93       	push	r16
    6010:	1f 93       	push	r17
    6012:	cf 93       	push	r28
    6014:	df 93       	push	r29
    6016:	fb 01       	movw	r30, r22
    6018:	23 81       	ldd	r18, Z+3	; 0x03
    601a:	21 fd       	sbrc	r18, 1
    601c:	03 c0       	rjmp	.+6      	; 0x6024 <fputc+0x16>
    601e:	8f ef       	ldi	r24, 0xFF	; 255
    6020:	9f ef       	ldi	r25, 0xFF	; 255
    6022:	2c c0       	rjmp	.+88     	; 0x607c <fputc+0x6e>
    6024:	22 ff       	sbrs	r18, 2
    6026:	16 c0       	rjmp	.+44     	; 0x6054 <fputc+0x46>
    6028:	46 81       	ldd	r20, Z+6	; 0x06
    602a:	57 81       	ldd	r21, Z+7	; 0x07
    602c:	24 81       	ldd	r18, Z+4	; 0x04
    602e:	35 81       	ldd	r19, Z+5	; 0x05
    6030:	42 17       	cp	r20, r18
    6032:	53 07       	cpc	r21, r19
    6034:	44 f4       	brge	.+16     	; 0x6046 <fputc+0x38>
    6036:	a0 81       	ld	r26, Z
    6038:	b1 81       	ldd	r27, Z+1	; 0x01
    603a:	9d 01       	movw	r18, r26
    603c:	2f 5f       	subi	r18, 0xFF	; 255
    603e:	3f 4f       	sbci	r19, 0xFF	; 255
    6040:	31 83       	std	Z+1, r19	; 0x01
    6042:	20 83       	st	Z, r18
    6044:	8c 93       	st	X, r24
    6046:	26 81       	ldd	r18, Z+6	; 0x06
    6048:	37 81       	ldd	r19, Z+7	; 0x07
    604a:	2f 5f       	subi	r18, 0xFF	; 255
    604c:	3f 4f       	sbci	r19, 0xFF	; 255
    604e:	37 83       	std	Z+7, r19	; 0x07
    6050:	26 83       	std	Z+6, r18	; 0x06
    6052:	14 c0       	rjmp	.+40     	; 0x607c <fputc+0x6e>
    6054:	8b 01       	movw	r16, r22
    6056:	ec 01       	movw	r28, r24
    6058:	fb 01       	movw	r30, r22
    605a:	00 84       	ldd	r0, Z+8	; 0x08
    605c:	f1 85       	ldd	r31, Z+9	; 0x09
    605e:	e0 2d       	mov	r30, r0
    6060:	19 95       	eicall
    6062:	89 2b       	or	r24, r25
    6064:	e1 f6       	brne	.-72     	; 0x601e <fputc+0x10>
    6066:	d8 01       	movw	r26, r16
    6068:	16 96       	adiw	r26, 0x06	; 6
    606a:	8d 91       	ld	r24, X+
    606c:	9c 91       	ld	r25, X
    606e:	17 97       	sbiw	r26, 0x07	; 7
    6070:	01 96       	adiw	r24, 0x01	; 1
    6072:	17 96       	adiw	r26, 0x07	; 7
    6074:	9c 93       	st	X, r25
    6076:	8e 93       	st	-X, r24
    6078:	16 97       	sbiw	r26, 0x06	; 6
    607a:	ce 01       	movw	r24, r28
    607c:	df 91       	pop	r29
    607e:	cf 91       	pop	r28
    6080:	1f 91       	pop	r17
    6082:	0f 91       	pop	r16
    6084:	08 95       	ret

00006086 <__ultoa_invert>:
    6086:	fa 01       	movw	r30, r20
    6088:	aa 27       	eor	r26, r26
    608a:	28 30       	cpi	r18, 0x08	; 8
    608c:	51 f1       	breq	.+84     	; 0x60e2 <__ultoa_invert+0x5c>
    608e:	20 31       	cpi	r18, 0x10	; 16
    6090:	81 f1       	breq	.+96     	; 0x60f2 <__ultoa_invert+0x6c>
    6092:	e8 94       	clt
    6094:	6f 93       	push	r22
    6096:	6e 7f       	andi	r22, 0xFE	; 254
    6098:	6e 5f       	subi	r22, 0xFE	; 254
    609a:	7f 4f       	sbci	r23, 0xFF	; 255
    609c:	8f 4f       	sbci	r24, 0xFF	; 255
    609e:	9f 4f       	sbci	r25, 0xFF	; 255
    60a0:	af 4f       	sbci	r26, 0xFF	; 255
    60a2:	b1 e0       	ldi	r27, 0x01	; 1
    60a4:	3e d0       	rcall	.+124    	; 0x6122 <__ultoa_invert+0x9c>
    60a6:	b4 e0       	ldi	r27, 0x04	; 4
    60a8:	3c d0       	rcall	.+120    	; 0x6122 <__ultoa_invert+0x9c>
    60aa:	67 0f       	add	r22, r23
    60ac:	78 1f       	adc	r23, r24
    60ae:	89 1f       	adc	r24, r25
    60b0:	9a 1f       	adc	r25, r26
    60b2:	a1 1d       	adc	r26, r1
    60b4:	68 0f       	add	r22, r24
    60b6:	79 1f       	adc	r23, r25
    60b8:	8a 1f       	adc	r24, r26
    60ba:	91 1d       	adc	r25, r1
    60bc:	a1 1d       	adc	r26, r1
    60be:	6a 0f       	add	r22, r26
    60c0:	71 1d       	adc	r23, r1
    60c2:	81 1d       	adc	r24, r1
    60c4:	91 1d       	adc	r25, r1
    60c6:	a1 1d       	adc	r26, r1
    60c8:	20 d0       	rcall	.+64     	; 0x610a <__ultoa_invert+0x84>
    60ca:	09 f4       	brne	.+2      	; 0x60ce <__ultoa_invert+0x48>
    60cc:	68 94       	set
    60ce:	3f 91       	pop	r19
    60d0:	2a e0       	ldi	r18, 0x0A	; 10
    60d2:	26 9f       	mul	r18, r22
    60d4:	11 24       	eor	r1, r1
    60d6:	30 19       	sub	r19, r0
    60d8:	30 5d       	subi	r19, 0xD0	; 208
    60da:	31 93       	st	Z+, r19
    60dc:	de f6       	brtc	.-74     	; 0x6094 <__ultoa_invert+0xe>
    60de:	cf 01       	movw	r24, r30
    60e0:	08 95       	ret
    60e2:	46 2f       	mov	r20, r22
    60e4:	47 70       	andi	r20, 0x07	; 7
    60e6:	40 5d       	subi	r20, 0xD0	; 208
    60e8:	41 93       	st	Z+, r20
    60ea:	b3 e0       	ldi	r27, 0x03	; 3
    60ec:	0f d0       	rcall	.+30     	; 0x610c <__ultoa_invert+0x86>
    60ee:	c9 f7       	brne	.-14     	; 0x60e2 <__ultoa_invert+0x5c>
    60f0:	f6 cf       	rjmp	.-20     	; 0x60de <__ultoa_invert+0x58>
    60f2:	46 2f       	mov	r20, r22
    60f4:	4f 70       	andi	r20, 0x0F	; 15
    60f6:	40 5d       	subi	r20, 0xD0	; 208
    60f8:	4a 33       	cpi	r20, 0x3A	; 58
    60fa:	18 f0       	brcs	.+6      	; 0x6102 <__ultoa_invert+0x7c>
    60fc:	49 5d       	subi	r20, 0xD9	; 217
    60fe:	31 fd       	sbrc	r19, 1
    6100:	40 52       	subi	r20, 0x20	; 32
    6102:	41 93       	st	Z+, r20
    6104:	02 d0       	rcall	.+4      	; 0x610a <__ultoa_invert+0x84>
    6106:	a9 f7       	brne	.-22     	; 0x60f2 <__ultoa_invert+0x6c>
    6108:	ea cf       	rjmp	.-44     	; 0x60de <__ultoa_invert+0x58>
    610a:	b4 e0       	ldi	r27, 0x04	; 4
    610c:	a6 95       	lsr	r26
    610e:	97 95       	ror	r25
    6110:	87 95       	ror	r24
    6112:	77 95       	ror	r23
    6114:	67 95       	ror	r22
    6116:	ba 95       	dec	r27
    6118:	c9 f7       	brne	.-14     	; 0x610c <__ultoa_invert+0x86>
    611a:	00 97       	sbiw	r24, 0x00	; 0
    611c:	61 05       	cpc	r22, r1
    611e:	71 05       	cpc	r23, r1
    6120:	08 95       	ret
    6122:	9b 01       	movw	r18, r22
    6124:	ac 01       	movw	r20, r24
    6126:	0a 2e       	mov	r0, r26
    6128:	06 94       	lsr	r0
    612a:	57 95       	ror	r21
    612c:	47 95       	ror	r20
    612e:	37 95       	ror	r19
    6130:	27 95       	ror	r18
    6132:	ba 95       	dec	r27
    6134:	c9 f7       	brne	.-14     	; 0x6128 <__ultoa_invert+0xa2>
    6136:	62 0f       	add	r22, r18
    6138:	73 1f       	adc	r23, r19
    613a:	84 1f       	adc	r24, r20
    613c:	95 1f       	adc	r25, r21
    613e:	a0 1d       	adc	r26, r0
    6140:	08 95       	ret

00006142 <_exit>:
    6142:	f8 94       	cli

00006144 <__stop_program>:
    6144:	ff cf       	rjmp	.-2      	; 0x6144 <__stop_program>

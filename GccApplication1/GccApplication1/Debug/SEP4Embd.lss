
SEP4Embd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000484  00800200  00004e5c  00004ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001225  00800684  00800684  00005374  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000910  00000000  00000000  00005410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c34e  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e97  00000000  00000000  0001206e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000584b  00000000  00000000  00014f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f58  00000000  00000000  0001a750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000387c  00000000  00000000  0001c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aef4  00000000  00000000  0001ff24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a0  00000000  00000000  0002ae18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c1       	rjmp	.+1004   	; 0x3ee <__ctors_end>
       2:	00 00       	nop
       4:	15 c2       	rjmp	.+1066   	; 0x430 <__bad_interrupt>
       6:	00 00       	nop
       8:	13 c2       	rjmp	.+1062   	; 0x430 <__bad_interrupt>
       a:	00 00       	nop
       c:	11 c2       	rjmp	.+1058   	; 0x430 <__bad_interrupt>
       e:	00 00       	nop
      10:	0f c2       	rjmp	.+1054   	; 0x430 <__bad_interrupt>
      12:	00 00       	nop
      14:	0d c2       	rjmp	.+1050   	; 0x430 <__bad_interrupt>
      16:	00 00       	nop
      18:	0b c2       	rjmp	.+1046   	; 0x430 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	09 c2       	rjmp	.+1042   	; 0x430 <__bad_interrupt>
      1e:	00 00       	nop
      20:	07 c2       	rjmp	.+1038   	; 0x430 <__bad_interrupt>
      22:	00 00       	nop
      24:	05 c2       	rjmp	.+1034   	; 0x430 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c2       	rjmp	.+1030   	; 0x430 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	01 c2       	rjmp	.+1026   	; 0x430 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9b c6       	rjmp	.+3382   	; 0xd68 <__vector_12>
      32:	00 00       	nop
      34:	fd c1       	rjmp	.+1018   	; 0x430 <__bad_interrupt>
      36:	00 00       	nop
      38:	fb c1       	rjmp	.+1014   	; 0x430 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f9 c1       	rjmp	.+1010   	; 0x430 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c1       	rjmp	.+1006   	; 0x430 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c1       	rjmp	.+1002   	; 0x430 <__bad_interrupt>
      46:	00 00       	nop
      48:	f3 c1       	rjmp	.+998    	; 0x430 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f1 c1       	rjmp	.+994    	; 0x430 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ef c1       	rjmp	.+990    	; 0x430 <__bad_interrupt>
      52:	00 00       	nop
      54:	ed c1       	rjmp	.+986    	; 0x430 <__bad_interrupt>
      56:	00 00       	nop
      58:	eb c1       	rjmp	.+982    	; 0x430 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e9 c1       	rjmp	.+978    	; 0x430 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c1       	rjmp	.+974    	; 0x430 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__vector_25>
      68:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__vector_26>
      6c:	e1 c1       	rjmp	.+962    	; 0x430 <__bad_interrupt>
      6e:	00 00       	nop
      70:	df c1       	rjmp	.+958    	; 0x430 <__bad_interrupt>
      72:	00 00       	nop
      74:	dd c1       	rjmp	.+954    	; 0x430 <__bad_interrupt>
      76:	00 00       	nop
      78:	db c1       	rjmp	.+950    	; 0x430 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d9 c1       	rjmp	.+946    	; 0x430 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d7 c1       	rjmp	.+942    	; 0x430 <__bad_interrupt>
      82:	00 00       	nop
      84:	d5 c1       	rjmp	.+938    	; 0x430 <__bad_interrupt>
      86:	00 00       	nop
      88:	d3 c1       	rjmp	.+934    	; 0x430 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 c1       	rjmp	.+930    	; 0x430 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__vector_36>
      94:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__vector_37>
      98:	cb c1       	rjmp	.+918    	; 0x430 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c9 c1       	rjmp	.+914    	; 0x430 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c7 c1       	rjmp	.+910    	; 0x430 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c5 c1       	rjmp	.+906    	; 0x430 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c3 c1       	rjmp	.+902    	; 0x430 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c1 c1       	rjmp	.+898    	; 0x430 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bf c1       	rjmp	.+894    	; 0x430 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bd c1       	rjmp	.+890    	; 0x430 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bb c1       	rjmp	.+886    	; 0x430 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b9 c1       	rjmp	.+882    	; 0x430 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b7 c1       	rjmp	.+878    	; 0x430 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b5 c1       	rjmp	.+874    	; 0x430 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b3 c1       	rjmp	.+870    	; 0x430 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__vector_51>
      d0:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__vector_52>
      d4:	ad c1       	rjmp	.+858    	; 0x430 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <__vector_54>
      dc:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__vector_55>
      e0:	a7 c1       	rjmp	.+846    	; 0x430 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6e 01       	movw	r12, r28
      e6:	6e 01       	movw	r12, r28
      e8:	6e 01       	movw	r12, r28
      ea:	a8 01       	movw	r20, r16
      ec:	b0 01       	movw	r22, r0
      ee:	c6 01       	movw	r24, r12
      f0:	6e 01       	movw	r12, r28
      f2:	6e 01       	movw	r12, r28
      f4:	a8 01       	movw	r20, r16
      f6:	b0 01       	movw	r22, r0

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	08 ec       	ldi	r16, 0xC8	; 200
      fa:	16 e1       	ldi	r17, 0x16	; 22
      fc:	0f 2e       	mov	r0, r31
      fe:	f8 ef       	ldi	r31, 0xF8	; 248
     100:	ef 2e       	mov	r14, r31
     102:	f6 e1       	ldi	r31, 0x16	; 22
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	17 96       	adiw	r26, 0x07	; 7
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	18 97       	sbiw	r26, 0x08	; 8
     120:	c0 85       	ldd	r28, Z+8	; 0x08
     122:	d1 85       	ldd	r29, Z+9	; 0x09
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	84 d4       	rcall	.+2312   	; 0xa32 <uxListRemove>
     12a:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <uxCurrentNumberOfTasks>
     134:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8b 8d       	ldd	r24, Y+27	; 0x1b
     144:	9c 8d       	ldd	r25, Y+28	; 0x1c
     146:	d1 d3       	rcall	.+1954   	; 0x8ea <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	cf d3       	rcall	.+1950   	; 0x8ea <vPortFree>
     14c:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	3f d5       	rcall	.+2686   	; 0xbdc <vPortYield>
     15e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	60 97       	sbiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	ce 01       	movw	r24, r28
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9a 87       	std	Y+10, r25	; 0x0a
     17e:	89 87       	std	Y+9, r24	; 0x09
     180:	81 2c       	mov	r8, r1
     182:	91 2c       	mov	r9, r1
     184:	a1 2c       	mov	r10, r1
     186:	b1 2c       	mov	r11, r1
     188:	69 84       	ldd	r6, Y+9	; 0x09
     18a:	7a 84       	ldd	r7, Y+10	; 0x0a
     18c:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <pxCurrentTimerList>
     190:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
     194:	80 81       	ld	r24, Z
     196:	88 23       	and	r24, r24
     198:	09 f4       	brne	.+2      	; 0x19c <prvTimerTask+0x38>
     19a:	0f c1       	rjmp	.+542    	; 0x3ba <prvTimerTask+0x256>
     19c:	07 80       	ldd	r0, Z+7	; 0x07
     19e:	f0 85       	ldd	r31, Z+8	; 0x08
     1a0:	e0 2d       	mov	r30, r0
     1a2:	20 80       	ld	r2, Z
     1a4:	31 80       	ldd	r3, Z+1	; 0x01
     1a6:	42 80       	ldd	r4, Z+2	; 0x02
     1a8:	53 80       	ldd	r5, Z+3	; 0x03
     1aa:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
     1ae:	ce 01       	movw	r24, r28
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	0e 94 bf 14 	call	0x297e	; 0x297e <prvSampleTimeNow>
     1b6:	6b 87       	std	Y+11, r22	; 0x0b
     1b8:	7c 87       	std	Y+12, r23	; 0x0c
     1ba:	8d 87       	std	Y+13, r24	; 0x0d
     1bc:	9e 87       	std	Y+14, r25	; 0x0e
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	81 11       	cpse	r24, r1
     1c2:	65 c0       	rjmp	.+202    	; 0x28e <prvTimerTask+0x12a>
     1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c8:	ad 85       	ldd	r26, Y+13	; 0x0d
     1ca:	be 85       	ldd	r27, Y+14	; 0x0e
     1cc:	82 15       	cp	r24, r2
     1ce:	93 05       	cpc	r25, r3
     1d0:	a4 05       	cpc	r26, r4
     1d2:	b5 05       	cpc	r27, r5
     1d4:	08 f4       	brcc	.+2      	; 0x1d8 <prvTimerTask+0x74>
     1d6:	44 c0       	rjmp	.+136    	; 0x260 <prvTimerTask+0xfc>
     1d8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     1dc:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <pxCurrentTimerList>
     1e0:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
     1e4:	07 80       	ldd	r0, Z+7	; 0x07
     1e6:	f0 85       	ldd	r31, Z+8	; 0x08
     1e8:	e0 2d       	mov	r30, r0
     1ea:	a0 85       	ldd	r26, Z+8	; 0x08
     1ec:	b1 85       	ldd	r27, Z+9	; 0x09
     1ee:	b8 8b       	std	Y+16, r27	; 0x10
     1f0:	af 87       	std	Y+15, r26	; 0x0f
     1f2:	cd 01       	movw	r24, r26
     1f4:	02 96       	adiw	r24, 0x02	; 2
     1f6:	1d d4       	rcall	.+2106   	; 0xa32 <uxListRemove>
     1f8:	ef 85       	ldd	r30, Y+15	; 0x0f
     1fa:	f8 89       	ldd	r31, Y+16	; 0x10
     1fc:	87 89       	ldd	r24, Z+23	; 0x17
     1fe:	82 ff       	sbrs	r24, 2
     200:	21 c0       	rjmp	.+66     	; 0x244 <prvTimerTask+0xe0>
     202:	46 85       	ldd	r20, Z+14	; 0x0e
     204:	57 85       	ldd	r21, Z+15	; 0x0f
     206:	60 89       	ldd	r22, Z+16	; 0x10
     208:	71 89       	ldd	r23, Z+17	; 0x11
     20a:	42 0d       	add	r20, r2
     20c:	53 1d       	adc	r21, r3
     20e:	64 1d       	adc	r22, r4
     210:	75 1d       	adc	r23, r5
     212:	72 01       	movw	r14, r4
     214:	61 01       	movw	r12, r2
     216:	0b 85       	ldd	r16, Y+11	; 0x0b
     218:	1c 85       	ldd	r17, Y+12	; 0x0c
     21a:	2d 85       	ldd	r18, Y+13	; 0x0d
     21c:	3e 85       	ldd	r19, Y+14	; 0x0e
     21e:	cf 01       	movw	r24, r30
     220:	0e 94 cf 13 	call	0x279e	; 0x279e <prvInsertTimerInActiveList>
     224:	88 23       	and	r24, r24
     226:	99 f0       	breq	.+38     	; 0x24e <prvTimerTask+0xea>
     228:	c8 2c       	mov	r12, r8
     22a:	d9 2c       	mov	r13, r9
     22c:	ea 2c       	mov	r14, r10
     22e:	fb 2c       	mov	r15, r11
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	a2 01       	movw	r20, r4
     236:	91 01       	movw	r18, r2
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	8f 85       	ldd	r24, Y+15	; 0x0f
     23c:	98 89       	ldd	r25, Y+16	; 0x10
     23e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <xTimerGenericCommand>
     242:	05 c0       	rjmp	.+10     	; 0x24e <prvTimerTask+0xea>
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	af 85       	ldd	r26, Y+15	; 0x0f
     248:	b8 89       	ldd	r27, Y+16	; 0x10
     24a:	57 96       	adiw	r26, 0x17	; 23
     24c:	8c 93       	st	X, r24
     24e:	af 85       	ldd	r26, Y+15	; 0x0f
     250:	b8 89       	ldd	r27, Y+16	; 0x10
     252:	54 96       	adiw	r26, 0x14	; 20
     254:	ed 91       	ld	r30, X+
     256:	fc 91       	ld	r31, X
     258:	55 97       	sbiw	r26, 0x15	; 21
     25a:	cd 01       	movw	r24, r26
     25c:	19 95       	eicall
     25e:	9f c0       	rjmp	.+318    	; 0x39e <prvTimerTask+0x23a>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	b2 01       	movw	r22, r4
     264:	a1 01       	movw	r20, r2
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	48 1b       	sub	r20, r24
     270:	59 0b       	sbc	r21, r25
     272:	6a 0b       	sbc	r22, r26
     274:	7b 0b       	sbc	r23, r27
     276:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
     27a:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
     27e:	0e 94 83 09 	call	0x1306	; 0x1306 <vQueueWaitForMessageRestricted>
     282:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     286:	81 11       	cpse	r24, r1
     288:	8a c0       	rjmp	.+276    	; 0x39e <prvTimerTask+0x23a>
     28a:	a8 d4       	rcall	.+2384   	; 0xbdc <vPortYield>
     28c:	88 c0       	rjmp	.+272    	; 0x39e <prvTimerTask+0x23a>
     28e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     292:	85 c0       	rjmp	.+266    	; 0x39e <prvTimerTask+0x23a>
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	88 23       	and	r24, r24
     298:	0c f4       	brge	.+2      	; 0x29c <prvTimerTask+0x138>
     29a:	81 c0       	rjmp	.+258    	; 0x39e <prvTimerTask+0x23a>
     29c:	4e 80       	ldd	r4, Y+6	; 0x06
     29e:	5f 80       	ldd	r5, Y+7	; 0x07
     2a0:	d2 01       	movw	r26, r4
     2a2:	1c 96       	adiw	r26, 0x0c	; 12
     2a4:	8d 91       	ld	r24, X+
     2a6:	9c 91       	ld	r25, X
     2a8:	1d 97       	sbiw	r26, 0x0d	; 13
     2aa:	89 2b       	or	r24, r25
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <prvTimerTask+0x150>
     2ae:	c2 01       	movw	r24, r4
     2b0:	02 96       	adiw	r24, 0x02	; 2
     2b2:	bf d3       	rcall	.+1918   	; 0xa32 <uxListRemove>
     2b4:	ce 01       	movw	r24, r28
     2b6:	08 96       	adiw	r24, 0x08	; 8
     2b8:	0e 94 bf 14 	call	0x297e	; 0x297e <prvSampleTimeNow>
     2bc:	8b 01       	movw	r16, r22
     2be:	9c 01       	movw	r18, r24
     2c0:	e9 81       	ldd	r30, Y+1	; 0x01
     2c2:	0e 2e       	mov	r0, r30
     2c4:	00 0c       	add	r0, r0
     2c6:	ff 0b       	sbc	r31, r31
     2c8:	ea 30       	cpi	r30, 0x0A	; 10
     2ca:	f1 05       	cpc	r31, r1
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <prvTimerTask+0x16c>
     2ce:	67 c0       	rjmp	.+206    	; 0x39e <prvTimerTask+0x23a>
     2d0:	88 27       	eor	r24, r24
     2d2:	ee 58       	subi	r30, 0x8E	; 142
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	8f 4f       	sbci	r24, 0xFF	; 255
     2d8:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__tablejump2__>
     2dc:	f2 01       	movw	r30, r4
     2de:	87 89       	ldd	r24, Z+23	; 0x17
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	87 8b       	std	Z+23, r24	; 0x17
     2e4:	ca 80       	ldd	r12, Y+2	; 0x02
     2e6:	db 80       	ldd	r13, Y+3	; 0x03
     2e8:	ec 80       	ldd	r14, Y+4	; 0x04
     2ea:	fd 80       	ldd	r15, Y+5	; 0x05
     2ec:	46 85       	ldd	r20, Z+14	; 0x0e
     2ee:	57 85       	ldd	r21, Z+15	; 0x0f
     2f0:	60 89       	ldd	r22, Z+16	; 0x10
     2f2:	71 89       	ldd	r23, Z+17	; 0x11
     2f4:	4c 0d       	add	r20, r12
     2f6:	5d 1d       	adc	r21, r13
     2f8:	6e 1d       	adc	r22, r14
     2fa:	7f 1d       	adc	r23, r15
     2fc:	c2 01       	movw	r24, r4
     2fe:	0e 94 cf 13 	call	0x279e	; 0x279e <prvInsertTimerInActiveList>
     302:	88 23       	and	r24, r24
     304:	09 f4       	brne	.+2      	; 0x308 <prvTimerTask+0x1a4>
     306:	4b c0       	rjmp	.+150    	; 0x39e <prvTimerTask+0x23a>
     308:	d2 01       	movw	r26, r4
     30a:	54 96       	adiw	r26, 0x14	; 20
     30c:	ed 91       	ld	r30, X+
     30e:	fc 91       	ld	r31, X
     310:	55 97       	sbiw	r26, 0x15	; 21
     312:	c2 01       	movw	r24, r4
     314:	19 95       	eicall
     316:	f2 01       	movw	r30, r4
     318:	87 89       	ldd	r24, Z+23	; 0x17
     31a:	82 ff       	sbrs	r24, 2
     31c:	40 c0       	rjmp	.+128    	; 0x39e <prvTimerTask+0x23a>
     31e:	4a 81       	ldd	r20, Y+2	; 0x02
     320:	5b 81       	ldd	r21, Y+3	; 0x03
     322:	6c 81       	ldd	r22, Y+4	; 0x04
     324:	7d 81       	ldd	r23, Y+5	; 0x05
     326:	86 85       	ldd	r24, Z+14	; 0x0e
     328:	97 85       	ldd	r25, Z+15	; 0x0f
     32a:	a0 89       	ldd	r26, Z+16	; 0x10
     32c:	b1 89       	ldd	r27, Z+17	; 0x11
     32e:	9a 01       	movw	r18, r20
     330:	ab 01       	movw	r20, r22
     332:	28 0f       	add	r18, r24
     334:	39 1f       	adc	r19, r25
     336:	4a 1f       	adc	r20, r26
     338:	5b 1f       	adc	r21, r27
     33a:	c8 2c       	mov	r12, r8
     33c:	d9 2c       	mov	r13, r9
     33e:	ea 2c       	mov	r14, r10
     340:	fb 2c       	mov	r15, r11
     342:	00 e0       	ldi	r16, 0x00	; 0
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	c2 01       	movw	r24, r4
     34a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <xTimerGenericCommand>
     34e:	27 c0       	rjmp	.+78     	; 0x39e <prvTimerTask+0x23a>
     350:	d2 01       	movw	r26, r4
     352:	57 96       	adiw	r26, 0x17	; 23
     354:	8c 91       	ld	r24, X
     356:	57 97       	sbiw	r26, 0x17	; 23
     358:	8e 7f       	andi	r24, 0xFE	; 254
     35a:	57 96       	adiw	r26, 0x17	; 23
     35c:	8c 93       	st	X, r24
     35e:	1f c0       	rjmp	.+62     	; 0x39e <prvTimerTask+0x23a>
     360:	f2 01       	movw	r30, r4
     362:	87 89       	ldd	r24, Z+23	; 0x17
     364:	81 60       	ori	r24, 0x01	; 1
     366:	87 8b       	std	Z+23, r24	; 0x17
     368:	4a 81       	ldd	r20, Y+2	; 0x02
     36a:	5b 81       	ldd	r21, Y+3	; 0x03
     36c:	6c 81       	ldd	r22, Y+4	; 0x04
     36e:	7d 81       	ldd	r23, Y+5	; 0x05
     370:	46 87       	std	Z+14, r20	; 0x0e
     372:	57 87       	std	Z+15, r21	; 0x0f
     374:	60 8b       	std	Z+16, r22	; 0x10
     376:	71 8b       	std	Z+17, r23	; 0x11
     378:	40 0f       	add	r20, r16
     37a:	51 1f       	adc	r21, r17
     37c:	62 1f       	adc	r22, r18
     37e:	73 1f       	adc	r23, r19
     380:	68 01       	movw	r12, r16
     382:	79 01       	movw	r14, r18
     384:	c2 01       	movw	r24, r4
     386:	0e 94 cf 13 	call	0x279e	; 0x279e <prvInsertTimerInActiveList>
     38a:	09 c0       	rjmp	.+18     	; 0x39e <prvTimerTask+0x23a>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 fd       	sbrc	r24, 1
     392:	03 c0       	rjmp	.+6      	; 0x39a <prvTimerTask+0x236>
     394:	c2 01       	movw	r24, r4
     396:	a9 d2       	rcall	.+1362   	; 0x8ea <vPortFree>
     398:	02 c0       	rjmp	.+4      	; 0x39e <prvTimerTask+0x23a>
     39a:	8e 7f       	andi	r24, 0xFE	; 254
     39c:	87 8b       	std	Z+23, r24	; 0x17
     39e:	28 2d       	mov	r18, r8
     3a0:	39 2d       	mov	r19, r9
     3a2:	4a 2d       	mov	r20, r10
     3a4:	5b 2d       	mov	r21, r11
     3a6:	66 2d       	mov	r22, r6
     3a8:	77 2d       	mov	r23, r7
     3aa:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
     3ae:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
     3b2:	12 d7       	rcall	.+3620   	; 0x11d8 <xQueueReceive>
     3b4:	81 11       	cpse	r24, r1
     3b6:	6e cf       	rjmp	.-292    	; 0x294 <prvTimerTask+0x130>
     3b8:	e9 ce       	rjmp	.-558    	; 0x18c <prvTimerTask+0x28>
     3ba:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	0e 94 bf 14 	call	0x297e	; 0x297e <prvSampleTimeNow>
     3c6:	6b 87       	std	Y+11, r22	; 0x0b
     3c8:	7c 87       	std	Y+12, r23	; 0x0c
     3ca:	8d 87       	std	Y+13, r24	; 0x0d
     3cc:	9e 87       	std	Y+14, r25	; 0x0e
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	81 11       	cpse	r24, r1
     3d2:	5d cf       	rjmp	.-326    	; 0x28e <prvTimerTask+0x12a>
     3d4:	e0 91 2e 17 	lds	r30, 0x172E	; 0x80172e <pxOverflowTimerList>
     3d8:	f0 91 2f 17 	lds	r31, 0x172F	; 0x80172f <pxOverflowTimerList+0x1>
     3dc:	80 81       	ld	r24, Z
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	81 11       	cpse	r24, r1
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	28 2c       	mov	r2, r8
     3e6:	39 2c       	mov	r3, r9
     3e8:	4a 2c       	mov	r4, r10
     3ea:	5b 2c       	mov	r5, r11
     3ec:	3a cf       	rjmp	.-396    	; 0x262 <prvTimerTask+0xfe>

000003ee <__ctors_end>:
     3ee:	11 24       	eor	r1, r1
     3f0:	1f be       	out	0x3f, r1	; 63
     3f2:	cf ef       	ldi	r28, 0xFF	; 255
     3f4:	d1 e2       	ldi	r29, 0x21	; 33
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	00 e0       	ldi	r16, 0x00	; 0
     3fc:	0c bf       	out	0x3c, r16	; 60

000003fe <__do_copy_data>:
     3fe:	16 e0       	ldi	r17, 0x06	; 6
     400:	a0 e0       	ldi	r26, 0x00	; 0
     402:	b2 e0       	ldi	r27, 0x02	; 2
     404:	ec e5       	ldi	r30, 0x5C	; 92
     406:	fe e4       	ldi	r31, 0x4E	; 78
     408:	00 e0       	ldi	r16, 0x00	; 0
     40a:	0b bf       	out	0x3b, r16	; 59
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	07 90       	elpm	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	a4 38       	cpi	r26, 0x84	; 132
     414:	b1 07       	cpc	r27, r17
     416:	d9 f7       	brne	.-10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

00000418 <__do_clear_bss>:
     418:	28 e1       	ldi	r18, 0x18	; 24
     41a:	a4 e8       	ldi	r26, 0x84	; 132
     41c:	b6 e0       	ldi	r27, 0x06	; 6
     41e:	01 c0       	rjmp	.+2      	; 0x422 <.do_clear_bss_start>

00000420 <.do_clear_bss_loop>:
     420:	1d 92       	st	X+, r1

00000422 <.do_clear_bss_start>:
     422:	a9 3a       	cpi	r26, 0xA9	; 169
     424:	b2 07       	cpc	r27, r18
     426:	e1 f7       	brne	.-8      	; 0x420 <.do_clear_bss_loop>
     428:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <main>
     42c:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <_exit>

00000430 <__bad_interrupt>:
     430:	e7 cd       	rjmp	.-1074   	; 0x0 <__vectors>

00000432 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <lora_handler_task+0x6>
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 3d 19 	call	0x327a	; 0x327a <lora_driver_reset_rn2483>
	vTaskDelay(2);
     444:	62 e0       	ldi	r22, 0x02	; 2
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskDelay>
	lora_driver_reset_rn2483(0);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 3d 19 	call	0x327a	; 0x327a <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     456:	66 e9       	ldi	r22, 0x96	; 150
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     462:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     46c:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lora_driver_rn2483_factory_reset>
     470:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	8c e3       	ldi	r24, 0x3C	; 60
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     484:	0e 94 cf 1a 	call	0x359e	; 0x359e <lora_driver_configure_to_eu868>
     488:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	8f e4       	ldi	r24, 0x4F	; 79
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     49c:	8a e9       	ldi	r24, 0x9A	; 154
     49e:	96 e0       	ldi	r25, 0x06	; 6
     4a0:	0e 94 63 19 	call	0x32c6	; 0x32c6 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     4a4:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     4a8:	0a e9       	ldi	r16, 0x9A	; 154
     4aa:	16 e0       	ldi	r17, 0x06	; 6
     4ac:	1f 93       	push	r17
     4ae:	0f 93       	push	r16
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	88 e6       	ldi	r24, 0x68	; 104
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	9f 93       	push	r25
     4ba:	8f 93       	push	r24
     4bc:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     4c0:	c8 01       	movw	r24, r16
     4c2:	0e 94 7f 19 	call	0x32fe	; 0x32fe <lora_driver_set_device_identifier>
     4c6:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	1f 93       	push	r17
     4d0:	0f 93       	push	r16
     4d2:	8c e7       	ldi	r24, 0x7C	; 124
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     4de:	a8 01       	movw	r20, r16
     4e0:	61 e9       	ldi	r22, 0x91	; 145
     4e2:	72 e0       	ldi	r23, 0x02	; 2
     4e4:	82 eb       	ldi	r24, 0xB2	; 178
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 ad 1b 	call	0x375a	; 0x375a <lora_driver_set_otaa_identity>
     4ec:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	1f 93       	push	r17
     4f6:	0f 93       	push	r16
     4f8:	81 e9       	ldi	r24, 0x91	; 145
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	82 eb       	ldi	r24, 0xB2	; 178
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	83 ec       	ldi	r24, 0xC3	; 195
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     514:	0e 94 b2 19 	call	0x3364	; 0x3364 <lora_driver_save_mac>
     518:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	89 ef       	ldi	r24, 0xF9	; 249
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 ac 1a 	call	0x3558	; 0x3558 <lora_driver_set_adaptive_data_rate>
     53c:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	88 e0       	ldi	r24, 0x08	; 8
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 b7 1a 	call	0x356e	; 0x356e <lora_driver_set_receive_delay>
     558:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	8f 93       	push	r24
     564:	84 ef       	ldi	r24, 0xF4	; 244
     566:	8f 93       	push	r24
     568:	89 e2       	ldi	r24, 0x29	; 41
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	0a e0       	ldi	r16, 0x0A	; 10
     580:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     582:	0f 2e       	mov	r0, r31
     584:	f9 e4       	ldi	r31, 0x49	; 73
     586:	ef 2e       	mov	r14, r31
     588:	f3 e0       	ldi	r31, 0x03	; 3
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 b8 19 	call	0x3370	; 0x3370 <lora_driver_join>
     594:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     596:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	1f 93       	push	r17
     5a0:	0f 93       	push	r16
     5a2:	ff 92       	push	r15
     5a4:	ef 92       	push	r14
     5a6:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>

		if ( rc != LoRa_ACCEPTED)
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	f8 e0       	ldi	r31, 0x08	; 8
     5b8:	df 16       	cp	r13, r31
     5ba:	c9 f1       	breq	.+114    	; 0x62e <lora_handler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     5c2:	66 e3       	ldi	r22, 0x36	; 54
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskDelay>
     5ce:	01 50       	subi	r16, 0x01	; 1
     5d0:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     5d2:	e9 f6       	brne	.-70     	; 0x58e <lora_handler_task+0x15c>
     5d4:	25 c0       	rjmp	.+74     	; 0x620 <lora_handler_task+0x1ee>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     5d6:	02 d3       	rcall	.+1540   	; 0xbdc <vPortYield>
     5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <lora_handler_task+0x1a4>
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     5da:	48 ea       	ldi	r20, 0xA8	; 168
     5dc:	58 e4       	ldi	r21, 0x48	; 72
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <vTaskDelayUntil>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     5ea:	f8 01       	movw	r30, r16
     5ec:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     5ee:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     5f0:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     5f2:	b5 82       	std	Z+5, r11	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     5f4:	c6 82       	std	Z+6, r12	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     5f6:	d7 82       	std	Z+7, r13	; 0x07

		led_short_puls(led_ST4);  // OPTIONAL
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     5fe:	b8 01       	movw	r22, r16
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <lora_driver_sent_upload_message>
     606:	0e 94 ce 1b 	call	0x379c	; 0x379c <lora_driver_map_return_code_to_text>
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	ff 92       	push	r15
     610:	ef 92       	push	r14
     612:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	dd cf       	rjmp	.-70     	; 0x5da <lora_handler_task+0x1a8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <led_fast_blink>
     62c:	d4 cf       	rjmp	.-88     	; 0x5d6 <lora_handler_task+0x1a4>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 99 17 	call	0x2f32	; 0x2f32 <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
     634:	e4 e8       	ldi	r30, 0x84	; 132
     636:	f6 e0       	ldi	r31, 0x06	; 6
     638:	86 e0       	ldi	r24, 0x06	; 6
     63a:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     640:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <xTaskGetTickCount>
     644:	69 83       	std	Y+1, r22	; 0x01
     646:	7a 83       	std	Y+2, r23	; 0x02
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	9c 83       	std	Y+4, r25	; 0x04
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     64c:	04 e8       	ldi	r16, 0x84	; 132
     64e:	16 e0       	ldi	r17, 0x06	; 6
     650:	0f 2e       	mov	r0, r31
     652:	f0 e3       	ldi	r31, 0x30	; 48
     654:	8f 2e       	mov	r8, r31
     656:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
     658:	0f 2e       	mov	r0, r31
     65a:	f9 e3       	ldi	r31, 0x39	; 57
     65c:	9f 2e       	mov	r9, r31
     65e:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
     660:	68 94       	set
     662:	aa 24       	eor	r10, r10
     664:	a1 f8       	bld	r10, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
     666:	0f 2e       	mov	r0, r31
     668:	f3 ea       	ldi	r31, 0xA3	; 163
     66a:	bf 2e       	mov	r11, r31
     66c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     66e:	68 94       	set
     670:	cc 24       	eor	r12, r12
     672:	c2 f8       	bld	r12, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     674:	0f 2e       	mov	r0, r31
     676:	fa e1       	ldi	r31, 0x1A	; 26
     678:	df 2e       	mov	r13, r31
     67a:	f0 2d       	mov	r31, r0

		led_short_puls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(							lora_driver_sent_upload_message(false, &_uplink_payload)));
     67c:	0f 2e       	mov	r0, r31
     67e:	f9 e6       	ldi	r31, 0x69	; 105
     680:	ef 2e       	mov	r14, r31
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	a8 cf       	rjmp	.-176    	; 0x5da <lora_handler_task+0x1a8>

0000068a <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
	xTaskCreate(
     690:	e1 2c       	mov	r14, r1
     692:	f1 2c       	mov	r15, r1
     694:	08 2f       	mov	r16, r24
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	48 e8       	ldi	r20, 0x88	; 136
     69c:	51 e0       	ldi	r21, 0x01	; 1
     69e:	6e e7       	ldi	r22, 0x7E	; 126
     6a0:	73 e0       	ldi	r23, 0x03	; 3
     6a2:	89 e1       	ldi	r24, 0x19	; 25
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	08 95       	ret

000006b2 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     6b2:	e7 e0       	ldi	r30, 0x07	; 7
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	80 81       	ld	r24, Z
     6b8:	8f 60       	ori	r24, 0x0F	; 15
     6ba:	80 83       	st	Z, r24
     6bc:	08 95       	ret

000006be <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     6be:	e8 e0       	ldi	r30, 0x08	; 8
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	90 81       	ld	r25, Z
     6c4:	90 7f       	andi	r25, 0xF0	; 240
     6c6:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     6c8:	90 81       	ld	r25, Z
     6ca:	8f 70       	andi	r24, 0x0F	; 15
     6cc:	98 2b       	or	r25, r24
     6ce:	90 83       	st	Z, r25
     6d0:	08 95       	ret

000006d2 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     6d2:	e8 e0       	ldi	r30, 0x08	; 8
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	80 81       	ld	r24, Z
     6d8:	80 7f       	andi	r24, 0xF0	; 240
     6da:	80 83       	st	Z, r24
     6dc:	08 95       	ret

000006de <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     6e4:	e6 e0       	ldi	r30, 0x06	; 6
     6e6:	f7 e0       	ldi	r31, 0x07	; 7
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <prvInsertBlockIntoFreeList+0xe>
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	31 81       	ldd	r19, Z+1	; 0x01
     6f0:	2a 17       	cp	r18, r26
     6f2:	3b 07       	cpc	r19, r27
     6f4:	d0 f3       	brcs	.-12     	; 0x6ea <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	93 81       	ldd	r25, Z+3	; 0x03
     6fa:	af 01       	movw	r20, r30
     6fc:	48 0f       	add	r20, r24
     6fe:	59 1f       	adc	r21, r25
     700:	a4 17       	cp	r26, r20
     702:	b5 07       	cpc	r27, r21
     704:	49 f4       	brne	.+18     	; 0x718 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	4d 91       	ld	r20, X+
     70a:	5c 91       	ld	r21, X
     70c:	13 97       	sbiw	r26, 0x03	; 3
     70e:	84 0f       	add	r24, r20
     710:	95 1f       	adc	r25, r21
     712:	93 83       	std	Z+3, r25	; 0x03
     714:	82 83       	std	Z+2, r24	; 0x02
     716:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     718:	12 96       	adiw	r26, 0x02	; 2
     71a:	8d 91       	ld	r24, X+
     71c:	9c 91       	ld	r25, X
     71e:	13 97       	sbiw	r26, 0x03	; 3
     720:	ed 01       	movw	r28, r26
     722:	c8 0f       	add	r28, r24
     724:	d9 1f       	adc	r29, r25
     726:	2c 17       	cp	r18, r28
     728:	3d 07       	cpc	r19, r29
     72a:	d9 f4       	brne	.+54     	; 0x762 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     72c:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <pxEnd>
     730:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <pxEnd+0x1>
     734:	c2 17       	cp	r28, r18
     736:	d3 07       	cpc	r29, r19
     738:	81 f0       	breq	.+32     	; 0x75a <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     73a:	2a 81       	ldd	r18, Y+2	; 0x02
     73c:	3b 81       	ldd	r19, Y+3	; 0x03
     73e:	82 0f       	add	r24, r18
     740:	93 1f       	adc	r25, r19
     742:	13 96       	adiw	r26, 0x03	; 3
     744:	9c 93       	st	X, r25
     746:	8e 93       	st	-X, r24
     748:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     74a:	c0 81       	ld	r28, Z
     74c:	d1 81       	ldd	r29, Z+1	; 0x01
     74e:	88 81       	ld	r24, Y
     750:	99 81       	ldd	r25, Y+1	; 0x01
     752:	11 96       	adiw	r26, 0x01	; 1
     754:	9c 93       	st	X, r25
     756:	8e 93       	st	-X, r24
     758:	07 c0       	rjmp	.+14     	; 0x768 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     75a:	11 96       	adiw	r26, 0x01	; 1
     75c:	dc 93       	st	X, r29
     75e:	ce 93       	st	-X, r28
     760:	03 c0       	rjmp	.+6      	; 0x768 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	3c 93       	st	X, r19
     766:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     768:	ae 17       	cp	r26, r30
     76a:	bf 07       	cpc	r27, r31
     76c:	11 f0       	breq	.+4      	; 0x772 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     76e:	b1 83       	std	Z+1, r27	; 0x01
     770:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     78a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     78e:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <pxEnd>
     792:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <pxEnd+0x1>
     796:	89 2b       	or	r24, r25
     798:	41 f5       	brne	.+80     	; 0x7ea <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     79a:	e6 e0       	ldi	r30, 0x06	; 6
     79c:	f7 e0       	ldi	r31, 0x07	; 7
     79e:	aa e0       	ldi	r26, 0x0A	; 10
     7a0:	b7 e0       	ldi	r27, 0x07	; 7
     7a2:	b1 83       	std	Z+1, r27	; 0x01
     7a4:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     7a6:	13 82       	std	Z+3, r1	; 0x03
     7a8:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     7aa:	e6 ea       	ldi	r30, 0xA6	; 166
     7ac:	f6 e1       	ldi	r31, 0x16	; 22
     7ae:	f0 93 05 07 	sts	0x0705, r31	; 0x800705 <pxEnd+0x1>
     7b2:	e0 93 04 07 	sts	0x0704, r30	; 0x800704 <pxEnd>
	pxEnd->xBlockSize = 0;
     7b6:	13 82       	std	Z+3, r1	; 0x03
     7b8:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     7ba:	11 82       	std	Z+1, r1	; 0x01
     7bc:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     7be:	8c e9       	ldi	r24, 0x9C	; 156
     7c0:	9f e0       	ldi	r25, 0x0F	; 15
     7c2:	13 96       	adiw	r26, 0x03	; 3
     7c4:	9c 93       	st	X, r25
     7c6:	8e 93       	st	-X, r24
     7c8:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     7ca:	ed 93       	st	X+, r30
     7cc:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7ce:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <xMinimumEverFreeBytesRemaining+0x1>
     7d2:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7d6:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <xFreeBytesRemaining+0x1>
     7da:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e8       	ldi	r25, 0x80	; 128
     7e2:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <xBlockAllocatedBit+0x1>
     7e6:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7ea:	e0 90 fe 06 	lds	r14, 0x06FE	; 0x8006fe <xBlockAllocatedBit>
     7ee:	f0 90 ff 06 	lds	r15, 0x06FF	; 0x8006ff <xBlockAllocatedBit+0x1>
     7f2:	c7 01       	movw	r24, r14
     7f4:	8c 23       	and	r24, r28
     7f6:	9d 23       	and	r25, r29
     7f8:	89 2b       	or	r24, r25
     7fa:	09 f0       	breq	.+2      	; 0x7fe <pvPortMalloc+0x86>
     7fc:	66 c0       	rjmp	.+204    	; 0x8ca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     7fe:	20 97       	sbiw	r28, 0x00	; 0
     800:	09 f4       	brne	.+2      	; 0x804 <pvPortMalloc+0x8c>
     802:	66 c0       	rjmp	.+204    	; 0x8d0 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     804:	ae 01       	movw	r20, r28
     806:	4c 5f       	subi	r20, 0xFC	; 252
     808:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     80a:	09 f4       	brne	.+2      	; 0x80e <pvPortMalloc+0x96>
     80c:	5e c0       	rjmp	.+188    	; 0x8ca <pvPortMalloc+0x152>
     80e:	00 91 02 07 	lds	r16, 0x0702	; 0x800702 <xFreeBytesRemaining>
     812:	10 91 03 07 	lds	r17, 0x0703	; 0x800703 <xFreeBytesRemaining+0x1>
     816:	04 17       	cp	r16, r20
     818:	15 07       	cpc	r17, r21
     81a:	08 f4       	brcc	.+2      	; 0x81e <pvPortMalloc+0xa6>
     81c:	56 c0       	rjmp	.+172    	; 0x8ca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     81e:	c0 91 06 07 	lds	r28, 0x0706	; 0x800706 <xStart>
     822:	d0 91 07 07 	lds	r29, 0x0707	; 0x800707 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     826:	e6 e0       	ldi	r30, 0x06	; 6
     828:	f7 e0       	ldi	r31, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     82a:	02 c0       	rjmp	.+4      	; 0x830 <pvPortMalloc+0xb8>
     82c:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     82e:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     830:	2a 81       	ldd	r18, Y+2	; 0x02
     832:	3b 81       	ldd	r19, Y+3	; 0x03
     834:	24 17       	cp	r18, r20
     836:	35 07       	cpc	r19, r21
     838:	28 f4       	brcc	.+10     	; 0x844 <pvPortMalloc+0xcc>
     83a:	28 81       	ld	r18, Y
     83c:	39 81       	ldd	r19, Y+1	; 0x01
     83e:	21 15       	cp	r18, r1
     840:	31 05       	cpc	r19, r1
     842:	a1 f7       	brne	.-24     	; 0x82c <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     844:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <pxEnd>
     848:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <pxEnd+0x1>
     84c:	c8 17       	cp	r28, r24
     84e:	d9 07       	cpc	r29, r25
     850:	e1 f1       	breq	.+120    	; 0x8ca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     852:	c0 80       	ld	r12, Z
     854:	d1 80       	ldd	r13, Z+1	; 0x01
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	c8 0e       	add	r12, r24
     85a:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     85c:	88 81       	ld	r24, Y
     85e:	99 81       	ldd	r25, Y+1	; 0x01
     860:	91 83       	std	Z+1, r25	; 0x01
     862:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     864:	2a 81       	ldd	r18, Y+2	; 0x02
     866:	3b 81       	ldd	r19, Y+3	; 0x03
     868:	24 1b       	sub	r18, r20
     86a:	35 0b       	sbc	r19, r21
     86c:	29 30       	cpi	r18, 0x09	; 9
     86e:	31 05       	cpc	r19, r1
     870:	48 f0       	brcs	.+18     	; 0x884 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     872:	ce 01       	movw	r24, r28
     874:	84 0f       	add	r24, r20
     876:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     878:	fc 01       	movw	r30, r24
     87a:	33 83       	std	Z+3, r19	; 0x03
     87c:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     87e:	5b 83       	std	Y+3, r21	; 0x03
     880:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     882:	2d df       	rcall	.-422    	; 0x6de <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	9b 81       	ldd	r25, Y+3	; 0x03
     888:	08 1b       	sub	r16, r24
     88a:	19 0b       	sbc	r17, r25
     88c:	10 93 03 07 	sts	0x0703, r17	; 0x800703 <xFreeBytesRemaining+0x1>
     890:	00 93 02 07 	sts	0x0702, r16	; 0x800702 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     894:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <xMinimumEverFreeBytesRemaining>
     898:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <xMinimumEverFreeBytesRemaining+0x1>
     89c:	02 17       	cp	r16, r18
     89e:	13 07       	cpc	r17, r19
     8a0:	20 f4       	brcc	.+8      	; 0x8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8a2:	10 93 01 07 	sts	0x0701, r17	; 0x800701 <xMinimumEverFreeBytesRemaining+0x1>
     8a6:	00 93 00 07 	sts	0x0700, r16	; 0x800700 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     8aa:	e8 2a       	or	r14, r24
     8ac:	f9 2a       	or	r15, r25
     8ae:	fb 82       	std	Y+3, r15	; 0x03
     8b0:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     8b2:	19 82       	std	Y+1, r1	; 0x01
     8b4:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8b6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     8ba:	c1 14       	cp	r12, r1
     8bc:	d1 04       	cpc	r13, r1
     8be:	59 f4       	brne	.+22     	; 0x8d6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     8c0:	0e 94 56 15 	call	0x2aac	; 0x2aac <vApplicationMallocFailedHook>
     8c4:	c1 2c       	mov	r12, r1
     8c6:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8ca:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     8ce:	f8 cf       	rjmp	.-16     	; 0x8c0 <pvPortMalloc+0x148>
     8d0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     8d4:	f5 cf       	rjmp	.-22     	; 0x8c0 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     8d6:	c6 01       	movw	r24, r12
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	08 95       	ret

000008ea <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	51 f1       	breq	.+84     	; 0x946 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     8f2:	fc 01       	movw	r30, r24
     8f4:	34 97       	sbiw	r30, 0x04	; 4
     8f6:	22 81       	ldd	r18, Z+2	; 0x02
     8f8:	33 81       	ldd	r19, Z+3	; 0x03
     8fa:	40 91 fe 06 	lds	r20, 0x06FE	; 0x8006fe <xBlockAllocatedBit>
     8fe:	50 91 ff 06 	lds	r21, 0x06FF	; 0x8006ff <xBlockAllocatedBit+0x1>
     902:	b9 01       	movw	r22, r18
     904:	64 23       	and	r22, r20
     906:	75 23       	and	r23, r21
     908:	67 2b       	or	r22, r23
     90a:	e9 f0       	breq	.+58     	; 0x946 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     90c:	60 81       	ld	r22, Z
     90e:	71 81       	ldd	r23, Z+1	; 0x01
     910:	67 2b       	or	r22, r23
     912:	c9 f4       	brne	.+50     	; 0x946 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     914:	ef 01       	movw	r28, r30
     916:	40 95       	com	r20
     918:	50 95       	com	r21
     91a:	24 23       	and	r18, r20
     91c:	35 23       	and	r19, r21
     91e:	33 83       	std	Z+3, r19	; 0x03
     920:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     922:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     926:	20 91 02 07 	lds	r18, 0x0702	; 0x800702 <xFreeBytesRemaining>
     92a:	30 91 03 07 	lds	r19, 0x0703	; 0x800703 <xFreeBytesRemaining+0x1>
     92e:	8a 81       	ldd	r24, Y+2	; 0x02
     930:	9b 81       	ldd	r25, Y+3	; 0x03
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <xFreeBytesRemaining+0x1>
     93a:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     93e:	ce 01       	movw	r24, r28
     940:	ce de       	rcall	.-612    	; 0x6de <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     942:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     94c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     94e:	03 96       	adiw	r24, 0x03	; 3
     950:	92 83       	std	Z+2, r25	; 0x02
     952:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     954:	4f ef       	ldi	r20, 0xFF	; 255
     956:	5f ef       	ldi	r21, 0xFF	; 255
     958:	ba 01       	movw	r22, r20
     95a:	43 83       	std	Z+3, r20	; 0x03
     95c:	54 83       	std	Z+4, r21	; 0x04
     95e:	65 83       	std	Z+5, r22	; 0x05
     960:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     962:	90 87       	std	Z+8, r25	; 0x08
     964:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     966:	92 87       	std	Z+10, r25	; 0x0a
     968:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     96a:	10 82       	st	Z, r1
     96c:	08 95       	ret

0000096e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     96e:	fc 01       	movw	r30, r24
     970:	13 86       	std	Z+11, r1	; 0x0b
     972:	12 86       	std	Z+10, r1	; 0x0a
     974:	08 95       	ret

00000976 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	9c 01       	movw	r18, r24
     97c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     97e:	dc 01       	movw	r26, r24
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	cd 91       	ld	r28, X+
     984:	dc 91       	ld	r29, X
     986:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     988:	d5 83       	std	Z+5, r29	; 0x05
     98a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	9f 81       	ldd	r25, Y+7	; 0x07
     990:	97 83       	std	Z+7, r25	; 0x07
     992:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     994:	8e 81       	ldd	r24, Y+6	; 0x06
     996:	9f 81       	ldd	r25, Y+7	; 0x07
     998:	dc 01       	movw	r26, r24
     99a:	15 96       	adiw	r26, 0x05	; 5
     99c:	7c 93       	st	X, r23
     99e:	6e 93       	st	-X, r22
     9a0:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     9a2:	7f 83       	std	Y+7, r23	; 0x07
     9a4:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     9a6:	33 87       	std	Z+11, r19	; 0x0b
     9a8:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     9aa:	f9 01       	movw	r30, r18
     9ac:	80 81       	ld	r24, Z
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	80 83       	st	Z, r24
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9c2:	08 81       	ld	r16, Y
     9c4:	19 81       	ldd	r17, Y+1	; 0x01
     9c6:	2a 81       	ldd	r18, Y+2	; 0x02
     9c8:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9ca:	0f 3f       	cpi	r16, 0xFF	; 255
     9cc:	4f ef       	ldi	r20, 0xFF	; 255
     9ce:	14 07       	cpc	r17, r20
     9d0:	24 07       	cpc	r18, r20
     9d2:	34 07       	cpc	r19, r20
     9d4:	21 f4       	brne	.+8      	; 0x9de <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9d6:	fc 01       	movw	r30, r24
     9d8:	a1 85       	ldd	r26, Z+9	; 0x09
     9da:	b2 85       	ldd	r27, Z+10	; 0x0a
     9dc:	11 c0       	rjmp	.+34     	; 0xa00 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9de:	dc 01       	movw	r26, r24
     9e0:	13 96       	adiw	r26, 0x03	; 3
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <vListInsert+0x2e>
     9e4:	df 01       	movw	r26, r30
     9e6:	14 96       	adiw	r26, 0x04	; 4
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	15 97       	sbiw	r26, 0x05	; 5
     9ee:	40 81       	ld	r20, Z
     9f0:	51 81       	ldd	r21, Z+1	; 0x01
     9f2:	62 81       	ldd	r22, Z+2	; 0x02
     9f4:	73 81       	ldd	r23, Z+3	; 0x03
     9f6:	04 17       	cp	r16, r20
     9f8:	15 07       	cpc	r17, r21
     9fa:	26 07       	cpc	r18, r22
     9fc:	37 07       	cpc	r19, r23
     9fe:	90 f7       	brcc	.-28     	; 0x9e4 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a00:	14 96       	adiw	r26, 0x04	; 4
     a02:	ed 91       	ld	r30, X+
     a04:	fc 91       	ld	r31, X
     a06:	15 97       	sbiw	r26, 0x05	; 5
     a08:	fd 83       	std	Y+5, r31	; 0x05
     a0a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a0c:	d7 83       	std	Z+7, r29	; 0x07
     a0e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a10:	bf 83       	std	Y+7, r27	; 0x07
     a12:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a14:	15 96       	adiw	r26, 0x05	; 5
     a16:	dc 93       	st	X, r29
     a18:	ce 93       	st	-X, r28
     a1a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     a1c:	9b 87       	std	Y+11, r25	; 0x0b
     a1e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a20:	fc 01       	movw	r30, r24
     a22:	20 81       	ld	r18, Z
     a24:	2f 5f       	subi	r18, 0xFF	; 255
     a26:	20 83       	st	Z, r18
}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     a38:	a2 85       	ldd	r26, Z+10	; 0x0a
     a3a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a3c:	c4 81       	ldd	r28, Z+4	; 0x04
     a3e:	d5 81       	ldd	r29, Z+5	; 0x05
     a40:	86 81       	ldd	r24, Z+6	; 0x06
     a42:	97 81       	ldd	r25, Z+7	; 0x07
     a44:	9f 83       	std	Y+7, r25	; 0x07
     a46:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a48:	c6 81       	ldd	r28, Z+6	; 0x06
     a4a:	d7 81       	ldd	r29, Z+7	; 0x07
     a4c:	84 81       	ldd	r24, Z+4	; 0x04
     a4e:	95 81       	ldd	r25, Z+5	; 0x05
     a50:	9d 83       	std	Y+5, r25	; 0x05
     a52:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	8d 91       	ld	r24, X+
     a58:	9c 91       	ld	r25, X
     a5a:	12 97       	sbiw	r26, 0x02	; 2
     a5c:	e8 17       	cp	r30, r24
     a5e:	f9 07       	cpc	r31, r25
     a60:	31 f4       	brne	.+12     	; 0xa6e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	97 81       	ldd	r25, Z+7	; 0x07
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	9c 93       	st	X, r25
     a6a:	8e 93       	st	-X, r24
     a6c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a6e:	13 86       	std	Z+11, r1	; 0x0b
     a70:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a72:	8c 91       	ld	r24, X
     a74:	81 50       	subi	r24, 0x01	; 1
     a76:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a78:	8c 91       	ld	r24, X
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a80:	31 e1       	ldi	r19, 0x11	; 17
     a82:	fc 01       	movw	r30, r24
     a84:	30 83       	st	Z, r19
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	22 e2       	ldi	r18, 0x22	; 34
     a8a:	20 83       	st	Z, r18
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	a3 e3       	ldi	r26, 0x33	; 51
     a90:	a0 83       	st	Z, r26
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	60 83       	st	Z, r22
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	70 83       	st	Z, r23
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	10 82       	st	Z, r1
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	10 82       	st	Z, r1
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	60 e8       	ldi	r22, 0x80	; 128
     aa6:	60 83       	st	Z, r22
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	10 82       	st	Z, r1
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	10 82       	st	Z, r1
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	10 82       	st	Z, r1
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	62 e0       	ldi	r22, 0x02	; 2
     ab8:	60 83       	st	Z, r22
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	63 e0       	ldi	r22, 0x03	; 3
     abe:	60 83       	st	Z, r22
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	64 e0       	ldi	r22, 0x04	; 4
     ac4:	60 83       	st	Z, r22
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	65 e0       	ldi	r22, 0x05	; 5
     aca:	60 83       	st	Z, r22
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	60 83       	st	Z, r22
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	67 e0       	ldi	r22, 0x07	; 7
     ad6:	60 83       	st	Z, r22
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	68 e0       	ldi	r22, 0x08	; 8
     adc:	60 83       	st	Z, r22
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	69 e0       	ldi	r22, 0x09	; 9
     ae2:	60 83       	st	Z, r22
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	60 e1       	ldi	r22, 0x10	; 16
     ae8:	60 83       	st	Z, r22
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	30 83       	st	Z, r19
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	32 e1       	ldi	r19, 0x12	; 18
     af2:	30 83       	st	Z, r19
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	33 e1       	ldi	r19, 0x13	; 19
     af8:	30 83       	st	Z, r19
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	34 e1       	ldi	r19, 0x14	; 20
     afe:	30 83       	st	Z, r19
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	35 e1       	ldi	r19, 0x15	; 21
     b04:	30 83       	st	Z, r19
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	36 e1       	ldi	r19, 0x16	; 22
     b0a:	30 83       	st	Z, r19
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	37 e1       	ldi	r19, 0x17	; 23
     b10:	30 83       	st	Z, r19
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	38 e1       	ldi	r19, 0x18	; 24
     b16:	30 83       	st	Z, r19
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	39 e1       	ldi	r19, 0x19	; 25
     b1c:	30 83       	st	Z, r19
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	30 e2       	ldi	r19, 0x20	; 32
     b22:	30 83       	st	Z, r19
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	31 e2       	ldi	r19, 0x21	; 33
     b28:	30 83       	st	Z, r19
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	20 83       	st	Z, r18
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	23 e2       	ldi	r18, 0x23	; 35
     b32:	20 83       	st	Z, r18
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	40 83       	st	Z, r20
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	50 83       	st	Z, r21
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	26 e2       	ldi	r18, 0x26	; 38
     b40:	20 83       	st	Z, r18
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	27 e2       	ldi	r18, 0x27	; 39
     b46:	20 83       	st	Z, r18
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	28 e2       	ldi	r18, 0x28	; 40
     b4c:	20 83       	st	Z, r18
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	29 e2       	ldi	r18, 0x29	; 41
     b52:	20 83       	st	Z, r18
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	20 e3       	ldi	r18, 0x30	; 48
     b58:	20 83       	st	Z, r18
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	21 e3       	ldi	r18, 0x31	; 49
     b5e:	20 83       	st	Z, r18
     b60:	89 97       	sbiw	r24, 0x29	; 41
     b62:	08 95       	ret

00000b64 <xPortStartScheduler>:
     b64:	a8 95       	wdr
     b66:	90 ec       	ldi	r25, 0xC0	; 192
     b68:	88 e1       	ldi	r24, 0x18	; 24
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	a8 95       	wdr
     b70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b7a:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     b7e:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     b82:	cd 91       	ld	r28, X+
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	dd 91       	ld	r29, X+
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	5f 90       	pop	r5
     bc0:	4f 90       	pop	r4
     bc2:	3f 90       	pop	r3
     bc4:	2f 90       	pop	r2
     bc6:	1f 90       	pop	r1
     bc8:	0f 90       	pop	r0
     bca:	0c be       	out	0x3c, r0	; 60
     bcc:	0f 90       	pop	r0
     bce:	0b be       	out	0x3b, r0	; 59
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	08 95       	ret
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	08 95       	ret

00000bdc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	0f 92       	push	r0
     be4:	0b b6       	in	r0, 0x3b	; 59
     be6:	0f 92       	push	r0
     be8:	0c b6       	in	r0, 0x3c	; 60
     bea:	0f 92       	push	r0
     bec:	1f 92       	push	r1
     bee:	11 24       	eor	r1, r1
     bf0:	2f 92       	push	r2
     bf2:	3f 92       	push	r3
     bf4:	4f 92       	push	r4
     bf6:	5f 92       	push	r5
     bf8:	6f 92       	push	r6
     bfa:	7f 92       	push	r7
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
     c2c:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     c30:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     c34:	0d b6       	in	r0, 0x3d	; 61
     c36:	0d 92       	st	X+, r0
     c38:	0e b6       	in	r0, 0x3e	; 62
     c3a:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c3c:	0e 94 65 10 	call	0x20ca	; 0x20ca <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c40:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     c44:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     c48:	cd 91       	ld	r28, X+
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	dd 91       	ld	r29, X+
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	9f 90       	pop	r9
     c7e:	8f 90       	pop	r8
     c80:	7f 90       	pop	r7
     c82:	6f 90       	pop	r6
     c84:	5f 90       	pop	r5
     c86:	4f 90       	pop	r4
     c88:	3f 90       	pop	r3
     c8a:	2f 90       	pop	r2
     c8c:	1f 90       	pop	r1
     c8e:	0f 90       	pop	r0
     c90:	0c be       	out	0x3c, r0	; 60
     c92:	0f 90       	pop	r0
     c94:	0b be       	out	0x3b, r0	; 59
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c9c:	08 95       	ret

00000c9e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	0f 92       	push	r0
     ca6:	0b b6       	in	r0, 0x3b	; 59
     ca8:	0f 92       	push	r0
     caa:	0c b6       	in	r0, 0x3c	; 60
     cac:	0f 92       	push	r0
     cae:	1f 92       	push	r1
     cb0:	11 24       	eor	r1, r1
     cb2:	2f 92       	push	r2
     cb4:	3f 92       	push	r3
     cb6:	4f 92       	push	r4
     cb8:	5f 92       	push	r5
     cba:	6f 92       	push	r6
     cbc:	7f 92       	push	r7
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
     cee:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     cf2:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     cf6:	0d b6       	in	r0, 0x3d	; 61
     cf8:	0d 92       	st	X+, r0
     cfa:	0e b6       	in	r0, 0x3e	; 62
     cfc:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     cfe:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     d00:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <xTaskIncrementTick>
     d04:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d06:	0e 94 65 10 	call	0x20ca	; 0x20ca <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     d0a:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
     d0e:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
     d12:	cd 91       	ld	r28, X+
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	dd 91       	ld	r29, X+
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	9f 90       	pop	r9
     d48:	8f 90       	pop	r8
     d4a:	7f 90       	pop	r7
     d4c:	6f 90       	pop	r6
     d4e:	5f 90       	pop	r5
     d50:	4f 90       	pop	r4
     d52:	3f 90       	pop	r3
     d54:	2f 90       	pop	r2
     d56:	1f 90       	pop	r1
     d58:	0f 90       	pop	r0
     d5a:	0c be       	out	0x3c, r0	; 60
     d5c:	0f 90       	pop	r0
     d5e:	0b be       	out	0x3b, r0	; 59
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d66:	08 95       	ret

00000d68 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d68:	9a df       	rcall	.-204    	; 0xc9e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d6a:	18 95       	reti

00000d6c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	fc 01       	movw	r30, r24
     d74:	96 8d       	ldd	r25, Z+30	; 0x1e
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	91 11       	cpse	r25, r1
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	08 95       	ret

00000d82 <prvCopyDataToQueue>:
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ec 01       	movw	r28, r24
     d8c:	04 2f       	mov	r16, r20
     d8e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d90:	48 a1       	ldd	r20, Y+32	; 0x20
     d92:	41 11       	cpse	r20, r1
     d94:	0c c0       	rjmp	.+24     	; 0xdae <prvCopyDataToQueue+0x2c>
     d96:	88 81       	ld	r24, Y
     d98:	99 81       	ldd	r25, Y+1	; 0x01
     d9a:	89 2b       	or	r24, r25
     d9c:	09 f0       	breq	.+2      	; 0xda0 <prvCopyDataToQueue+0x1e>
     d9e:	42 c0       	rjmp	.+132    	; 0xe24 <prvCopyDataToQueue+0xa2>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskPriorityDisinherit>
     da8:	1d 82       	std	Y+5, r1	; 0x05
     daa:	1c 82       	std	Y+4, r1	; 0x04
     dac:	42 c0       	rjmp	.+132    	; 0xe32 <prvCopyDataToQueue+0xb0>
     dae:	01 11       	cpse	r16, r1
     db0:	17 c0       	rjmp	.+46     	; 0xde0 <prvCopyDataToQueue+0x5e>
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	0e 94 af 23 	call	0x475e	; 0x475e <memcpy>
     dbc:	28 a1       	ldd	r18, Y+32	; 0x20
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	82 0f       	add	r24, r18
     dc4:	91 1d       	adc	r25, r1
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	8a 83       	std	Y+2, r24	; 0x02
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	50 f1       	brcs	.+84     	; 0xe28 <prvCopyDataToQueue+0xa6>
     dd4:	88 81       	ld	r24, Y
     dd6:	99 81       	ldd	r25, Y+1	; 0x01
     dd8:	9b 83       	std	Y+3, r25	; 0x03
     dda:	8a 83       	std	Y+2, r24	; 0x02
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	29 c0       	rjmp	.+82     	; 0xe32 <prvCopyDataToQueue+0xb0>
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	9f 81       	ldd	r25, Y+7	; 0x07
     de6:	0e 94 af 23 	call	0x475e	; 0x475e <memcpy>
     dea:	88 a1       	ldd	r24, Y+32	; 0x20
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	91 95       	neg	r25
     df0:	81 95       	neg	r24
     df2:	91 09       	sbc	r25, r1
     df4:	2e 81       	ldd	r18, Y+6	; 0x06
     df6:	3f 81       	ldd	r19, Y+7	; 0x07
     df8:	28 0f       	add	r18, r24
     dfa:	39 1f       	adc	r19, r25
     dfc:	3f 83       	std	Y+7, r19	; 0x07
     dfe:	2e 83       	std	Y+6, r18	; 0x06
     e00:	48 81       	ld	r20, Y
     e02:	59 81       	ldd	r21, Y+1	; 0x01
     e04:	24 17       	cp	r18, r20
     e06:	35 07       	cpc	r19, r21
     e08:	30 f4       	brcc	.+12     	; 0xe16 <prvCopyDataToQueue+0x94>
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	3d 81       	ldd	r19, Y+5	; 0x05
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	9f 83       	std	Y+7, r25	; 0x07
     e14:	8e 83       	std	Y+6, r24	; 0x06
     e16:	02 30       	cpi	r16, 0x02	; 2
     e18:	49 f4       	brne	.+18     	; 0xe2c <prvCopyDataToQueue+0xaa>
     e1a:	11 23       	and	r17, r17
     e1c:	49 f0       	breq	.+18     	; 0xe30 <prvCopyDataToQueue+0xae>
     e1e:	11 50       	subi	r17, 0x01	; 1
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <prvCopyDataToQueue+0xb0>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <prvCopyDataToQueue+0xb0>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <prvCopyDataToQueue+0xb0>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <prvCopyDataToQueue+0xb0>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	1f 5f       	subi	r17, 0xFF	; 255
     e34:	1e 8f       	std	Y+30, r17	; 0x1e
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <prvCopyDataFromQueue>:
     e40:	fc 01       	movw	r30, r24
     e42:	40 a1       	ldd	r20, Z+32	; 0x20
     e44:	44 23       	and	r20, r20
     e46:	a9 f0       	breq	.+42     	; 0xe72 <prvCopyDataFromQueue+0x32>
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	26 81       	ldd	r18, Z+6	; 0x06
     e4c:	37 81       	ldd	r19, Z+7	; 0x07
     e4e:	24 0f       	add	r18, r20
     e50:	35 1f       	adc	r19, r21
     e52:	37 83       	std	Z+7, r19	; 0x07
     e54:	26 83       	std	Z+6, r18	; 0x06
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	95 81       	ldd	r25, Z+5	; 0x05
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <prvCopyDataFromQueue+0x28>
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	97 83       	std	Z+7, r25	; 0x07
     e66:	86 83       	std	Z+6, r24	; 0x06
     e68:	cb 01       	movw	r24, r22
     e6a:	66 81       	ldd	r22, Z+6	; 0x06
     e6c:	77 81       	ldd	r23, Z+7	; 0x07
     e6e:	0c 94 af 23 	jmp	0x475e	; 0x475e <memcpy>
     e72:	08 95       	ret

00000e74 <prvUnlockQueue>:
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	8c 01       	movw	r16, r24
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	0f 92       	push	r0
     e86:	fc 01       	movw	r30, r24
     e88:	c2 a1       	ldd	r28, Z+34	; 0x22
     e8a:	1c 16       	cp	r1, r28
     e8c:	ac f4       	brge	.+42     	; 0xeb8 <prvUnlockQueue+0x44>
     e8e:	83 89       	ldd	r24, Z+19	; 0x13
     e90:	81 11       	cpse	r24, r1
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <prvUnlockQueue+0x2c>
     e94:	11 c0       	rjmp	.+34     	; 0xeb8 <prvUnlockQueue+0x44>
     e96:	f8 01       	movw	r30, r16
     e98:	83 89       	ldd	r24, Z+19	; 0x13
     e9a:	81 11       	cpse	r24, r1
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <prvUnlockQueue+0x34>
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <prvUnlockQueue+0x44>
     ea0:	78 01       	movw	r14, r16
     ea2:	f3 e1       	ldi	r31, 0x13	; 19
     ea4:	ef 0e       	add	r14, r31
     ea6:	f1 1c       	adc	r15, r1
     ea8:	c7 01       	movw	r24, r14
     eaa:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
     eae:	81 11       	cpse	r24, r1
     eb0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <vTaskMissedYield>
     eb4:	c1 50       	subi	r28, 0x01	; 1
     eb6:	79 f7       	brne	.-34     	; 0xe96 <prvUnlockQueue+0x22>
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	f8 01       	movw	r30, r16
     ebc:	82 a3       	std	Z+34, r24	; 0x22
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	c1 a1       	ldd	r28, Z+33	; 0x21
     eca:	1c 16       	cp	r1, r28
     ecc:	ac f4       	brge	.+42     	; 0xef8 <prvUnlockQueue+0x84>
     ece:	80 85       	ldd	r24, Z+8	; 0x08
     ed0:	81 11       	cpse	r24, r1
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <prvUnlockQueue+0x6c>
     ed4:	11 c0       	rjmp	.+34     	; 0xef8 <prvUnlockQueue+0x84>
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 85       	ldd	r24, Z+8	; 0x08
     eda:	81 11       	cpse	r24, r1
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <prvUnlockQueue+0x74>
     ede:	0c c0       	rjmp	.+24     	; 0xef8 <prvUnlockQueue+0x84>
     ee0:	78 01       	movw	r14, r16
     ee2:	f8 e0       	ldi	r31, 0x08	; 8
     ee4:	ef 0e       	add	r14, r31
     ee6:	f1 1c       	adc	r15, r1
     ee8:	c7 01       	movw	r24, r14
     eea:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
     eee:	81 11       	cpse	r24, r1
     ef0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <vTaskMissedYield>
     ef4:	c1 50       	subi	r28, 0x01	; 1
     ef6:	79 f7       	brne	.-34     	; 0xed6 <prvUnlockQueue+0x62>
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	f8 01       	movw	r30, r16
     efc:	81 a3       	std	Z+33, r24	; 0x21
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	08 95       	ret

00000f0e <xQueueGenericReset>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	0f 92       	push	r0
     f1a:	e8 81       	ld	r30, Y
     f1c:	f9 81       	ldd	r31, Y+1	; 0x01
     f1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f20:	28 a1       	ldd	r18, Y+32	; 0x20
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	82 9f       	mul	r24, r18
     f28:	a0 01       	movw	r20, r0
     f2a:	83 9f       	mul	r24, r19
     f2c:	50 0d       	add	r21, r0
     f2e:	92 9f       	mul	r25, r18
     f30:	50 0d       	add	r21, r0
     f32:	11 24       	eor	r1, r1
     f34:	4e 0f       	add	r20, r30
     f36:	5f 1f       	adc	r21, r31
     f38:	5d 83       	std	Y+5, r21	; 0x05
     f3a:	4c 83       	std	Y+4, r20	; 0x04
     f3c:	1e 8e       	std	Y+30, r1	; 0x1e
     f3e:	fb 83       	std	Y+3, r31	; 0x03
     f40:	ea 83       	std	Y+2, r30	; 0x02
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	82 9f       	mul	r24, r18
     f46:	a0 01       	movw	r20, r0
     f48:	83 9f       	mul	r24, r19
     f4a:	50 0d       	add	r21, r0
     f4c:	92 9f       	mul	r25, r18
     f4e:	50 0d       	add	r21, r0
     f50:	11 24       	eor	r1, r1
     f52:	cf 01       	movw	r24, r30
     f54:	84 0f       	add	r24, r20
     f56:	95 1f       	adc	r25, r21
     f58:	9f 83       	std	Y+7, r25	; 0x07
     f5a:	8e 83       	std	Y+6, r24	; 0x06
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	89 a3       	std	Y+33, r24	; 0x21
     f60:	8a a3       	std	Y+34, r24	; 0x22
     f62:	61 11       	cpse	r22, r1
     f64:	0b c0       	rjmp	.+22     	; 0xf7c <xQueueGenericReset+0x6e>
     f66:	88 85       	ldd	r24, Y+8	; 0x08
     f68:	88 23       	and	r24, r24
     f6a:	71 f0       	breq	.+28     	; 0xf88 <xQueueGenericReset+0x7a>
     f6c:	ce 01       	movw	r24, r28
     f6e:	08 96       	adiw	r24, 0x08	; 8
     f70:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
     f74:	88 23       	and	r24, r24
     f76:	41 f0       	breq	.+16     	; 0xf88 <xQueueGenericReset+0x7a>
     f78:	31 de       	rcall	.-926    	; 0xbdc <vPortYield>
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <xQueueGenericReset+0x7a>
     f7c:	ce 01       	movw	r24, r28
     f7e:	08 96       	adiw	r24, 0x08	; 8
     f80:	e5 dc       	rcall	.-1590   	; 0x94c <vListInitialise>
     f82:	ce 01       	movw	r24, r28
     f84:	43 96       	adiw	r24, 0x13	; 19
     f86:	e2 dc       	rcall	.-1596   	; 0x94c <vListInitialise>
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <xQueueGenericCreate>:
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	08 2f       	mov	r16, r24
     fa0:	16 2f       	mov	r17, r22
     fa2:	f4 2e       	mov	r15, r20
     fa4:	66 23       	and	r22, r22
     fa6:	b9 f0       	breq	.+46     	; 0xfd6 <xQueueGenericCreate+0x42>
     fa8:	86 9f       	mul	r24, r22
     faa:	c0 01       	movw	r24, r0
     fac:	11 24       	eor	r1, r1
     fae:	85 96       	adiw	r24, 0x25	; 37
     fb0:	e3 db       	rcall	.-2106   	; 0x778 <pvPortMalloc>
     fb2:	ec 01       	movw	r28, r24
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <xQueueGenericCreate+0x34>
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <xQueueGenericCreate+0x4e>
     fba:	0f 8f       	std	Y+31, r16	; 0x1f
     fbc:	18 a3       	std	Y+32, r17	; 0x20
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	ce 01       	movw	r24, r28
     fc2:	a5 df       	rcall	.-182    	; 0xf0e <xQueueGenericReset>
     fc4:	fc a2       	std	Y+36, r15	; 0x24
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <xQueueGenericCreate+0x4e>
     fc8:	85 96       	adiw	r24, 0x25	; 37
     fca:	99 83       	std	Y+1, r25	; 0x01
     fcc:	88 83       	st	Y, r24
     fce:	f5 cf       	rjmp	.-22     	; 0xfba <xQueueGenericCreate+0x26>
     fd0:	d9 83       	std	Y+1, r29	; 0x01
     fd2:	c8 83       	st	Y, r28
     fd4:	f2 cf       	rjmp	.-28     	; 0xfba <xQueueGenericCreate+0x26>
     fd6:	85 e2       	ldi	r24, 0x25	; 37
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	ce db       	rcall	.-2148   	; 0x778 <pvPortMalloc>
     fdc:	ec 01       	movw	r28, r24
     fde:	89 2b       	or	r24, r25
     fe0:	b9 f7       	brne	.-18     	; 0xfd0 <xQueueGenericCreate+0x3c>
     fe2:	ce 01       	movw	r24, r28
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	08 95       	ret

00000ff0 <xQueueGenericSend>:
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	29 97       	sbiw	r28, 0x09	; 9
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	7c 01       	movw	r14, r24
    1018:	5b 01       	movw	r10, r22
    101a:	2e 83       	std	Y+6, r18	; 0x06
    101c:	3f 83       	std	Y+7, r19	; 0x07
    101e:	48 87       	std	Y+8, r20	; 0x08
    1020:	59 87       	std	Y+9, r21	; 0x09
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	99 24       	eor	r9, r9
    1026:	93 94       	inc	r9
    1028:	6c 01       	movw	r12, r24
    102a:	88 e0       	ldi	r24, 0x08	; 8
    102c:	c8 0e       	add	r12, r24
    102e:	d1 1c       	adc	r13, r1
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	0f 92       	push	r0
    1036:	f7 01       	movw	r30, r14
    1038:	96 8d       	ldd	r25, Z+30	; 0x1e
    103a:	87 8d       	ldd	r24, Z+31	; 0x1f
    103c:	98 17       	cp	r25, r24
    103e:	10 f0       	brcs	.+4      	; 0x1044 <xQueueGenericSend+0x54>
    1040:	02 30       	cpi	r16, 0x02	; 2
    1042:	b1 f4       	brne	.+44     	; 0x1070 <xQueueGenericSend+0x80>
    1044:	40 2f       	mov	r20, r16
    1046:	b5 01       	movw	r22, r10
    1048:	c7 01       	movw	r24, r14
    104a:	9b de       	rcall	.-714    	; 0xd82 <prvCopyDataToQueue>
    104c:	f7 01       	movw	r30, r14
    104e:	93 89       	ldd	r25, Z+19	; 0x13
    1050:	99 23       	and	r25, r25
    1052:	41 f0       	breq	.+16     	; 0x1064 <xQueueGenericSend+0x74>
    1054:	c7 01       	movw	r24, r14
    1056:	43 96       	adiw	r24, 0x13	; 19
    1058:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
    105c:	88 23       	and	r24, r24
    105e:	21 f0       	breq	.+8      	; 0x1068 <xQueueGenericSend+0x78>
    1060:	bd dd       	rcall	.-1158   	; 0xbdc <vPortYield>
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <xQueueGenericSend+0x78>
    1064:	81 11       	cpse	r24, r1
    1066:	ba dd       	rcall	.-1164   	; 0xbdc <vPortYield>
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	4e c0       	rjmp	.+156    	; 0x110c <xQueueGenericSend+0x11c>
    1070:	8e 81       	ldd	r24, Y+6	; 0x06
    1072:	9f 81       	ldd	r25, Y+7	; 0x07
    1074:	a8 85       	ldd	r26, Y+8	; 0x08
    1076:	b9 85       	ldd	r27, Y+9	; 0x09
    1078:	89 2b       	or	r24, r25
    107a:	8a 2b       	or	r24, r26
    107c:	8b 2b       	or	r24, r27
    107e:	21 f4       	brne	.+8      	; 0x1088 <xQueueGenericSend+0x98>
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	42 c0       	rjmp	.+132    	; 0x110c <xQueueGenericSend+0x11c>
    1088:	11 11       	cpse	r17, r1
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <xQueueGenericSend+0xa6>
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 73 11 	call	0x22e6	; 0x22e6 <vTaskInternalSetTimeOutState>
    1094:	19 2d       	mov	r17, r9
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	2c d6       	rcall	.+3160   	; 0x1cf4 <vTaskSuspendAll>
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	0f 92       	push	r0
    10a2:	f7 01       	movw	r30, r14
    10a4:	81 a1       	ldd	r24, Z+33	; 0x21
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	09 f4       	brne	.+2      	; 0x10ac <xQueueGenericSend+0xbc>
    10aa:	11 a2       	std	Z+33, r1	; 0x21
    10ac:	f7 01       	movw	r30, r14
    10ae:	82 a1       	ldd	r24, Z+34	; 0x22
    10b0:	8f 3f       	cpi	r24, 0xFF	; 255
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <xQueueGenericSend+0xc6>
    10b4:	12 a2       	std	Z+34, r1	; 0x22
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	be 01       	movw	r22, r28
    10bc:	6a 5f       	subi	r22, 0xFA	; 250
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	0e 94 84 11 	call	0x2308	; 0x2308 <xTaskCheckForTimeOut>
    10c8:	81 11       	cpse	r24, r1
    10ca:	1c c0       	rjmp	.+56     	; 0x1104 <xQueueGenericSend+0x114>
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	0f 92       	push	r0
    10d2:	f7 01       	movw	r30, r14
    10d4:	96 8d       	ldd	r25, Z+30	; 0x1e
    10d6:	87 8d       	ldd	r24, Z+31	; 0x1f
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	98 13       	cpse	r25, r24
    10de:	0e c0       	rjmp	.+28     	; 0x10fc <xQueueGenericSend+0x10c>
    10e0:	4e 81       	ldd	r20, Y+6	; 0x06
    10e2:	5f 81       	ldd	r21, Y+7	; 0x07
    10e4:	68 85       	ldd	r22, Y+8	; 0x08
    10e6:	79 85       	ldd	r23, Y+9	; 0x09
    10e8:	c6 01       	movw	r24, r12
    10ea:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <vTaskPlaceOnEventList>
    10ee:	c7 01       	movw	r24, r14
    10f0:	c1 de       	rcall	.-638    	; 0xe74 <prvUnlockQueue>
    10f2:	e9 d6       	rcall	.+3538   	; 0x1ec6 <xTaskResumeAll>
    10f4:	81 11       	cpse	r24, r1
    10f6:	9c cf       	rjmp	.-200    	; 0x1030 <xQueueGenericSend+0x40>
    10f8:	71 dd       	rcall	.-1310   	; 0xbdc <vPortYield>
    10fa:	9a cf       	rjmp	.-204    	; 0x1030 <xQueueGenericSend+0x40>
    10fc:	c7 01       	movw	r24, r14
    10fe:	ba de       	rcall	.-652    	; 0xe74 <prvUnlockQueue>
    1100:	e2 d6       	rcall	.+3524   	; 0x1ec6 <xTaskResumeAll>
    1102:	96 cf       	rjmp	.-212    	; 0x1030 <xQueueGenericSend+0x40>
    1104:	c7 01       	movw	r24, r14
    1106:	b6 de       	rcall	.-660    	; 0xe74 <prvUnlockQueue>
    1108:	de d6       	rcall	.+3516   	; 0x1ec6 <xTaskResumeAll>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	29 96       	adiw	r28, 0x09	; 9
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	08 95       	ret

00001130 <xQueueCreateMutex>:
    1130:	0f 93       	push	r16
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	48 2f       	mov	r20, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	2b df       	rcall	.-426    	; 0xf94 <xQueueGenericCreate>
    113e:	ec 01       	movw	r28, r24
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	61 f0       	breq	.+24     	; 0x115c <xQueueCreateMutex+0x2c>
    1144:	1d 82       	std	Y+5, r1	; 0x05
    1146:	1c 82       	std	Y+4, r1	; 0x04
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	18 82       	st	Y, r1
    114c:	1e 82       	std	Y+6, r1	; 0x06
    114e:	00 e0       	ldi	r16, 0x00	; 0
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	4a df       	rcall	.-364    	; 0xff0 <xQueueGenericSend>
    115c:	ce 01       	movw	r24, r28
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <xQueueGenericSendFromISR>:
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	8a 01       	movw	r16, r20
    1174:	fc 01       	movw	r30, r24
    1176:	56 8d       	ldd	r21, Z+30	; 0x1e
    1178:	37 8d       	ldd	r19, Z+31	; 0x1f
    117a:	53 17       	cp	r21, r19
    117c:	10 f0       	brcs	.+4      	; 0x1182 <xQueueGenericSendFromISR+0x1c>
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	e9 f4       	brne	.+58     	; 0x11bc <xQueueGenericSendFromISR+0x56>
    1182:	42 2f       	mov	r20, r18
    1184:	78 01       	movw	r14, r16
    1186:	ec 01       	movw	r28, r24
    1188:	1a a1       	ldd	r17, Y+34	; 0x22
    118a:	fb dd       	rcall	.-1034   	; 0xd82 <prvCopyDataToQueue>
    118c:	1f 3f       	cpi	r17, 0xFF	; 255
    118e:	81 f4       	brne	.+32     	; 0x11b0 <xQueueGenericSendFromISR+0x4a>
    1190:	8b 89       	ldd	r24, Y+19	; 0x13
    1192:	88 23       	and	r24, r24
    1194:	a9 f0       	breq	.+42     	; 0x11c0 <xQueueGenericSendFromISR+0x5a>
    1196:	ce 01       	movw	r24, r28
    1198:	43 96       	adiw	r24, 0x13	; 19
    119a:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
    119e:	88 23       	and	r24, r24
    11a0:	89 f0       	breq	.+34     	; 0x11c4 <xQueueGenericSendFromISR+0x5e>
    11a2:	e1 14       	cp	r14, r1
    11a4:	f1 04       	cpc	r15, r1
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <xQueueGenericSendFromISR+0x62>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	f7 01       	movw	r30, r14
    11ac:	80 83       	st	Z, r24
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11b0:	ff 24       	eor	r15, r15
    11b2:	f3 94       	inc	r15
    11b4:	f1 0e       	add	r15, r17
    11b6:	fa a2       	std	Y+34, r15	; 0x22
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <xQueueReceive>:
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	29 97       	sbiw	r28, 0x09	; 9
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	8c 01       	movw	r16, r24
    1200:	5b 01       	movw	r10, r22
    1202:	2e 83       	std	Y+6, r18	; 0x06
    1204:	3f 83       	std	Y+7, r19	; 0x07
    1206:	48 87       	std	Y+8, r20	; 0x08
    1208:	59 87       	std	Y+9, r21	; 0x09
    120a:	e1 2c       	mov	r14, r1
    120c:	99 24       	eor	r9, r9
    120e:	93 94       	inc	r9
    1210:	6c 01       	movw	r12, r24
    1212:	83 e1       	ldi	r24, 0x13	; 19
    1214:	c8 0e       	add	r12, r24
    1216:	d1 1c       	adc	r13, r1
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	0f 92       	push	r0
    121e:	f8 01       	movw	r30, r16
    1220:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1222:	ff 20       	and	r15, r15
    1224:	91 f0       	breq	.+36     	; 0x124a <xQueueReceive+0x72>
    1226:	b5 01       	movw	r22, r10
    1228:	c8 01       	movw	r24, r16
    122a:	0a de       	rcall	.-1004   	; 0xe40 <prvCopyDataFromQueue>
    122c:	fa 94       	dec	r15
    122e:	f8 01       	movw	r30, r16
    1230:	f6 8e       	std	Z+30, r15	; 0x1e
    1232:	80 85       	ldd	r24, Z+8	; 0x08
    1234:	88 23       	and	r24, r24
    1236:	29 f0       	breq	.+10     	; 0x1242 <xQueueReceive+0x6a>
    1238:	c8 01       	movw	r24, r16
    123a:	08 96       	adiw	r24, 0x08	; 8
    123c:	fc d7       	rcall	.+4088   	; 0x2236 <xTaskRemoveFromEventList>
    123e:	81 11       	cpse	r24, r1
    1240:	cd dc       	rcall	.-1638   	; 0xbdc <vPortYield>
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	4c c0       	rjmp	.+152    	; 0x12e2 <xQueueReceive+0x10a>
    124a:	8e 81       	ldd	r24, Y+6	; 0x06
    124c:	9f 81       	ldd	r25, Y+7	; 0x07
    124e:	a8 85       	ldd	r26, Y+8	; 0x08
    1250:	b9 85       	ldd	r27, Y+9	; 0x09
    1252:	89 2b       	or	r24, r25
    1254:	8a 2b       	or	r24, r26
    1256:	8b 2b       	or	r24, r27
    1258:	21 f4       	brne	.+8      	; 0x1262 <xQueueReceive+0x8a>
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	40 c0       	rjmp	.+128    	; 0x12e2 <xQueueReceive+0x10a>
    1262:	e1 10       	cpse	r14, r1
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <xQueueReceive+0x98>
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <vTaskInternalSetTimeOutState>
    126e:	e9 2c       	mov	r14, r9
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	3f d5       	rcall	.+2686   	; 0x1cf4 <vTaskSuspendAll>
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	0f 92       	push	r0
    127c:	f8 01       	movw	r30, r16
    127e:	81 a1       	ldd	r24, Z+33	; 0x21
    1280:	8f 3f       	cpi	r24, 0xFF	; 255
    1282:	09 f4       	brne	.+2      	; 0x1286 <xQueueReceive+0xae>
    1284:	11 a2       	std	Z+33, r1	; 0x21
    1286:	f8 01       	movw	r30, r16
    1288:	82 a1       	ldd	r24, Z+34	; 0x22
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	09 f4       	brne	.+2      	; 0x1290 <xQueueReceive+0xb8>
    128e:	12 a2       	std	Z+34, r1	; 0x22
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	be 01       	movw	r22, r28
    1296:	6a 5f       	subi	r22, 0xFA	; 250
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	0e 94 84 11 	call	0x2308	; 0x2308 <xTaskCheckForTimeOut>
    12a2:	81 11       	cpse	r24, r1
    12a4:	15 c0       	rjmp	.+42     	; 0x12d0 <xQueueReceive+0xf8>
    12a6:	c8 01       	movw	r24, r16
    12a8:	61 dd       	rcall	.-1342   	; 0xd6c <prvIsQueueEmpty>
    12aa:	88 23       	and	r24, r24
    12ac:	69 f0       	breq	.+26     	; 0x12c8 <xQueueReceive+0xf0>
    12ae:	4e 81       	ldd	r20, Y+6	; 0x06
    12b0:	5f 81       	ldd	r21, Y+7	; 0x07
    12b2:	68 85       	ldd	r22, Y+8	; 0x08
    12b4:	79 85       	ldd	r23, Y+9	; 0x09
    12b6:	c6 01       	movw	r24, r12
    12b8:	87 d7       	rcall	.+3854   	; 0x21c8 <vTaskPlaceOnEventList>
    12ba:	c8 01       	movw	r24, r16
    12bc:	db dd       	rcall	.-1098   	; 0xe74 <prvUnlockQueue>
    12be:	03 d6       	rcall	.+3078   	; 0x1ec6 <xTaskResumeAll>
    12c0:	81 11       	cpse	r24, r1
    12c2:	aa cf       	rjmp	.-172    	; 0x1218 <xQueueReceive+0x40>
    12c4:	8b dc       	rcall	.-1770   	; 0xbdc <vPortYield>
    12c6:	a8 cf       	rjmp	.-176    	; 0x1218 <xQueueReceive+0x40>
    12c8:	c8 01       	movw	r24, r16
    12ca:	d4 dd       	rcall	.-1112   	; 0xe74 <prvUnlockQueue>
    12cc:	fc d5       	rcall	.+3064   	; 0x1ec6 <xTaskResumeAll>
    12ce:	a4 cf       	rjmp	.-184    	; 0x1218 <xQueueReceive+0x40>
    12d0:	c8 01       	movw	r24, r16
    12d2:	d0 dd       	rcall	.-1120   	; 0xe74 <prvUnlockQueue>
    12d4:	f8 d5       	rcall	.+3056   	; 0x1ec6 <xTaskResumeAll>
    12d6:	c8 01       	movw	r24, r16
    12d8:	49 dd       	rcall	.-1390   	; 0xd6c <prvIsQueueEmpty>
    12da:	88 23       	and	r24, r24
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <xQueueReceive+0x108>
    12de:	9c cf       	rjmp	.-200    	; 0x1218 <xQueueReceive+0x40>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	29 96       	adiw	r28, 0x09	; 9
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	08 95       	ret

00001306 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	0f 92       	push	r0
    1312:	89 a1       	ldd	r24, Y+33	; 0x21
    1314:	8f 3f       	cpi	r24, 0xFF	; 255
    1316:	09 f4       	brne	.+2      	; 0x131a <vQueueWaitForMessageRestricted+0x14>
    1318:	19 a2       	std	Y+33, r1	; 0x21
    131a:	8a a1       	ldd	r24, Y+34	; 0x22
    131c:	8f 3f       	cpi	r24, 0xFF	; 255
    131e:	09 f4       	brne	.+2      	; 0x1322 <vQueueWaitForMessageRestricted+0x1c>
    1320:	1a a2       	std	Y+34, r1	; 0x22
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1326:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1328:	81 11       	cpse	r24, r1
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    132c:	ce 01       	movw	r24, r28
    132e:	43 96       	adiw	r24, 0x13	; 19
    1330:	62 d7       	rcall	.+3780   	; 0x21f6 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1332:	ce 01       	movw	r24, r28
    1334:	9f dd       	rcall	.-1218   	; 0xe74 <prvUnlockQueue>
    }
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    133c:	fc 01       	movw	r30, r24
    133e:	44 81       	ldd	r20, Z+4	; 0x04
    1340:	55 81       	ldd	r21, Z+5	; 0x05
    1342:	22 81       	ldd	r18, Z+2	; 0x02
    1344:	33 81       	ldd	r19, Z+3	; 0x03
    1346:	24 0f       	add	r18, r20
    1348:	35 1f       	adc	r19, r21
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	b9 01       	movw	r22, r18
    1350:	68 1b       	sub	r22, r24
    1352:	79 0b       	sbc	r23, r25
    1354:	cb 01       	movw	r24, r22
    1356:	64 17       	cp	r22, r20
    1358:	75 07       	cpc	r23, r21
    135a:	10 f0       	brcs	.+4      	; 0x1360 <prvBytesInBuffer+0x24>
    135c:	84 1b       	sub	r24, r20
    135e:	95 0b       	sbc	r25, r21
    1360:	08 95       	ret

00001362 <prvWriteBytesToBuffer>:
    1362:	af 92       	push	r10
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	6c 01       	movw	r12, r24
    1378:	5b 01       	movw	r10, r22
    137a:	7a 01       	movw	r14, r20
    137c:	fc 01       	movw	r30, r24
    137e:	c2 81       	ldd	r28, Z+2	; 0x02
    1380:	d3 81       	ldd	r29, Z+3	; 0x03
    1382:	04 81       	ldd	r16, Z+4	; 0x04
    1384:	15 81       	ldd	r17, Z+5	; 0x05
    1386:	0c 1b       	sub	r16, r28
    1388:	1d 0b       	sbc	r17, r29
    138a:	40 17       	cp	r20, r16
    138c:	51 07       	cpc	r21, r17
    138e:	08 f4       	brcc	.+2      	; 0x1392 <prvWriteBytesToBuffer+0x30>
    1390:	8a 01       	movw	r16, r20
    1392:	f6 01       	movw	r30, r12
    1394:	84 85       	ldd	r24, Z+12	; 0x0c
    1396:	95 85       	ldd	r25, Z+13	; 0x0d
    1398:	a8 01       	movw	r20, r16
    139a:	b5 01       	movw	r22, r10
    139c:	8c 0f       	add	r24, r28
    139e:	9d 1f       	adc	r25, r29
    13a0:	0e 94 af 23 	call	0x475e	; 0x475e <memcpy>
    13a4:	0e 15       	cp	r16, r14
    13a6:	1f 05       	cpc	r17, r15
    13a8:	58 f4       	brcc	.+22     	; 0x13c0 <prvWriteBytesToBuffer+0x5e>
    13aa:	a7 01       	movw	r20, r14
    13ac:	40 1b       	sub	r20, r16
    13ae:	51 0b       	sbc	r21, r17
    13b0:	b5 01       	movw	r22, r10
    13b2:	60 0f       	add	r22, r16
    13b4:	71 1f       	adc	r23, r17
    13b6:	f6 01       	movw	r30, r12
    13b8:	84 85       	ldd	r24, Z+12	; 0x0c
    13ba:	95 85       	ldd	r25, Z+13	; 0x0d
    13bc:	0e 94 af 23 	call	0x475e	; 0x475e <memcpy>
    13c0:	ce 01       	movw	r24, r28
    13c2:	8e 0d       	add	r24, r14
    13c4:	9f 1d       	adc	r25, r15
    13c6:	f6 01       	movw	r30, r12
    13c8:	24 81       	ldd	r18, Z+4	; 0x04
    13ca:	35 81       	ldd	r19, Z+5	; 0x05
    13cc:	82 17       	cp	r24, r18
    13ce:	93 07       	cpc	r25, r19
    13d0:	10 f0       	brcs	.+4      	; 0x13d6 <prvWriteBytesToBuffer+0x74>
    13d2:	82 1b       	sub	r24, r18
    13d4:	93 0b       	sbc	r25, r19
    13d6:	f6 01       	movw	r30, r12
    13d8:	93 83       	std	Z+3, r25	; 0x03
    13da:	82 83       	std	Z+2, r24	; 0x02
    13dc:	c7 01       	movw	r24, r14
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	08 95       	ret

000013f4 <prvWriteMessageToBuffer>:
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	1f 92       	push	r1
    1406:	1f 92       	push	r1
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	5a 83       	std	Y+2, r21	; 0x02
    140e:	49 83       	std	Y+1, r20	; 0x01
    1410:	21 15       	cp	r18, r1
    1412:	31 05       	cpc	r19, r1
    1414:	c9 f0       	breq	.+50     	; 0x1448 <prvWriteMessageToBuffer+0x54>
    1416:	6b 01       	movw	r12, r22
    1418:	7c 01       	movw	r14, r24
    141a:	fc 01       	movw	r30, r24
    141c:	86 85       	ldd	r24, Z+14	; 0x0e
    141e:	80 fd       	sbrc	r24, 0
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <prvWriteMessageToBuffer+0x3e>
    1422:	ca 01       	movw	r24, r20
    1424:	24 17       	cp	r18, r20
    1426:	35 07       	cpc	r19, r21
    1428:	08 f4       	brcc	.+2      	; 0x142c <prvWriteMessageToBuffer+0x38>
    142a:	c9 01       	movw	r24, r18
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	11 c0       	rjmp	.+34     	; 0x1454 <prvWriteMessageToBuffer+0x60>
    1432:	20 17       	cp	r18, r16
    1434:	31 07       	cpc	r19, r17
    1436:	58 f0       	brcs	.+22     	; 0x144e <prvWriteMessageToBuffer+0x5a>
    1438:	42 e0       	ldi	r20, 0x02	; 2
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	be 01       	movw	r22, r28
    143e:	6f 5f       	subi	r22, 0xFF	; 255
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	c7 01       	movw	r24, r14
    1444:	8e df       	rcall	.-228    	; 0x1362 <prvWriteBytesToBuffer>
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <prvWriteMessageToBuffer+0x60>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	08 c0       	rjmp	.+16     	; 0x145e <prvWriteMessageToBuffer+0x6a>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	05 c0       	rjmp	.+10     	; 0x145e <prvWriteMessageToBuffer+0x6a>
    1454:	49 81       	ldd	r20, Y+1	; 0x01
    1456:	5a 81       	ldd	r21, Y+2	; 0x02
    1458:	b6 01       	movw	r22, r12
    145a:	c7 01       	movw	r24, r14
    145c:	82 df       	rcall	.-252    	; 0x1362 <prvWriteBytesToBuffer>
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	08 95       	ret

00001474 <prvReadBytesFromBuffer>:
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	7c 01       	movw	r14, r24
    148a:	5b 01       	movw	r10, r22
    148c:	e9 01       	movw	r28, r18
    148e:	42 17       	cp	r20, r18
    1490:	53 07       	cpc	r21, r19
    1492:	08 f4       	brcc	.+2      	; 0x1496 <prvReadBytesFromBuffer+0x22>
    1494:	ea 01       	movw	r28, r20
    1496:	20 97       	sbiw	r28, 0x00	; 0
    1498:	79 f1       	breq	.+94     	; 0x14f8 <prvReadBytesFromBuffer+0x84>
    149a:	f7 01       	movw	r30, r14
    149c:	00 81       	ld	r16, Z
    149e:	11 81       	ldd	r17, Z+1	; 0x01
    14a0:	c4 80       	ldd	r12, Z+4	; 0x04
    14a2:	d5 80       	ldd	r13, Z+5	; 0x05
    14a4:	c0 1a       	sub	r12, r16
    14a6:	d1 0a       	sbc	r13, r17
    14a8:	cc 15       	cp	r28, r12
    14aa:	dd 05       	cpc	r29, r13
    14ac:	08 f4       	brcc	.+2      	; 0x14b0 <prvReadBytesFromBuffer+0x3c>
    14ae:	6e 01       	movw	r12, r28
    14b0:	f7 01       	movw	r30, r14
    14b2:	64 85       	ldd	r22, Z+12	; 0x0c
    14b4:	75 85       	ldd	r23, Z+13	; 0x0d
    14b6:	60 0f       	add	r22, r16
    14b8:	71 1f       	adc	r23, r17
    14ba:	a6 01       	movw	r20, r12
    14bc:	c5 01       	movw	r24, r10
    14be:	0e 94 af 23 	call	0x475e	; 0x475e <memcpy>
    14c2:	cc 16       	cp	r12, r28
    14c4:	dd 06       	cpc	r13, r29
    14c6:	58 f4       	brcc	.+22     	; 0x14de <prvReadBytesFromBuffer+0x6a>
    14c8:	ae 01       	movw	r20, r28
    14ca:	4c 19       	sub	r20, r12
    14cc:	5d 09       	sbc	r21, r13
    14ce:	f7 01       	movw	r30, r14
    14d0:	64 85       	ldd	r22, Z+12	; 0x0c
    14d2:	75 85       	ldd	r23, Z+13	; 0x0d
    14d4:	c5 01       	movw	r24, r10
    14d6:	8c 0d       	add	r24, r12
    14d8:	9d 1d       	adc	r25, r13
    14da:	0e 94 af 23 	call	0x475e	; 0x475e <memcpy>
    14de:	0c 0f       	add	r16, r28
    14e0:	1d 1f       	adc	r17, r29
    14e2:	f7 01       	movw	r30, r14
    14e4:	84 81       	ldd	r24, Z+4	; 0x04
    14e6:	95 81       	ldd	r25, Z+5	; 0x05
    14e8:	08 17       	cp	r16, r24
    14ea:	19 07       	cpc	r17, r25
    14ec:	10 f0       	brcs	.+4      	; 0x14f2 <prvReadBytesFromBuffer+0x7e>
    14ee:	08 1b       	sub	r16, r24
    14f0:	19 0b       	sbc	r17, r25
    14f2:	f7 01       	movw	r30, r14
    14f4:	11 83       	std	Z+1, r17	; 0x01
    14f6:	00 83       	st	Z, r16
    14f8:	ce 01       	movw	r24, r28
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	08 95       	ret

00001510 <xStreamBufferGenericCreate>:
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	eb 01       	movw	r28, r22
    151c:	11 e0       	ldi	r17, 0x01	; 1
    151e:	41 30       	cpi	r20, 0x01	; 1
    1520:	09 f0       	breq	.+2      	; 0x1524 <xStreamBufferGenericCreate+0x14>
    1522:	10 e0       	ldi	r17, 0x00	; 0
    1524:	20 97       	sbiw	r28, 0x00	; 0
    1526:	11 f4       	brne	.+4      	; 0x152c <xStreamBufferGenericCreate+0x1c>
    1528:	c1 e0       	ldi	r28, 0x01	; 1
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	7c 01       	movw	r14, r24
    152e:	2f ef       	ldi	r18, 0xFF	; 255
    1530:	e2 1a       	sub	r14, r18
    1532:	f2 0a       	sbc	r15, r18
    1534:	41 96       	adiw	r24, 0x11	; 17
    1536:	20 d9       	rcall	.-3520   	; 0x778 <pvPortMalloc>
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	81 f0       	breq	.+32     	; 0x155c <xStreamBufferGenericCreate+0x4c>
    153c:	20 e1       	ldi	r18, 0x10	; 16
    153e:	fc 01       	movw	r30, r24
    1540:	11 92       	st	Z+, r1
    1542:	2a 95       	dec	r18
    1544:	e9 f7       	brne	.-6      	; 0x1540 <xStreamBufferGenericCreate+0x30>
    1546:	9c 01       	movw	r18, r24
    1548:	20 5f       	subi	r18, 0xF0	; 240
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	fc 01       	movw	r30, r24
    154e:	35 87       	std	Z+13, r19	; 0x0d
    1550:	24 87       	std	Z+12, r18	; 0x0c
    1552:	f5 82       	std	Z+5, r15	; 0x05
    1554:	e4 82       	std	Z+4, r14	; 0x04
    1556:	d7 83       	std	Z+7, r29	; 0x07
    1558:	c6 83       	std	Z+6, r28	; 0x06
    155a:	16 87       	std	Z+14, r17	; 0x0e
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	08 95       	ret

00001568 <xStreamBufferReset>:
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	fc 01       	movw	r30, r24
    156e:	27 85       	ldd	r18, Z+15	; 0x0f
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	0f 92       	push	r0
    1576:	80 85       	ldd	r24, Z+8	; 0x08
    1578:	91 85       	ldd	r25, Z+9	; 0x09
    157a:	89 2b       	or	r24, r25
    157c:	d1 f4       	brne	.+52     	; 0x15b2 <xStreamBufferReset+0x4a>
    157e:	82 85       	ldd	r24, Z+10	; 0x0a
    1580:	93 85       	ldd	r25, Z+11	; 0x0b
    1582:	89 2b       	or	r24, r25
    1584:	c1 f4       	brne	.+48     	; 0x15b6 <xStreamBufferReset+0x4e>
    1586:	86 85       	ldd	r24, Z+14	; 0x0e
    1588:	46 81       	ldd	r20, Z+6	; 0x06
    158a:	57 81       	ldd	r21, Z+7	; 0x07
    158c:	64 81       	ldd	r22, Z+4	; 0x04
    158e:	75 81       	ldd	r23, Z+5	; 0x05
    1590:	a4 85       	ldd	r26, Z+12	; 0x0c
    1592:	b5 85       	ldd	r27, Z+13	; 0x0d
    1594:	90 e1       	ldi	r25, 0x10	; 16
    1596:	ef 01       	movw	r28, r30
    1598:	19 92       	st	Y+, r1
    159a:	9a 95       	dec	r25
    159c:	e9 f7       	brne	.-6      	; 0x1598 <xStreamBufferReset+0x30>
    159e:	b5 87       	std	Z+13, r27	; 0x0d
    15a0:	a4 87       	std	Z+12, r26	; 0x0c
    15a2:	75 83       	std	Z+5, r23	; 0x05
    15a4:	64 83       	std	Z+4, r22	; 0x04
    15a6:	57 83       	std	Z+7, r21	; 0x07
    15a8:	46 83       	std	Z+6, r20	; 0x06
    15aa:	86 87       	std	Z+14, r24	; 0x0e
    15ac:	27 87       	std	Z+15, r18	; 0x0f
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <xStreamBufferReset+0x50>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <xStreamBufferReset+0x50>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <xStreamBufferSpacesAvailable>:
    15c2:	fc 01       	movw	r30, r24
    15c4:	24 81       	ldd	r18, Z+4	; 0x04
    15c6:	35 81       	ldd	r19, Z+5	; 0x05
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	42 81       	ldd	r20, Z+2	; 0x02
    15ce:	53 81       	ldd	r21, Z+3	; 0x03
    15d0:	82 0f       	add	r24, r18
    15d2:	93 1f       	adc	r25, r19
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	84 1b       	sub	r24, r20
    15d8:	95 0b       	sbc	r25, r21
    15da:	82 17       	cp	r24, r18
    15dc:	93 07       	cpc	r25, r19
    15de:	10 f0       	brcs	.+4      	; 0x15e4 <xStreamBufferSpacesAvailable+0x22>
    15e0:	82 1b       	sub	r24, r18
    15e2:	93 0b       	sbc	r25, r19
    15e4:	08 95       	ret

000015e6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    15e6:	2f 92       	push	r2
    15e8:	3f 92       	push	r3
    15ea:	4f 92       	push	r4
    15ec:	5f 92       	push	r5
    15ee:	6f 92       	push	r6
    15f0:	7f 92       	push	r7
    15f2:	8f 92       	push	r8
    15f4:	9f 92       	push	r9
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	29 97       	sbiw	r28, 0x09	; 9
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	5c 01       	movw	r10, r24
    161c:	1b 01       	movw	r2, r22
    161e:	2a 01       	movw	r4, r20
    1620:	0e 83       	std	Y+6, r16	; 0x06
    1622:	1f 83       	std	Y+7, r17	; 0x07
    1624:	28 87       	std	Y+8, r18	; 0x08
    1626:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1628:	fc 01       	movw	r30, r24
    162a:	86 85       	ldd	r24, Z+14	; 0x0e
    162c:	80 ff       	sbrs	r24, 0
    162e:	05 c0       	rjmp	.+10     	; 0x163a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1630:	3a 01       	movw	r6, r20
    1632:	f2 e0       	ldi	r31, 0x02	; 2
    1634:	6f 0e       	add	r6, r31
    1636:	71 1c       	adc	r7, r1
    1638:	01 c0       	rjmp	.+2      	; 0x163c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    163a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
    163e:	9f 81       	ldd	r25, Y+7	; 0x07
    1640:	a8 85       	ldd	r26, Y+8	; 0x08
    1642:	b9 85       	ldd	r27, Y+9	; 0x09
    1644:	89 2b       	or	r24, r25
    1646:	8a 2b       	or	r24, r26
    1648:	8b 2b       	or	r24, r27
    164a:	09 f4       	brne	.+2      	; 0x164e <xStreamBufferSend+0x68>
    164c:	34 c0       	rjmp	.+104    	; 0x16b6 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    164e:	ce 01       	movw	r24, r28
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	33 d6       	rcall	.+3174   	; 0x22ba <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    165a:	c5 01       	movw	r24, r10
    165c:	b2 df       	rcall	.-156    	; 0x15c2 <xStreamBufferSpacesAvailable>
    165e:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1660:	86 15       	cp	r24, r6
    1662:	97 05       	cpc	r25, r7
    1664:	18 f5       	brcc	.+70     	; 0x16ac <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 bb 13 	call	0x2776	; 0x2776 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    166e:	a5 d6       	rcall	.+3402   	; 0x23ba <xTaskGetCurrentTaskHandle>
    1670:	f5 01       	movw	r30, r10
    1672:	93 87       	std	Z+11, r25	; 0x0b
    1674:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    167a:	ce 80       	ldd	r12, Y+6	; 0x06
    167c:	df 80       	ldd	r13, Y+7	; 0x07
    167e:	e8 84       	ldd	r14, Y+8	; 0x08
    1680:	f9 84       	ldd	r15, Y+9	; 0x09
    1682:	00 e0       	ldi	r16, 0x00	; 0
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	a9 01       	movw	r20, r18
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	cb 01       	movw	r24, r22
    1692:	e6 d6       	rcall	.+3532   	; 0x2460 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1694:	f5 01       	movw	r30, r10
    1696:	13 86       	std	Z+11, r1	; 0x0b
    1698:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    169a:	be 01       	movw	r22, r28
    169c:	6a 5f       	subi	r22, 0xFA	; 250
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	31 d6       	rcall	.+3170   	; 0x2308 <xTaskCheckForTimeOut>
    16a6:	88 23       	and	r24, r24
    16a8:	a9 f2       	breq	.-86     	; 0x1654 <xStreamBufferSend+0x6e>
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    16ac:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	81 14       	cp	r8, r1
    16b2:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16b4:	19 f4       	brne	.+6      	; 0x16bc <xStreamBufferSend+0xd6>
    16b6:	c5 01       	movw	r24, r10
    16b8:	84 df       	rcall	.-248    	; 0x15c2 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16ba:	4c 01       	movw	r8, r24
    16bc:	83 01       	movw	r16, r6
    16be:	94 01       	movw	r18, r8
    16c0:	a2 01       	movw	r20, r4
    16c2:	b1 01       	movw	r22, r2
    16c4:	c5 01       	movw	r24, r10
    16c6:	96 de       	rcall	.-724    	; 0x13f4 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    16c8:	7c 01       	movw	r14, r24
    16ca:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16cc:	d9 f0       	breq	.+54     	; 0x1704 <xStreamBufferSend+0x11e>
    16ce:	c5 01       	movw	r24, r10
    16d0:	35 de       	rcall	.-918    	; 0x133c <prvBytesInBuffer>
    16d2:	f5 01       	movw	r30, r10
    16d4:	26 81       	ldd	r18, Z+6	; 0x06
    16d6:	37 81       	ldd	r19, Z+7	; 0x07
    16d8:	82 17       	cp	r24, r18
    16da:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    16dc:	98 f0       	brcs	.+38     	; 0x1704 <xStreamBufferSend+0x11e>
    16de:	0a d3       	rcall	.+1556   	; 0x1cf4 <vTaskSuspendAll>
    16e0:	f5 01       	movw	r30, r10
    16e2:	80 85       	ldd	r24, Z+8	; 0x08
    16e4:	91 85       	ldd	r25, Z+9	; 0x09
    16e6:	89 2b       	or	r24, r25
    16e8:	61 f0       	breq	.+24     	; 0x1702 <xStreamBufferSend+0x11c>
    16ea:	80 85       	ldd	r24, Z+8	; 0x08
    16ec:	91 85       	ldd	r25, Z+9	; 0x09
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	ba 01       	movw	r22, r20
    16fa:	3c d7       	rcall	.+3704   	; 0x2574 <xTaskGenericNotify>
    16fc:	f5 01       	movw	r30, r10
    16fe:	11 86       	std	Z+9, r1	; 0x09
    1700:	10 86       	std	Z+8, r1	; 0x08
    1702:	e1 d3       	rcall	.+1986   	; 0x1ec6 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1704:	c7 01       	movw	r24, r14
    1706:	29 96       	adiw	r28, 0x09	; 9
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	7f 90       	pop	r7
    172c:	6f 90       	pop	r6
    172e:	5f 90       	pop	r5
    1730:	4f 90       	pop	r4
    1732:	3f 90       	pop	r3
    1734:	2f 90       	pop	r2
    1736:	08 95       	ret

00001738 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	ec 01       	movw	r28, r24
    174e:	5b 01       	movw	r10, r22
    1750:	6a 01       	movw	r12, r20
    1752:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1754:	8e 85       	ldd	r24, Y+14	; 0x0e
    1756:	80 ff       	sbrs	r24, 0
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    175a:	8a 01       	movw	r16, r20
    175c:	0e 5f       	subi	r16, 0xFE	; 254
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1762:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1764:	ce 01       	movw	r24, r28
    1766:	2d df       	rcall	.-422    	; 0x15c2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1768:	9c 01       	movw	r18, r24
    176a:	a6 01       	movw	r20, r12
    176c:	b5 01       	movw	r22, r10
    176e:	ce 01       	movw	r24, r28
    1770:	41 de       	rcall	.-894    	; 0x13f4 <prvWriteMessageToBuffer>
    1772:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1774:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1776:	b1 f0       	breq	.+44     	; 0x17a4 <xStreamBufferSendFromISR+0x6c>
    1778:	ce 01       	movw	r24, r28
    177a:	e0 dd       	rcall	.-1088   	; 0x133c <prvBytesInBuffer>
    177c:	2e 81       	ldd	r18, Y+6	; 0x06
    177e:	3f 81       	ldd	r19, Y+7	; 0x07
    1780:	82 17       	cp	r24, r18
    1782:	93 07       	cpc	r25, r19
    1784:	78 f0       	brcs	.+30     	; 0x17a4 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1786:	88 85       	ldd	r24, Y+8	; 0x08
    1788:	99 85       	ldd	r25, Y+9	; 0x09
    178a:	89 2b       	or	r24, r25
    178c:	59 f0       	breq	.+22     	; 0x17a4 <xStreamBufferSendFromISR+0x6c>
    178e:	88 85       	ldd	r24, Y+8	; 0x08
    1790:	99 85       	ldd	r25, Y+9	; 0x09
    1792:	00 e0       	ldi	r16, 0x00	; 0
    1794:	10 e0       	ldi	r17, 0x00	; 0
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	ba 01       	movw	r22, r20
    179e:	62 d7       	rcall	.+3780   	; 0x2664 <xTaskGenericNotifyFromISR>
    17a0:	19 86       	std	Y+9, r1	; 0x09
    17a2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    17a4:	c6 01       	movw	r24, r12
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	bf 90       	pop	r11
    17b8:	af 90       	pop	r10
    17ba:	08 95       	ret

000017bc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17bc:	4f 92       	push	r4
    17be:	5f 92       	push	r5
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	1f 92       	push	r1
    17de:	1f 92       	push	r1
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	5c 01       	movw	r10, r24
    17e6:	2b 01       	movw	r4, r22
    17e8:	3a 01       	movw	r6, r20
    17ea:	68 01       	movw	r12, r16
    17ec:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ee:	fc 01       	movw	r30, r24
    17f0:	86 85       	ldd	r24, Z+14	; 0x0e
    17f2:	80 fd       	sbrc	r24, 0
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    17f6:	81 2c       	mov	r8, r1
    17f8:	91 2c       	mov	r9, r1
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17fc:	68 94       	set
    17fe:	88 24       	eor	r8, r8
    1800:	81 f8       	bld	r8, 1
    1802:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1804:	c1 14       	cp	r12, r1
    1806:	d1 04       	cpc	r13, r1
    1808:	e1 04       	cpc	r14, r1
    180a:	f1 04       	cpc	r15, r1
    180c:	29 f1       	breq	.+74     	; 0x1858 <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1814:	c5 01       	movw	r24, r10
    1816:	92 dd       	rcall	.-1244   	; 0x133c <prvBytesInBuffer>
    1818:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    181a:	88 16       	cp	r8, r24
    181c:	99 06       	cpc	r9, r25
    181e:	38 f0       	brcs	.+14     	; 0x182e <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1824:	a8 d7       	rcall	.+3920   	; 0x2776 <xTaskNotifyStateClear>
    1826:	c9 d5       	rcall	.+2962   	; 0x23ba <xTaskGetCurrentTaskHandle>
    1828:	f5 01       	movw	r30, r10
    182a:	91 87       	std	Z+9, r25	; 0x09
    182c:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1832:	80 16       	cp	r8, r16
    1834:	91 06       	cpc	r9, r17
    1836:	b0 f0       	brcs	.+44     	; 0x1864 <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1838:	00 e0       	ldi	r16, 0x00	; 0
    183a:	10 e0       	ldi	r17, 0x00	; 0
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	a9 01       	movw	r20, r18
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	cb 01       	movw	r24, r22
    1848:	0b d6       	rcall	.+3094   	; 0x2460 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    184a:	f5 01       	movw	r30, r10
    184c:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    184e:	10 86       	std	Z+8, r1	; 0x08
    1850:	c5 01       	movw	r24, r10
    1852:	74 dd       	rcall	.-1304   	; 0x133c <prvBytesInBuffer>
    1854:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1856:	03 c0       	rjmp	.+6      	; 0x185e <xStreamBufferReceive+0xa2>
    1858:	c5 01       	movw	r24, r10
    185a:	70 dd       	rcall	.-1312   	; 0x133c <prvBytesInBuffer>
    185c:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    185e:	80 16       	cp	r8, r16
    1860:	91 06       	cpc	r9, r17
    1862:	b8 f5       	brcc	.+110    	; 0x18d2 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1864:	81 14       	cp	r8, r1
    1866:	91 04       	cpc	r9, r1
    1868:	c1 f0       	breq	.+48     	; 0x189a <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    186a:	f5 01       	movw	r30, r10
    186c:	e0 80       	ld	r14, Z
    186e:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1870:	98 01       	movw	r18, r16
    1872:	a4 01       	movw	r20, r8
    1874:	be 01       	movw	r22, r28
    1876:	6f 5f       	subi	r22, 0xFF	; 255
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	c5 01       	movw	r24, r10
    187c:	fb dd       	rcall	.-1034   	; 0x1474 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1882:	08 19       	sub	r16, r8
    1884:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1886:	68 16       	cp	r6, r24
    1888:	79 06       	cpc	r7, r25
    188a:	30 f4       	brcc	.+12     	; 0x1898 <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    188c:	f5 01       	movw	r30, r10
    188e:	f1 82       	std	Z+1, r15	; 0x01
    1890:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1892:	61 2c       	mov	r6, r1
    1894:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1896:	01 c0       	rjmp	.+2      	; 0x189a <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1898:	3c 01       	movw	r6, r24
    189a:	98 01       	movw	r18, r16
    189c:	a3 01       	movw	r20, r6
    189e:	b2 01       	movw	r22, r4
    18a0:	c5 01       	movw	r24, r10
    18a2:	e8 dd       	rcall	.-1072   	; 0x1474 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    18a4:	7c 01       	movw	r14, r24
    18a6:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    18a8:	b1 f0       	breq	.+44     	; 0x18d6 <xStreamBufferReceive+0x11a>
    18aa:	24 d2       	rcall	.+1096   	; 0x1cf4 <vTaskSuspendAll>
    18ac:	f5 01       	movw	r30, r10
    18ae:	82 85       	ldd	r24, Z+10	; 0x0a
    18b0:	93 85       	ldd	r25, Z+11	; 0x0b
    18b2:	89 2b       	or	r24, r25
    18b4:	61 f0       	breq	.+24     	; 0x18ce <xStreamBufferReceive+0x112>
    18b6:	82 85       	ldd	r24, Z+10	; 0x0a
    18b8:	93 85       	ldd	r25, Z+11	; 0x0b
    18ba:	00 e0       	ldi	r16, 0x00	; 0
    18bc:	10 e0       	ldi	r17, 0x00	; 0
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	ba 01       	movw	r22, r20
    18c6:	56 d6       	rcall	.+3244   	; 0x2574 <xTaskGenericNotify>
    18c8:	f5 01       	movw	r30, r10
    18ca:	13 86       	std	Z+11, r1	; 0x0b
    18cc:	12 86       	std	Z+10, r1	; 0x0a
    18ce:	fb d2       	rcall	.+1526   	; 0x1ec6 <xTaskResumeAll>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18d2:	e1 2c       	mov	r14, r1
    18d4:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18d6:	c7 01       	movw	r24, r14
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
    18f2:	8f 90       	pop	r8
    18f4:	7f 90       	pop	r7
    18f6:	6f 90       	pop	r6
    18f8:	5f 90       	pop	r5
    18fa:	4f 90       	pop	r4
    18fc:	08 95       	ret

000018fe <prvResetNextTaskUnblockTime>:
    18fe:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1902:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1906:	80 81       	ld	r24, Z
    1908:	81 11       	cpse	r24, r1
    190a:	0c c0       	rjmp	.+24     	; 0x1924 <prvResetNextTaskUnblockTime+0x26>
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	9f ef       	ldi	r25, 0xFF	; 255
    1910:	dc 01       	movw	r26, r24
    1912:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1916:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    191a:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    191e:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1922:	08 95       	ret
    1924:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1928:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    192c:	07 80       	ldd	r0, Z+7	; 0x07
    192e:	f0 85       	ldd	r31, Z+8	; 0x08
    1930:	e0 2d       	mov	r30, r0
    1932:	00 84       	ldd	r0, Z+8	; 0x08
    1934:	f1 85       	ldd	r31, Z+9	; 0x09
    1936:	e0 2d       	mov	r30, r0
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	a4 81       	ldd	r26, Z+4	; 0x04
    193e:	b5 81       	ldd	r27, Z+5	; 0x05
    1940:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1944:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1948:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    194c:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1950:	08 95       	ret

00001952 <prvAddCurrentTaskToDelayedList>:
    1952:	8f 92       	push	r8
    1954:	9f 92       	push	r9
    1956:	af 92       	push	r10
    1958:	bf 92       	push	r11
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	cf 93       	push	r28
    1964:	6b 01       	movw	r12, r22
    1966:	7c 01       	movw	r14, r24
    1968:	c4 2f       	mov	r28, r20
    196a:	80 90 b7 16 	lds	r8, 0x16B7	; 0x8016b7 <xTickCount>
    196e:	90 90 b8 16 	lds	r9, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1972:	a0 90 b9 16 	lds	r10, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    1976:	b0 90 ba 16 	lds	r11, 0x16BA	; 0x8016ba <xTickCount+0x3>
    197a:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    197e:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1982:	02 96       	adiw	r24, 0x02	; 2
    1984:	56 d8       	rcall	.-3924   	; 0xa32 <uxListRemove>
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	c8 16       	cp	r12, r24
    198a:	d8 06       	cpc	r13, r24
    198c:	e8 06       	cpc	r14, r24
    198e:	f8 06       	cpc	r15, r24
    1990:	69 f4       	brne	.+26     	; 0x19ac <prvAddCurrentTaskToDelayedList+0x5a>
    1992:	cc 23       	and	r28, r28
    1994:	59 f0       	breq	.+22     	; 0x19ac <prvAddCurrentTaskToDelayedList+0x5a>
    1996:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    199a:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    199e:	6e 5f       	subi	r22, 0xFE	; 254
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8c eb       	ldi	r24, 0xBC	; 188
    19a4:	96 e1       	ldi	r25, 0x16	; 22
    19a6:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <prvAddCurrentTaskToDelayedList+0xd8>
    19ac:	c8 0c       	add	r12, r8
    19ae:	d9 1c       	adc	r13, r9
    19b0:	ea 1c       	adc	r14, r10
    19b2:	fb 1c       	adc	r15, r11
    19b4:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    19b8:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    19bc:	c2 82       	std	Z+2, r12	; 0x02
    19be:	d3 82       	std	Z+3, r13	; 0x03
    19c0:	e4 82       	std	Z+4, r14	; 0x04
    19c2:	f5 82       	std	Z+5, r15	; 0x05
    19c4:	c8 14       	cp	r12, r8
    19c6:	d9 04       	cpc	r13, r9
    19c8:	ea 04       	cpc	r14, r10
    19ca:	fb 04       	cpc	r15, r11
    19cc:	68 f4       	brcc	.+26     	; 0x19e8 <prvAddCurrentTaskToDelayedList+0x96>
    19ce:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    19d2:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    19d6:	80 91 de 16 	lds	r24, 0x16DE	; 0x8016de <pxOverflowDelayedTaskList>
    19da:	90 91 df 16 	lds	r25, 0x16DF	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    19de:	6e 5f       	subi	r22, 0xFE	; 254
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    19e6:	21 c0       	rjmp	.+66     	; 0x1a2a <prvAddCurrentTaskToDelayedList+0xd8>
    19e8:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    19ec:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    19f0:	80 91 e0 16 	lds	r24, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    19f4:	90 91 e1 16 	lds	r25, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    19f8:	6e 5f       	subi	r22, 0xFE	; 254
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    1a00:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <xNextTaskUnblockTime>
    1a04:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1a08:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <xNextTaskUnblockTime+0x2>
    1a0c:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1a10:	c8 16       	cp	r12, r24
    1a12:	d9 06       	cpc	r13, r25
    1a14:	ea 06       	cpc	r14, r26
    1a16:	fb 06       	cpc	r15, r27
    1a18:	40 f4       	brcc	.+16     	; 0x1a2a <prvAddCurrentTaskToDelayedList+0xd8>
    1a1a:	c0 92 ad 16 	sts	0x16AD, r12	; 0x8016ad <xNextTaskUnblockTime>
    1a1e:	d0 92 ae 16 	sts	0x16AE, r13	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1a22:	e0 92 af 16 	sts	0x16AF, r14	; 0x8016af <xNextTaskUnblockTime+0x2>
    1a26:	f0 92 b0 16 	sts	0x16B0, r15	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1a2a:	cf 91       	pop	r28
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	bf 90       	pop	r11
    1a36:	af 90       	pop	r10
    1a38:	9f 90       	pop	r9
    1a3a:	8f 90       	pop	r8
    1a3c:	08 95       	ret

00001a3e <xTaskCreate>:
    1a3e:	4f 92       	push	r4
    1a40:	5f 92       	push	r5
    1a42:	6f 92       	push	r6
    1a44:	7f 92       	push	r7
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	4c 01       	movw	r8, r24
    1a5e:	6b 01       	movw	r12, r22
    1a60:	5a 01       	movw	r10, r20
    1a62:	29 01       	movw	r4, r18
    1a64:	ca 01       	movw	r24, r20
    1a66:	0e 94 bc 03 	call	0x778	; 0x778 <pvPortMalloc>
    1a6a:	3c 01       	movw	r6, r24
    1a6c:	89 2b       	or	r24, r25
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <xTaskCreate+0x34>
    1a70:	f4 c0       	rjmp	.+488    	; 0x1c5a <xTaskCreate+0x21c>
    1a72:	80 e3       	ldi	r24, 0x30	; 48
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 bc 03 	call	0x778	; 0x778 <pvPortMalloc>
    1a7a:	ec 01       	movw	r28, r24
    1a7c:	89 2b       	or	r24, r25
    1a7e:	99 f0       	breq	.+38     	; 0x1aa6 <xTaskCreate+0x68>
    1a80:	7c 8e       	std	Y+28, r7	; 0x1c
    1a82:	6b 8e       	std	Y+27, r6	; 0x1b
    1a84:	a5 01       	movw	r20, r10
    1a86:	65 ea       	ldi	r22, 0xA5	; 165
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	c3 01       	movw	r24, r6
    1a8c:	0e 94 b8 23 	call	0x4770	; 0x4770 <memset>
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	a2 1a       	sub	r10, r18
    1a94:	b1 08       	sbc	r11, r1
    1a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9a:	a8 0e       	add	r10, r24
    1a9c:	b9 1e       	adc	r11, r25
    1a9e:	c1 14       	cp	r12, r1
    1aa0:	d1 04       	cpc	r13, r1
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <xTaskCreate+0x70>
    1aa4:	20 c0       	rjmp	.+64     	; 0x1ae6 <xTaskCreate+0xa8>
    1aa6:	c3 01       	movw	r24, r6
    1aa8:	0e 94 75 04 	call	0x8ea	; 0x8ea <vPortFree>
    1aac:	d6 c0       	rjmp	.+428    	; 0x1c5a <xTaskCreate+0x21c>
    1aae:	d6 01       	movw	r26, r12
    1ab0:	8c 91       	ld	r24, X
    1ab2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab4:	8c 91       	ld	r24, X
    1ab6:	88 23       	and	r24, r24
    1ab8:	a1 f0       	breq	.+40     	; 0x1ae2 <xTaskCreate+0xa4>
    1aba:	ae 01       	movw	r20, r28
    1abc:	42 5e       	subi	r20, 0xE2	; 226
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	31 96       	adiw	r30, 0x01	; 1
    1ac4:	b8 e0       	ldi	r27, 0x08	; 8
    1ac6:	cb 0e       	add	r12, r27
    1ac8:	d1 1c       	adc	r13, r1
    1aca:	cf 01       	movw	r24, r30
    1acc:	21 91       	ld	r18, Z+
    1ace:	da 01       	movw	r26, r20
    1ad0:	2d 93       	st	X+, r18
    1ad2:	ad 01       	movw	r20, r26
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	8c 91       	ld	r24, X
    1ad8:	88 23       	and	r24, r24
    1ada:	19 f0       	breq	.+6      	; 0x1ae2 <xTaskCreate+0xa4>
    1adc:	ec 15       	cp	r30, r12
    1ade:	fd 05       	cpc	r31, r13
    1ae0:	a1 f7       	brne	.-24     	; 0x1aca <xTaskCreate+0x8c>
    1ae2:	1c a2       	std	Y+36, r1	; 0x24
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <xTaskCreate+0xaa>
    1ae6:	1d 8e       	std	Y+29, r1	; 0x1d
    1ae8:	04 30       	cpi	r16, 0x04	; 4
    1aea:	08 f0       	brcs	.+2      	; 0x1aee <xTaskCreate+0xb0>
    1aec:	03 e0       	ldi	r16, 0x03	; 3
    1aee:	0a 8f       	std	Y+26, r16	; 0x1a
    1af0:	0f a3       	std	Y+39, r16	; 0x27
    1af2:	18 a6       	std	Y+40, r1	; 0x28
    1af4:	6e 01       	movw	r12, r28
    1af6:	b2 e0       	ldi	r27, 0x02	; 2
    1af8:	cb 0e       	add	r12, r27
    1afa:	d1 1c       	adc	r13, r1
    1afc:	c6 01       	movw	r24, r12
    1afe:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialiseItem>
    1b02:	ce 01       	movw	r24, r28
    1b04:	0e 96       	adiw	r24, 0x0e	; 14
    1b06:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialiseItem>
    1b0a:	db 87       	std	Y+11, r29	; 0x0b
    1b0c:	ca 87       	std	Y+10, r28	; 0x0a
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	80 1b       	sub	r24, r16
    1b18:	91 09       	sbc	r25, r1
    1b1a:	a1 09       	sbc	r26, r1
    1b1c:	b1 09       	sbc	r27, r1
    1b1e:	8e 87       	std	Y+14, r24	; 0x0e
    1b20:	9f 87       	std	Y+15, r25	; 0x0f
    1b22:	a8 8b       	std	Y+16, r26	; 0x10
    1b24:	b9 8b       	std	Y+17, r27	; 0x11
    1b26:	df 8b       	std	Y+23, r29	; 0x17
    1b28:	ce 8b       	std	Y+22, r28	; 0x16
    1b2a:	1a a6       	std	Y+42, r1	; 0x2a
    1b2c:	19 a6       	std	Y+41, r1	; 0x29
    1b2e:	1b a6       	std	Y+43, r1	; 0x2b
    1b30:	1c a6       	std	Y+44, r1	; 0x2c
    1b32:	1d a6       	std	Y+45, r1	; 0x2d
    1b34:	1e a6       	std	Y+46, r1	; 0x2e
    1b36:	1f a6       	std	Y+47, r1	; 0x2f
    1b38:	a2 01       	movw	r20, r4
    1b3a:	b4 01       	movw	r22, r8
    1b3c:	c5 01       	movw	r24, r10
    1b3e:	0e 94 40 05 	call	0xa80	; 0xa80 <pxPortInitialiseStack>
    1b42:	99 83       	std	Y+1, r25	; 0x01
    1b44:	88 83       	st	Y, r24
    1b46:	e1 14       	cp	r14, r1
    1b48:	f1 04       	cpc	r15, r1
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <xTaskCreate+0x114>
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	d1 83       	std	Z+1, r29	; 0x01
    1b50:	c0 83       	st	Z, r28
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	0f 92       	push	r0
    1b58:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <uxCurrentNumberOfTasks>
    1b62:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    1b66:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1b6a:	89 2b       	or	r24, r25
    1b6c:	d1 f5       	brne	.+116    	; 0x1be2 <xTaskCreate+0x1a4>
    1b6e:	d0 93 25 17 	sts	0x1725, r29	; 0x801725 <pxCurrentTCB+0x1>
    1b72:	c0 93 24 17 	sts	0x1724, r28	; 0x801724 <pxCurrentTCB>
    1b76:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <xTaskCreate+0x142>
    1b7e:	41 c0       	rjmp	.+130    	; 0x1c02 <xTaskCreate+0x1c4>
    1b80:	88 ef       	ldi	r24, 0xF8	; 248
    1b82:	96 e1       	ldi	r25, 0x16	; 22
    1b84:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	97 e1       	ldi	r25, 0x17	; 23
    1b8c:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1b90:	8e e0       	ldi	r24, 0x0E	; 14
    1b92:	97 e1       	ldi	r25, 0x17	; 23
    1b94:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1b98:	89 e1       	ldi	r24, 0x19	; 25
    1b9a:	97 e1       	ldi	r25, 0x17	; 23
    1b9c:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1ba0:	8d ee       	ldi	r24, 0xED	; 237
    1ba2:	96 e1       	ldi	r25, 0x16	; 22
    1ba4:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1ba8:	82 ee       	ldi	r24, 0xE2	; 226
    1baa:	96 e1       	ldi	r25, 0x16	; 22
    1bac:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bb0:	83 ed       	ldi	r24, 0xD3	; 211
    1bb2:	96 e1       	ldi	r25, 0x16	; 22
    1bb4:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bb8:	88 ec       	ldi	r24, 0xC8	; 200
    1bba:	96 e1       	ldi	r25, 0x16	; 22
    1bbc:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bc0:	8c eb       	ldi	r24, 0xBC	; 188
    1bc2:	96 e1       	ldi	r25, 0x16	; 22
    1bc4:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bc8:	8d ee       	ldi	r24, 0xED	; 237
    1bca:	96 e1       	ldi	r25, 0x16	; 22
    1bcc:	90 93 e1 16 	sts	0x16E1, r25	; 0x8016e1 <pxDelayedTaskList+0x1>
    1bd0:	80 93 e0 16 	sts	0x16E0, r24	; 0x8016e0 <pxDelayedTaskList>
    1bd4:	82 ee       	ldi	r24, 0xE2	; 226
    1bd6:	96 e1       	ldi	r25, 0x16	; 22
    1bd8:	90 93 df 16 	sts	0x16DF, r25	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    1bdc:	80 93 de 16 	sts	0x16DE, r24	; 0x8016de <pxOverflowDelayedTaskList>
    1be0:	10 c0       	rjmp	.+32     	; 0x1c02 <xTaskCreate+0x1c4>
    1be2:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xSchedulerRunning>
    1be6:	81 11       	cpse	r24, r1
    1be8:	0c c0       	rjmp	.+24     	; 0x1c02 <xTaskCreate+0x1c4>
    1bea:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1bee:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1bf2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bf4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bf6:	89 17       	cp	r24, r25
    1bf8:	20 f0       	brcs	.+8      	; 0x1c02 <xTaskCreate+0x1c4>
    1bfa:	d0 93 25 17 	sts	0x1725, r29	; 0x801725 <pxCurrentTCB+0x1>
    1bfe:	c0 93 24 17 	sts	0x1724, r28	; 0x801724 <pxCurrentTCB>
    1c02:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <uxTaskNumber>
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <uxTaskNumber>
    1c0c:	8d a3       	std	Y+37, r24	; 0x25
    1c0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c10:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    1c14:	98 17       	cp	r25, r24
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <xTaskCreate+0x1de>
    1c18:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    1c1c:	fb e0       	ldi	r31, 0x0B	; 11
    1c1e:	8f 9f       	mul	r24, r31
    1c20:	c0 01       	movw	r24, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	b6 01       	movw	r22, r12
    1c26:	88 50       	subi	r24, 0x08	; 8
    1c28:	99 4e       	sbci	r25, 0xE9	; 233
    1c2a:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    1c2e:	0f 90       	pop	r0
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xSchedulerRunning>
    1c36:	88 23       	and	r24, r24
    1c38:	61 f0       	breq	.+24     	; 0x1c52 <xTaskCreate+0x214>
    1c3a:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1c3e:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1c42:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c46:	98 17       	cp	r25, r24
    1c48:	30 f4       	brcc	.+12     	; 0x1c56 <xTaskCreate+0x218>
    1c4a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <xTaskCreate+0x21e>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <xTaskCreate+0x21e>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <xTaskCreate+0x21e>
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	5f 90       	pop	r5
    1c78:	4f 90       	pop	r4
    1c7a:	08 95       	ret

00001c7c <vTaskStartScheduler>:
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	0f 2e       	mov	r0, r31
    1c84:	fb ea       	ldi	r31, 0xAB	; 171
    1c86:	ef 2e       	mov	r14, r31
    1c88:	f6 e1       	ldi	r31, 0x16	; 22
    1c8a:	ff 2e       	mov	r15, r31
    1c8c:	f0 2d       	mov	r31, r0
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 ec       	ldi	r20, 0xC0	; 192
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	65 e8       	ldi	r22, 0x85	; 133
    1c9a:	73 e0       	ldi	r23, 0x03	; 3
    1c9c:	8c e7       	ldi	r24, 0x7C	; 124
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	ce de       	rcall	.-612    	; 0x1a3e <xTaskCreate>
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	19 f5       	brne	.+70     	; 0x1cec <vTaskStartScheduler+0x70>
    1ca6:	ed d5       	rcall	.+3034   	; 0x2882 <xTimerCreateTimerTask>
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	01 f5       	brne	.+64     	; 0x1cec <vTaskStartScheduler+0x70>
    1cac:	f8 94       	cli
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1cb8:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1cbc:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1cc0:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <xSchedulerRunning>
    1cca:	10 92 b7 16 	sts	0x16B7, r1	; 0x8016b7 <xTickCount>
    1cce:	10 92 b8 16 	sts	0x16B8, r1	; 0x8016b8 <xTickCount+0x1>
    1cd2:	10 92 b9 16 	sts	0x16B9, r1	; 0x8016b9 <xTickCount+0x2>
    1cd6:	10 92 ba 16 	sts	0x16BA, r1	; 0x8016ba <xTickCount+0x3>
    1cda:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1cde:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1ce2:	81 a5       	ldd	r24, Z+41	; 0x29
    1ce4:	0e 94 5f 03 	call	0x6be	; 0x6be <task_switch_in>
    1ce8:	0e 94 b2 05 	call	0xb64	; 0xb64 <xPortStartScheduler>
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	08 95       	ret

00001cf4 <vTaskSuspendAll>:
    1cf4:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <uxSchedulerSuspended>
    1cfe:	08 95       	ret

00001d00 <xTaskGetTickCount>:
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	0f 92       	push	r0
    1d06:	60 91 b7 16 	lds	r22, 0x16B7	; 0x8016b7 <xTickCount>
    1d0a:	70 91 b8 16 	lds	r23, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1d0e:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    1d12:	90 91 ba 16 	lds	r25, 0x16BA	; 0x8016ba <xTickCount+0x3>
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	08 95       	ret

00001d1c <xTaskIncrementTick>:
    1d1c:	9f 92       	push	r9
    1d1e:	af 92       	push	r10
    1d20:	bf 92       	push	r11
    1d22:	cf 92       	push	r12
    1d24:	df 92       	push	r13
    1d26:	ef 92       	push	r14
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1d36:	81 11       	cpse	r24, r1
    1d38:	ad c0       	rjmp	.+346    	; 0x1e94 <xTaskIncrementTick+0x178>
    1d3a:	c0 90 b7 16 	lds	r12, 0x16B7	; 0x8016b7 <xTickCount>
    1d3e:	d0 90 b8 16 	lds	r13, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1d42:	e0 90 b9 16 	lds	r14, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    1d46:	f0 90 ba 16 	lds	r15, 0x16BA	; 0x8016ba <xTickCount+0x3>
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	c8 1a       	sub	r12, r24
    1d4e:	d8 0a       	sbc	r13, r24
    1d50:	e8 0a       	sbc	r14, r24
    1d52:	f8 0a       	sbc	r15, r24
    1d54:	c0 92 b7 16 	sts	0x16B7, r12	; 0x8016b7 <xTickCount>
    1d58:	d0 92 b8 16 	sts	0x16B8, r13	; 0x8016b8 <xTickCount+0x1>
    1d5c:	e0 92 b9 16 	sts	0x16B9, r14	; 0x8016b9 <xTickCount+0x2>
    1d60:	f0 92 ba 16 	sts	0x16BA, r15	; 0x8016ba <xTickCount+0x3>
    1d64:	c1 14       	cp	r12, r1
    1d66:	d1 04       	cpc	r13, r1
    1d68:	e1 04       	cpc	r14, r1
    1d6a:	f1 04       	cpc	r15, r1
    1d6c:	b1 f4       	brne	.+44     	; 0x1d9a <xTaskIncrementTick+0x7e>
    1d6e:	80 91 e0 16 	lds	r24, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1d72:	90 91 e1 16 	lds	r25, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1d76:	20 91 de 16 	lds	r18, 0x16DE	; 0x8016de <pxOverflowDelayedTaskList>
    1d7a:	30 91 df 16 	lds	r19, 0x16DF	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    1d7e:	30 93 e1 16 	sts	0x16E1, r19	; 0x8016e1 <pxDelayedTaskList+0x1>
    1d82:	20 93 e0 16 	sts	0x16E0, r18	; 0x8016e0 <pxDelayedTaskList>
    1d86:	90 93 df 16 	sts	0x16DF, r25	; 0x8016df <pxOverflowDelayedTaskList+0x1>
    1d8a:	80 93 de 16 	sts	0x16DE, r24	; 0x8016de <pxOverflowDelayedTaskList>
    1d8e:	80 91 b2 16 	lds	r24, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	80 93 b2 16 	sts	0x16B2, r24	; 0x8016b2 <xNumOfOverflows>
    1d98:	b2 dd       	rcall	.-1180   	; 0x18fe <prvResetNextTaskUnblockTime>
    1d9a:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <xNextTaskUnblockTime>
    1d9e:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1da2:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <xNextTaskUnblockTime+0x2>
    1da6:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1daa:	c8 16       	cp	r12, r24
    1dac:	d9 06       	cpc	r13, r25
    1dae:	ea 06       	cpc	r14, r26
    1db0:	fb 06       	cpc	r15, r27
    1db2:	10 f4       	brcc	.+4      	; 0x1db8 <xTaskIncrementTick+0x9c>
    1db4:	b1 2c       	mov	r11, r1
    1db6:	5d c0       	rjmp	.+186    	; 0x1e72 <xTaskIncrementTick+0x156>
    1db8:	b1 2c       	mov	r11, r1
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	fb e0       	ldi	r31, 0x0B	; 11
    1dbe:	af 2e       	mov	r10, r31
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	99 24       	eor	r9, r9
    1dc4:	93 94       	inc	r9
    1dc6:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1dca:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1dce:	80 81       	ld	r24, Z
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	0c c0       	rjmp	.+24     	; 0x1dec <xTaskIncrementTick+0xd0>
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	9f ef       	ldi	r25, 0xFF	; 255
    1dd8:	dc 01       	movw	r26, r24
    1dda:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1dde:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1de2:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1de6:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1dea:	43 c0       	rjmp	.+134    	; 0x1e72 <xTaskIncrementTick+0x156>
    1dec:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <pxDelayedTaskList>
    1df0:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <pxDelayedTaskList+0x1>
    1df4:	07 80       	ldd	r0, Z+7	; 0x07
    1df6:	f0 85       	ldd	r31, Z+8	; 0x08
    1df8:	e0 2d       	mov	r30, r0
    1dfa:	c0 85       	ldd	r28, Z+8	; 0x08
    1dfc:	d1 85       	ldd	r29, Z+9	; 0x09
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	ac 81       	ldd	r26, Y+4	; 0x04
    1e04:	bd 81       	ldd	r27, Y+5	; 0x05
    1e06:	c8 16       	cp	r12, r24
    1e08:	d9 06       	cpc	r13, r25
    1e0a:	ea 06       	cpc	r14, r26
    1e0c:	fb 06       	cpc	r15, r27
    1e0e:	48 f4       	brcc	.+18     	; 0x1e22 <xTaskIncrementTick+0x106>
    1e10:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <xNextTaskUnblockTime>
    1e14:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <xNextTaskUnblockTime+0x1>
    1e18:	a0 93 af 16 	sts	0x16AF, r26	; 0x8016af <xNextTaskUnblockTime+0x2>
    1e1c:	b0 93 b0 16 	sts	0x16B0, r27	; 0x8016b0 <xNextTaskUnblockTime+0x3>
    1e20:	28 c0       	rjmp	.+80     	; 0x1e72 <xTaskIncrementTick+0x156>
    1e22:	8e 01       	movw	r16, r28
    1e24:	0e 5f       	subi	r16, 0xFE	; 254
    1e26:	1f 4f       	sbci	r17, 0xFF	; 255
    1e28:	c8 01       	movw	r24, r16
    1e2a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1e2e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e30:	99 8d       	ldd	r25, Y+25	; 0x19
    1e32:	89 2b       	or	r24, r25
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <xTaskIncrementTick+0x122>
    1e36:	ce 01       	movw	r24, r28
    1e38:	0e 96       	adiw	r24, 0x0e	; 14
    1e3a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1e3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e40:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    1e44:	98 17       	cp	r25, r24
    1e46:	10 f4       	brcc	.+4      	; 0x1e4c <xTaskIncrementTick+0x130>
    1e48:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    1e4c:	a8 9e       	mul	r10, r24
    1e4e:	c0 01       	movw	r24, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	b8 01       	movw	r22, r16
    1e54:	88 50       	subi	r24, 0x08	; 8
    1e56:	99 4e       	sbci	r25, 0xE9	; 233
    1e58:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    1e5c:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1e60:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1e64:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e66:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e68:	98 17       	cp	r25, r24
    1e6a:	08 f4       	brcc	.+2      	; 0x1e6e <xTaskIncrementTick+0x152>
    1e6c:	ac cf       	rjmp	.-168    	; 0x1dc6 <xTaskIncrementTick+0xaa>
    1e6e:	b9 2c       	mov	r11, r9
    1e70:	aa cf       	rjmp	.-172    	; 0x1dc6 <xTaskIncrementTick+0xaa>
    1e72:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1e76:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1e7a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e7c:	8b e0       	ldi	r24, 0x0B	; 11
    1e7e:	e8 9f       	mul	r30, r24
    1e80:	f0 01       	movw	r30, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	e8 50       	subi	r30, 0x08	; 8
    1e86:	f9 4e       	sbci	r31, 0xE9	; 233
    1e88:	80 81       	ld	r24, Z
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	48 f0       	brcs	.+18     	; 0x1ea0 <xTaskIncrementTick+0x184>
    1e8e:	bb 24       	eor	r11, r11
    1e90:	b3 94       	inc	r11
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <xTaskIncrementTick+0x184>
    1e94:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <uxPendedTicks>
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	80 93 b4 16 	sts	0x16B4, r24	; 0x8016b4 <uxPendedTicks>
    1e9e:	b1 2c       	mov	r11, r1
    1ea0:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <xYieldPending>
    1ea4:	88 23       	and	r24, r24
    1ea6:	11 f0       	breq	.+4      	; 0x1eac <xTaskIncrementTick+0x190>
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	b3 94       	inc	r11
    1eac:	8b 2d       	mov	r24, r11
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	08 95       	ret

00001ec6 <xTaskResumeAll>:
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	0f 92       	push	r0
    1edc:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1ee0:	81 50       	subi	r24, 0x01	; 1
    1ee2:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <uxSchedulerSuspended>
    1ee6:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    1eea:	81 11       	cpse	r24, r1
    1eec:	5a c0       	rjmp	.+180    	; 0x1fa2 <xTaskResumeAll+0xdc>
    1eee:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <uxCurrentNumberOfTasks>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	2c c0       	rjmp	.+88     	; 0x1f4e <xTaskResumeAll+0x88>
    1ef6:	58 c0       	rjmp	.+176    	; 0x1fa8 <xTaskResumeAll+0xe2>
    1ef8:	d7 01       	movw	r26, r14
    1efa:	17 96       	adiw	r26, 0x07	; 7
    1efc:	ed 91       	ld	r30, X+
    1efe:	fc 91       	ld	r31, X
    1f00:	18 97       	sbiw	r26, 0x08	; 8
    1f02:	c0 85       	ldd	r28, Z+8	; 0x08
    1f04:	d1 85       	ldd	r29, Z+9	; 0x09
    1f06:	ce 01       	movw	r24, r28
    1f08:	0e 96       	adiw	r24, 0x0e	; 14
    1f0a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1f0e:	8e 01       	movw	r16, r28
    1f10:	0e 5f       	subi	r16, 0xFE	; 254
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	c8 01       	movw	r24, r16
    1f16:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1f1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f1c:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    1f20:	98 17       	cp	r25, r24
    1f22:	10 f4       	brcc	.+4      	; 0x1f28 <xTaskResumeAll+0x62>
    1f24:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    1f28:	d8 9e       	mul	r13, r24
    1f2a:	c0 01       	movw	r24, r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	b8 01       	movw	r22, r16
    1f30:	88 50       	subi	r24, 0x08	; 8
    1f32:	99 4e       	sbci	r25, 0xE9	; 233
    1f34:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    1f38:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    1f3c:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    1f40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f42:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f44:	98 17       	cp	r25, r24
    1f46:	88 f0       	brcs	.+34     	; 0x1f6a <xTaskResumeAll+0xa4>
    1f48:	c0 92 b3 16 	sts	0x16B3, r12	; 0x8016b3 <xYieldPending>
    1f4c:	0e c0       	rjmp	.+28     	; 0x1f6a <xTaskResumeAll+0xa4>
    1f4e:	c0 e0       	ldi	r28, 0x00	; 0
    1f50:	d0 e0       	ldi	r29, 0x00	; 0
    1f52:	0f 2e       	mov	r0, r31
    1f54:	f3 ed       	ldi	r31, 0xD3	; 211
    1f56:	ef 2e       	mov	r14, r31
    1f58:	f6 e1       	ldi	r31, 0x16	; 22
    1f5a:	ff 2e       	mov	r15, r31
    1f5c:	f0 2d       	mov	r31, r0
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	fb e0       	ldi	r31, 0x0B	; 11
    1f62:	df 2e       	mov	r13, r31
    1f64:	f0 2d       	mov	r31, r0
    1f66:	cc 24       	eor	r12, r12
    1f68:	c3 94       	inc	r12
    1f6a:	f7 01       	movw	r30, r14
    1f6c:	80 81       	ld	r24, Z
    1f6e:	81 11       	cpse	r24, r1
    1f70:	c3 cf       	rjmp	.-122    	; 0x1ef8 <xTaskResumeAll+0x32>
    1f72:	cd 2b       	or	r28, r29
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <xTaskResumeAll+0xb2>
    1f76:	c3 dc       	rcall	.-1658   	; 0x18fe <prvResetNextTaskUnblockTime>
    1f78:	c0 91 b4 16 	lds	r28, 0x16B4	; 0x8016b4 <uxPendedTicks>
    1f7c:	cc 23       	and	r28, r28
    1f7e:	49 f0       	breq	.+18     	; 0x1f92 <xTaskResumeAll+0xcc>
    1f80:	d1 e0       	ldi	r29, 0x01	; 1
    1f82:	cc de       	rcall	.-616    	; 0x1d1c <xTaskIncrementTick>
    1f84:	81 11       	cpse	r24, r1
    1f86:	d0 93 b3 16 	sts	0x16B3, r29	; 0x8016b3 <xYieldPending>
    1f8a:	c1 50       	subi	r28, 0x01	; 1
    1f8c:	d1 f7       	brne	.-12     	; 0x1f82 <xTaskResumeAll+0xbc>
    1f8e:	10 92 b4 16 	sts	0x16B4, r1	; 0x8016b4 <uxPendedTicks>
    1f92:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <xYieldPending>
    1f96:	88 23       	and	r24, r24
    1f98:	31 f0       	breq	.+12     	; 0x1fa6 <xTaskResumeAll+0xe0>
    1f9a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <xTaskResumeAll+0xe2>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <xTaskResumeAll+0xe2>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	cf 90       	pop	r12
    1fbc:	08 95       	ret

00001fbe <vTaskDelayUntil>:
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	6a 01       	movw	r12, r20
    1fd2:	7b 01       	movw	r14, r22
    1fd4:	8f de       	rcall	.-738    	; 0x1cf4 <vTaskSuspendAll>
    1fd6:	00 91 b7 16 	lds	r16, 0x16B7	; 0x8016b7 <xTickCount>
    1fda:	10 91 b8 16 	lds	r17, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    1fde:	20 91 b9 16 	lds	r18, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    1fe2:	30 91 ba 16 	lds	r19, 0x16BA	; 0x8016ba <xTickCount+0x3>
    1fe6:	88 81       	ld	r24, Y
    1fe8:	99 81       	ldd	r25, Y+1	; 0x01
    1fea:	aa 81       	ldd	r26, Y+2	; 0x02
    1fec:	bb 81       	ldd	r27, Y+3	; 0x03
    1fee:	ac 01       	movw	r20, r24
    1ff0:	bd 01       	movw	r22, r26
    1ff2:	4c 0d       	add	r20, r12
    1ff4:	5d 1d       	adc	r21, r13
    1ff6:	6e 1d       	adc	r22, r14
    1ff8:	7f 1d       	adc	r23, r15
    1ffa:	08 17       	cp	r16, r24
    1ffc:	19 07       	cpc	r17, r25
    1ffe:	2a 07       	cpc	r18, r26
    2000:	3b 07       	cpc	r19, r27
    2002:	78 f4       	brcc	.+30     	; 0x2022 <vTaskDelayUntil+0x64>
    2004:	48 17       	cp	r20, r24
    2006:	59 07       	cpc	r21, r25
    2008:	6a 07       	cpc	r22, r26
    200a:	7b 07       	cpc	r23, r27
    200c:	40 f5       	brcc	.+80     	; 0x205e <vTaskDelayUntil+0xa0>
    200e:	48 83       	st	Y, r20
    2010:	59 83       	std	Y+1, r21	; 0x01
    2012:	6a 83       	std	Y+2, r22	; 0x02
    2014:	7b 83       	std	Y+3, r23	; 0x03
    2016:	04 17       	cp	r16, r20
    2018:	15 07       	cpc	r17, r21
    201a:	26 07       	cpc	r18, r22
    201c:	37 07       	cpc	r19, r23
    201e:	a0 f4       	brcc	.+40     	; 0x2048 <vTaskDelayUntil+0x8a>
    2020:	0b c0       	rjmp	.+22     	; 0x2038 <vTaskDelayUntil+0x7a>
    2022:	48 17       	cp	r20, r24
    2024:	59 07       	cpc	r21, r25
    2026:	6a 07       	cpc	r22, r26
    2028:	7b 07       	cpc	r23, r27
    202a:	a0 f0       	brcs	.+40     	; 0x2054 <vTaskDelayUntil+0x96>
    202c:	04 17       	cp	r16, r20
    202e:	15 07       	cpc	r17, r21
    2030:	26 07       	cpc	r18, r22
    2032:	37 07       	cpc	r19, r23
    2034:	78 f0       	brcs	.+30     	; 0x2054 <vTaskDelayUntil+0x96>
    2036:	13 c0       	rjmp	.+38     	; 0x205e <vTaskDelayUntil+0xa0>
    2038:	cb 01       	movw	r24, r22
    203a:	ba 01       	movw	r22, r20
    203c:	60 1b       	sub	r22, r16
    203e:	71 0b       	sbc	r23, r17
    2040:	82 0b       	sbc	r24, r18
    2042:	93 0b       	sbc	r25, r19
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	85 dc       	rcall	.-1782   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    2048:	3e df       	rcall	.-388    	; 0x1ec6 <xTaskResumeAll>
    204a:	81 11       	cpse	r24, r1
    204c:	0d c0       	rjmp	.+26     	; 0x2068 <vTaskDelayUntil+0xaa>
    204e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    2052:	0a c0       	rjmp	.+20     	; 0x2068 <vTaskDelayUntil+0xaa>
    2054:	48 83       	st	Y, r20
    2056:	59 83       	std	Y+1, r21	; 0x01
    2058:	6a 83       	std	Y+2, r22	; 0x02
    205a:	7b 83       	std	Y+3, r23	; 0x03
    205c:	ed cf       	rjmp	.-38     	; 0x2038 <vTaskDelayUntil+0x7a>
    205e:	48 83       	st	Y, r20
    2060:	59 83       	std	Y+1, r21	; 0x01
    2062:	6a 83       	std	Y+2, r22	; 0x02
    2064:	7b 83       	std	Y+3, r23	; 0x03
    2066:	f0 cf       	rjmp	.-32     	; 0x2048 <vTaskDelayUntil+0x8a>
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	08 95       	ret

0000207a <vTaskDelay>:
    207a:	cf 92       	push	r12
    207c:	df 92       	push	r13
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	6b 01       	movw	r12, r22
    2084:	7c 01       	movw	r14, r24
    2086:	67 2b       	or	r22, r23
    2088:	68 2b       	or	r22, r24
    208a:	69 2b       	or	r22, r25
    208c:	41 f0       	breq	.+16     	; 0x209e <vTaskDelay+0x24>
    208e:	32 de       	rcall	.-924    	; 0x1cf4 <vTaskSuspendAll>
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	c7 01       	movw	r24, r14
    2094:	b6 01       	movw	r22, r12
    2096:	5d dc       	rcall	.-1862   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    2098:	16 df       	rcall	.-468    	; 0x1ec6 <xTaskResumeAll>
    209a:	81 11       	cpse	r24, r1
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <vTaskDelay+0x28>
    209e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	08 95       	ret

000020ac <vTaskSetApplicationTaskTag>:
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <vTaskSetApplicationTaskTag+0xc>
    20b0:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    20b4:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	0f 92       	push	r0
    20be:	fc 01       	movw	r30, r24
    20c0:	72 a7       	std	Z+42, r23	; 0x2a
    20c2:	61 a7       	std	Z+41, r22	; 0x29
    20c4:	0f 90       	pop	r0
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	08 95       	ret

000020ca <vTaskSwitchContext>:
    20ca:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    20ce:	88 23       	and	r24, r24
    20d0:	21 f0       	breq	.+8      	; 0x20da <vTaskSwitchContext+0x10>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    20d8:	08 95       	ret
    20da:	10 92 b3 16 	sts	0x16B3, r1	; 0x8016b3 <xYieldPending>
    20de:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    20e2:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    20e6:	81 a5       	ldd	r24, Z+41	; 0x29
    20e8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <task_switch_out>
    20ec:	a0 91 24 17 	lds	r26, 0x1724	; 0x801724 <pxCurrentTCB>
    20f0:	b0 91 25 17 	lds	r27, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    20f4:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    20f8:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    20fc:	2d 91       	ld	r18, X+
    20fe:	3c 91       	ld	r19, X
    2100:	83 8d       	ldd	r24, Z+27	; 0x1b
    2102:	94 8d       	ldd	r25, Z+28	; 0x1c
    2104:	82 17       	cp	r24, r18
    2106:	93 07       	cpc	r25, r19
    2108:	58 f0       	brcs	.+22     	; 0x2120 <vTaskSwitchContext+0x56>
    210a:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    210e:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2112:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    2116:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    211a:	63 5e       	subi	r22, 0xE3	; 227
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	d3 d4       	rcall	.+2470   	; 0x2ac6 <vApplicationStackOverflowHook>
    2120:	80 91 b6 16 	lds	r24, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	9b e0       	ldi	r25, 0x0B	; 11
    212a:	89 9f       	mul	r24, r25
    212c:	f0 01       	movw	r30, r0
    212e:	11 24       	eor	r1, r1
    2130:	e8 50       	subi	r30, 0x08	; 8
    2132:	f9 4e       	sbci	r31, 0xE9	; 233
    2134:	90 81       	ld	r25, Z
    2136:	91 11       	cpse	r25, r1
    2138:	0e c0       	rjmp	.+28     	; 0x2156 <vTaskSwitchContext+0x8c>
    213a:	4b e0       	ldi	r20, 0x0B	; 11
    213c:	81 50       	subi	r24, 0x01	; 1
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	42 9f       	mul	r20, r18
    2144:	f0 01       	movw	r30, r0
    2146:	43 9f       	mul	r20, r19
    2148:	f0 0d       	add	r31, r0
    214a:	11 24       	eor	r1, r1
    214c:	e8 50       	subi	r30, 0x08	; 8
    214e:	f9 4e       	sbci	r31, 0xE9	; 233
    2150:	90 81       	ld	r25, Z
    2152:	99 23       	and	r25, r25
    2154:	99 f3       	breq	.-26     	; 0x213c <vTaskSwitchContext+0x72>
    2156:	9b e0       	ldi	r25, 0x0B	; 11
    2158:	92 9f       	mul	r25, r18
    215a:	a0 01       	movw	r20, r0
    215c:	93 9f       	mul	r25, r19
    215e:	50 0d       	add	r21, r0
    2160:	11 24       	eor	r1, r1
    2162:	da 01       	movw	r26, r20
    2164:	a8 50       	subi	r26, 0x08	; 8
    2166:	b9 4e       	sbci	r27, 0xE9	; 233
    2168:	11 96       	adiw	r26, 0x01	; 1
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	12 97       	sbiw	r26, 0x02	; 2
    2170:	04 80       	ldd	r0, Z+4	; 0x04
    2172:	f5 81       	ldd	r31, Z+5	; 0x05
    2174:	e0 2d       	mov	r30, r0
    2176:	12 96       	adiw	r26, 0x02	; 2
    2178:	fc 93       	st	X, r31
    217a:	ee 93       	st	-X, r30
    217c:	11 97       	sbiw	r26, 0x01	; 1
    217e:	45 50       	subi	r20, 0x05	; 5
    2180:	59 4e       	sbci	r21, 0xE9	; 233
    2182:	e4 17       	cp	r30, r20
    2184:	f5 07       	cpc	r31, r21
    2186:	29 f4       	brne	.+10     	; 0x2192 <vTaskSwitchContext+0xc8>
    2188:	44 81       	ldd	r20, Z+4	; 0x04
    218a:	55 81       	ldd	r21, Z+5	; 0x05
    218c:	fd 01       	movw	r30, r26
    218e:	52 83       	std	Z+2, r21	; 0x02
    2190:	41 83       	std	Z+1, r20	; 0x01
    2192:	9b e0       	ldi	r25, 0x0B	; 11
    2194:	92 9f       	mul	r25, r18
    2196:	f0 01       	movw	r30, r0
    2198:	93 9f       	mul	r25, r19
    219a:	f0 0d       	add	r31, r0
    219c:	11 24       	eor	r1, r1
    219e:	e8 50       	subi	r30, 0x08	; 8
    21a0:	f9 4e       	sbci	r31, 0xE9	; 233
    21a2:	01 80       	ldd	r0, Z+1	; 0x01
    21a4:	f2 81       	ldd	r31, Z+2	; 0x02
    21a6:	e0 2d       	mov	r30, r0
    21a8:	20 85       	ldd	r18, Z+8	; 0x08
    21aa:	31 85       	ldd	r19, Z+9	; 0x09
    21ac:	30 93 25 17 	sts	0x1725, r19	; 0x801725 <pxCurrentTCB+0x1>
    21b0:	20 93 24 17 	sts	0x1724, r18	; 0x801724 <pxCurrentTCB>
    21b4:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    21b8:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    21bc:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    21c0:	81 a5       	ldd	r24, Z+41	; 0x29
    21c2:	0c 94 5f 03 	jmp	0x6be	; 0x6be <task_switch_in>
    21c6:	08 95       	ret

000021c8 <vTaskPlaceOnEventList>:
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	6a 01       	movw	r12, r20
    21d2:	7b 01       	movw	r14, r22
    21d4:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    21d8:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    21dc:	62 5f       	subi	r22, 0xF2	; 242
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    21e4:	41 e0       	ldi	r20, 0x01	; 1
    21e6:	c7 01       	movw	r24, r14
    21e8:	b6 01       	movw	r22, r12
    21ea:	b3 db       	rcall	.-2202   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	08 95       	ret

000021f6 <vTaskPlaceOnEventListRestricted>:
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	cf 93       	push	r28
    2200:	6a 01       	movw	r12, r20
    2202:	7b 01       	movw	r14, r22
    2204:	c2 2f       	mov	r28, r18
    2206:	60 91 24 17 	lds	r22, 0x1724	; 0x801724 <pxCurrentTCB>
    220a:	70 91 25 17 	lds	r23, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    220e:	62 5f       	subi	r22, 0xF2	; 242
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2216:	cc 23       	and	r28, r28
    2218:	21 f0       	breq	.+8      	; 0x2222 <__stack+0x23>
    221a:	cc 24       	eor	r12, r12
    221c:	ca 94       	dec	r12
    221e:	dc 2c       	mov	r13, r12
    2220:	76 01       	movw	r14, r12
    2222:	4c 2f       	mov	r20, r28
    2224:	c7 01       	movw	r24, r14
    2226:	b6 01       	movw	r22, r12
    2228:	94 db       	rcall	.-2264   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    222a:	cf 91       	pop	r28
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	08 95       	ret

00002236 <xTaskRemoveFromEventList>:
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	dc 01       	movw	r26, r24
    2240:	17 96       	adiw	r26, 0x07	; 7
    2242:	ed 91       	ld	r30, X+
    2244:	fc 91       	ld	r31, X
    2246:	18 97       	sbiw	r26, 0x08	; 8
    2248:	c0 85       	ldd	r28, Z+8	; 0x08
    224a:	d1 85       	ldd	r29, Z+9	; 0x09
    224c:	8e 01       	movw	r16, r28
    224e:	02 5f       	subi	r16, 0xF2	; 242
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	c8 01       	movw	r24, r16
    2254:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    2258:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    225c:	81 11       	cpse	r24, r1
    225e:	16 c0       	rjmp	.+44     	; 0x228c <xTaskRemoveFromEventList+0x56>
    2260:	0c 50       	subi	r16, 0x0C	; 12
    2262:	11 09       	sbc	r17, r1
    2264:	c8 01       	movw	r24, r16
    2266:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    226a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    226c:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    2270:	98 17       	cp	r25, r24
    2272:	10 f4       	brcc	.+4      	; 0x2278 <xTaskRemoveFromEventList+0x42>
    2274:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    2278:	bb e0       	ldi	r27, 0x0B	; 11
    227a:	8b 9f       	mul	r24, r27
    227c:	c0 01       	movw	r24, r0
    227e:	11 24       	eor	r1, r1
    2280:	b8 01       	movw	r22, r16
    2282:	88 50       	subi	r24, 0x08	; 8
    2284:	99 4e       	sbci	r25, 0xE9	; 233
    2286:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <xTaskRemoveFromEventList+0x60>
    228c:	b8 01       	movw	r22, r16
    228e:	83 ed       	ldi	r24, 0xD3	; 211
    2290:	96 e1       	ldi	r25, 0x16	; 22
    2292:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2296:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    229a:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    229e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    22a2:	89 17       	cp	r24, r25
    22a4:	20 f4       	brcc	.+8      	; 0x22ae <xTaskRemoveFromEventList+0x78>
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    22ac:	01 c0       	rjmp	.+2      	; 0x22b0 <xTaskRemoveFromEventList+0x7a>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <vTaskSetTimeOutState>:
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	0f 92       	push	r0
    22c0:	20 91 b2 16 	lds	r18, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    22c4:	fc 01       	movw	r30, r24
    22c6:	20 83       	st	Z, r18
    22c8:	40 91 b7 16 	lds	r20, 0x16B7	; 0x8016b7 <xTickCount>
    22cc:	50 91 b8 16 	lds	r21, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    22d0:	60 91 b9 16 	lds	r22, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    22d4:	70 91 ba 16 	lds	r23, 0x16BA	; 0x8016ba <xTickCount+0x3>
    22d8:	41 83       	std	Z+1, r20	; 0x01
    22da:	52 83       	std	Z+2, r21	; 0x02
    22dc:	63 83       	std	Z+3, r22	; 0x03
    22de:	74 83       	std	Z+4, r23	; 0x04
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	08 95       	ret

000022e6 <vTaskInternalSetTimeOutState>:
    22e6:	20 91 b2 16 	lds	r18, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    22ea:	fc 01       	movw	r30, r24
    22ec:	20 83       	st	Z, r18
    22ee:	40 91 b7 16 	lds	r20, 0x16B7	; 0x8016b7 <xTickCount>
    22f2:	50 91 b8 16 	lds	r21, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    22f6:	60 91 b9 16 	lds	r22, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    22fa:	70 91 ba 16 	lds	r23, 0x16BA	; 0x8016ba <xTickCount+0x3>
    22fe:	41 83       	std	Z+1, r20	; 0x01
    2300:	52 83       	std	Z+2, r21	; 0x02
    2302:	63 83       	std	Z+3, r22	; 0x03
    2304:	74 83       	std	Z+4, r23	; 0x04
    2306:	08 95       	ret

00002308 <xTaskCheckForTimeOut>:
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	fb 01       	movw	r30, r22
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	0f 92       	push	r0
    2320:	40 91 b7 16 	lds	r20, 0x16B7	; 0x8016b7 <xTickCount>
    2324:	50 91 b8 16 	lds	r21, 0x16B8	; 0x8016b8 <xTickCount+0x1>
    2328:	60 91 b9 16 	lds	r22, 0x16B9	; 0x8016b9 <xTickCount+0x2>
    232c:	70 91 ba 16 	lds	r23, 0x16BA	; 0x8016ba <xTickCount+0x3>
    2330:	00 81       	ld	r16, Z
    2332:	11 81       	ldd	r17, Z+1	; 0x01
    2334:	22 81       	ldd	r18, Z+2	; 0x02
    2336:	33 81       	ldd	r19, Z+3	; 0x03
    2338:	0f 3f       	cpi	r16, 0xFF	; 255
    233a:	af ef       	ldi	r26, 0xFF	; 255
    233c:	1a 07       	cpc	r17, r26
    233e:	2a 07       	cpc	r18, r26
    2340:	3a 07       	cpc	r19, r26
    2342:	49 f1       	breq	.+82     	; 0x2396 <xTaskCheckForTimeOut+0x8e>
    2344:	ec 01       	movw	r28, r24
    2346:	c9 80       	ldd	r12, Y+1	; 0x01
    2348:	da 80       	ldd	r13, Y+2	; 0x02
    234a:	eb 80       	ldd	r14, Y+3	; 0x03
    234c:	fc 80       	ldd	r15, Y+4	; 0x04
    234e:	a0 91 b2 16 	lds	r26, 0x16B2	; 0x8016b2 <xNumOfOverflows>
    2352:	b8 81       	ld	r27, Y
    2354:	ba 17       	cp	r27, r26
    2356:	29 f0       	breq	.+10     	; 0x2362 <xTaskCheckForTimeOut+0x5a>
    2358:	4c 15       	cp	r20, r12
    235a:	5d 05       	cpc	r21, r13
    235c:	6e 05       	cpc	r22, r14
    235e:	7f 05       	cpc	r23, r15
    2360:	e0 f4       	brcc	.+56     	; 0x239a <xTaskCheckForTimeOut+0x92>
    2362:	4c 19       	sub	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	6e 09       	sbc	r22, r14
    2368:	7f 09       	sbc	r23, r15
    236a:	40 17       	cp	r20, r16
    236c:	51 07       	cpc	r21, r17
    236e:	62 07       	cpc	r22, r18
    2370:	73 07       	cpc	r23, r19
    2372:	58 f4       	brcc	.+22     	; 0x238a <xTaskCheckForTimeOut+0x82>
    2374:	04 1b       	sub	r16, r20
    2376:	15 0b       	sbc	r17, r21
    2378:	26 0b       	sbc	r18, r22
    237a:	37 0b       	sbc	r19, r23
    237c:	00 83       	st	Z, r16
    237e:	11 83       	std	Z+1, r17	; 0x01
    2380:	22 83       	std	Z+2, r18	; 0x02
    2382:	33 83       	std	Z+3, r19	; 0x03
    2384:	b0 df       	rcall	.-160    	; 0x22e6 <vTaskInternalSetTimeOutState>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	09 c0       	rjmp	.+18     	; 0x239c <xTaskCheckForTimeOut+0x94>
    238a:	10 82       	st	Z, r1
    238c:	11 82       	std	Z+1, r1	; 0x01
    238e:	12 82       	std	Z+2, r1	; 0x02
    2390:	13 82       	std	Z+3, r1	; 0x03
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	03 c0       	rjmp	.+6      	; 0x239c <xTaskCheckForTimeOut+0x94>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	01 c0       	rjmp	.+2      	; 0x239c <xTaskCheckForTimeOut+0x94>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	0f 90       	pop	r0
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	08 95       	ret

000023b2 <vTaskMissedYield>:
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    23b8:	08 95       	ret

000023ba <xTaskGetCurrentTaskHandle>:
    23ba:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    23be:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    23c2:	08 95       	ret

000023c4 <xTaskGetSchedulerState>:
    23c4:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xSchedulerRunning>
    23c8:	88 23       	and	r24, r24
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <xTaskGetSchedulerState+0x14>
    23cc:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    23d0:	88 23       	and	r24, r24
    23d2:	21 f0       	breq	.+8      	; 0x23dc <xTaskGetSchedulerState+0x18>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	08 95       	ret
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	08 95       	ret
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	08 95       	ret

000023e0 <xTaskPriorityDisinherit>:
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	fc 01       	movw	r30, r24
    23ea:	89 2b       	or	r24, r25
    23ec:	79 f1       	breq	.+94     	; 0x244c <xTaskPriorityDisinherit+0x6c>
    23ee:	80 a5       	ldd	r24, Z+40	; 0x28
    23f0:	81 50       	subi	r24, 0x01	; 1
    23f2:	80 a7       	std	Z+40, r24	; 0x28
    23f4:	22 8d       	ldd	r18, Z+26	; 0x1a
    23f6:	97 a1       	ldd	r25, Z+39	; 0x27
    23f8:	29 17       	cp	r18, r25
    23fa:	51 f1       	breq	.+84     	; 0x2450 <xTaskPriorityDisinherit+0x70>
    23fc:	81 11       	cpse	r24, r1
    23fe:	2a c0       	rjmp	.+84     	; 0x2454 <xTaskPriorityDisinherit+0x74>
    2400:	ef 01       	movw	r28, r30
    2402:	8f 01       	movw	r16, r30
    2404:	0e 5f       	subi	r16, 0xFE	; 254
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	c8 01       	movw	r24, r16
    240a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    240e:	8f a1       	ldd	r24, Y+39	; 0x27
    2410:	8a 8f       	std	Y+26, r24	; 0x1a
    2412:	44 e0       	ldi	r20, 0x04	; 4
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	48 1b       	sub	r20, r24
    241c:	51 09       	sbc	r21, r1
    241e:	61 09       	sbc	r22, r1
    2420:	71 09       	sbc	r23, r1
    2422:	4e 87       	std	Y+14, r20	; 0x0e
    2424:	5f 87       	std	Y+15, r21	; 0x0f
    2426:	68 8b       	std	Y+16, r22	; 0x10
    2428:	79 8b       	std	Y+17, r23	; 0x11
    242a:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    242e:	98 17       	cp	r25, r24
    2430:	10 f4       	brcc	.+4      	; 0x2436 <xTaskPriorityDisinherit+0x56>
    2432:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    2436:	2b e0       	ldi	r18, 0x0B	; 11
    2438:	82 9f       	mul	r24, r18
    243a:	c0 01       	movw	r24, r0
    243c:	11 24       	eor	r1, r1
    243e:	b8 01       	movw	r22, r16
    2440:	88 50       	subi	r24, 0x08	; 8
    2442:	99 4e       	sbci	r25, 0xE9	; 233
    2444:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <xTaskPriorityDisinherit+0x76>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <xTaskPriorityDisinherit+0x76>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <xTaskPriorityDisinherit+0x76>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	08 95       	ret

00002460 <xTaskNotifyWait>:
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	49 01       	movw	r8, r18
    247e:	5a 01       	movw	r10, r20
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	0f 92       	push	r0
    2486:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    248a:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    248e:	27 a5       	ldd	r18, Z+47	; 0x2f
    2490:	22 30       	cpi	r18, 0x02	; 2
    2492:	39 f1       	breq	.+78     	; 0x24e2 <xTaskNotifyWait+0x82>
    2494:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    2498:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    249c:	43 a4       	ldd	r4, Z+43	; 0x2b
    249e:	54 a4       	ldd	r5, Z+44	; 0x2c
    24a0:	65 a4       	ldd	r6, Z+45	; 0x2d
    24a2:	76 a4       	ldd	r7, Z+46	; 0x2e
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	a0 95       	com	r26
    24ae:	b0 95       	com	r27
    24b0:	84 21       	and	r24, r4
    24b2:	95 21       	and	r25, r5
    24b4:	a6 21       	and	r26, r6
    24b6:	b7 21       	and	r27, r7
    24b8:	83 a7       	std	Z+43, r24	; 0x2b
    24ba:	94 a7       	std	Z+44, r25	; 0x2c
    24bc:	a5 a7       	std	Z+45, r26	; 0x2d
    24be:	b6 a7       	std	Z+46, r27	; 0x2e
    24c0:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    24c4:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	87 a7       	std	Z+47, r24	; 0x2f
    24cc:	c1 14       	cp	r12, r1
    24ce:	d1 04       	cpc	r13, r1
    24d0:	e1 04       	cpc	r14, r1
    24d2:	f1 04       	cpc	r15, r1
    24d4:	31 f0       	breq	.+12     	; 0x24e2 <xTaskNotifyWait+0x82>
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	c7 01       	movw	r24, r14
    24da:	b6 01       	movw	r22, r12
    24dc:	3a da       	rcall	.-2956   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    24de:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	0f 92       	push	r0
    24ec:	01 15       	cp	r16, r1
    24ee:	11 05       	cpc	r17, r1
    24f0:	69 f0       	breq	.+26     	; 0x250c <xTaskNotifyWait+0xac>
    24f2:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    24f6:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    24fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    24fc:	94 a5       	ldd	r25, Z+44	; 0x2c
    24fe:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2500:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2502:	f8 01       	movw	r30, r16
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	a2 83       	std	Z+2, r26	; 0x02
    250a:	b3 83       	std	Z+3, r27	; 0x03
    250c:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    2510:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2514:	87 a5       	ldd	r24, Z+47	; 0x2f
    2516:	82 30       	cpi	r24, 0x02	; 2
    2518:	b1 f4       	brne	.+44     	; 0x2546 <xTaskNotifyWait+0xe6>
    251a:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    251e:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2522:	83 a5       	ldd	r24, Z+43	; 0x2b
    2524:	94 a5       	ldd	r25, Z+44	; 0x2c
    2526:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2528:	b6 a5       	ldd	r27, Z+46	; 0x2e
    252a:	80 94       	com	r8
    252c:	90 94       	com	r9
    252e:	a0 94       	com	r10
    2530:	b0 94       	com	r11
    2532:	88 22       	and	r8, r24
    2534:	99 22       	and	r9, r25
    2536:	aa 22       	and	r10, r26
    2538:	bb 22       	and	r11, r27
    253a:	83 a6       	std	Z+43, r8	; 0x2b
    253c:	94 a6       	std	Z+44, r9	; 0x2c
    253e:	a5 a6       	std	Z+45, r10	; 0x2d
    2540:	b6 a6       	std	Z+46, r11	; 0x2e
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <xTaskNotifyWait+0xe8>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    254c:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2550:	17 a6       	std	Z+47, r1	; 0x2f
    2552:	0f 90       	pop	r0
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	df 90       	pop	r13
    2560:	cf 90       	pop	r12
    2562:	bf 90       	pop	r11
    2564:	af 90       	pop	r10
    2566:	9f 90       	pop	r9
    2568:	8f 90       	pop	r8
    256a:	7f 90       	pop	r7
    256c:	6f 90       	pop	r6
    256e:	5f 90       	pop	r5
    2570:	4f 90       	pop	r4
    2572:	08 95       	ret

00002574 <xTaskGenericNotify>:
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	fc 01       	movw	r30, r24
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	0f 92       	push	r0
    2584:	01 15       	cp	r16, r1
    2586:	11 05       	cpc	r17, r1
    2588:	49 f0       	breq	.+18     	; 0x259c <xTaskGenericNotify+0x28>
    258a:	83 a5       	ldd	r24, Z+43	; 0x2b
    258c:	94 a5       	ldd	r25, Z+44	; 0x2c
    258e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2590:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2592:	e8 01       	movw	r28, r16
    2594:	88 83       	st	Y, r24
    2596:	99 83       	std	Y+1, r25	; 0x01
    2598:	aa 83       	std	Y+2, r26	; 0x02
    259a:	bb 83       	std	Y+3, r27	; 0x03
    259c:	87 a5       	ldd	r24, Z+47	; 0x2f
    259e:	92 e0       	ldi	r25, 0x02	; 2
    25a0:	97 a7       	std	Z+47, r25	; 0x2f
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	b1 f0       	breq	.+44     	; 0x25d2 <xTaskGenericNotify+0x5e>
    25a6:	18 f4       	brcc	.+6      	; 0x25ae <xTaskGenericNotify+0x3a>
    25a8:	21 30       	cpi	r18, 0x01	; 1
    25aa:	31 f0       	breq	.+12     	; 0x25b8 <xTaskGenericNotify+0x44>
    25ac:	2a c0       	rjmp	.+84     	; 0x2602 <xTaskGenericNotify+0x8e>
    25ae:	23 30       	cpi	r18, 0x03	; 3
    25b0:	e9 f0       	breq	.+58     	; 0x25ec <xTaskGenericNotify+0x78>
    25b2:	24 30       	cpi	r18, 0x04	; 4
    25b4:	01 f1       	breq	.+64     	; 0x25f6 <xTaskGenericNotify+0x82>
    25b6:	25 c0       	rjmp	.+74     	; 0x2602 <xTaskGenericNotify+0x8e>
    25b8:	03 a5       	ldd	r16, Z+43	; 0x2b
    25ba:	14 a5       	ldd	r17, Z+44	; 0x2c
    25bc:	25 a5       	ldd	r18, Z+45	; 0x2d
    25be:	36 a5       	ldd	r19, Z+46	; 0x2e
    25c0:	40 2b       	or	r20, r16
    25c2:	51 2b       	or	r21, r17
    25c4:	62 2b       	or	r22, r18
    25c6:	73 2b       	or	r23, r19
    25c8:	43 a7       	std	Z+43, r20	; 0x2b
    25ca:	54 a7       	std	Z+44, r21	; 0x2c
    25cc:	65 a7       	std	Z+45, r22	; 0x2d
    25ce:	76 a7       	std	Z+46, r23	; 0x2e
    25d0:	18 c0       	rjmp	.+48     	; 0x2602 <xTaskGenericNotify+0x8e>
    25d2:	43 a5       	ldd	r20, Z+43	; 0x2b
    25d4:	54 a5       	ldd	r21, Z+44	; 0x2c
    25d6:	65 a5       	ldd	r22, Z+45	; 0x2d
    25d8:	76 a5       	ldd	r23, Z+46	; 0x2e
    25da:	4f 5f       	subi	r20, 0xFF	; 255
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	6f 4f       	sbci	r22, 0xFF	; 255
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	43 a7       	std	Z+43, r20	; 0x2b
    25e4:	54 a7       	std	Z+44, r21	; 0x2c
    25e6:	65 a7       	std	Z+45, r22	; 0x2d
    25e8:	76 a7       	std	Z+46, r23	; 0x2e
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <xTaskGenericNotify+0x8e>
    25ec:	43 a7       	std	Z+43, r20	; 0x2b
    25ee:	54 a7       	std	Z+44, r21	; 0x2c
    25f0:	65 a7       	std	Z+45, r22	; 0x2d
    25f2:	76 a7       	std	Z+46, r23	; 0x2e
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <xTaskGenericNotify+0x8e>
    25f6:	82 30       	cpi	r24, 0x02	; 2
    25f8:	49 f1       	breq	.+82     	; 0x264c <xTaskGenericNotify+0xd8>
    25fa:	43 a7       	std	Z+43, r20	; 0x2b
    25fc:	54 a7       	std	Z+44, r21	; 0x2c
    25fe:	65 a7       	std	Z+45, r22	; 0x2d
    2600:	76 a7       	std	Z+46, r23	; 0x2e
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	29 f5       	brne	.+74     	; 0x2650 <xTaskGenericNotify+0xdc>
    2606:	ef 01       	movw	r28, r30
    2608:	8f 01       	movw	r16, r30
    260a:	0e 5f       	subi	r16, 0xFE	; 254
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	c8 01       	movw	r24, r16
    2610:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    2614:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2616:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    261a:	98 17       	cp	r25, r24
    261c:	10 f4       	brcc	.+4      	; 0x2622 <xTaskGenericNotify+0xae>
    261e:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    2622:	2b e0       	ldi	r18, 0x0B	; 11
    2624:	82 9f       	mul	r24, r18
    2626:	c0 01       	movw	r24, r0
    2628:	11 24       	eor	r1, r1
    262a:	b8 01       	movw	r22, r16
    262c:	88 50       	subi	r24, 0x08	; 8
    262e:	99 4e       	sbci	r25, 0xE9	; 233
    2630:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2634:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    2638:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    263c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    263e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2640:	89 17       	cp	r24, r25
    2642:	40 f4       	brcc	.+16     	; 0x2654 <xTaskGenericNotify+0xe0>
    2644:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <xTaskGenericNotify+0xe2>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <xTaskGenericNotify+0xe2>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <xTaskGenericNotify+0xe2>
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <xTaskGenericNotifyFromISR>:
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	fc 01       	movw	r30, r24
    2672:	01 15       	cp	r16, r1
    2674:	11 05       	cpc	r17, r1
    2676:	49 f0       	breq	.+18     	; 0x268a <xTaskGenericNotifyFromISR+0x26>
    2678:	83 a5       	ldd	r24, Z+43	; 0x2b
    267a:	94 a5       	ldd	r25, Z+44	; 0x2c
    267c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    267e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2680:	e8 01       	movw	r28, r16
    2682:	88 83       	st	Y, r24
    2684:	99 83       	std	Y+1, r25	; 0x01
    2686:	aa 83       	std	Y+2, r26	; 0x02
    2688:	bb 83       	std	Y+3, r27	; 0x03
    268a:	87 a5       	ldd	r24, Z+47	; 0x2f
    268c:	92 e0       	ldi	r25, 0x02	; 2
    268e:	97 a7       	std	Z+47, r25	; 0x2f
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	b1 f0       	breq	.+44     	; 0x26c0 <xTaskGenericNotifyFromISR+0x5c>
    2694:	18 f4       	brcc	.+6      	; 0x269c <xTaskGenericNotifyFromISR+0x38>
    2696:	21 30       	cpi	r18, 0x01	; 1
    2698:	31 f0       	breq	.+12     	; 0x26a6 <xTaskGenericNotifyFromISR+0x42>
    269a:	2a c0       	rjmp	.+84     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    269c:	23 30       	cpi	r18, 0x03	; 3
    269e:	e9 f0       	breq	.+58     	; 0x26da <xTaskGenericNotifyFromISR+0x76>
    26a0:	24 30       	cpi	r18, 0x04	; 4
    26a2:	01 f1       	breq	.+64     	; 0x26e4 <xTaskGenericNotifyFromISR+0x80>
    26a4:	25 c0       	rjmp	.+74     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26a6:	03 a5       	ldd	r16, Z+43	; 0x2b
    26a8:	14 a5       	ldd	r17, Z+44	; 0x2c
    26aa:	25 a5       	ldd	r18, Z+45	; 0x2d
    26ac:	36 a5       	ldd	r19, Z+46	; 0x2e
    26ae:	40 2b       	or	r20, r16
    26b0:	51 2b       	or	r21, r17
    26b2:	62 2b       	or	r22, r18
    26b4:	73 2b       	or	r23, r19
    26b6:	43 a7       	std	Z+43, r20	; 0x2b
    26b8:	54 a7       	std	Z+44, r21	; 0x2c
    26ba:	65 a7       	std	Z+45, r22	; 0x2d
    26bc:	76 a7       	std	Z+46, r23	; 0x2e
    26be:	18 c0       	rjmp	.+48     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26c0:	43 a5       	ldd	r20, Z+43	; 0x2b
    26c2:	54 a5       	ldd	r21, Z+44	; 0x2c
    26c4:	65 a5       	ldd	r22, Z+45	; 0x2d
    26c6:	76 a5       	ldd	r23, Z+46	; 0x2e
    26c8:	4f 5f       	subi	r20, 0xFF	; 255
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	6f 4f       	sbci	r22, 0xFF	; 255
    26ce:	7f 4f       	sbci	r23, 0xFF	; 255
    26d0:	43 a7       	std	Z+43, r20	; 0x2b
    26d2:	54 a7       	std	Z+44, r21	; 0x2c
    26d4:	65 a7       	std	Z+45, r22	; 0x2d
    26d6:	76 a7       	std	Z+46, r23	; 0x2e
    26d8:	0b c0       	rjmp	.+22     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26da:	43 a7       	std	Z+43, r20	; 0x2b
    26dc:	54 a7       	std	Z+44, r21	; 0x2c
    26de:	65 a7       	std	Z+45, r22	; 0x2d
    26e0:	76 a7       	std	Z+46, r23	; 0x2e
    26e2:	06 c0       	rjmp	.+12     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	d9 f1       	breq	.+118    	; 0x275e <xTaskGenericNotifyFromISR+0xfa>
    26e8:	43 a7       	std	Z+43, r20	; 0x2b
    26ea:	54 a7       	std	Z+44, r21	; 0x2c
    26ec:	65 a7       	std	Z+45, r22	; 0x2d
    26ee:	76 a7       	std	Z+46, r23	; 0x2e
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	b9 f5       	brne	.+110    	; 0x2762 <xTaskGenericNotifyFromISR+0xfe>
    26f4:	ef 01       	movw	r28, r30
    26f6:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <uxSchedulerSuspended>
    26fa:	81 11       	cpse	r24, r1
    26fc:	17 c0       	rjmp	.+46     	; 0x272c <xTaskGenericNotifyFromISR+0xc8>
    26fe:	8f 01       	movw	r16, r30
    2700:	0e 5f       	subi	r16, 0xFE	; 254
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	c8 01       	movw	r24, r16
    2706:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    270a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    270c:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <uxTopReadyPriority>
    2710:	98 17       	cp	r25, r24
    2712:	10 f4       	brcc	.+4      	; 0x2718 <xTaskGenericNotifyFromISR+0xb4>
    2714:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxTopReadyPriority>
    2718:	eb e0       	ldi	r30, 0x0B	; 11
    271a:	8e 9f       	mul	r24, r30
    271c:	c0 01       	movw	r24, r0
    271e:	11 24       	eor	r1, r1
    2720:	b8 01       	movw	r22, r16
    2722:	88 50       	subi	r24, 0x08	; 8
    2724:	99 4e       	sbci	r25, 0xE9	; 233
    2726:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    272a:	07 c0       	rjmp	.+14     	; 0x273a <xTaskGenericNotifyFromISR+0xd6>
    272c:	bf 01       	movw	r22, r30
    272e:	62 5f       	subi	r22, 0xF2	; 242
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	83 ed       	ldi	r24, 0xD3	; 211
    2734:	96 e1       	ldi	r25, 0x16	; 22
    2736:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    273a:	e0 91 24 17 	lds	r30, 0x1724	; 0x801724 <pxCurrentTCB>
    273e:	f0 91 25 17 	lds	r31, 0x1725	; 0x801725 <pxCurrentTCB+0x1>
    2742:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2744:	82 8d       	ldd	r24, Z+26	; 0x1a
    2746:	89 17       	cp	r24, r25
    2748:	70 f4       	brcc	.+28     	; 0x2766 <xTaskGenericNotifyFromISR+0x102>
    274a:	e1 14       	cp	r14, r1
    274c:	f1 04       	cpc	r15, r1
    274e:	19 f0       	breq	.+6      	; 0x2756 <xTaskGenericNotifyFromISR+0xf2>
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	e7 01       	movw	r28, r14
    2754:	88 83       	st	Y, r24
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <xYieldPending>
    275c:	05 c0       	rjmp	.+10     	; 0x2768 <xTaskGenericNotifyFromISR+0x104>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	03 c0       	rjmp	.+6      	; 0x2768 <xTaskGenericNotifyFromISR+0x104>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <xTaskGenericNotifyFromISR+0x104>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	08 95       	ret

00002776 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	21 f4       	brne	.+8      	; 0x2782 <xTaskNotifyStateClear+0xc>
    277a:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <pxCurrentTCB>
    277e:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2788:	fc 01       	movw	r30, r24
    278a:	27 a5       	ldd	r18, Z+47	; 0x2f
    278c:	22 30       	cpi	r18, 0x02	; 2
    278e:	19 f4       	brne	.+6      	; 0x2796 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2790:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2796:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2798:	0f 90       	pop	r0
    279a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    279c:	08 95       	ret

0000279e <prvInsertTimerInActiveList>:
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	fc 01       	movw	r30, r24
    27ac:	42 83       	std	Z+2, r20	; 0x02
    27ae:	53 83       	std	Z+3, r21	; 0x03
    27b0:	64 83       	std	Z+4, r22	; 0x04
    27b2:	75 83       	std	Z+5, r23	; 0x05
    27b4:	93 87       	std	Z+11, r25	; 0x0b
    27b6:	82 87       	std	Z+10, r24	; 0x0a
    27b8:	04 17       	cp	r16, r20
    27ba:	15 07       	cpc	r17, r21
    27bc:	26 07       	cpc	r18, r22
    27be:	37 07       	cpc	r19, r23
    27c0:	c0 f0       	brcs	.+48     	; 0x27f2 <prvInsertTimerInActiveList+0x54>
    27c2:	0c 19       	sub	r16, r12
    27c4:	1d 09       	sbc	r17, r13
    27c6:	2e 09       	sbc	r18, r14
    27c8:	3f 09       	sbc	r19, r15
    27ca:	86 85       	ldd	r24, Z+14	; 0x0e
    27cc:	97 85       	ldd	r25, Z+15	; 0x0f
    27ce:	a0 89       	ldd	r26, Z+16	; 0x10
    27d0:	b1 89       	ldd	r27, Z+17	; 0x11
    27d2:	08 17       	cp	r16, r24
    27d4:	19 07       	cpc	r17, r25
    27d6:	2a 07       	cpc	r18, r26
    27d8:	3b 07       	cpc	r19, r27
    27da:	00 f5       	brcc	.+64     	; 0x281c <prvInsertTimerInActiveList+0x7e>
    27dc:	bf 01       	movw	r22, r30
    27de:	6e 5f       	subi	r22, 0xFE	; 254
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <pxOverflowTimerList>
    27e6:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <pxOverflowTimerList+0x1>
    27ea:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	18 c0       	rjmp	.+48     	; 0x2822 <prvInsertTimerInActiveList+0x84>
    27f2:	0c 15       	cp	r16, r12
    27f4:	1d 05       	cpc	r17, r13
    27f6:	2e 05       	cpc	r18, r14
    27f8:	3f 05       	cpc	r19, r15
    27fa:	28 f4       	brcc	.+10     	; 0x2806 <prvInsertTimerInActiveList+0x68>
    27fc:	4c 15       	cp	r20, r12
    27fe:	5d 05       	cpc	r21, r13
    2800:	6e 05       	cpc	r22, r14
    2802:	7f 05       	cpc	r23, r15
    2804:	68 f4       	brcc	.+26     	; 0x2820 <prvInsertTimerInActiveList+0x82>
    2806:	bf 01       	movw	r22, r30
    2808:	6e 5f       	subi	r22, 0xFE	; 254
    280a:	7f 4f       	sbci	r23, 0xFF	; 255
    280c:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <pxCurrentTimerList>
    2810:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
    2814:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <prvInsertTimerInActiveList+0x84>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <prvInsertTimerInActiveList+0x84>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
    282e:	08 95       	ret

00002830 <prvCheckForValidListAndQueue>:
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	0f 92       	push	r0
    2836:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    283a:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    283e:	89 2b       	or	r24, r25
    2840:	e9 f4       	brne	.+58     	; 0x287c <prvCheckForValidListAndQueue+0x4c>
    2842:	8d e3       	ldi	r24, 0x3D	; 61
    2844:	97 e1       	ldi	r25, 0x17	; 23
    2846:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    284a:	82 e3       	ldi	r24, 0x32	; 50
    284c:	97 e1       	ldi	r25, 0x17	; 23
    284e:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    2852:	8d e3       	ldi	r24, 0x3D	; 61
    2854:	97 e1       	ldi	r25, 0x17	; 23
    2856:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <pxCurrentTimerList+0x1>
    285a:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <pxCurrentTimerList>
    285e:	82 e3       	ldi	r24, 0x32	; 50
    2860:	97 e1       	ldi	r25, 0x17	; 23
    2862:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <pxOverflowTimerList+0x1>
    2866:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <pxOverflowTimerList>
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	67 e0       	ldi	r22, 0x07	; 7
    286e:	8a e0       	ldi	r24, 0x0A	; 10
    2870:	0e 94 ca 07 	call	0xf94	; 0xf94 <xQueueGenericCreate>
    2874:	90 93 2d 17 	sts	0x172D, r25	; 0x80172d <xTimerQueue+0x1>
    2878:	80 93 2c 17 	sts	0x172C, r24	; 0x80172c <xTimerQueue>
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	08 95       	ret

00002882 <xTimerCreateTimerTask>:
    2882:	ef 92       	push	r14
    2884:	ff 92       	push	r15
    2886:	0f 93       	push	r16
    2888:	d3 df       	rcall	.-90     	; 0x2830 <prvCheckForValidListAndQueue>
    288a:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    288e:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    2892:	89 2b       	or	r24, r25
    2894:	89 f0       	breq	.+34     	; 0x28b8 <xTimerCreateTimerTask+0x36>
    2896:	0f 2e       	mov	r0, r31
    2898:	fa e2       	ldi	r31, 0x2A	; 42
    289a:	ef 2e       	mov	r14, r31
    289c:	f7 e1       	ldi	r31, 0x17	; 23
    289e:	ff 2e       	mov	r15, r31
    28a0:	f0 2d       	mov	r31, r0
    28a2:	03 e0       	ldi	r16, 0x03	; 3
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	45 e5       	ldi	r20, 0x55	; 85
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	6a e8       	ldi	r22, 0x8A	; 138
    28ae:	73 e0       	ldi	r23, 0x03	; 3
    28b0:	82 eb       	ldi	r24, 0xB2	; 178
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	c4 d8       	rcall	.-3704   	; 0x1a3e <xTaskCreate>
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <xTimerCreateTimerTask+0x38>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	08 95       	ret

000028c2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    28c2:	8f 92       	push	r8
    28c4:	9f 92       	push	r9
    28c6:	af 92       	push	r10
    28c8:	bf 92       	push	r11
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	27 97       	sbiw	r28, 0x07	; 7
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    28ea:	e0 91 2c 17 	lds	r30, 0x172C	; 0x80172c <xTimerQueue>
    28ee:	f0 91 2d 17 	lds	r31, 0x172D	; 0x80172d <xTimerQueue+0x1>
    28f2:	30 97       	sbiw	r30, 0x00	; 0
    28f4:	81 f1       	breq	.+96     	; 0x2956 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    28f6:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    28f8:	2a 83       	std	Y+2, r18	; 0x02
    28fa:	3b 83       	std	Y+3, r19	; 0x03
    28fc:	4c 83       	std	Y+4, r20	; 0x04
    28fe:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2900:	9f 83       	std	Y+7, r25	; 0x07
    2902:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2904:	66 30       	cpi	r22, 0x06	; 6
    2906:	f4 f4       	brge	.+60     	; 0x2944 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2908:	5d dd       	rcall	.-1350   	; 0x23c4 <xTaskGetSchedulerState>
    290a:	82 30       	cpi	r24, 0x02	; 2
    290c:	69 f4       	brne	.+26     	; 0x2928 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	a7 01       	movw	r20, r14
    2912:	96 01       	movw	r18, r12
    2914:	be 01       	movw	r22, r28
    2916:	6f 5f       	subi	r22, 0xFF	; 255
    2918:	7f 4f       	sbci	r23, 0xFF	; 255
    291a:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    291e:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    2922:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
    2926:	18 c0       	rjmp	.+48     	; 0x2958 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2928:	00 e0       	ldi	r16, 0x00	; 0
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	a9 01       	movw	r20, r18
    2930:	be 01       	movw	r22, r28
    2932:	6f 5f       	subi	r22, 0xFF	; 255
    2934:	7f 4f       	sbci	r23, 0xFF	; 255
    2936:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <xTimerQueue>
    293a:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <xTimerQueue+0x1>
    293e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
    2942:	0a c0       	rjmp	.+20     	; 0x2958 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	a8 01       	movw	r20, r16
    2948:	be 01       	movw	r22, r28
    294a:	6f 5f       	subi	r22, 0xFF	; 255
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	cf 01       	movw	r24, r30
    2950:	0e 94 b3 08 	call	0x1166	; 0x1166 <xQueueGenericSendFromISR>
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2956:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2958:	27 96       	adiw	r28, 0x07	; 7
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	df 90       	pop	r13
    2972:	cf 90       	pop	r12
    2974:	bf 90       	pop	r11
    2976:	af 90       	pop	r10
    2978:	9f 90       	pop	r9
    297a:	8f 90       	pop	r8
    297c:	08 95       	ret

0000297e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    297e:	2f 92       	push	r2
    2980:	3f 92       	push	r3
    2982:	4f 92       	push	r4
    2984:	5f 92       	push	r5
    2986:	6f 92       	push	r6
    2988:	7f 92       	push	r7
    298a:	8f 92       	push	r8
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    29a4:	ad d9       	rcall	.-3238   	; 0x1d00 <xTaskGetTickCount>
    29a6:	2b 01       	movw	r4, r22
    29a8:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    29aa:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <xLastTime.2432>
    29ae:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <xLastTime.2432+0x1>
    29b2:	a0 91 28 17 	lds	r26, 0x1728	; 0x801728 <xLastTime.2432+0x2>
    29b6:	b0 91 29 17 	lds	r27, 0x1729	; 0x801729 <xLastTime.2432+0x3>
    29ba:	48 16       	cp	r4, r24
    29bc:	59 06       	cpc	r5, r25
    29be:	6a 06       	cpc	r6, r26
    29c0:	7b 06       	cpc	r7, r27
    29c2:	08 f0       	brcs	.+2      	; 0x29c6 <prvSampleTimeNow+0x48>
    29c4:	53 c0       	rjmp	.+166    	; 0x2a6c <prvSampleTimeNow+0xee>
    29c6:	3b c0       	rjmp	.+118    	; 0x2a3e <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    29c8:	07 80       	ldd	r0, Z+7	; 0x07
    29ca:	f0 85       	ldd	r31, Z+8	; 0x08
    29cc:	e0 2d       	mov	r30, r0
    29ce:	80 80       	ld	r8, Z
    29d0:	91 80       	ldd	r9, Z+1	; 0x01
    29d2:	a2 80       	ldd	r10, Z+2	; 0x02
    29d4:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    29d6:	c0 85       	ldd	r28, Z+8	; 0x08
    29d8:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29da:	8e 01       	movw	r16, r28
    29dc:	0e 5f       	subi	r16, 0xFE	; 254
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	c8 01       	movw	r24, r16
    29e2:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29e6:	ec 89       	ldd	r30, Y+20	; 0x14
    29e8:	fd 89       	ldd	r31, Y+21	; 0x15
    29ea:	ce 01       	movw	r24, r28
    29ec:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29ee:	8f 89       	ldd	r24, Y+23	; 0x17
    29f0:	82 ff       	sbrs	r24, 2
    29f2:	25 c0       	rjmp	.+74     	; 0x2a3e <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    29f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    29f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    29f8:	a8 89       	ldd	r26, Y+16	; 0x10
    29fa:	b9 89       	ldd	r27, Y+17	; 0x11
    29fc:	88 0d       	add	r24, r8
    29fe:	99 1d       	adc	r25, r9
    2a00:	aa 1d       	adc	r26, r10
    2a02:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2a04:	88 16       	cp	r8, r24
    2a06:	99 06       	cpc	r9, r25
    2a08:	aa 06       	cpc	r10, r26
    2a0a:	bb 06       	cpc	r11, r27
    2a0c:	70 f4       	brcc	.+28     	; 0x2a2a <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
    2a10:	9b 83       	std	Y+3, r25	; 0x03
    2a12:	ac 83       	std	Y+4, r26	; 0x04
    2a14:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a16:	db 87       	std	Y+11, r29	; 0x0b
    2a18:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a1a:	b8 01       	movw	r22, r16
    2a1c:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <pxCurrentTimerList>
    2a20:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
    2a24:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    2a28:	0a c0       	rjmp	.+20     	; 0x2a3e <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a2a:	c1 2c       	mov	r12, r1
    2a2c:	d1 2c       	mov	r13, r1
    2a2e:	76 01       	movw	r14, r12
    2a30:	00 e0       	ldi	r16, 0x00	; 0
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	a5 01       	movw	r20, r10
    2a36:	94 01       	movw	r18, r8
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	42 df       	rcall	.-380    	; 0x28c2 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a3e:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <pxCurrentTimerList>
    2a42:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <pxCurrentTimerList+0x1>
    2a46:	80 81       	ld	r24, Z
    2a48:	81 11       	cpse	r24, r1
    2a4a:	be cf       	rjmp	.-132    	; 0x29c8 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2a4c:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <pxOverflowTimerList>
    2a50:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <pxOverflowTimerList+0x1>
    2a54:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <pxCurrentTimerList+0x1>
    2a58:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2a5c:	f0 93 2f 17 	sts	0x172F, r31	; 0x80172f <pxOverflowTimerList+0x1>
    2a60:	e0 93 2e 17 	sts	0x172E, r30	; 0x80172e <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	f1 01       	movw	r30, r2
    2a68:	80 83       	st	Z, r24
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2a6c:	f1 01       	movw	r30, r2
    2a6e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2a70:	40 92 26 17 	sts	0x1726, r4	; 0x801726 <xLastTime.2432>
    2a74:	50 92 27 17 	sts	0x1727, r5	; 0x801727 <xLastTime.2432+0x1>
    2a78:	60 92 28 17 	sts	0x1728, r6	; 0x801728 <xLastTime.2432+0x2>
    2a7c:	70 92 29 17 	sts	0x1729, r7	; 0x801729 <xLastTime.2432+0x3>

    return xTimeNow;
}
    2a80:	c3 01       	movw	r24, r6
    2a82:	b2 01       	movw	r22, r4
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	df 90       	pop	r13
    2a92:	cf 90       	pop	r12
    2a94:	bf 90       	pop	r11
    2a96:	af 90       	pop	r10
    2a98:	9f 90       	pop	r9
    2a9a:	8f 90       	pop	r8
    2a9c:	7f 90       	pop	r7
    2a9e:	6f 90       	pop	r6
    2aa0:	5f 90       	pop	r5
    2aa2:	4f 90       	pop	r4
    2aa4:	3f 90       	pop	r3
    2aa6:	2f 90       	pop	r2
    2aa8:	08 95       	ret

00002aaa <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2aaa:	08 95       	ret

00002aac <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2aac:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2aae:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ab0:	2f ef       	ldi	r18, 0xFF	; 255
    2ab2:	80 e7       	ldi	r24, 0x70	; 112
    2ab4:	92 e0       	ldi	r25, 0x02	; 2
    2ab6:	21 50       	subi	r18, 0x01	; 1
    2ab8:	80 40       	sbci	r24, 0x00	; 0
    2aba:	90 40       	sbci	r25, 0x00	; 0
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <vApplicationMallocFailedHook+0xa>
    2abe:	00 c0       	rjmp	.+0      	; 0x2ac0 <vApplicationMallocFailedHook+0x14>
    2ac0:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2ac2:	1f 9a       	sbi	0x03, 7	; 3
    2ac4:	f5 cf       	rjmp	.-22     	; 0x2ab0 <vApplicationMallocFailedHook+0x4>

00002ac6 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ac6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ac8:	2f 9a       	sbi	0x05, 7	; 5
    2aca:	2f ef       	ldi	r18, 0xFF	; 255
    2acc:	87 ea       	ldi	r24, 0xA7	; 167
    2ace:	91 e6       	ldi	r25, 0x61	; 97
    2ad0:	21 50       	subi	r18, 0x01	; 1
    2ad2:	80 40       	sbci	r24, 0x00	; 0
    2ad4:	90 40       	sbci	r25, 0x00	; 0
    2ad6:	e1 f7       	brne	.-8      	; 0x2ad0 <vApplicationStackOverflowHook+0xa>
    2ad8:	00 c0       	rjmp	.+0      	; 0x2ada <vApplicationStackOverflowHook+0x14>
    2ada:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2adc:	1f 9a       	sbi	0x03, 7	; 3
    2ade:	f5 cf       	rjmp	.-22     	; 0x2aca <vApplicationStackOverflowHook+0x4>

00002ae0 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	00 d0       	rcall	.+0      	; 0x2ae6 <task1+0x6>
    2ae6:	1f 92       	push	r1
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	db da       	rcall	.-2634   	; 0x20ac <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2af6:	04 d9       	rcall	.-3576   	; 0x1d00 <xTaskGetTickCount>
    2af8:	69 83       	std	Y+1, r22	; 0x01
    2afa:	7a 83       	std	Y+2, r23	; 0x02
    2afc:	8b 83       	std	Y+3, r24	; 0x03
    2afe:	9c 83       	std	Y+4, r25	; 0x04
    2b00:	11 e0       	ldi	r17, 0x01	; 1

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2b02:	4f e1       	ldi	r20, 0x1F	; 31
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    2b04:	50 e0       	ldi	r21, 0x00	; 0
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	57 da       	rcall	.-2898   	; 0x1fbe <vTaskDelayUntil>
    2b10:	82 b1       	in	r24, 0x02	; 2
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2b12:	81 27       	eor	r24, r17
    2b14:	82 b9       	out	0x02, r24	; 2
    2b16:	f5 cf       	rjmp	.-22     	; 0x2b02 <task1+0x22>

00002b18 <task2>:
    2b18:	cf 93       	push	r28
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    2b1a:	df 93       	push	r29
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <task2+0x6>
    2b1e:	1f 92       	push	r1
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	bf da       	rcall	.-2690   	; 0x20ac <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2b2e:	e8 d8       	rcall	.-3632   	; 0x1d00 <xTaskGetTickCount>
    2b30:	69 83       	std	Y+1, r22	; 0x01
    2b32:	7a 83       	std	Y+2, r23	; 0x02
    2b34:	8b 83       	std	Y+3, r24	; 0x03
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	4e e3       	ldi	r20, 0x3E	; 62

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	70 e0       	ldi	r23, 0x00	; 0
    2b40:	ce 01       	movw	r24, r28
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	3c da       	rcall	.-2952   	; 0x1fbe <vTaskDelayUntil>
    2b46:	82 b1       	in	r24, 0x02	; 2
		//puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA7);
    2b48:	80 58       	subi	r24, 0x80	; 128
    2b4a:	82 b9       	out	0x02, r24	; 2
    2b4c:	f5 cf       	rjmp	.-22     	; 0x2b38 <task2+0x20>

00002b4e <create_tasks_and_semaphores>:
    2b4e:	ef 92       	push	r14
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2b50:	ff 92       	push	r15
    2b52:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2b54:	80 91 87 18 	lds	r24, 0x1887	; 0x801887 <xTestSemaphore>
    2b58:	90 91 88 18 	lds	r25, 0x1888	; 0x801888 <xTestSemaphore+0x1>
    2b5c:	89 2b       	or	r24, r25
    2b5e:	89 f4       	brne	.+34     	; 0x2b82 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	0e 94 98 08 	call	0x1130	; 0x1130 <xQueueCreateMutex>
    2b66:	90 93 88 18 	sts	0x1888, r25	; 0x801888 <xTestSemaphore+0x1>
    2b6a:	80 93 87 18 	sts	0x1887, r24	; 0x801887 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	41 f0       	breq	.+16     	; 0x2b82 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2b72:	00 e0       	ldi	r16, 0x00	; 0
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	a9 01       	movw	r20, r18
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    2b82:	e1 2c       	mov	r14, r1
    2b84:	f1 2c       	mov	r15, r1
    2b86:	02 e0       	ldi	r16, 0x02	; 2
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 ec       	ldi	r20, 0xC0	; 192
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	62 e9       	ldi	r22, 0x92	; 146
    2b92:	73 e0       	ldi	r23, 0x03	; 3
    2b94:	80 e7       	ldi	r24, 0x70	; 112
    2b96:	95 e1       	ldi	r25, 0x15	; 21
    2b98:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    2b9c:	01 e0       	ldi	r16, 0x01	; 1
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 ec       	ldi	r20, 0xC0	; 192
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	68 e9       	ldi	r22, 0x98	; 152
    2ba8:	73 e0       	ldi	r23, 0x03	; 3
    2baa:	8c e8       	ldi	r24, 0x8C	; 140
    2bac:	95 e1       	ldi	r25, 0x15	; 21
    2bae:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
	,  (const portCHAR *)"Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    2bb2:	0f 91       	pop	r16
    2bb4:	ff 90       	pop	r15
    2bb6:	ef 90       	pop	r14
    2bb8:	08 95       	ret

00002bba <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2bba:	81 b1       	in	r24, 0x01	; 1
    2bbc:	81 68       	ori	r24, 0x81	; 129
    2bbe:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    2bc0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	0e 94 39 20 	call	0x4072	; 0x4072 <stdioCreate>
	// Let's create some tasks
	create_tasks_and_semaphores();
    2bca:	c1 df       	rcall	.-126    	; 0x2b4e <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    2bcc:	85 e0       	ldi	r24, 0x05	; 5
    2bce:	0f d0       	rcall	.+30     	; 0x2bee <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	0e d3       	rcall	.+1564   	; 0x31f4 <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	0c 94 45 03 	jmp	0x68a	; 0x68a <lora_handler_create>
    2bde:	08 95       	ret

00002be0 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2be0:	ec df       	rcall	.-40     	; 0x2bba <initialiseSystem>
	printf("Program Started!!\n");
    2be2:	8e e9       	ldi	r24, 0x9E	; 158
    2be4:	93 e0       	ldi	r25, 0x03	; 3
    2be6:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2bea:	48 d8       	rcall	.-3952   	; 0x1c7c <vTaskStartScheduler>
    2bec:	ff cf       	rjmp	.-2      	; 0x2bec <main+0xc>

00002bee <hal_create>:
    2bee:	e9 e8       	ldi	r30, 0x89	; 137
    2bf0:	f8 e1       	ldi	r31, 0x18	; 24
    2bf2:	2f e4       	ldi	r18, 0x4F	; 79
    2bf4:	3c e1       	ldi	r19, 0x1C	; 28
    2bf6:	31 83       	std	Z+1, r19	; 0x01
    2bf8:	20 83       	st	Z, r18
    2bfa:	22 e5       	ldi	r18, 0x52	; 82
    2bfc:	3c e1       	ldi	r19, 0x1C	; 28
    2bfe:	33 83       	std	Z+3, r19	; 0x03
    2c00:	22 83       	std	Z+2, r18	; 0x02
    2c02:	2d e5       	ldi	r18, 0x5D	; 93
    2c04:	3c e1       	ldi	r19, 0x1C	; 28
    2c06:	35 83       	std	Z+5, r19	; 0x05
    2c08:	24 83       	std	Z+4, r18	; 0x04
    2c0a:	21 e6       	ldi	r18, 0x61	; 97
    2c0c:	3c e1       	ldi	r19, 0x1C	; 28
    2c0e:	37 83       	std	Z+7, r19	; 0x07
    2c10:	26 83       	std	Z+6, r18	; 0x06
    2c12:	27 e6       	ldi	r18, 0x67	; 103
    2c14:	3c e1       	ldi	r19, 0x1C	; 28
    2c16:	31 87       	std	Z+9, r19	; 0x09
    2c18:	20 87       	std	Z+8, r18	; 0x08
    2c1a:	23 e7       	ldi	r18, 0x73	; 115
    2c1c:	3c e1       	ldi	r19, 0x1C	; 28
    2c1e:	33 87       	std	Z+11, r19	; 0x0b
    2c20:	22 87       	std	Z+10, r18	; 0x0a
    2c22:	28 e7       	ldi	r18, 0x78	; 120
    2c24:	3c e1       	ldi	r19, 0x1C	; 28
    2c26:	35 87       	std	Z+13, r19	; 0x0d
    2c28:	24 87       	std	Z+12, r18	; 0x0c
    2c2a:	24 e8       	ldi	r18, 0x84	; 132
    2c2c:	3c e1       	ldi	r19, 0x1C	; 28
    2c2e:	37 87       	std	Z+15, r19	; 0x0f
    2c30:	26 87       	std	Z+14, r18	; 0x0e
    2c32:	24 e6       	ldi	r18, 0x64	; 100
    2c34:	3c e1       	ldi	r19, 0x1C	; 28
    2c36:	31 8b       	std	Z+17, r19	; 0x11
    2c38:	20 8b       	std	Z+16, r18	; 0x10
    2c3a:	29 e8       	ldi	r18, 0x89	; 137
    2c3c:	3c e1       	ldi	r19, 0x1C	; 28
    2c3e:	33 8b       	std	Z+19, r19	; 0x13
    2c40:	22 8b       	std	Z+18, r18	; 0x12
    2c42:	26 e9       	ldi	r18, 0x96	; 150
    2c44:	3c e1       	ldi	r19, 0x1C	; 28
    2c46:	35 8b       	std	Z+21, r19	; 0x15
    2c48:	24 8b       	std	Z+20, r18	; 0x14
    2c4a:	68 2f       	mov	r22, r24
    2c4c:	cf 01       	movw	r24, r30
    2c4e:	9e c0       	rjmp	.+316    	; 0x2d8c <led_create>
    2c50:	08 95       	ret

00002c52 <_turn_off>:
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	fc 01       	movw	r30, r24
    2c5a:	ee 0f       	add	r30, r30
    2c5c:	ff 1f       	adc	r31, r31
    2c5e:	e8 0f       	add	r30, r24
    2c60:	f9 1f       	adc	r31, r25
    2c62:	ee 0f       	add	r30, r30
    2c64:	ff 1f       	adc	r31, r31
    2c66:	e8 5b       	subi	r30, 0xB8	; 184
    2c68:	f8 4e       	sbci	r31, 0xE8	; 232
    2c6a:	23 81       	ldd	r18, Z+3	; 0x03
    2c6c:	21 11       	cpse	r18, r1
    2c6e:	0a c0       	rjmp	.+20     	; 0x2c84 <_turn_off+0x32>
    2c70:	ef 01       	movw	r28, r30
    2c72:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    2c76:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    2c7a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c7c:	88 81       	ld	r24, Y
    2c7e:	99 81       	ldd	r25, Y+1	; 0x01
    2c80:	19 95       	eicall
    2c82:	12 c0       	rjmp	.+36     	; 0x2ca8 <_turn_off+0x56>
    2c84:	dc 01       	movw	r26, r24
    2c86:	aa 0f       	add	r26, r26
    2c88:	bb 1f       	adc	r27, r27
    2c8a:	ed 01       	movw	r28, r26
    2c8c:	c8 0f       	add	r28, r24
    2c8e:	d9 1f       	adc	r29, r25
    2c90:	cc 0f       	add	r28, r28
    2c92:	dd 1f       	adc	r29, r29
    2c94:	c8 5b       	subi	r28, 0xB8	; 184
    2c96:	d8 4e       	sbci	r29, 0xE8	; 232
    2c98:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <register_access+0x12>
    2c9c:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <register_access+0x13>
    2ca0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ca2:	88 81       	ld	r24, Y
    2ca4:	99 81       	ldd	r25, Y+1	; 0x01
    2ca6:	19 95       	eicall
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	08 95       	ret

00002cae <_turn_on>:
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	ee 0f       	add	r30, r30
    2cb8:	ff 1f       	adc	r31, r31
    2cba:	e8 0f       	add	r30, r24
    2cbc:	f9 1f       	adc	r31, r25
    2cbe:	ee 0f       	add	r30, r30
    2cc0:	ff 1f       	adc	r31, r31
    2cc2:	e8 5b       	subi	r30, 0xB8	; 184
    2cc4:	f8 4e       	sbci	r31, 0xE8	; 232
    2cc6:	23 81       	ldd	r18, Z+3	; 0x03
    2cc8:	21 11       	cpse	r18, r1
    2cca:	0a c0       	rjmp	.+20     	; 0x2ce0 <_turn_on+0x32>
    2ccc:	ef 01       	movw	r28, r30
    2cce:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <register_access+0x12>
    2cd2:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <register_access+0x13>
    2cd6:	6a 81       	ldd	r22, Y+2	; 0x02
    2cd8:	88 81       	ld	r24, Y
    2cda:	99 81       	ldd	r25, Y+1	; 0x01
    2cdc:	19 95       	eicall
    2cde:	12 c0       	rjmp	.+36     	; 0x2d04 <_turn_on+0x56>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	aa 0f       	add	r26, r26
    2ce4:	bb 1f       	adc	r27, r27
    2ce6:	ed 01       	movw	r28, r26
    2ce8:	c8 0f       	add	r28, r24
    2cea:	d9 1f       	adc	r29, r25
    2cec:	cc 0f       	add	r28, r28
    2cee:	dd 1f       	adc	r29, r29
    2cf0:	c8 5b       	subi	r28, 0xB8	; 184
    2cf2:	d8 4e       	sbci	r29, 0xE8	; 232
    2cf4:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    2cf8:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    2cfc:	6a 81       	ldd	r22, Y+2	; 0x02
    2cfe:	88 81       	ld	r24, Y
    2d00:	99 81       	ldd	r25, Y+1	; 0x01
    2d02:	19 95       	eicall
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <_hal_led_task>:
    2d0a:	0f 2e       	mov	r0, r31
    2d0c:	f9 e8       	ldi	r31, 0x89	; 137
    2d0e:	cf 2e       	mov	r12, r31
    2d10:	f8 e1       	ldi	r31, 0x18	; 24
    2d12:	df 2e       	mov	r13, r31
    2d14:	f0 2d       	mov	r31, r0
    2d16:	04 e0       	ldi	r16, 0x04	; 4
    2d18:	c8 e4       	ldi	r28, 0x48	; 72
    2d1a:	d7 e1       	ldi	r29, 0x17	; 23
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	69 f0       	breq	.+26     	; 0x2d3e <_hal_led_task+0x34>
    2d24:	e8 f0       	brcs	.+58     	; 0x2d60 <_hal_led_task+0x56>
    2d26:	82 30       	cpi	r24, 0x02	; 2
    2d28:	39 f5       	brne	.+78     	; 0x2d78 <_hal_led_task+0x6e>
    2d2a:	d6 01       	movw	r26, r12
    2d2c:	1c 96       	adiw	r26, 0x0c	; 12
    2d2e:	ed 91       	ld	r30, X+
    2d30:	fc 91       	ld	r31, X
    2d32:	1d 97       	sbiw	r26, 0x0d	; 13
    2d34:	6a 81       	ldd	r22, Y+2	; 0x02
    2d36:	88 81       	ld	r24, Y
    2d38:	99 81       	ldd	r25, Y+1	; 0x01
    2d3a:	19 95       	eicall
    2d3c:	1d c0       	rjmp	.+58     	; 0x2d78 <_hal_led_task+0x6e>
    2d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	8a 30       	cpi	r24, 0x0A	; 10
    2d44:	10 f4       	brcc	.+4      	; 0x2d4a <_hal_led_task+0x40>
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	17 c0       	rjmp	.+46     	; 0x2d78 <_hal_led_task+0x6e>
    2d4a:	1d 82       	std	Y+5, r1	; 0x05
    2d4c:	d6 01       	movw	r26, r12
    2d4e:	1c 96       	adiw	r26, 0x0c	; 12
    2d50:	ed 91       	ld	r30, X+
    2d52:	fc 91       	ld	r31, X
    2d54:	1d 97       	sbiw	r26, 0x0d	; 13
    2d56:	6a 81       	ldd	r22, Y+2	; 0x02
    2d58:	88 81       	ld	r24, Y
    2d5a:	99 81       	ldd	r25, Y+1	; 0x01
    2d5c:	19 95       	eicall
    2d5e:	0c c0       	rjmp	.+24     	; 0x2d78 <_hal_led_task+0x6e>
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	88 23       	and	r24, r24
    2d64:	31 f0       	breq	.+12     	; 0x2d72 <_hal_led_task+0x68>
    2d66:	81 2f       	mov	r24, r17
    2d68:	a2 df       	rcall	.-188    	; 0x2cae <_turn_on>
    2d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6c:	81 50       	subi	r24, 0x01	; 1
    2d6e:	8d 83       	std	Y+5, r24	; 0x05
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <_hal_led_task+0x6e>
    2d72:	0c 83       	std	Y+4, r16	; 0x04
    2d74:	81 2f       	mov	r24, r17
    2d76:	6d df       	rcall	.-294    	; 0x2c52 <_turn_off>
    2d78:	1f 5f       	subi	r17, 0xFF	; 255
    2d7a:	26 96       	adiw	r28, 0x06	; 6
    2d7c:	14 30       	cpi	r17, 0x04	; 4
    2d7e:	79 f6       	brne	.-98     	; 0x2d1e <_hal_led_task+0x14>
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	78 d9       	rcall	.-3344   	; 0x207a <vTaskDelay>
    2d8a:	c6 cf       	rjmp	.-116    	; 0x2d18 <_hal_led_task+0xe>

00002d8c <led_create>:
    2d8c:	cf 92       	push	r12
    2d8e:	df 92       	push	r13
    2d90:	ef 92       	push	r14
    2d92:	ff 92       	push	r15
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	06 2f       	mov	r16, r22
    2d9e:	0f 2e       	mov	r0, r31
    2da0:	f9 e8       	ldi	r31, 0x89	; 137
    2da2:	ef 2e       	mov	r14, r31
    2da4:	f8 e1       	ldi	r31, 0x18	; 24
    2da6:	ff 2e       	mov	r15, r31
    2da8:	f0 2d       	mov	r31, r0
    2daa:	d7 01       	movw	r26, r14
    2dac:	18 96       	adiw	r26, 0x08	; 8
    2dae:	ed 91       	ld	r30, X+
    2db0:	fc 91       	ld	r31, X
    2db2:	19 97       	sbiw	r26, 0x09	; 9
    2db4:	66 e0       	ldi	r22, 0x06	; 6
    2db6:	87 e2       	ldi	r24, 0x27	; 39
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	19 95       	eicall
    2dbc:	c8 e4       	ldi	r28, 0x48	; 72
    2dbe:	d7 e1       	ldi	r29, 0x17	; 23
    2dc0:	0f 2e       	mov	r0, r31
    2dc2:	f8 e2       	ldi	r31, 0x28	; 40
    2dc4:	cf 2e       	mov	r12, r31
    2dc6:	d1 2c       	mov	r13, r1
    2dc8:	f0 2d       	mov	r31, r0
    2dca:	d9 82       	std	Y+1, r13	; 0x01
    2dcc:	c8 82       	st	Y, r12
    2dce:	86 e0       	ldi	r24, 0x06	; 6
    2dd0:	8a 83       	std	Y+2, r24	; 0x02
    2dd2:	1b 82       	std	Y+3, r1	; 0x03
    2dd4:	14 e0       	ldi	r17, 0x04	; 4
    2dd6:	1c 83       	std	Y+4, r17	; 0x04
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	3b df       	rcall	.-394    	; 0x2c52 <_turn_off>
    2ddc:	d7 01       	movw	r26, r14
    2dde:	18 96       	adiw	r26, 0x08	; 8
    2de0:	ed 91       	ld	r30, X+
    2de2:	fc 91       	ld	r31, X
    2de4:	19 97       	sbiw	r26, 0x09	; 9
    2de6:	67 e0       	ldi	r22, 0x07	; 7
    2de8:	87 e2       	ldi	r24, 0x27	; 39
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	19 95       	eicall
    2dee:	df 82       	std	Y+7, r13	; 0x07
    2df0:	ce 82       	std	Y+6, r12	; 0x06
    2df2:	87 e0       	ldi	r24, 0x07	; 7
    2df4:	88 87       	std	Y+8, r24	; 0x08
    2df6:	19 86       	std	Y+9, r1	; 0x09
    2df8:	1a 87       	std	Y+10, r17	; 0x0a
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	2a df       	rcall	.-428    	; 0x2c52 <_turn_off>
    2dfe:	d7 01       	movw	r26, r14
    2e00:	18 96       	adiw	r26, 0x08	; 8
    2e02:	ed 91       	ld	r30, X+
    2e04:	fc 91       	ld	r31, X
    2e06:	19 97       	sbiw	r26, 0x09	; 9
    2e08:	65 e0       	ldi	r22, 0x05	; 5
    2e0a:	83 e3       	ldi	r24, 0x33	; 51
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	19 95       	eicall
    2e10:	d7 01       	movw	r26, r14
    2e12:	18 96       	adiw	r26, 0x08	; 8
    2e14:	ed 91       	ld	r30, X+
    2e16:	fc 91       	ld	r31, X
    2e18:	19 97       	sbiw	r26, 0x09	; 9
    2e1a:	61 e0       	ldi	r22, 0x01	; 1
    2e1c:	84 e3       	ldi	r24, 0x34	; 52
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	19 95       	eicall
    2e22:	84 e3       	ldi	r24, 0x34	; 52
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9d 87       	std	Y+13, r25	; 0x0d
    2e28:	8c 87       	std	Y+12, r24	; 0x0c
    2e2a:	85 e0       	ldi	r24, 0x05	; 5
    2e2c:	8e 87       	std	Y+14, r24	; 0x0e
    2e2e:	1f 86       	std	Y+15, r1	; 0x0f
    2e30:	18 8b       	std	Y+16, r17	; 0x10
    2e32:	82 e0       	ldi	r24, 0x02	; 2
    2e34:	0e df       	rcall	.-484    	; 0x2c52 <_turn_off>
    2e36:	d7 01       	movw	r26, r14
    2e38:	18 96       	adiw	r26, 0x08	; 8
    2e3a:	ed 91       	ld	r30, X+
    2e3c:	fc 91       	ld	r31, X
    2e3e:	19 97       	sbiw	r26, 0x09	; 9
    2e40:	64 e0       	ldi	r22, 0x04	; 4
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	19 95       	eicall
    2e48:	d7 01       	movw	r26, r14
    2e4a:	18 96       	adiw	r26, 0x08	; 8
    2e4c:	ed 91       	ld	r30, X+
    2e4e:	fc 91       	ld	r31, X
    2e50:	19 97       	sbiw	r26, 0x09	; 9
    2e52:	61 e0       	ldi	r22, 0x01	; 1
    2e54:	82 e0       	ldi	r24, 0x02	; 2
    2e56:	91 e0       	ldi	r25, 0x01	; 1
    2e58:	19 95       	eicall
    2e5a:	82 e0       	ldi	r24, 0x02	; 2
    2e5c:	91 e0       	ldi	r25, 0x01	; 1
    2e5e:	9b 8b       	std	Y+19, r25	; 0x13
    2e60:	8a 8b       	std	Y+18, r24	; 0x12
    2e62:	1c 8b       	std	Y+20, r17	; 0x14
    2e64:	1d 8a       	std	Y+21, r1	; 0x15
    2e66:	1e 8b       	std	Y+22, r17	; 0x16
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	f3 de       	rcall	.-538    	; 0x2c52 <_turn_off>
    2e6c:	e1 2c       	mov	r14, r1
    2e6e:	f1 2c       	mov	r15, r1
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 ec       	ldi	r20, 0xC0	; 192
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	60 eb       	ldi	r22, 0xB0	; 176
    2e7a:	73 e0       	ldi	r23, 0x03	; 3
    2e7c:	85 e8       	ldi	r24, 0x85	; 133
    2e7e:	96 e1       	ldi	r25, 0x16	; 22
    2e80:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	08 95       	ret

00002e96 <led_slow_blink>:
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	c8 2f       	mov	r28, r24
    2ea0:	d0 e0       	ldi	r29, 0x00	; 0
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	00 0f       	add	r16, r16
    2ea6:	11 1f       	adc	r17, r17
    2ea8:	d8 01       	movw	r26, r16
    2eaa:	ac 0f       	add	r26, r28
    2eac:	bd 1f       	adc	r27, r29
    2eae:	aa 0f       	add	r26, r26
    2eb0:	bb 1f       	adc	r27, r27
    2eb2:	a8 5b       	subi	r26, 0xB8	; 184
    2eb4:	b8 4e       	sbci	r27, 0xE8	; 232
    2eb6:	e0 91 95 18 	lds	r30, 0x1895	; 0x801895 <register_access+0xc>
    2eba:	f0 91 96 18 	lds	r31, 0x1896	; 0x801896 <register_access+0xd>
    2ebe:	12 96       	adiw	r26, 0x02	; 2
    2ec0:	6c 91       	ld	r22, X
    2ec2:	12 97       	sbiw	r26, 0x02	; 2
    2ec4:	8d 91       	ld	r24, X+
    2ec6:	9c 91       	ld	r25, X
    2ec8:	19 95       	eicall
    2eca:	c0 0f       	add	r28, r16
    2ecc:	d1 1f       	adc	r29, r17
    2ece:	cc 0f       	add	r28, r28
    2ed0:	dd 1f       	adc	r29, r29
    2ed2:	c8 5b       	subi	r28, 0xB8	; 184
    2ed4:	d8 4e       	sbci	r29, 0xE8	; 232
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	8c 83       	std	Y+4, r24	; 0x04
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	08 95       	ret

00002ee4 <led_fast_blink>:
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	c8 2f       	mov	r28, r24
    2eee:	d0 e0       	ldi	r29, 0x00	; 0
    2ef0:	8e 01       	movw	r16, r28
    2ef2:	00 0f       	add	r16, r16
    2ef4:	11 1f       	adc	r17, r17
    2ef6:	d8 01       	movw	r26, r16
    2ef8:	ac 0f       	add	r26, r28
    2efa:	bd 1f       	adc	r27, r29
    2efc:	aa 0f       	add	r26, r26
    2efe:	bb 1f       	adc	r27, r27
    2f00:	a8 5b       	subi	r26, 0xB8	; 184
    2f02:	b8 4e       	sbci	r27, 0xE8	; 232
    2f04:	e0 91 95 18 	lds	r30, 0x1895	; 0x801895 <register_access+0xc>
    2f08:	f0 91 96 18 	lds	r31, 0x1896	; 0x801896 <register_access+0xd>
    2f0c:	12 96       	adiw	r26, 0x02	; 2
    2f0e:	6c 91       	ld	r22, X
    2f10:	12 97       	sbiw	r26, 0x02	; 2
    2f12:	8d 91       	ld	r24, X+
    2f14:	9c 91       	ld	r25, X
    2f16:	19 95       	eicall
    2f18:	c0 0f       	add	r28, r16
    2f1a:	d1 1f       	adc	r29, r17
    2f1c:	cc 0f       	add	r28, r28
    2f1e:	dd 1f       	adc	r29, r29
    2f20:	c8 5b       	subi	r28, 0xB8	; 184
    2f22:	d8 4e       	sbci	r29, 0xE8	; 232
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	8c 83       	std	Y+4, r24	; 0x04
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	08 95       	ret

00002f32 <led_led_on>:
    2f32:	28 2f       	mov	r18, r24
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	f9 01       	movw	r30, r18
    2f38:	ee 0f       	add	r30, r30
    2f3a:	ff 1f       	adc	r31, r31
    2f3c:	e2 0f       	add	r30, r18
    2f3e:	f3 1f       	adc	r31, r19
    2f40:	ee 0f       	add	r30, r30
    2f42:	ff 1f       	adc	r31, r31
    2f44:	e8 5b       	subi	r30, 0xB8	; 184
    2f46:	f8 4e       	sbci	r31, 0xE8	; 232
    2f48:	93 e0       	ldi	r25, 0x03	; 3
    2f4a:	94 83       	std	Z+4, r25	; 0x04
    2f4c:	b0 ce       	rjmp	.-672    	; 0x2cae <_turn_on>
    2f4e:	08 95       	ret

00002f50 <led_led_off>:
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	f9 01       	movw	r30, r18
    2f56:	ee 0f       	add	r30, r30
    2f58:	ff 1f       	adc	r31, r31
    2f5a:	e2 0f       	add	r30, r18
    2f5c:	f3 1f       	adc	r31, r19
    2f5e:	ee 0f       	add	r30, r30
    2f60:	ff 1f       	adc	r31, r31
    2f62:	e8 5b       	subi	r30, 0xB8	; 184
    2f64:	f8 4e       	sbci	r31, 0xE8	; 232
    2f66:	94 e0       	ldi	r25, 0x04	; 4
    2f68:	94 83       	std	Z+4, r25	; 0x04
    2f6a:	73 ce       	rjmp	.-794    	; 0x2c52 <_turn_off>
    2f6c:	08 95       	ret

00002f6e <led_long_puls>:
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	fc 01       	movw	r30, r24
    2f72:	ee 0f       	add	r30, r30
    2f74:	ff 1f       	adc	r31, r31
    2f76:	df 01       	movw	r26, r30
    2f78:	a8 0f       	add	r26, r24
    2f7a:	b9 1f       	adc	r27, r25
    2f7c:	aa 0f       	add	r26, r26
    2f7e:	bb 1f       	adc	r27, r27
    2f80:	a8 5b       	subi	r26, 0xB8	; 184
    2f82:	b8 4e       	sbci	r27, 0xE8	; 232
    2f84:	24 e0       	ldi	r18, 0x04	; 4
    2f86:	15 96       	adiw	r26, 0x05	; 5
    2f88:	2c 93       	st	X, r18
    2f8a:	15 97       	sbiw	r26, 0x05	; 5
    2f8c:	fd 01       	movw	r30, r26
    2f8e:	14 82       	std	Z+4, r1	; 0x04
    2f90:	08 95       	ret

00002f92 <led_short_puls>:
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	fc 01       	movw	r30, r24
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	df 01       	movw	r26, r30
    2f9c:	a8 0f       	add	r26, r24
    2f9e:	b9 1f       	adc	r27, r25
    2fa0:	aa 0f       	add	r26, r26
    2fa2:	bb 1f       	adc	r27, r27
    2fa4:	a8 5b       	subi	r26, 0xB8	; 184
    2fa6:	b8 4e       	sbci	r27, 0xE8	; 232
    2fa8:	21 e0       	ldi	r18, 0x01	; 1
    2faa:	15 96       	adiw	r26, 0x05	; 5
    2fac:	2c 93       	st	X, r18
    2fae:	15 97       	sbiw	r26, 0x05	; 5
    2fb0:	fd 01       	movw	r30, r26
    2fb2:	14 82       	std	Z+4, r1	; 0x04
    2fb4:	08 95       	ret

00002fb6 <_serial_call_back>:
    2fb6:	0f 93       	push	r16
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	1f 92       	push	r1
    2fc0:	1f 92       	push	r1
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	8c 01       	movw	r16, r24
    2fc8:	19 82       	std	Y+1, r1	; 0x01
    2fca:	2d c0       	rjmp	.+90     	; 0x3026 <_serial_call_back+0x70>
    2fcc:	e0 91 c4 17 	lds	r30, 0x17C4	; 0x8017c4 <rec_buf_inp.2947>
    2fd0:	ec 32       	cpi	r30, 0x2C	; 44
    2fd2:	50 f4       	brcc	.+20     	; 0x2fe8 <_serial_call_back+0x32>
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	8e 0f       	add	r24, r30
    2fd8:	80 93 c4 17 	sts	0x17C4, r24	; 0x8017c4 <rec_buf_inp.2947>
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	ea 50       	subi	r30, 0x0A	; 10
    2fe0:	f8 4e       	sbci	r31, 0xE8	; 232
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	80 83       	st	Z, r24
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <_serial_call_back+0x36>
    2fe8:	10 92 c4 17 	sts	0x17C4, r1	; 0x8017c4 <rec_buf_inp.2947>
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	8a 30       	cpi	r24, 0x0A	; 10
    2ff0:	d1 f4       	brne	.+52     	; 0x3026 <_serial_call_back+0x70>
    2ff2:	40 91 c4 17 	lds	r20, 0x17C4	; 0x8017c4 <rec_buf_inp.2947>
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	fa 01       	movw	r30, r20
    2ffa:	ec 50       	subi	r30, 0x0C	; 12
    2ffc:	f8 4e       	sbci	r31, 0xE8	; 232
    2ffe:	10 82       	st	Z, r1
    3000:	41 50       	subi	r20, 0x01	; 1
    3002:	51 09       	sbc	r21, r1
    3004:	9e 01       	movw	r18, r28
    3006:	2f 5f       	subi	r18, 0xFF	; 255
    3008:	3f 4f       	sbci	r19, 0xFF	; 255
    300a:	66 ef       	ldi	r22, 0xF6	; 246
    300c:	77 e1       	ldi	r23, 0x17	; 23
    300e:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    3012:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    3016:	0e 94 9c 0b 	call	0x1738	; 0x1738 <xStreamBufferSendFromISR>
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	81 11       	cpse	r24, r1
    301e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    3022:	10 92 c4 17 	sts	0x17C4, r1	; 0x8017c4 <rec_buf_inp.2947>
    3026:	be 01       	movw	r22, r28
    3028:	6e 5f       	subi	r22, 0xFE	; 254
    302a:	7f 4f       	sbci	r23, 0xFF	; 255
    302c:	c8 01       	movw	r24, r16
    302e:	8f d5       	rcall	.+2846   	; 0x3b4e <serial_get_byte>
    3030:	88 23       	and	r24, r24
    3032:	61 f2       	breq	.-104    	; 0x2fcc <_serial_call_back+0x16>
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

00003042 <_upload_message>:
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	8c 01       	movw	r16, r24
    304c:	eb 01       	movw	r28, r22
    304e:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    3052:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    3056:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xStreamBufferReset>
    305a:	b8 01       	movw	r22, r16
    305c:	80 e6       	ldi	r24, 0x60	; 96
    305e:	97 e1       	ldi	r25, 0x17	; 23
    3060:	0e 94 ef 23 	call	0x47de	; 0x47de <strcpy>
    3064:	20 97       	sbiw	r28, 0x00	; 0
    3066:	79 f0       	breq	.+30     	; 0x3086 <_upload_message+0x44>
    3068:	e0 e6       	ldi	r30, 0x60	; 96
    306a:	f7 e1       	ldi	r31, 0x17	; 23
    306c:	01 90       	ld	r0, Z+
    306e:	00 20       	and	r0, r0
    3070:	e9 f7       	brne	.-6      	; 0x306c <_upload_message+0x2a>
    3072:	31 97       	sbiw	r30, 0x01	; 1
    3074:	80 e2       	ldi	r24, 0x20	; 32
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	be 01       	movw	r22, r28
    307e:	80 e6       	ldi	r24, 0x60	; 96
    3080:	97 e1       	ldi	r25, 0x17	; 23
    3082:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <strcat>
    3086:	e0 e6       	ldi	r30, 0x60	; 96
    3088:	f7 e1       	ldi	r31, 0x17	; 23
    308a:	df 01       	movw	r26, r30
    308c:	0d 90       	ld	r0, X+
    308e:	00 20       	and	r0, r0
    3090:	e9 f7       	brne	.-6      	; 0x308c <_upload_message+0x4a>
    3092:	11 97       	sbiw	r26, 0x01	; 1
    3094:	8d e0       	ldi	r24, 0x0D	; 13
    3096:	9a e0       	ldi	r25, 0x0A	; 10
    3098:	11 96       	adiw	r26, 0x01	; 1
    309a:	9c 93       	st	X, r25
    309c:	8e 93       	st	-X, r24
    309e:	12 96       	adiw	r26, 0x02	; 2
    30a0:	1c 92       	st	X, r1
    30a2:	01 90       	ld	r0, Z+
    30a4:	00 20       	and	r0, r0
    30a6:	e9 f7       	brne	.-6      	; 0x30a2 <_upload_message+0x60>
    30a8:	31 97       	sbiw	r30, 0x01	; 1
    30aa:	e0 56       	subi	r30, 0x60	; 96
    30ac:	f7 41       	sbci	r31, 0x17	; 23
    30ae:	ae 2f       	mov	r26, r30
    30b0:	80 e6       	ldi	r24, 0x60	; 96
    30b2:	97 e1       	ldi	r25, 0x17	; 23
    30b4:	ac 01       	movw	r20, r24
    30b6:	6a 2f       	mov	r22, r26
    30b8:	80 91 c9 17 	lds	r24, 0x17C9	; 0x8017c9 <_rn2483_serial>
    30bc:	90 91 ca 17 	lds	r25, 0x17CA	; 0x8017ca <_rn2483_serial+0x1>
    30c0:	f6 d4       	rcall	.+2540   	; 0x3aae <serial_send_bytes>
    30c2:	81 11       	cpse	r24, r1
    30c4:	11 c0       	rjmp	.+34     	; 0x30e8 <_upload_message+0xa6>
    30c6:	08 e2       	ldi	r16, 0x28	; 40
    30c8:	15 e0       	ldi	r17, 0x05	; 5
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	4d e2       	ldi	r20, 0x2D	; 45
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	60 e5       	ldi	r22, 0x50	; 80
    30d4:	78 e1       	ldi	r23, 0x18	; 24
    30d6:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    30da:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    30de:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xStreamBufferReceive>
    30e2:	80 e5       	ldi	r24, 0x50	; 80
    30e4:	98 e1       	ldi	r25, 0x18	; 24
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <_upload_message+0xaa>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	0f 91       	pop	r16
    30f4:	08 95       	ret

000030f6 <_reply2return_code>:
    30f6:	2f 92       	push	r2
    30f8:	3f 92       	push	r3
    30fa:	4f 92       	push	r4
    30fc:	5f 92       	push	r5
    30fe:	6f 92       	push	r6
    3100:	7f 92       	push	r7
    3102:	8f 92       	push	r8
    3104:	9f 92       	push	r9
    3106:	af 92       	push	r10
    3108:	bf 92       	push	r11
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	5c 01       	movw	r10, r24
    311c:	fc 01       	movw	r30, r24
    311e:	01 90       	ld	r0, Z+
    3120:	00 20       	and	r0, r0
    3122:	e9 f7       	brne	.-6      	; 0x311e <_reply2return_code+0x28>
    3124:	31 97       	sbiw	r30, 0x01	; 1
    3126:	6f 01       	movw	r12, r30
    3128:	c8 1a       	sub	r12, r24
    312a:	d9 0a       	sbc	r13, r25
    312c:	5c 2c       	mov	r5, r12
    312e:	0f 2e       	mov	r0, r31
    3130:	f1 e5       	ldi	r31, 0x51	; 81
    3132:	8f 2e       	mov	r8, r31
    3134:	f6 e0       	ldi	r31, 0x06	; 6
    3136:	9f 2e       	mov	r9, r31
    3138:	f0 2d       	mov	r31, r0
    313a:	e1 2c       	mov	r14, r1
    313c:	f1 2c       	mov	r15, r1
    313e:	4c 2c       	mov	r4, r12
    3140:	37 01       	movw	r6, r14
    3142:	f4 01       	movw	r30, r8
    3144:	01 81       	ldd	r16, Z+1	; 0x01
    3146:	12 81       	ldd	r17, Z+2	; 0x02
    3148:	e8 01       	movw	r28, r16
    314a:	09 90       	ld	r0, Y+
    314c:	00 20       	and	r0, r0
    314e:	e9 f7       	brne	.-6      	; 0x314a <_reply2return_code+0x54>
    3150:	21 97       	sbiw	r28, 0x01	; 1
    3152:	c0 1b       	sub	r28, r16
    3154:	d1 0b       	sbc	r29, r17
    3156:	3c 2e       	mov	r3, r28
    3158:	f9 e0       	ldi	r31, 0x09	; 9
    315a:	cf 16       	cp	r12, r31
    315c:	d1 04       	cpc	r13, r1
    315e:	58 f0       	brcs	.+22     	; 0x3176 <_reply2return_code+0x80>
    3160:	f4 01       	movw	r30, r8
    3162:	20 80       	ld	r2, Z
    3164:	fe e0       	ldi	r31, 0x0E	; 14
    3166:	2f 12       	cpse	r2, r31
    3168:	06 c0       	rjmp	.+12     	; 0x3176 <_reply2return_code+0x80>
    316a:	b8 01       	movw	r22, r16
    316c:	c5 01       	movw	r24, r10
    316e:	0e 94 bf 23 	call	0x477e	; 0x477e <strcasestr>
    3172:	89 2b       	or	r24, r25
    3174:	09 f5       	brne	.+66     	; 0x31b8 <_reply2return_code+0xc2>
    3176:	44 2d       	mov	r20, r4
    3178:	35 14       	cp	r3, r5
    317a:	08 f4       	brcc	.+2      	; 0x317e <_reply2return_code+0x88>
    317c:	4c 2f       	mov	r20, r28
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	b8 01       	movw	r22, r16
    3182:	c5 01       	movw	r24, r10
    3184:	0e 94 f6 23 	call	0x47ec	; 0x47ec <strncasecmp>
    3188:	89 2b       	or	r24, r25
    318a:	49 f4       	brne	.+18     	; 0x319e <_reply2return_code+0xa8>
    318c:	f3 01       	movw	r30, r6
    318e:	ee 0f       	add	r30, r30
    3190:	ff 1f       	adc	r31, r31
    3192:	e6 0d       	add	r30, r6
    3194:	f7 1d       	adc	r31, r7
    3196:	ef 5a       	subi	r30, 0xAF	; 175
    3198:	f9 4f       	sbci	r31, 0xF9	; 249
    319a:	20 80       	ld	r2, Z
    319c:	0d c0       	rjmp	.+26     	; 0x31b8 <_reply2return_code+0xc2>
    319e:	8f ef       	ldi	r24, 0xFF	; 255
    31a0:	e8 1a       	sub	r14, r24
    31a2:	f8 0a       	sbc	r15, r24
    31a4:	e3 e0       	ldi	r30, 0x03	; 3
    31a6:	8e 0e       	add	r8, r30
    31a8:	91 1c       	adc	r9, r1
    31aa:	f1 e1       	ldi	r31, 0x11	; 17
    31ac:	ef 16       	cp	r14, r31
    31ae:	f1 04       	cpc	r15, r1
    31b0:	39 f6       	brne	.-114    	; 0x3140 <_reply2return_code+0x4a>
    31b2:	68 94       	set
    31b4:	22 24       	eor	r2, r2
    31b6:	24 f8       	bld	r2, 4
    31b8:	82 2d       	mov	r24, r2
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	ff 90       	pop	r15
    31c4:	ef 90       	pop	r14
    31c6:	df 90       	pop	r13
    31c8:	cf 90       	pop	r12
    31ca:	bf 90       	pop	r11
    31cc:	af 90       	pop	r10
    31ce:	9f 90       	pop	r9
    31d0:	8f 90       	pop	r8
    31d2:	7f 90       	pop	r7
    31d4:	6f 90       	pop	r6
    31d6:	5f 90       	pop	r5
    31d8:	4f 90       	pop	r4
    31da:	3f 90       	pop	r3
    31dc:	2f 90       	pop	r2
    31de:	08 95       	ret

000031e0 <_upload_message_rc>:
    31e0:	30 df       	rcall	.-416    	; 0x3042 <_upload_message>
    31e2:	89 cf       	rjmp	.-238    	; 0x30f6 <_reply2return_code>
    31e4:	08 95       	ret

000031e6 <lora_driver_flush_buffers>:
    31e6:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    31ea:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    31ee:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <xStreamBufferReset>
    31f2:	08 95       	ret

000031f4 <lora_driver_create>:
    31f4:	8f 92       	push	r8
    31f6:	9f 92       	push	r9
    31f8:	af 92       	push	r10
    31fa:	cf 92       	push	r12
    31fc:	ef 92       	push	r14
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	c8 2f       	mov	r28, r24
    3206:	8b 01       	movw	r16, r22
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	88 ec       	ldi	r24, 0xC8	; 200
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 88 0a 	call	0x1510	; 0x1510 <xStreamBufferGenericCreate>
    3216:	90 93 c8 17 	sts	0x17C8, r25	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    321a:	80 93 c7 17 	sts	0x17C7, r24	; 0x8017c7 <_serial_reply_buffer_handle>
    321e:	10 93 c6 17 	sts	0x17C6, r17	; 0x8017c6 <_downlinkMessageBuffer+0x1>
    3222:	00 93 c5 17 	sts	0x17C5, r16	; 0x8017c5 <_downlinkMessageBuffer>
    3226:	0f 2e       	mov	r0, r31
    3228:	fb ed       	ldi	r31, 0xDB	; 219
    322a:	8f 2e       	mov	r8, r31
    322c:	f7 e1       	ldi	r31, 0x17	; 23
    322e:	9f 2e       	mov	r9, r31
    3230:	f0 2d       	mov	r31, r0
    3232:	68 94       	set
    3234:	aa 24       	eor	r10, r10
    3236:	a6 f8       	bld	r10, 6
    3238:	68 94       	set
    323a:	cc 24       	eor	r12, r12
    323c:	c6 f8       	bld	r12, 6
    323e:	e1 2c       	mov	r14, r1
    3240:	00 e0       	ldi	r16, 0x00	; 0
    3242:	23 e0       	ldi	r18, 0x03	; 3
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	51 ee       	ldi	r21, 0xE1	; 225
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	70 e0       	ldi	r23, 0x00	; 0
    324c:	8c 2f       	mov	r24, r28
    324e:	74 d3       	rcall	.+1768   	; 0x3938 <serial_new_instance>
    3250:	90 93 ca 17 	sts	0x17CA, r25	; 0x8017ca <_rn2483_serial+0x1>
    3254:	80 93 c9 17 	sts	0x17C9, r24	; 0x8017c9 <_rn2483_serial>
    3258:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    325c:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    3260:	64 e0       	ldi	r22, 0x04	; 4
    3262:	87 e0       	ldi	r24, 0x07	; 7
    3264:	91 e0       	ldi	r25, 0x01	; 1
    3266:	19 95       	eicall
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	ef 90       	pop	r14
    3270:	cf 90       	pop	r12
    3272:	af 90       	pop	r10
    3274:	9f 90       	pop	r9
    3276:	8f 90       	pop	r8
    3278:	08 95       	ret

0000327a <lora_driver_reset_rn2483>:
    327a:	88 23       	and	r24, r24
    327c:	49 f0       	breq	.+18     	; 0x3290 <lora_driver_reset_rn2483+0x16>
    327e:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <register_access+0x12>
    3282:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <register_access+0x13>
    3286:	64 e0       	ldi	r22, 0x04	; 4
    3288:	88 e0       	ldi	r24, 0x08	; 8
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	19 95       	eicall
    328e:	08 95       	ret
    3290:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <register_access+0x8>
    3294:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <register_access+0x9>
    3298:	64 e0       	ldi	r22, 0x04	; 4
    329a:	88 e0       	ldi	r24, 0x08	; 8
    329c:	91 e0       	ldi	r25, 0x01	; 1
    329e:	19 95       	eicall
    32a0:	08 95       	ret

000032a2 <lora_driver_rn2483_factory_reset>:
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	87 ed       	ldi	r24, 0xD7	; 215
    32a8:	93 e0       	ldi	r25, 0x03	; 3
    32aa:	cb de       	rcall	.-618    	; 0x3042 <_upload_message>
    32ac:	e0 e5       	ldi	r30, 0x50	; 80
    32ae:	f8 e1       	ldi	r31, 0x18	; 24
    32b0:	01 90       	ld	r0, Z+
    32b2:	00 20       	and	r0, r0
    32b4:	e9 f7       	brne	.-6      	; 0x32b0 <lora_driver_rn2483_factory_reset+0xe>
    32b6:	31 97       	sbiw	r30, 0x01	; 1
    32b8:	e0 55       	subi	r30, 0x50	; 80
    32ba:	f8 41       	sbci	r31, 0x18	; 24
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	75 97       	sbiw	r30, 0x15	; 21
    32c0:	08 f0       	brcs	.+2      	; 0x32c4 <lora_driver_rn2483_factory_reset+0x22>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	08 95       	ret

000032c6 <lora_driver_get_rn2483_hweui>:
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	ec 01       	movw	r28, r24
    32cc:	60 e0       	ldi	r22, 0x00	; 0
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	88 ee       	ldi	r24, 0xE8	; 232
    32d2:	93 e0       	ldi	r25, 0x03	; 3
    32d4:	b6 de       	rcall	.-660    	; 0x3042 <_upload_message>
    32d6:	e0 e5       	ldi	r30, 0x50	; 80
    32d8:	f8 e1       	ldi	r31, 0x18	; 24
    32da:	01 90       	ld	r0, Z+
    32dc:	00 20       	and	r0, r0
    32de:	e9 f7       	brne	.-6      	; 0x32da <lora_driver_get_rn2483_hweui+0x14>
    32e0:	e1 56       	subi	r30, 0x61	; 97
    32e2:	f8 41       	sbci	r31, 0x18	; 24
    32e4:	39 f4       	brne	.+14     	; 0x32f4 <lora_driver_get_rn2483_hweui+0x2e>
    32e6:	60 e5       	ldi	r22, 0x50	; 80
    32e8:	78 e1       	ldi	r23, 0x18	; 24
    32ea:	ce 01       	movw	r24, r28
    32ec:	0e 94 ef 23 	call	0x47de	; 0x47de <strcpy>
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <lora_driver_get_rn2483_hweui+0x32>
    32f4:	18 82       	st	Y, r1
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <lora_driver_set_device_identifier>:
    32fe:	fc 01       	movw	r30, r24
    3300:	01 90       	ld	r0, Z+
    3302:	00 20       	and	r0, r0
    3304:	e9 f7       	brne	.-6      	; 0x3300 <lora_driver_set_device_identifier+0x2>
    3306:	9f 01       	movw	r18, r30
    3308:	21 51       	subi	r18, 0x11	; 17
    330a:	31 09       	sbc	r19, r1
    330c:	28 17       	cp	r18, r24
    330e:	39 07       	cpc	r19, r25
    3310:	29 f4       	brne	.+10     	; 0x331c <lora_driver_set_device_identifier+0x1e>
    3312:	bc 01       	movw	r22, r24
    3314:	86 e1       	ldi	r24, 0x16	; 22
    3316:	94 e0       	ldi	r25, 0x04	; 4
    3318:	63 cf       	rjmp	.-314    	; 0x31e0 <_upload_message_rc>
    331a:	08 95       	ret
    331c:	89 e0       	ldi	r24, 0x09	; 9
    331e:	08 95       	ret

00003320 <lora_driver_set_application_identifier>:
    3320:	fc 01       	movw	r30, r24
    3322:	01 90       	ld	r0, Z+
    3324:	00 20       	and	r0, r0
    3326:	e9 f7       	brne	.-6      	; 0x3322 <lora_driver_set_application_identifier+0x2>
    3328:	9f 01       	movw	r18, r30
    332a:	21 51       	subi	r18, 0x11	; 17
    332c:	31 09       	sbc	r19, r1
    332e:	28 17       	cp	r18, r24
    3330:	39 07       	cpc	r19, r25
    3332:	29 f4       	brne	.+10     	; 0x333e <lora_driver_set_application_identifier+0x1e>
    3334:	bc 01       	movw	r22, r24
    3336:	85 e2       	ldi	r24, 0x25	; 37
    3338:	94 e0       	ldi	r25, 0x04	; 4
    333a:	52 cf       	rjmp	.-348    	; 0x31e0 <_upload_message_rc>
    333c:	08 95       	ret
    333e:	89 e0       	ldi	r24, 0x09	; 9
    3340:	08 95       	ret

00003342 <lora_driver_set_application_key>:
    3342:	fc 01       	movw	r30, r24
    3344:	01 90       	ld	r0, Z+
    3346:	00 20       	and	r0, r0
    3348:	e9 f7       	brne	.-6      	; 0x3344 <lora_driver_set_application_key+0x2>
    334a:	9f 01       	movw	r18, r30
    334c:	21 52       	subi	r18, 0x21	; 33
    334e:	31 09       	sbc	r19, r1
    3350:	28 17       	cp	r18, r24
    3352:	39 07       	cpc	r19, r25
    3354:	29 f4       	brne	.+10     	; 0x3360 <lora_driver_set_application_key+0x1e>
    3356:	bc 01       	movw	r22, r24
    3358:	84 e3       	ldi	r24, 0x34	; 52
    335a:	94 e0       	ldi	r25, 0x04	; 4
    335c:	41 cf       	rjmp	.-382    	; 0x31e0 <_upload_message_rc>
    335e:	08 95       	ret
    3360:	89 e0       	ldi	r24, 0x09	; 9
    3362:	08 95       	ret

00003364 <lora_driver_save_mac>:
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	83 e7       	ldi	r24, 0x73	; 115
    336a:	94 e0       	ldi	r25, 0x04	; 4
    336c:	39 cf       	rjmp	.-398    	; 0x31e0 <_upload_message_rc>
    336e:	08 95       	ret

00003370 <lora_driver_join>:
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	e8 2f       	mov	r30, r24
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	ee 0f       	add	r30, r30
    337a:	ff 1f       	adc	r31, r31
    337c:	e3 5b       	subi	r30, 0xB3	; 179
    337e:	f9 4f       	sbci	r31, 0xF9	; 249
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	8c e7       	ldi	r24, 0x7C	; 124
    3386:	94 e0       	ldi	r25, 0x04	; 4
    3388:	2b df       	rcall	.-426    	; 0x31e0 <_upload_message_rc>
    338a:	81 11       	cpse	r24, r1
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <lora_driver_join+0x46>
    338e:	08 e2       	ldi	r16, 0x28	; 40
    3390:	15 e0       	ldi	r17, 0x05	; 5
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4d e2       	ldi	r20, 0x2D	; 45
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	60 e5       	ldi	r22, 0x50	; 80
    339c:	78 e1       	ldi	r23, 0x18	; 24
    339e:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    33a2:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    33a6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xStreamBufferReceive>
    33aa:	88 23       	and	r24, r24
    33ac:	21 f0       	breq	.+8      	; 0x33b6 <lora_driver_join+0x46>
    33ae:	80 e5       	ldi	r24, 0x50	; 80
    33b0:	98 e1       	ldi	r25, 0x18	; 24
    33b2:	a1 de       	rcall	.-702    	; 0x30f6 <_reply2return_code>
    33b4:	03 c0       	rjmp	.+6      	; 0x33bc <lora_driver_join+0x4c>
    33b6:	80 e5       	ldi	r24, 0x50	; 80
    33b8:	98 e1       	ldi	r25, 0x18	; 24
    33ba:	9d de       	rcall	.-710    	; 0x30f6 <_reply2return_code>
    33bc:	1f 91       	pop	r17
    33be:	0f 91       	pop	r16
    33c0:	08 95       	ret

000033c2 <lora_driver_sent_upload_message>:
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	1f 92       	push	r1
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	db 01       	movw	r26, r22
    33d2:	11 96       	adiw	r26, 0x01	; 1
    33d4:	9c 91       	ld	r25, X
    33d6:	11 97       	sbiw	r26, 0x01	; 1
    33d8:	95 31       	cpi	r25, 0x15	; 21
    33da:	08 f0       	brcs	.+2      	; 0x33de <lora_driver_sent_upload_message+0x1c>
    33dc:	b4 c0       	rjmp	.+360    	; 0x3546 <lora_driver_sent_upload_message+0x184>
    33de:	99 23       	and	r25, r25
    33e0:	81 f1       	breq	.+96     	; 0x3442 <lora_driver_sent_upload_message+0x80>
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	27 2f       	mov	r18, r23
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	46 2f       	mov	r20, r22
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	fd 01       	movw	r30, r26
    33f0:	e4 0f       	add	r30, r20
    33f2:	f5 1f       	adc	r31, r21
    33f4:	92 81       	ldd	r25, Z+2	; 0x02
    33f6:	92 95       	swap	r25
    33f8:	9f 70       	andi	r25, 0x0F	; 15
    33fa:	9a 30       	cpi	r25, 0x0A	; 10
    33fc:	10 f0       	brcs	.+4      	; 0x3402 <lora_driver_sent_upload_message+0x40>
    33fe:	99 5c       	subi	r25, 0xC9	; 201
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <lora_driver_sent_upload_message+0x42>
    3402:	90 5d       	subi	r25, 0xD0	; 208
    3404:	f9 01       	movw	r30, r18
    3406:	ef 51       	subi	r30, 0x1F	; 31
    3408:	f8 4e       	sbci	r31, 0xE8	; 232
    340a:	90 83       	st	Z, r25
    340c:	2f 5f       	subi	r18, 0xFF	; 255
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	fd 01       	movw	r30, r26
    3412:	e4 0f       	add	r30, r20
    3414:	f5 1f       	adc	r31, r21
    3416:	92 81       	ldd	r25, Z+2	; 0x02
    3418:	9f 70       	andi	r25, 0x0F	; 15
    341a:	49 2f       	mov	r20, r25
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	4a 30       	cpi	r20, 0x0A	; 10
    3420:	51 05       	cpc	r21, r1
    3422:	14 f0       	brlt	.+4      	; 0x3428 <lora_driver_sent_upload_message+0x66>
    3424:	99 5c       	subi	r25, 0xC9	; 201
    3426:	01 c0       	rjmp	.+2      	; 0x342a <lora_driver_sent_upload_message+0x68>
    3428:	90 5d       	subi	r25, 0xD0	; 208
    342a:	f9 01       	movw	r30, r18
    342c:	ef 51       	subi	r30, 0x1F	; 31
    342e:	f8 4e       	sbci	r31, 0xE8	; 232
    3430:	90 83       	st	Z, r25
    3432:	7e 5f       	subi	r23, 0xFE	; 254
    3434:	6f 5f       	subi	r22, 0xFF	; 255
    3436:	11 96       	adiw	r26, 0x01	; 1
    3438:	9c 91       	ld	r25, X
    343a:	11 97       	sbiw	r26, 0x01	; 1
    343c:	69 17       	cp	r22, r25
    343e:	98 f2       	brcs	.-90     	; 0x33e6 <lora_driver_sent_upload_message+0x24>
    3440:	01 c0       	rjmp	.+2      	; 0x3444 <lora_driver_sent_upload_message+0x82>
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	e7 2f       	mov	r30, r23
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	ef 51       	subi	r30, 0x1F	; 31
    344a:	f8 4e       	sbci	r31, 0xE8	; 232
    344c:	10 82       	st	Z, r1
    344e:	4c 91       	ld	r20, X
    3450:	81 11       	cpse	r24, r1
    3452:	03 c0       	rjmp	.+6      	; 0x345a <lora_driver_sent_upload_message+0x98>
    3454:	85 e8       	ldi	r24, 0x85	; 133
    3456:	94 e0       	ldi	r25, 0x04	; 4
    3458:	02 c0       	rjmp	.+4      	; 0x345e <lora_driver_sent_upload_message+0x9c>
    345a:	87 e8       	ldi	r24, 0x87	; 135
    345c:	94 e0       	ldi	r25, 0x04	; 4
    345e:	21 ee       	ldi	r18, 0xE1	; 225
    3460:	37 e1       	ldi	r19, 0x17	; 23
    3462:	3f 93       	push	r19
    3464:	2f 93       	push	r18
    3466:	1f 92       	push	r1
    3468:	4f 93       	push	r20
    346a:	9f 93       	push	r25
    346c:	8f 93       	push	r24
    346e:	8b e8       	ldi	r24, 0x8B	; 139
    3470:	94 e0       	ldi	r25, 0x04	; 4
    3472:	9f 93       	push	r25
    3474:	8f 93       	push	r24
    3476:	83 e2       	ldi	r24, 0x23	; 35
    3478:	98 e1       	ldi	r25, 0x18	; 24
    347a:	9f 93       	push	r25
    347c:	8f 93       	push	r24
    347e:	0e 94 51 24 	call	0x48a2	; 0x48a2 <sprintf>
    3482:	60 e0       	ldi	r22, 0x00	; 0
    3484:	70 e0       	ldi	r23, 0x00	; 0
    3486:	83 e2       	ldi	r24, 0x23	; 35
    3488:	98 e1       	ldi	r25, 0x18	; 24
    348a:	aa de       	rcall	.-684    	; 0x31e0 <_upload_message_rc>
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	81 11       	cpse	r24, r1
    3498:	59 c0       	rjmp	.+178    	; 0x354c <lora_driver_sent_upload_message+0x18a>
    349a:	08 e2       	ldi	r16, 0x28	; 40
    349c:	15 e0       	ldi	r17, 0x05	; 5
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	4d e2       	ldi	r20, 0x2D	; 45
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	60 e5       	ldi	r22, 0x50	; 80
    34a8:	78 e1       	ldi	r23, 0x18	; 24
    34aa:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_serial_reply_buffer_handle>
    34ae:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_serial_reply_buffer_handle+0x1>
    34b2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xStreamBufferReceive>
    34b6:	88 23       	and	r24, r24
    34b8:	09 f4       	brne	.+2      	; 0x34bc <lora_driver_sent_upload_message+0xfa>
    34ba:	47 c0       	rjmp	.+142    	; 0x354a <lora_driver_sent_upload_message+0x188>
    34bc:	80 e5       	ldi	r24, 0x50	; 80
    34be:	98 e1       	ldi	r25, 0x18	; 24
    34c0:	1a de       	rcall	.-972    	; 0x30f6 <_reply2return_code>
    34c2:	8e 30       	cpi	r24, 0x0E	; 14
    34c4:	09 f0       	breq	.+2      	; 0x34c8 <lora_driver_sent_upload_message+0x106>
    34c6:	42 c0       	rjmp	.+132    	; 0x354c <lora_driver_sent_upload_message+0x18a>
    34c8:	87 e0       	ldi	r24, 0x07	; 7
    34ca:	89 83       	std	Y+1, r24	; 0x01
    34cc:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <_downlinkMessageBuffer>
    34d0:	90 91 c6 17 	lds	r25, 0x17C6	; 0x8017c6 <_downlinkMessageBuffer+0x1>
    34d4:	89 2b       	or	r24, r25
    34d6:	a9 f1       	breq	.+106    	; 0x3542 <lora_driver_sent_upload_message+0x180>
    34d8:	be 01       	movw	r22, r28
    34da:	6f 5f       	subi	r22, 0xFF	; 255
    34dc:	7f 4f       	sbci	r23, 0xFF	; 255
    34de:	80 e5       	ldi	r24, 0x50	; 80
    34e0:	98 e1       	ldi	r25, 0x18	; 24
    34e2:	68 d1       	rcall	.+720    	; 0x37b4 <decode_port_no>
    34e4:	80 93 cb 17 	sts	0x17CB, r24	; 0x8017cb <_downlink_payload>
    34e8:	e9 81       	ldd	r30, Y+1	; 0x01
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	e0 5b       	subi	r30, 0xB0	; 176
    34ee:	f7 4e       	sbci	r31, 0xE7	; 231
    34f0:	df 01       	movw	r26, r30
    34f2:	0d 90       	ld	r0, X+
    34f4:	00 20       	and	r0, r0
    34f6:	e9 f7       	brne	.-6      	; 0x34f2 <lora_driver_sent_upload_message+0x130>
    34f8:	11 97       	sbiw	r26, 0x01	; 1
    34fa:	ae 1b       	sub	r26, r30
    34fc:	bf 0b       	sbc	r27, r31
    34fe:	aa 23       	and	r26, r26
    3500:	91 f0       	breq	.+36     	; 0x3526 <lora_driver_sent_upload_message+0x164>
    3502:	bb 27       	eor	r27, r27
    3504:	cd 01       	movw	r24, r26
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	9c 01       	movw	r18, r24
    350a:	12 f4       	brpl	.+4      	; 0x3510 <lora_driver_sent_upload_message+0x14e>
    350c:	2f 5f       	subi	r18, 0xFF	; 255
    350e:	3f 4f       	sbci	r19, 0xFF	; 255
    3510:	35 95       	asr	r19
    3512:	27 95       	ror	r18
    3514:	20 93 cc 17 	sts	0x17CC, r18	; 0x8017cc <_downlink_payload+0x1>
    3518:	af 01       	movw	r20, r30
    351a:	4f 5f       	subi	r20, 0xFF	; 255
    351c:	5f 4f       	sbci	r21, 0xFF	; 255
    351e:	64 e1       	ldi	r22, 0x14	; 20
    3520:	8d ec       	ldi	r24, 0xCD	; 205
    3522:	97 e1       	ldi	r25, 0x17	; 23
    3524:	73 d1       	rcall	.+742    	; 0x380c <decode_hexadecimal_string_bytes>
    3526:	01 e0       	ldi	r16, 0x01	; 1
    3528:	10 e0       	ldi	r17, 0x00	; 0
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	46 e1       	ldi	r20, 0x16	; 22
    3530:	50 e0       	ldi	r21, 0x00	; 0
    3532:	6b ec       	ldi	r22, 0xCB	; 203
    3534:	77 e1       	ldi	r23, 0x17	; 23
    3536:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <_downlinkMessageBuffer>
    353a:	90 91 c6 17 	lds	r25, 0x17C6	; 0x8017c6 <_downlinkMessageBuffer+0x1>
    353e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <xStreamBufferSend>
    3542:	8e e0       	ldi	r24, 0x0E	; 14
    3544:	03 c0       	rjmp	.+6      	; 0x354c <lora_driver_sent_upload_message+0x18a>
    3546:	84 e1       	ldi	r24, 0x14	; 20
    3548:	01 c0       	rjmp	.+2      	; 0x354c <lora_driver_sent_upload_message+0x18a>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	0f 90       	pop	r0
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	08 95       	ret

00003558 <lora_driver_set_adaptive_data_rate>:
    3558:	81 30       	cpi	r24, 0x01	; 1
    355a:	19 f0       	breq	.+6      	; 0x3562 <lora_driver_set_adaptive_data_rate+0xa>
    355c:	6b e9       	ldi	r22, 0x9B	; 155
    355e:	74 e0       	ldi	r23, 0x04	; 4
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <lora_driver_set_adaptive_data_rate+0xe>
    3562:	64 e7       	ldi	r22, 0x74	; 116
    3564:	75 e0       	ldi	r23, 0x05	; 5
    3566:	8f e9       	ldi	r24, 0x9F	; 159
    3568:	94 e0       	ldi	r25, 0x04	; 4
    356a:	3a ce       	rjmp	.-908    	; 0x31e0 <_upload_message_rc>
    356c:	08 95       	ret

0000356e <lora_driver_set_receive_delay>:
    356e:	9f 93       	push	r25
    3570:	8f 93       	push	r24
    3572:	80 ed       	ldi	r24, 0xD0	; 208
    3574:	94 e0       	ldi	r25, 0x04	; 4
    3576:	9f 93       	push	r25
    3578:	8f 93       	push	r24
    357a:	83 e2       	ldi	r24, 0x23	; 35
    357c:	98 e1       	ldi	r25, 0x18	; 24
    357e:	9f 93       	push	r25
    3580:	8f 93       	push	r24
    3582:	0e 94 51 24 	call	0x48a2	; 0x48a2 <sprintf>
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	83 e2       	ldi	r24, 0x23	; 35
    358c:	98 e1       	ldi	r25, 0x18	; 24
    358e:	28 de       	rcall	.-944    	; 0x31e0 <_upload_message_rc>
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	08 95       	ret

0000359e <lora_driver_configure_to_eu868>:
    359e:	2f 92       	push	r2
    35a0:	3f 92       	push	r3
    35a2:	4f 92       	push	r4
    35a4:	5f 92       	push	r5
    35a6:	6f 92       	push	r6
    35a8:	7f 92       	push	r7
    35aa:	8f 92       	push	r8
    35ac:	9f 92       	push	r9
    35ae:	af 92       	push	r10
    35b0:	bf 92       	push	r11
    35b2:	cf 92       	push	r12
    35b4:	df 92       	push	r13
    35b6:	ef 92       	push	r14
    35b8:	ff 92       	push	r15
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	a0 97       	sbiw	r28, 0x20	; 32
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	6d ef       	ldi	r22, 0xFD	; 253
    35d4:	74 e0       	ldi	r23, 0x04	; 4
    35d6:	89 e0       	ldi	r24, 0x09	; 9
    35d8:	95 e0       	ldi	r25, 0x05	; 5
    35da:	33 dd       	rcall	.-1434   	; 0x3042 <_upload_message>
    35dc:	8c dd       	rcall	.-1256   	; 0x30f6 <_reply2return_code>
    35de:	81 11       	cpse	r24, r1
    35e0:	a3 c0       	rjmp	.+326    	; 0x3728 <lora_driver_configure_to_eu868+0x18a>
    35e2:	80 e2       	ldi	r24, 0x20	; 32
    35e4:	ec e1       	ldi	r30, 0x1C	; 28
    35e6:	f2 e0       	ldi	r31, 0x02	; 2
    35e8:	de 01       	movw	r26, r28
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	01 90       	ld	r0, Z+
    35ee:	0d 92       	st	X+, r0
    35f0:	8a 95       	dec	r24
    35f2:	e1 f7       	brne	.-8      	; 0x35ec <lora_driver_configure_to_eu868+0x4e>
    35f4:	9e 01       	movw	r18, r28
    35f6:	2f 5f       	subi	r18, 0xFF	; 255
    35f8:	3f 4f       	sbci	r19, 0xFF	; 255
    35fa:	69 01       	movw	r12, r18
    35fc:	e1 2c       	mov	r14, r1
    35fe:	f1 2c       	mov	r15, r1
    3600:	0f 2e       	mov	r0, r31
    3602:	f5 e1       	ldi	r31, 0x15	; 21
    3604:	af 2e       	mov	r10, r31
    3606:	f5 e0       	ldi	r31, 0x05	; 5
    3608:	bf 2e       	mov	r11, r31
    360a:	f0 2d       	mov	r31, r0
    360c:	03 e2       	ldi	r16, 0x23	; 35
    360e:	18 e1       	ldi	r17, 0x18	; 24
    3610:	0f 2e       	mov	r0, r31
    3612:	fe e2       	ldi	r31, 0x2E	; 46
    3614:	4f 2e       	mov	r4, r31
    3616:	f5 e0       	ldi	r31, 0x05	; 5
    3618:	5f 2e       	mov	r5, r31
    361a:	f0 2d       	mov	r31, r0
    361c:	0f 2e       	mov	r0, r31
    361e:	f5 e4       	ldi	r31, 0x45	; 69
    3620:	8f 2e       	mov	r8, r31
    3622:	f5 e0       	ldi	r31, 0x05	; 5
    3624:	9f 2e       	mov	r9, r31
    3626:	f0 2d       	mov	r31, r0
    3628:	0f 2e       	mov	r0, r31
    362a:	ff e5       	ldi	r31, 0x5F	; 95
    362c:	6f 2e       	mov	r6, r31
    362e:	f5 e0       	ldi	r31, 0x05	; 5
    3630:	7f 2e       	mov	r7, r31
    3632:	f0 2d       	mov	r31, r0
    3634:	3e 2c       	mov	r3, r14
    3636:	2f 2c       	mov	r2, r15
    3638:	ff 92       	push	r15
    363a:	ef 92       	push	r14
    363c:	bf 92       	push	r11
    363e:	af 92       	push	r10
    3640:	1f 93       	push	r17
    3642:	0f 93       	push	r16
    3644:	0e 94 51 24 	call	0x48a2	; 0x48a2 <sprintf>
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	70 e0       	ldi	r23, 0x00	; 0
    364c:	c8 01       	movw	r24, r16
    364e:	f9 dc       	rcall	.-1550   	; 0x3042 <_upload_message>
    3650:	52 dd       	rcall	.-1372   	; 0x30f6 <_reply2return_code>
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	81 11       	cpse	r24, r1
    3660:	63 c0       	rjmp	.+198    	; 0x3728 <lora_driver_configure_to_eu868+0x18a>
    3662:	32 e0       	ldi	r19, 0x02	; 2
    3664:	3e 15       	cp	r19, r14
    3666:	e8 f4       	brcc	.+58     	; 0x36a2 <lora_driver_configure_to_eu868+0x104>
    3668:	f6 01       	movw	r30, r12
    366a:	83 81       	ldd	r24, Z+3	; 0x03
    366c:	8f 93       	push	r24
    366e:	82 81       	ldd	r24, Z+2	; 0x02
    3670:	8f 93       	push	r24
    3672:	81 81       	ldd	r24, Z+1	; 0x01
    3674:	8f 93       	push	r24
    3676:	80 81       	ld	r24, Z
    3678:	8f 93       	push	r24
    367a:	ff 92       	push	r15
    367c:	ef 92       	push	r14
    367e:	5f 92       	push	r5
    3680:	4f 92       	push	r4
    3682:	1f 93       	push	r17
    3684:	0f 93       	push	r16
    3686:	0e 94 51 24 	call	0x48a2	; 0x48a2 <sprintf>
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	70 e0       	ldi	r23, 0x00	; 0
    368e:	c8 01       	movw	r24, r16
    3690:	d8 dc       	rcall	.-1616   	; 0x3042 <_upload_message>
    3692:	31 dd       	rcall	.-1438   	; 0x30f6 <_reply2return_code>
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	81 11       	cpse	r24, r1
    36a0:	43 c0       	rjmp	.+134    	; 0x3728 <lora_driver_configure_to_eu868+0x18a>
    36a2:	2f 92       	push	r2
    36a4:	3f 92       	push	r3
    36a6:	9f 92       	push	r9
    36a8:	8f 92       	push	r8
    36aa:	1f 93       	push	r17
    36ac:	0f 93       	push	r16
    36ae:	0e 94 51 24 	call	0x48a2	; 0x48a2 <sprintf>
    36b2:	60 e0       	ldi	r22, 0x00	; 0
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	c8 01       	movw	r24, r16
    36b8:	c4 dc       	rcall	.-1656   	; 0x3042 <_upload_message>
    36ba:	1d dd       	rcall	.-1478   	; 0x30f6 <_reply2return_code>
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	81 11       	cpse	r24, r1
    36ca:	2e c0       	rjmp	.+92     	; 0x3728 <lora_driver_configure_to_eu868+0x18a>
    36cc:	2f 92       	push	r2
    36ce:	3f 92       	push	r3
    36d0:	7f 92       	push	r7
    36d2:	6f 92       	push	r6
    36d4:	1f 93       	push	r17
    36d6:	0f 93       	push	r16
    36d8:	0e 94 51 24 	call	0x48a2	; 0x48a2 <sprintf>
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	c8 01       	movw	r24, r16
    36e2:	af dc       	rcall	.-1698   	; 0x3042 <_upload_message>
    36e4:	08 dd       	rcall	.-1520   	; 0x30f6 <_reply2return_code>
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	81 11       	cpse	r24, r1
    36f4:	19 c0       	rjmp	.+50     	; 0x3728 <lora_driver_configure_to_eu868+0x18a>
    36f6:	3f ef       	ldi	r19, 0xFF	; 255
    36f8:	e3 1a       	sub	r14, r19
    36fa:	f3 0a       	sbc	r15, r19
    36fc:	84 e0       	ldi	r24, 0x04	; 4
    36fe:	c8 0e       	add	r12, r24
    3700:	d1 1c       	adc	r13, r1
    3702:	98 e0       	ldi	r25, 0x08	; 8
    3704:	e9 16       	cp	r14, r25
    3706:	f1 04       	cpc	r15, r1
    3708:	09 f0       	breq	.+2      	; 0x370c <lora_driver_configure_to_eu868+0x16e>
    370a:	94 cf       	rjmp	.-216    	; 0x3634 <lora_driver_configure_to_eu868+0x96>
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	87 e7       	ldi	r24, 0x77	; 119
    3712:	95 e0       	ldi	r25, 0x05	; 5
    3714:	96 dc       	rcall	.-1748   	; 0x3042 <_upload_message>
    3716:	ef dc       	rcall	.-1570   	; 0x30f6 <_reply2return_code>
    3718:	81 11       	cpse	r24, r1
    371a:	06 c0       	rjmp	.+12     	; 0x3728 <lora_driver_configure_to_eu868+0x18a>
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	70 e0       	ldi	r23, 0x00	; 0
    3720:	88 e8       	ldi	r24, 0x88	; 136
    3722:	95 e0       	ldi	r25, 0x05	; 5
    3724:	8e dc       	rcall	.-1764   	; 0x3042 <_upload_message>
    3726:	e7 dc       	rcall	.-1586   	; 0x30f6 <_reply2return_code>
    3728:	a0 96       	adiw	r28, 0x20	; 32
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	cd bf       	out	0x3d, r28	; 61
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	1f 91       	pop	r17
    373a:	0f 91       	pop	r16
    373c:	ff 90       	pop	r15
    373e:	ef 90       	pop	r14
    3740:	df 90       	pop	r13
    3742:	cf 90       	pop	r12
    3744:	bf 90       	pop	r11
    3746:	af 90       	pop	r10
    3748:	9f 90       	pop	r9
    374a:	8f 90       	pop	r8
    374c:	7f 90       	pop	r7
    374e:	6f 90       	pop	r6
    3750:	5f 90       	pop	r5
    3752:	4f 90       	pop	r4
    3754:	3f 90       	pop	r3
    3756:	2f 90       	pop	r2
    3758:	08 95       	ret

0000375a <lora_driver_set_otaa_identity>:
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	ec 01       	movw	r28, r24
    3768:	8b 01       	movw	r16, r22
    376a:	7a 01       	movw	r14, r20
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	f4 de       	rcall	.-536    	; 0x3558 <lora_driver_set_adaptive_data_rate>
    3770:	81 11       	cpse	r24, r1
    3772:	0d c0       	rjmp	.+26     	; 0x378e <lora_driver_set_otaa_identity+0x34>
    3774:	ce 01       	movw	r24, r28
    3776:	d4 dd       	rcall	.-1112   	; 0x3320 <lora_driver_set_application_identifier>
    3778:	81 11       	cpse	r24, r1
    377a:	09 c0       	rjmp	.+18     	; 0x378e <lora_driver_set_otaa_identity+0x34>
    377c:	c8 01       	movw	r24, r16
    377e:	e1 dd       	rcall	.-1086   	; 0x3342 <lora_driver_set_application_key>
    3780:	81 11       	cpse	r24, r1
    3782:	05 c0       	rjmp	.+10     	; 0x378e <lora_driver_set_otaa_identity+0x34>
    3784:	c7 01       	movw	r24, r14
    3786:	bb dd       	rcall	.-1162   	; 0x32fe <lora_driver_set_device_identifier>
    3788:	81 11       	cpse	r24, r1
    378a:	01 c0       	rjmp	.+2      	; 0x378e <lora_driver_set_otaa_identity+0x34>
    378c:	eb dd       	rcall	.-1066   	; 0x3364 <lora_driver_save_mac>
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	08 95       	ret

0000379c <lora_driver_map_return_code_to_text>:
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	fc 01       	movw	r30, r24
    37a0:	ee 0f       	add	r30, r30
    37a2:	ff 1f       	adc	r31, r31
    37a4:	8e 0f       	add	r24, r30
    37a6:	9f 1f       	adc	r25, r31
    37a8:	fc 01       	movw	r30, r24
    37aa:	ef 5a       	subi	r30, 0xAF	; 175
    37ac:	f9 4f       	sbci	r31, 0xF9	; 249
    37ae:	81 81       	ldd	r24, Z+1	; 0x01
    37b0:	92 81       	ldd	r25, Z+2	; 0x02
    37b2:	08 95       	ret

000037b4 <decode_port_no>:
    37b4:	dc 01       	movw	r26, r24
    37b6:	00 97       	sbiw	r24, 0x00	; 0
    37b8:	29 f1       	breq	.+74     	; 0x3804 <decode_port_no+0x50>
    37ba:	fb 01       	movw	r30, r22
    37bc:	20 81       	ld	r18, Z
    37be:	fc 01       	movw	r30, r24
    37c0:	01 90       	ld	r0, Z+
    37c2:	00 20       	and	r0, r0
    37c4:	e9 f7       	brne	.-6      	; 0x37c0 <decode_port_no+0xc>
    37c6:	31 97       	sbiw	r30, 0x01	; 1
    37c8:	e8 1b       	sub	r30, r24
    37ca:	f9 0b       	sbc	r31, r25
    37cc:	82 2f       	mov	r24, r18
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	e8 17       	cp	r30, r24
    37d2:	f9 07       	cpc	r31, r25
    37d4:	c8 f0       	brcs	.+50     	; 0x3808 <decode_port_no+0x54>
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	08 c0       	rjmp	.+16     	; 0x37ea <decode_port_no+0x36>
    37da:	88 0f       	add	r24, r24
    37dc:	38 2f       	mov	r19, r24
    37de:	33 0f       	add	r19, r19
    37e0:	33 0f       	add	r19, r19
    37e2:	83 0f       	add	r24, r19
    37e4:	80 53       	subi	r24, 0x30	; 48
    37e6:	89 0f       	add	r24, r25
    37e8:	2f 5f       	subi	r18, 0xFF	; 255
    37ea:	fd 01       	movw	r30, r26
    37ec:	e2 0f       	add	r30, r18
    37ee:	f1 1d       	adc	r31, r1
    37f0:	90 81       	ld	r25, Z
    37f2:	30 ed       	ldi	r19, 0xD0	; 208
    37f4:	39 0f       	add	r19, r25
    37f6:	3a 30       	cpi	r19, 0x0A	; 10
    37f8:	10 f4       	brcc	.+4      	; 0x37fe <decode_port_no+0x4a>
    37fa:	91 11       	cpse	r25, r1
    37fc:	ee cf       	rjmp	.-36     	; 0x37da <decode_port_no+0x26>
    37fe:	fb 01       	movw	r30, r22
    3800:	20 83       	st	Z, r18
    3802:	08 95       	ret
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	08 95       	ret
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	08 95       	ret

0000380c <decode_hexadecimal_string_bytes>:
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	dc 01       	movw	r26, r24
    3816:	ea 01       	movw	r28, r20
    3818:	20 97       	sbiw	r28, 0x00	; 0
    381a:	e1 f1       	breq	.+120    	; 0x3894 <decode_hexadecimal_string_bytes+0x88>
    381c:	fa 01       	movw	r30, r20
    381e:	01 90       	ld	r0, Z+
    3820:	00 20       	and	r0, r0
    3822:	e9 f7       	brne	.-6      	; 0x381e <decode_hexadecimal_string_bytes+0x12>
    3824:	31 97       	sbiw	r30, 0x01	; 1
    3826:	e4 1b       	sub	r30, r20
    3828:	f5 0b       	sbc	r31, r21
    382a:	32 97       	sbiw	r30, 0x02	; 2
    382c:	10 f5       	brcc	.+68     	; 0x3872 <decode_hexadecimal_string_bytes+0x66>
    382e:	32 c0       	rjmp	.+100    	; 0x3894 <decode_hexadecimal_string_bytes+0x88>
    3830:	8d 01       	movw	r16, r26
    3832:	04 0f       	add	r16, r20
    3834:	15 1f       	adc	r17, r21
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	ae 01       	movw	r20, r28
    383a:	42 0f       	add	r20, r18
    383c:	53 1f       	adc	r21, r19
    383e:	fa 01       	movw	r30, r20
    3840:	90 81       	ld	r25, Z
    3842:	91 34       	cpi	r25, 0x41	; 65
    3844:	28 f0       	brcs	.+10     	; 0x3850 <decode_hexadecimal_string_bytes+0x44>
    3846:	97 53       	subi	r25, 0x37	; 55
    3848:	59 2f       	mov	r21, r25
    384a:	52 95       	swap	r21
    384c:	50 7f       	andi	r21, 0xF0	; 240
    384e:	03 c0       	rjmp	.+6      	; 0x3856 <decode_hexadecimal_string_bytes+0x4a>
    3850:	59 2f       	mov	r21, r25
    3852:	52 95       	swap	r21
    3854:	50 7f       	andi	r21, 0xF0	; 240
    3856:	2c 0f       	add	r18, r28
    3858:	3d 1f       	adc	r19, r29
    385a:	f9 01       	movw	r30, r18
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	91 34       	cpi	r25, 0x41	; 65
    3860:	10 f0       	brcs	.+4      	; 0x3866 <decode_hexadecimal_string_bytes+0x5a>
    3862:	97 53       	subi	r25, 0x37	; 55
    3864:	01 c0       	rjmp	.+2      	; 0x3868 <decode_hexadecimal_string_bytes+0x5c>
    3866:	90 53       	subi	r25, 0x30	; 48
    3868:	95 0f       	add	r25, r21
    386a:	f8 01       	movw	r30, r16
    386c:	90 83       	st	Z, r25
    386e:	8f 5f       	subi	r24, 0xFF	; 255
    3870:	01 c0       	rjmp	.+2      	; 0x3874 <decode_hexadecimal_string_bytes+0x68>
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	28 2f       	mov	r18, r24
    3876:	22 0f       	add	r18, r18
    3878:	48 2f       	mov	r20, r24
    387a:	50 e0       	ldi	r21, 0x00	; 0
    387c:	fe 01       	movw	r30, r28
    387e:	01 90       	ld	r0, Z+
    3880:	00 20       	and	r0, r0
    3882:	e9 f7       	brne	.-6      	; 0x387e <decode_hexadecimal_string_bytes+0x72>
    3884:	31 97       	sbiw	r30, 0x01	; 1
    3886:	ec 1b       	sub	r30, r28
    3888:	fd 0b       	sbc	r31, r29
    388a:	4e 17       	cp	r20, r30
    388c:	5f 07       	cpc	r21, r31
    388e:	10 f4       	brcc	.+4      	; 0x3894 <decode_hexadecimal_string_bytes+0x88>
    3890:	86 13       	cpse	r24, r22
    3892:	ce cf       	rjmp	.-100    	; 0x3830 <decode_hexadecimal_string_bytes+0x24>
    3894:	df 91       	pop	r29
    3896:	cf 91       	pop	r28
    3898:	1f 91       	pop	r17
    389a:	0f 91       	pop	r16
    389c:	08 95       	ret

0000389e <reg_read_register>:
    389e:	fc 01       	movw	r30, r24
    38a0:	80 81       	ld	r24, Z
    38a2:	08 95       	ret

000038a4 <reg_read_bit>:
    38a4:	fc 01       	movw	r30, r24
    38a6:	20 81       	ld	r18, Z
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <reg_read_bit+0xe>
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	6a 95       	dec	r22
    38b4:	e2 f7       	brpl	.-8      	; 0x38ae <reg_read_bit+0xa>
    38b6:	82 23       	and	r24, r18
    38b8:	08 95       	ret

000038ba <reg_read_bits>:
    38ba:	fc 01       	movw	r30, r24
    38bc:	80 81       	ld	r24, Z
    38be:	86 23       	and	r24, r22
    38c0:	08 95       	ret

000038c2 <reg_set_register>:
    38c2:	fc 01       	movw	r30, r24
    38c4:	60 83       	st	Z, r22
    38c6:	08 95       	ret

000038c8 <reg_clear_register>:
    38c8:	fc 01       	movw	r30, r24
    38ca:	10 82       	st	Z, r1
    38cc:	08 95       	ret

000038ce <reg_set_bit>:
    38ce:	fc 01       	movw	r30, r24
    38d0:	40 81       	ld	r20, Z
    38d2:	21 e0       	ldi	r18, 0x01	; 1
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <reg_set_bit+0xe>
    38d8:	22 0f       	add	r18, r18
    38da:	33 1f       	adc	r19, r19
    38dc:	6a 95       	dec	r22
    38de:	e2 f7       	brpl	.-8      	; 0x38d8 <reg_set_bit+0xa>
    38e0:	24 2b       	or	r18, r20
    38e2:	20 83       	st	Z, r18
    38e4:	08 95       	ret

000038e6 <reg_set_bits>:
    38e6:	fc 01       	movw	r30, r24
    38e8:	20 81       	ld	r18, Z
    38ea:	62 2b       	or	r22, r18
    38ec:	60 83       	st	Z, r22
    38ee:	08 95       	ret

000038f0 <reg_toggle_bit>:
    38f0:	fc 01       	movw	r30, r24
    38f2:	40 81       	ld	r20, Z
    38f4:	21 e0       	ldi	r18, 0x01	; 1
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <reg_toggle_bit+0xe>
    38fa:	22 0f       	add	r18, r18
    38fc:	33 1f       	adc	r19, r19
    38fe:	6a 95       	dec	r22
    3900:	e2 f7       	brpl	.-8      	; 0x38fa <reg_toggle_bit+0xa>
    3902:	24 27       	eor	r18, r20
    3904:	20 83       	st	Z, r18
    3906:	08 95       	ret

00003908 <reg_toggle_bits>:
    3908:	fc 01       	movw	r30, r24
    390a:	20 81       	ld	r18, Z
    390c:	62 27       	eor	r22, r18
    390e:	60 83       	st	Z, r22
    3910:	08 95       	ret

00003912 <reg_clear_bit>:
    3912:	fc 01       	movw	r30, r24
    3914:	90 81       	ld	r25, Z
    3916:	21 e0       	ldi	r18, 0x01	; 1
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <reg_clear_bit+0xe>
    391c:	22 0f       	add	r18, r18
    391e:	33 1f       	adc	r19, r19
    3920:	6a 95       	dec	r22
    3922:	e2 f7       	brpl	.-8      	; 0x391c <reg_clear_bit+0xa>
    3924:	20 95       	com	r18
    3926:	29 23       	and	r18, r25
    3928:	20 83       	st	Z, r18
    392a:	08 95       	ret

0000392c <reg_clear_bits>:
    392c:	fc 01       	movw	r30, r24
    392e:	90 81       	ld	r25, Z
    3930:	60 95       	com	r22
    3932:	69 23       	and	r22, r25
    3934:	60 83       	st	Z, r22
    3936:	08 95       	ret

00003938 <serial_new_instance>:
    3938:	2f 92       	push	r2
    393a:	3f 92       	push	r3
    393c:	4f 92       	push	r4
    393e:	5f 92       	push	r5
    3940:	6f 92       	push	r6
    3942:	7f 92       	push	r7
    3944:	8f 92       	push	r8
    3946:	9f 92       	push	r9
    3948:	af 92       	push	r10
    394a:	cf 92       	push	r12
    394c:	ef 92       	push	r14
    394e:	ff 92       	push	r15
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	f8 2e       	mov	r15, r24
    395e:	2a 01       	movw	r4, r20
    3960:	3b 01       	movw	r6, r22
    3962:	88 e0       	ldi	r24, 0x08	; 8
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	d6 d5       	rcall	.+2988   	; 0x4514 <malloc>
    3968:	8c 01       	movw	r16, r24
    396a:	8f 2d       	mov	r24, r15
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	fc 01       	movw	r30, r24
    3974:	e3 58       	subi	r30, 0x83	; 131
    3976:	f7 4e       	sbci	r31, 0xE7	; 231
    3978:	11 83       	std	Z+1, r17	; 0x01
    397a:	00 83       	st	Z, r16
    397c:	fc 01       	movw	r30, r24
    397e:	ea 5f       	subi	r30, 0xFA	; 250
    3980:	fd 4f       	sbci	r31, 0xFD	; 253
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	d8 01       	movw	r26, r16
    3988:	8d 93       	st	X+, r24
    398a:	9c 93       	st	X, r25
    398c:	6c 2d       	mov	r22, r12
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	84 e0       	ldi	r24, 0x04	; 4
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	a5 d5       	rcall	.+2890   	; 0x44e0 <calloc>
    3996:	1c 01       	movw	r2, r24
    3998:	61 e0       	ldi	r22, 0x01	; 1
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	86 e0       	ldi	r24, 0x06	; 6
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	9f d5       	rcall	.+2878   	; 0x44e0 <calloc>
    39a2:	7c 01       	movw	r14, r24
    39a4:	4c 2d       	mov	r20, r12
    39a6:	b1 01       	movw	r22, r2
    39a8:	8d d3       	rcall	.+1818   	; 0x40c4 <fifo_init>
    39aa:	f8 01       	movw	r30, r16
    39ac:	f5 82       	std	Z+5, r15	; 0x05
    39ae:	e4 82       	std	Z+4, r14	; 0x04
    39b0:	6a 2d       	mov	r22, r10
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	84 e0       	ldi	r24, 0x04	; 4
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	93 d5       	rcall	.+2854   	; 0x44e0 <calloc>
    39ba:	1c 01       	movw	r2, r24
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	86 e0       	ldi	r24, 0x06	; 6
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	8d d5       	rcall	.+2842   	; 0x44e0 <calloc>
    39c6:	7c 01       	movw	r14, r24
    39c8:	4a 2d       	mov	r20, r10
    39ca:	b1 01       	movw	r22, r2
    39cc:	7b d3       	rcall	.+1782   	; 0x40c4 <fifo_init>
    39ce:	d8 01       	movw	r26, r16
    39d0:	13 96       	adiw	r26, 0x03	; 3
    39d2:	fc 92       	st	X, r15
    39d4:	ee 92       	st	-X, r14
    39d6:	12 97       	sbiw	r26, 0x02	; 2
    39d8:	17 96       	adiw	r26, 0x07	; 7
    39da:	9c 92       	st	X, r9
    39dc:	8e 92       	st	-X, r8
    39de:	16 97       	sbiw	r26, 0x06	; 6
    39e0:	ff b6       	in	r15, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	ed 91       	ld	r30, X+
    39e6:	fc 91       	ld	r31, X
    39e8:	11 97       	sbiw	r26, 0x01	; 1
    39ea:	36 97       	sbiw	r30, 0x06	; 6
    39ec:	80 81       	ld	r24, Z
    39ee:	82 60       	ori	r24, 0x02	; 2
    39f0:	80 83       	st	Z, r24
    39f2:	8d 90       	ld	r8, X+
    39f4:	9c 90       	ld	r9, X
    39f6:	c3 01       	movw	r24, r6
    39f8:	b2 01       	movw	r22, r4
    39fa:	79 d4       	rcall	.+2290   	; 0x42ee <__floatunsisf>
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	02 d5       	rcall	.+2564   	; 0x440a <__mulsf3>
    3a06:	9b 01       	movw	r18, r22
    3a08:	ac 01       	movw	r20, r24
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	74 e2       	ldi	r23, 0x24	; 36
    3a0e:	84 e7       	ldi	r24, 0x74	; 116
    3a10:	9b e4       	ldi	r25, 0x4B	; 75
    3a12:	d9 d3       	rcall	.+1970   	; 0x41c6 <__divsf3>
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e8       	ldi	r20, 0x80	; 128
    3a1a:	5f e3       	ldi	r21, 0x3F	; 63
    3a1c:	6f d3       	rcall	.+1758   	; 0x40fc <__subsf3>
    3a1e:	3b d4       	rcall	.+2166   	; 0x4296 <__fixunssfsi>
    3a20:	f4 01       	movw	r30, r8
    3a22:	32 97       	sbiw	r30, 0x02	; 2
    3a24:	60 83       	st	Z, r22
    3a26:	d8 01       	movw	r26, r16
    3a28:	ed 91       	ld	r30, X+
    3a2a:	fc 91       	ld	r31, X
    3a2c:	11 97       	sbiw	r26, 0x01	; 1
    3a2e:	35 97       	sbiw	r30, 0x05	; 5
    3a30:	88 e9       	ldi	r24, 0x98	; 152
    3a32:	80 83       	st	Z, r24
    3a34:	ed 91       	ld	r30, X+
    3a36:	fc 91       	ld	r31, X
    3a38:	34 97       	sbiw	r30, 0x04	; 4
    3a3a:	86 e0       	ldi	r24, 0x06	; 6
    3a3c:	80 83       	st	Z, r24
    3a3e:	ff be       	out	0x3f, r15	; 63
    3a40:	c8 01       	movw	r24, r16
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	1f 91       	pop	r17
    3a48:	0f 91       	pop	r16
    3a4a:	ff 90       	pop	r15
    3a4c:	ef 90       	pop	r14
    3a4e:	cf 90       	pop	r12
    3a50:	af 90       	pop	r10
    3a52:	9f 90       	pop	r9
    3a54:	8f 90       	pop	r8
    3a56:	7f 90       	pop	r7
    3a58:	6f 90       	pop	r6
    3a5a:	5f 90       	pop	r5
    3a5c:	4f 90       	pop	r4
    3a5e:	3f 90       	pop	r3
    3a60:	2f 90       	pop	r2
    3a62:	08 95       	ret

00003a64 <serial_send_byte>:
    3a64:	cf 93       	push	r28
    3a66:	df 93       	push	r29
    3a68:	ec 01       	movw	r28, r24
    3a6a:	ea 81       	ldd	r30, Y+2	; 0x02
    3a6c:	fb 81       	ldd	r31, Y+3	; 0x03
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	25 81       	ldd	r18, Z+5	; 0x05
    3a74:	98 1b       	sub	r25, r24
    3a76:	92 23       	and	r25, r18
    3a78:	84 81       	ldd	r24, Z+4	; 0x04
    3a7a:	98 17       	cp	r25, r24
    3a7c:	a1 f0       	breq	.+40     	; 0x3aa6 <serial_send_byte+0x42>
    3a7e:	93 81       	ldd	r25, Z+3	; 0x03
    3a80:	26 95       	lsr	r18
    3a82:	29 23       	and	r18, r25
    3a84:	a0 81       	ld	r26, Z
    3a86:	b1 81       	ldd	r27, Z+1	; 0x01
    3a88:	a2 0f       	add	r26, r18
    3a8a:	b1 1d       	adc	r27, r1
    3a8c:	6c 93       	st	X, r22
    3a8e:	9f 5f       	subi	r25, 0xFF	; 255
    3a90:	25 81       	ldd	r18, Z+5	; 0x05
    3a92:	92 23       	and	r25, r18
    3a94:	93 83       	std	Z+3, r25	; 0x03
    3a96:	e8 81       	ld	r30, Y
    3a98:	f9 81       	ldd	r31, Y+1	; 0x01
    3a9a:	35 97       	sbiw	r30, 0x05	; 5
    3a9c:	80 81       	ld	r24, Z
    3a9e:	80 62       	ori	r24, 0x20	; 32
    3aa0:	80 83       	st	Z, r24
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	01 c0       	rjmp	.+2      	; 0x3aa8 <serial_send_byte+0x44>
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	df 91       	pop	r29
    3aaa:	cf 91       	pop	r28
    3aac:	08 95       	ret

00003aae <serial_send_bytes>:
    3aae:	ef 92       	push	r14
    3ab0:	ff 92       	push	r15
    3ab2:	0f 93       	push	r16
    3ab4:	1f 93       	push	r17
    3ab6:	cf 93       	push	r28
    3ab8:	df 93       	push	r29
    3aba:	7c 01       	movw	r14, r24
    3abc:	dc 01       	movw	r26, r24
    3abe:	12 96       	adiw	r26, 0x02	; 2
    3ac0:	ed 91       	ld	r30, X+
    3ac2:	fc 91       	ld	r31, X
    3ac4:	13 97       	sbiw	r26, 0x03	; 3
    3ac6:	93 81       	ldd	r25, Z+3	; 0x03
    3ac8:	82 81       	ldd	r24, Z+2	; 0x02
    3aca:	98 1b       	sub	r25, r24
    3acc:	85 81       	ldd	r24, Z+5	; 0x05
    3ace:	98 23       	and	r25, r24
    3ad0:	84 81       	ldd	r24, Z+4	; 0x04
    3ad2:	89 1b       	sub	r24, r25
    3ad4:	86 17       	cp	r24, r22
    3ad6:	98 f1       	brcs	.+102    	; 0x3b3e <serial_send_bytes+0x90>
    3ad8:	66 23       	and	r22, r22
    3ada:	41 f1       	breq	.+80     	; 0x3b2c <serial_send_bytes+0x7e>
    3adc:	84 2f       	mov	r24, r20
    3ade:	95 2f       	mov	r25, r21
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	61 50       	subi	r22, 0x01	; 1
    3ae4:	46 2f       	mov	r20, r22
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	4f 5f       	subi	r20, 0xFF	; 255
    3aea:	5f 4f       	sbci	r21, 0xFF	; 255
    3aec:	48 0f       	add	r20, r24
    3aee:	59 1f       	adc	r21, r25
    3af0:	e7 01       	movw	r28, r14
    3af2:	ea 81       	ldd	r30, Y+2	; 0x02
    3af4:	fb 81       	ldd	r31, Y+3	; 0x03
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	82 81       	ldd	r24, Z+2	; 0x02
    3afa:	25 81       	ldd	r18, Z+5	; 0x05
    3afc:	98 1b       	sub	r25, r24
    3afe:	92 23       	and	r25, r18
    3b00:	84 81       	ldd	r24, Z+4	; 0x04
    3b02:	98 17       	cp	r25, r24
    3b04:	79 f0       	breq	.+30     	; 0x3b24 <serial_send_bytes+0x76>
    3b06:	8c 91       	ld	r24, X
    3b08:	93 81       	ldd	r25, Z+3	; 0x03
    3b0a:	26 95       	lsr	r18
    3b0c:	29 23       	and	r18, r25
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	8b 01       	movw	r16, r22
    3b14:	02 0f       	add	r16, r18
    3b16:	11 1d       	adc	r17, r1
    3b18:	e8 01       	movw	r28, r16
    3b1a:	88 83       	st	Y, r24
    3b1c:	9f 5f       	subi	r25, 0xFF	; 255
    3b1e:	85 81       	ldd	r24, Z+5	; 0x05
    3b20:	98 23       	and	r25, r24
    3b22:	93 83       	std	Z+3, r25	; 0x03
    3b24:	11 96       	adiw	r26, 0x01	; 1
    3b26:	a4 17       	cp	r26, r20
    3b28:	b5 07       	cpc	r27, r21
    3b2a:	11 f7       	brne	.-60     	; 0x3af0 <serial_send_bytes+0x42>
    3b2c:	d7 01       	movw	r26, r14
    3b2e:	ed 91       	ld	r30, X+
    3b30:	fc 91       	ld	r31, X
    3b32:	35 97       	sbiw	r30, 0x05	; 5
    3b34:	80 81       	ld	r24, Z
    3b36:	80 62       	ori	r24, 0x20	; 32
    3b38:	80 83       	st	Z, r24
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <serial_send_bytes+0x92>
    3b3e:	82 e0       	ldi	r24, 0x02	; 2
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	ff 90       	pop	r15
    3b4a:	ef 90       	pop	r14
    3b4c:	08 95       	ret

00003b4e <serial_get_byte>:
    3b4e:	dc 01       	movw	r26, r24
    3b50:	14 96       	adiw	r26, 0x04	; 4
    3b52:	ed 91       	ld	r30, X+
    3b54:	fc 91       	ld	r31, X
    3b56:	15 97       	sbiw	r26, 0x05	; 5
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	98 17       	cp	r25, r24
    3b5e:	89 f0       	breq	.+34     	; 0x3b82 <serial_get_byte+0x34>
    3b60:	92 81       	ldd	r25, Z+2	; 0x02
    3b62:	85 81       	ldd	r24, Z+5	; 0x05
    3b64:	86 95       	lsr	r24
    3b66:	89 23       	and	r24, r25
    3b68:	a0 81       	ld	r26, Z
    3b6a:	b1 81       	ldd	r27, Z+1	; 0x01
    3b6c:	a8 0f       	add	r26, r24
    3b6e:	b1 1d       	adc	r27, r1
    3b70:	8c 91       	ld	r24, X
    3b72:	db 01       	movw	r26, r22
    3b74:	8c 93       	st	X, r24
    3b76:	9f 5f       	subi	r25, 0xFF	; 255
    3b78:	85 81       	ldd	r24, Z+5	; 0x05
    3b7a:	98 23       	and	r25, r24
    3b7c:	92 83       	std	Z+2, r25	; 0x02
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	08 95       	ret
    3b82:	83 e0       	ldi	r24, 0x03	; 3
    3b84:	08 95       	ret

00003b86 <__vector_25>:
    3b86:	1f 92       	push	r1
    3b88:	0f 92       	push	r0
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	0f 92       	push	r0
    3b8e:	11 24       	eor	r1, r1
    3b90:	0b b6       	in	r0, 0x3b	; 59
    3b92:	0f 92       	push	r0
    3b94:	2f 93       	push	r18
    3b96:	3f 93       	push	r19
    3b98:	4f 93       	push	r20
    3b9a:	5f 93       	push	r21
    3b9c:	6f 93       	push	r22
    3b9e:	7f 93       	push	r23
    3ba0:	8f 93       	push	r24
    3ba2:	9f 93       	push	r25
    3ba4:	af 93       	push	r26
    3ba6:	bf 93       	push	r27
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
    3bac:	ef 93       	push	r30
    3bae:	ff 93       	push	r31
    3bb0:	a0 91 7d 18 	lds	r26, 0x187D	; 0x80187d <_ser_handle>
    3bb4:	b0 91 7e 18 	lds	r27, 0x187E	; 0x80187e <_ser_handle+0x1>
    3bb8:	10 97       	sbiw	r26, 0x00	; 0
    3bba:	11 f1       	breq	.+68     	; 0x3c00 <__vector_25+0x7a>
    3bbc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3bc0:	14 96       	adiw	r26, 0x04	; 4
    3bc2:	ed 91       	ld	r30, X+
    3bc4:	fc 91       	ld	r31, X
    3bc6:	15 97       	sbiw	r26, 0x05	; 5
    3bc8:	93 81       	ldd	r25, Z+3	; 0x03
    3bca:	82 81       	ldd	r24, Z+2	; 0x02
    3bcc:	25 81       	ldd	r18, Z+5	; 0x05
    3bce:	98 1b       	sub	r25, r24
    3bd0:	92 23       	and	r25, r18
    3bd2:	84 81       	ldd	r24, Z+4	; 0x04
    3bd4:	98 17       	cp	r25, r24
    3bd6:	61 f0       	breq	.+24     	; 0x3bf0 <__vector_25+0x6a>
    3bd8:	83 81       	ldd	r24, Z+3	; 0x03
    3bda:	26 95       	lsr	r18
    3bdc:	28 23       	and	r18, r24
    3bde:	c0 81       	ld	r28, Z
    3be0:	d1 81       	ldd	r29, Z+1	; 0x01
    3be2:	c2 0f       	add	r28, r18
    3be4:	d1 1d       	adc	r29, r1
    3be6:	68 83       	st	Y, r22
    3be8:	8f 5f       	subi	r24, 0xFF	; 255
    3bea:	95 81       	ldd	r25, Z+5	; 0x05
    3bec:	89 23       	and	r24, r25
    3bee:	83 83       	std	Z+3, r24	; 0x03
    3bf0:	16 96       	adiw	r26, 0x06	; 6
    3bf2:	ed 91       	ld	r30, X+
    3bf4:	fc 91       	ld	r31, X
    3bf6:	17 97       	sbiw	r26, 0x07	; 7
    3bf8:	30 97       	sbiw	r30, 0x00	; 0
    3bfa:	11 f0       	breq	.+4      	; 0x3c00 <__vector_25+0x7a>
    3bfc:	cd 01       	movw	r24, r26
    3bfe:	19 95       	eicall
    3c00:	ff 91       	pop	r31
    3c02:	ef 91       	pop	r30
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	bf 91       	pop	r27
    3c0a:	af 91       	pop	r26
    3c0c:	9f 91       	pop	r25
    3c0e:	8f 91       	pop	r24
    3c10:	7f 91       	pop	r23
    3c12:	6f 91       	pop	r22
    3c14:	5f 91       	pop	r21
    3c16:	4f 91       	pop	r20
    3c18:	3f 91       	pop	r19
    3c1a:	2f 91       	pop	r18
    3c1c:	0f 90       	pop	r0
    3c1e:	0b be       	out	0x3b, r0	; 59
    3c20:	0f 90       	pop	r0
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	0f 90       	pop	r0
    3c26:	1f 90       	pop	r1
    3c28:	18 95       	reti

00003c2a <__vector_26>:
    3c2a:	1f 92       	push	r1
    3c2c:	0f 92       	push	r0
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	0f 92       	push	r0
    3c32:	11 24       	eor	r1, r1
    3c34:	0b b6       	in	r0, 0x3b	; 59
    3c36:	0f 92       	push	r0
    3c38:	2f 93       	push	r18
    3c3a:	8f 93       	push	r24
    3c3c:	9f 93       	push	r25
    3c3e:	af 93       	push	r26
    3c40:	bf 93       	push	r27
    3c42:	ef 93       	push	r30
    3c44:	ff 93       	push	r31
    3c46:	e0 91 7d 18 	lds	r30, 0x187D	; 0x80187d <_ser_handle>
    3c4a:	f0 91 7e 18 	lds	r31, 0x187E	; 0x80187e <_ser_handle+0x1>
    3c4e:	30 97       	sbiw	r30, 0x00	; 0
    3c50:	b9 f0       	breq	.+46     	; 0x3c80 <__vector_26+0x56>
    3c52:	02 80       	ldd	r0, Z+2	; 0x02
    3c54:	f3 81       	ldd	r31, Z+3	; 0x03
    3c56:	e0 2d       	mov	r30, r0
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	98 17       	cp	r25, r24
    3c5e:	b1 f0       	breq	.+44     	; 0x3c8c <__vector_26+0x62>
    3c60:	92 81       	ldd	r25, Z+2	; 0x02
    3c62:	85 81       	ldd	r24, Z+5	; 0x05
    3c64:	28 2f       	mov	r18, r24
    3c66:	26 95       	lsr	r18
    3c68:	29 23       	and	r18, r25
    3c6a:	a0 81       	ld	r26, Z
    3c6c:	b1 81       	ldd	r27, Z+1	; 0x01
    3c6e:	a2 0f       	add	r26, r18
    3c70:	b1 1d       	adc	r27, r1
    3c72:	2c 91       	ld	r18, X
    3c74:	9f 5f       	subi	r25, 0xFF	; 255
    3c76:	89 23       	and	r24, r25
    3c78:	82 83       	std	Z+2, r24	; 0x02
    3c7a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c7e:	0b c0       	rjmp	.+22     	; 0x3c96 <__vector_26+0x6c>
    3c80:	e1 ec       	ldi	r30, 0xC1	; 193
    3c82:	f0 e0       	ldi	r31, 0x00	; 0
    3c84:	80 81       	ld	r24, Z
    3c86:	8f 7d       	andi	r24, 0xDF	; 223
    3c88:	80 83       	st	Z, r24
    3c8a:	05 c0       	rjmp	.+10     	; 0x3c96 <__vector_26+0x6c>
    3c8c:	e1 ec       	ldi	r30, 0xC1	; 193
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	80 81       	ld	r24, Z
    3c92:	8f 7d       	andi	r24, 0xDF	; 223
    3c94:	80 83       	st	Z, r24
    3c96:	ff 91       	pop	r31
    3c98:	ef 91       	pop	r30
    3c9a:	bf 91       	pop	r27
    3c9c:	af 91       	pop	r26
    3c9e:	9f 91       	pop	r25
    3ca0:	8f 91       	pop	r24
    3ca2:	2f 91       	pop	r18
    3ca4:	0f 90       	pop	r0
    3ca6:	0b be       	out	0x3b, r0	; 59
    3ca8:	0f 90       	pop	r0
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	0f 90       	pop	r0
    3cae:	1f 90       	pop	r1
    3cb0:	18 95       	reti

00003cb2 <__vector_36>:
    3cb2:	1f 92       	push	r1
    3cb4:	0f 92       	push	r0
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	0f 92       	push	r0
    3cba:	11 24       	eor	r1, r1
    3cbc:	0b b6       	in	r0, 0x3b	; 59
    3cbe:	0f 92       	push	r0
    3cc0:	2f 93       	push	r18
    3cc2:	3f 93       	push	r19
    3cc4:	4f 93       	push	r20
    3cc6:	5f 93       	push	r21
    3cc8:	6f 93       	push	r22
    3cca:	7f 93       	push	r23
    3ccc:	8f 93       	push	r24
    3cce:	9f 93       	push	r25
    3cd0:	af 93       	push	r26
    3cd2:	bf 93       	push	r27
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	ef 93       	push	r30
    3cda:	ff 93       	push	r31
    3cdc:	a0 91 7f 18 	lds	r26, 0x187F	; 0x80187f <_ser_handle+0x2>
    3ce0:	b0 91 80 18 	lds	r27, 0x1880	; 0x801880 <_ser_handle+0x3>
    3ce4:	10 97       	sbiw	r26, 0x00	; 0
    3ce6:	11 f1       	breq	.+68     	; 0x3d2c <__vector_36+0x7a>
    3ce8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3cec:	14 96       	adiw	r26, 0x04	; 4
    3cee:	ed 91       	ld	r30, X+
    3cf0:	fc 91       	ld	r31, X
    3cf2:	15 97       	sbiw	r26, 0x05	; 5
    3cf4:	93 81       	ldd	r25, Z+3	; 0x03
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	25 81       	ldd	r18, Z+5	; 0x05
    3cfa:	98 1b       	sub	r25, r24
    3cfc:	92 23       	and	r25, r18
    3cfe:	84 81       	ldd	r24, Z+4	; 0x04
    3d00:	98 17       	cp	r25, r24
    3d02:	61 f0       	breq	.+24     	; 0x3d1c <__vector_36+0x6a>
    3d04:	83 81       	ldd	r24, Z+3	; 0x03
    3d06:	26 95       	lsr	r18
    3d08:	28 23       	and	r18, r24
    3d0a:	c0 81       	ld	r28, Z
    3d0c:	d1 81       	ldd	r29, Z+1	; 0x01
    3d0e:	c2 0f       	add	r28, r18
    3d10:	d1 1d       	adc	r29, r1
    3d12:	68 83       	st	Y, r22
    3d14:	8f 5f       	subi	r24, 0xFF	; 255
    3d16:	95 81       	ldd	r25, Z+5	; 0x05
    3d18:	89 23       	and	r24, r25
    3d1a:	83 83       	std	Z+3, r24	; 0x03
    3d1c:	16 96       	adiw	r26, 0x06	; 6
    3d1e:	ed 91       	ld	r30, X+
    3d20:	fc 91       	ld	r31, X
    3d22:	17 97       	sbiw	r26, 0x07	; 7
    3d24:	30 97       	sbiw	r30, 0x00	; 0
    3d26:	11 f0       	breq	.+4      	; 0x3d2c <__vector_36+0x7a>
    3d28:	cd 01       	movw	r24, r26
    3d2a:	19 95       	eicall
    3d2c:	ff 91       	pop	r31
    3d2e:	ef 91       	pop	r30
    3d30:	df 91       	pop	r29
    3d32:	cf 91       	pop	r28
    3d34:	bf 91       	pop	r27
    3d36:	af 91       	pop	r26
    3d38:	9f 91       	pop	r25
    3d3a:	8f 91       	pop	r24
    3d3c:	7f 91       	pop	r23
    3d3e:	6f 91       	pop	r22
    3d40:	5f 91       	pop	r21
    3d42:	4f 91       	pop	r20
    3d44:	3f 91       	pop	r19
    3d46:	2f 91       	pop	r18
    3d48:	0f 90       	pop	r0
    3d4a:	0b be       	out	0x3b, r0	; 59
    3d4c:	0f 90       	pop	r0
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	0f 90       	pop	r0
    3d52:	1f 90       	pop	r1
    3d54:	18 95       	reti

00003d56 <__vector_37>:
    3d56:	1f 92       	push	r1
    3d58:	0f 92       	push	r0
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	0f 92       	push	r0
    3d5e:	11 24       	eor	r1, r1
    3d60:	0b b6       	in	r0, 0x3b	; 59
    3d62:	0f 92       	push	r0
    3d64:	2f 93       	push	r18
    3d66:	8f 93       	push	r24
    3d68:	9f 93       	push	r25
    3d6a:	af 93       	push	r26
    3d6c:	bf 93       	push	r27
    3d6e:	ef 93       	push	r30
    3d70:	ff 93       	push	r31
    3d72:	e0 91 7f 18 	lds	r30, 0x187F	; 0x80187f <_ser_handle+0x2>
    3d76:	f0 91 80 18 	lds	r31, 0x1880	; 0x801880 <_ser_handle+0x3>
    3d7a:	30 97       	sbiw	r30, 0x00	; 0
    3d7c:	b9 f0       	breq	.+46     	; 0x3dac <__vector_37+0x56>
    3d7e:	02 80       	ldd	r0, Z+2	; 0x02
    3d80:	f3 81       	ldd	r31, Z+3	; 0x03
    3d82:	e0 2d       	mov	r30, r0
    3d84:	93 81       	ldd	r25, Z+3	; 0x03
    3d86:	82 81       	ldd	r24, Z+2	; 0x02
    3d88:	98 17       	cp	r25, r24
    3d8a:	b1 f0       	breq	.+44     	; 0x3db8 <__vector_37+0x62>
    3d8c:	92 81       	ldd	r25, Z+2	; 0x02
    3d8e:	85 81       	ldd	r24, Z+5	; 0x05
    3d90:	28 2f       	mov	r18, r24
    3d92:	26 95       	lsr	r18
    3d94:	29 23       	and	r18, r25
    3d96:	a0 81       	ld	r26, Z
    3d98:	b1 81       	ldd	r27, Z+1	; 0x01
    3d9a:	a2 0f       	add	r26, r18
    3d9c:	b1 1d       	adc	r27, r1
    3d9e:	2c 91       	ld	r18, X
    3da0:	9f 5f       	subi	r25, 0xFF	; 255
    3da2:	89 23       	and	r24, r25
    3da4:	82 83       	std	Z+2, r24	; 0x02
    3da6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3daa:	0b c0       	rjmp	.+22     	; 0x3dc2 <__vector_37+0x6c>
    3dac:	e9 ec       	ldi	r30, 0xC9	; 201
    3dae:	f0 e0       	ldi	r31, 0x00	; 0
    3db0:	80 81       	ld	r24, Z
    3db2:	8f 7d       	andi	r24, 0xDF	; 223
    3db4:	80 83       	st	Z, r24
    3db6:	05 c0       	rjmp	.+10     	; 0x3dc2 <__vector_37+0x6c>
    3db8:	e9 ec       	ldi	r30, 0xC9	; 201
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	80 81       	ld	r24, Z
    3dbe:	8f 7d       	andi	r24, 0xDF	; 223
    3dc0:	80 83       	st	Z, r24
    3dc2:	ff 91       	pop	r31
    3dc4:	ef 91       	pop	r30
    3dc6:	bf 91       	pop	r27
    3dc8:	af 91       	pop	r26
    3dca:	9f 91       	pop	r25
    3dcc:	8f 91       	pop	r24
    3dce:	2f 91       	pop	r18
    3dd0:	0f 90       	pop	r0
    3dd2:	0b be       	out	0x3b, r0	; 59
    3dd4:	0f 90       	pop	r0
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	0f 90       	pop	r0
    3dda:	1f 90       	pop	r1
    3ddc:	18 95       	reti

00003dde <__vector_51>:
    3dde:	1f 92       	push	r1
    3de0:	0f 92       	push	r0
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	0f 92       	push	r0
    3de6:	11 24       	eor	r1, r1
    3de8:	0b b6       	in	r0, 0x3b	; 59
    3dea:	0f 92       	push	r0
    3dec:	2f 93       	push	r18
    3dee:	3f 93       	push	r19
    3df0:	4f 93       	push	r20
    3df2:	5f 93       	push	r21
    3df4:	6f 93       	push	r22
    3df6:	7f 93       	push	r23
    3df8:	8f 93       	push	r24
    3dfa:	9f 93       	push	r25
    3dfc:	af 93       	push	r26
    3dfe:	bf 93       	push	r27
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	ef 93       	push	r30
    3e06:	ff 93       	push	r31
    3e08:	a0 91 81 18 	lds	r26, 0x1881	; 0x801881 <_ser_handle+0x4>
    3e0c:	b0 91 82 18 	lds	r27, 0x1882	; 0x801882 <_ser_handle+0x5>
    3e10:	10 97       	sbiw	r26, 0x00	; 0
    3e12:	11 f1       	breq	.+68     	; 0x3e58 <__vector_51+0x7a>
    3e14:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3e18:	14 96       	adiw	r26, 0x04	; 4
    3e1a:	ed 91       	ld	r30, X+
    3e1c:	fc 91       	ld	r31, X
    3e1e:	15 97       	sbiw	r26, 0x05	; 5
    3e20:	93 81       	ldd	r25, Z+3	; 0x03
    3e22:	82 81       	ldd	r24, Z+2	; 0x02
    3e24:	25 81       	ldd	r18, Z+5	; 0x05
    3e26:	98 1b       	sub	r25, r24
    3e28:	92 23       	and	r25, r18
    3e2a:	84 81       	ldd	r24, Z+4	; 0x04
    3e2c:	98 17       	cp	r25, r24
    3e2e:	61 f0       	breq	.+24     	; 0x3e48 <__vector_51+0x6a>
    3e30:	83 81       	ldd	r24, Z+3	; 0x03
    3e32:	26 95       	lsr	r18
    3e34:	28 23       	and	r18, r24
    3e36:	c0 81       	ld	r28, Z
    3e38:	d1 81       	ldd	r29, Z+1	; 0x01
    3e3a:	c2 0f       	add	r28, r18
    3e3c:	d1 1d       	adc	r29, r1
    3e3e:	68 83       	st	Y, r22
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	95 81       	ldd	r25, Z+5	; 0x05
    3e44:	89 23       	and	r24, r25
    3e46:	83 83       	std	Z+3, r24	; 0x03
    3e48:	16 96       	adiw	r26, 0x06	; 6
    3e4a:	ed 91       	ld	r30, X+
    3e4c:	fc 91       	ld	r31, X
    3e4e:	17 97       	sbiw	r26, 0x07	; 7
    3e50:	30 97       	sbiw	r30, 0x00	; 0
    3e52:	11 f0       	breq	.+4      	; 0x3e58 <__vector_51+0x7a>
    3e54:	cd 01       	movw	r24, r26
    3e56:	19 95       	eicall
    3e58:	ff 91       	pop	r31
    3e5a:	ef 91       	pop	r30
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	bf 91       	pop	r27
    3e62:	af 91       	pop	r26
    3e64:	9f 91       	pop	r25
    3e66:	8f 91       	pop	r24
    3e68:	7f 91       	pop	r23
    3e6a:	6f 91       	pop	r22
    3e6c:	5f 91       	pop	r21
    3e6e:	4f 91       	pop	r20
    3e70:	3f 91       	pop	r19
    3e72:	2f 91       	pop	r18
    3e74:	0f 90       	pop	r0
    3e76:	0b be       	out	0x3b, r0	; 59
    3e78:	0f 90       	pop	r0
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	0f 90       	pop	r0
    3e7e:	1f 90       	pop	r1
    3e80:	18 95       	reti

00003e82 <__vector_52>:
    3e82:	1f 92       	push	r1
    3e84:	0f 92       	push	r0
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	0f 92       	push	r0
    3e8a:	11 24       	eor	r1, r1
    3e8c:	0b b6       	in	r0, 0x3b	; 59
    3e8e:	0f 92       	push	r0
    3e90:	2f 93       	push	r18
    3e92:	8f 93       	push	r24
    3e94:	9f 93       	push	r25
    3e96:	af 93       	push	r26
    3e98:	bf 93       	push	r27
    3e9a:	ef 93       	push	r30
    3e9c:	ff 93       	push	r31
    3e9e:	e0 91 81 18 	lds	r30, 0x1881	; 0x801881 <_ser_handle+0x4>
    3ea2:	f0 91 82 18 	lds	r31, 0x1882	; 0x801882 <_ser_handle+0x5>
    3ea6:	30 97       	sbiw	r30, 0x00	; 0
    3ea8:	b9 f0       	breq	.+46     	; 0x3ed8 <__vector_52+0x56>
    3eaa:	02 80       	ldd	r0, Z+2	; 0x02
    3eac:	f3 81       	ldd	r31, Z+3	; 0x03
    3eae:	e0 2d       	mov	r30, r0
    3eb0:	93 81       	ldd	r25, Z+3	; 0x03
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	98 17       	cp	r25, r24
    3eb6:	b1 f0       	breq	.+44     	; 0x3ee4 <__vector_52+0x62>
    3eb8:	92 81       	ldd	r25, Z+2	; 0x02
    3eba:	85 81       	ldd	r24, Z+5	; 0x05
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	26 95       	lsr	r18
    3ec0:	29 23       	and	r18, r25
    3ec2:	a0 81       	ld	r26, Z
    3ec4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ec6:	a2 0f       	add	r26, r18
    3ec8:	b1 1d       	adc	r27, r1
    3eca:	2c 91       	ld	r18, X
    3ecc:	9f 5f       	subi	r25, 0xFF	; 255
    3ece:	89 23       	and	r24, r25
    3ed0:	82 83       	std	Z+2, r24	; 0x02
    3ed2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3ed6:	0b c0       	rjmp	.+22     	; 0x3eee <__vector_52+0x6c>
    3ed8:	e1 ed       	ldi	r30, 0xD1	; 209
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	8f 7d       	andi	r24, 0xDF	; 223
    3ee0:	80 83       	st	Z, r24
    3ee2:	05 c0       	rjmp	.+10     	; 0x3eee <__vector_52+0x6c>
    3ee4:	e1 ed       	ldi	r30, 0xD1	; 209
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	80 81       	ld	r24, Z
    3eea:	8f 7d       	andi	r24, 0xDF	; 223
    3eec:	80 83       	st	Z, r24
    3eee:	ff 91       	pop	r31
    3ef0:	ef 91       	pop	r30
    3ef2:	bf 91       	pop	r27
    3ef4:	af 91       	pop	r26
    3ef6:	9f 91       	pop	r25
    3ef8:	8f 91       	pop	r24
    3efa:	2f 91       	pop	r18
    3efc:	0f 90       	pop	r0
    3efe:	0b be       	out	0x3b, r0	; 59
    3f00:	0f 90       	pop	r0
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	0f 90       	pop	r0
    3f06:	1f 90       	pop	r1
    3f08:	18 95       	reti

00003f0a <__vector_54>:
    3f0a:	1f 92       	push	r1
    3f0c:	0f 92       	push	r0
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	0f 92       	push	r0
    3f12:	11 24       	eor	r1, r1
    3f14:	0b b6       	in	r0, 0x3b	; 59
    3f16:	0f 92       	push	r0
    3f18:	2f 93       	push	r18
    3f1a:	3f 93       	push	r19
    3f1c:	4f 93       	push	r20
    3f1e:	5f 93       	push	r21
    3f20:	6f 93       	push	r22
    3f22:	7f 93       	push	r23
    3f24:	8f 93       	push	r24
    3f26:	9f 93       	push	r25
    3f28:	af 93       	push	r26
    3f2a:	bf 93       	push	r27
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	ef 93       	push	r30
    3f32:	ff 93       	push	r31
    3f34:	a0 91 83 18 	lds	r26, 0x1883	; 0x801883 <_ser_handle+0x6>
    3f38:	b0 91 84 18 	lds	r27, 0x1884	; 0x801884 <_ser_handle+0x7>
    3f3c:	10 97       	sbiw	r26, 0x00	; 0
    3f3e:	11 f1       	breq	.+68     	; 0x3f84 <__vector_54+0x7a>
    3f40:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3f44:	14 96       	adiw	r26, 0x04	; 4
    3f46:	ed 91       	ld	r30, X+
    3f48:	fc 91       	ld	r31, X
    3f4a:	15 97       	sbiw	r26, 0x05	; 5
    3f4c:	93 81       	ldd	r25, Z+3	; 0x03
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	25 81       	ldd	r18, Z+5	; 0x05
    3f52:	98 1b       	sub	r25, r24
    3f54:	92 23       	and	r25, r18
    3f56:	84 81       	ldd	r24, Z+4	; 0x04
    3f58:	98 17       	cp	r25, r24
    3f5a:	61 f0       	breq	.+24     	; 0x3f74 <__vector_54+0x6a>
    3f5c:	83 81       	ldd	r24, Z+3	; 0x03
    3f5e:	26 95       	lsr	r18
    3f60:	28 23       	and	r18, r24
    3f62:	c0 81       	ld	r28, Z
    3f64:	d1 81       	ldd	r29, Z+1	; 0x01
    3f66:	c2 0f       	add	r28, r18
    3f68:	d1 1d       	adc	r29, r1
    3f6a:	68 83       	st	Y, r22
    3f6c:	8f 5f       	subi	r24, 0xFF	; 255
    3f6e:	95 81       	ldd	r25, Z+5	; 0x05
    3f70:	89 23       	and	r24, r25
    3f72:	83 83       	std	Z+3, r24	; 0x03
    3f74:	16 96       	adiw	r26, 0x06	; 6
    3f76:	ed 91       	ld	r30, X+
    3f78:	fc 91       	ld	r31, X
    3f7a:	17 97       	sbiw	r26, 0x07	; 7
    3f7c:	30 97       	sbiw	r30, 0x00	; 0
    3f7e:	11 f0       	breq	.+4      	; 0x3f84 <__vector_54+0x7a>
    3f80:	cd 01       	movw	r24, r26
    3f82:	19 95       	eicall
    3f84:	ff 91       	pop	r31
    3f86:	ef 91       	pop	r30
    3f88:	df 91       	pop	r29
    3f8a:	cf 91       	pop	r28
    3f8c:	bf 91       	pop	r27
    3f8e:	af 91       	pop	r26
    3f90:	9f 91       	pop	r25
    3f92:	8f 91       	pop	r24
    3f94:	7f 91       	pop	r23
    3f96:	6f 91       	pop	r22
    3f98:	5f 91       	pop	r21
    3f9a:	4f 91       	pop	r20
    3f9c:	3f 91       	pop	r19
    3f9e:	2f 91       	pop	r18
    3fa0:	0f 90       	pop	r0
    3fa2:	0b be       	out	0x3b, r0	; 59
    3fa4:	0f 90       	pop	r0
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	0f 90       	pop	r0
    3faa:	1f 90       	pop	r1
    3fac:	18 95       	reti

00003fae <__vector_55>:
    3fae:	1f 92       	push	r1
    3fb0:	0f 92       	push	r0
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	0f 92       	push	r0
    3fb6:	11 24       	eor	r1, r1
    3fb8:	0b b6       	in	r0, 0x3b	; 59
    3fba:	0f 92       	push	r0
    3fbc:	2f 93       	push	r18
    3fbe:	8f 93       	push	r24
    3fc0:	9f 93       	push	r25
    3fc2:	af 93       	push	r26
    3fc4:	bf 93       	push	r27
    3fc6:	ef 93       	push	r30
    3fc8:	ff 93       	push	r31
    3fca:	e0 91 83 18 	lds	r30, 0x1883	; 0x801883 <_ser_handle+0x6>
    3fce:	f0 91 84 18 	lds	r31, 0x1884	; 0x801884 <_ser_handle+0x7>
    3fd2:	30 97       	sbiw	r30, 0x00	; 0
    3fd4:	b9 f0       	breq	.+46     	; 0x4004 <__vector_55+0x56>
    3fd6:	02 80       	ldd	r0, Z+2	; 0x02
    3fd8:	f3 81       	ldd	r31, Z+3	; 0x03
    3fda:	e0 2d       	mov	r30, r0
    3fdc:	93 81       	ldd	r25, Z+3	; 0x03
    3fde:	82 81       	ldd	r24, Z+2	; 0x02
    3fe0:	98 17       	cp	r25, r24
    3fe2:	b1 f0       	breq	.+44     	; 0x4010 <__vector_55+0x62>
    3fe4:	92 81       	ldd	r25, Z+2	; 0x02
    3fe6:	85 81       	ldd	r24, Z+5	; 0x05
    3fe8:	28 2f       	mov	r18, r24
    3fea:	26 95       	lsr	r18
    3fec:	29 23       	and	r18, r25
    3fee:	a0 81       	ld	r26, Z
    3ff0:	b1 81       	ldd	r27, Z+1	; 0x01
    3ff2:	a2 0f       	add	r26, r18
    3ff4:	b1 1d       	adc	r27, r1
    3ff6:	2c 91       	ld	r18, X
    3ff8:	9f 5f       	subi	r25, 0xFF	; 255
    3ffa:	89 23       	and	r24, r25
    3ffc:	82 83       	std	Z+2, r24	; 0x02
    3ffe:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4002:	0b c0       	rjmp	.+22     	; 0x401a <__vector_55+0x6c>
    4004:	e1 e3       	ldi	r30, 0x31	; 49
    4006:	f1 e0       	ldi	r31, 0x01	; 1
    4008:	80 81       	ld	r24, Z
    400a:	8f 7d       	andi	r24, 0xDF	; 223
    400c:	80 83       	st	Z, r24
    400e:	05 c0       	rjmp	.+10     	; 0x401a <__vector_55+0x6c>
    4010:	e1 e3       	ldi	r30, 0x31	; 49
    4012:	f1 e0       	ldi	r31, 0x01	; 1
    4014:	80 81       	ld	r24, Z
    4016:	8f 7d       	andi	r24, 0xDF	; 223
    4018:	80 83       	st	Z, r24
    401a:	ff 91       	pop	r31
    401c:	ef 91       	pop	r30
    401e:	bf 91       	pop	r27
    4020:	af 91       	pop	r26
    4022:	9f 91       	pop	r25
    4024:	8f 91       	pop	r24
    4026:	2f 91       	pop	r18
    4028:	0f 90       	pop	r0
    402a:	0b be       	out	0x3b, r0	; 59
    402c:	0f 90       	pop	r0
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	0f 90       	pop	r0
    4032:	1f 90       	pop	r1
    4034:	18 95       	reti

00004036 <usart_getchar>:
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	1f 92       	push	r1
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	be 01       	movw	r22, r28
    4042:	6f 5f       	subi	r22, 0xFF	; 255
    4044:	7f 4f       	sbci	r23, 0xFF	; 255
    4046:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <_com_serial_instance>
    404a:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <_com_serial_instance+0x1>
    404e:	7f dd       	rcall	.-1282   	; 0x3b4e <serial_get_byte>
    4050:	81 11       	cpse	r24, r1
    4052:	f6 cf       	rjmp	.-20     	; 0x4040 <usart_getchar+0xa>
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	0f 90       	pop	r0
    405a:	df 91       	pop	r29
    405c:	cf 91       	pop	r28
    405e:	08 95       	ret

00004060 <usart_putchar>:
    4060:	68 2f       	mov	r22, r24
    4062:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <_com_serial_instance>
    4066:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <_com_serial_instance+0x1>
    406a:	fc dc       	rcall	.-1544   	; 0x3a64 <serial_send_byte>
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	08 95       	ret

00004072 <stdioCreate>:
    4072:	8f 92       	push	r8
    4074:	9f 92       	push	r9
    4076:	af 92       	push	r10
    4078:	cf 92       	push	r12
    407a:	ef 92       	push	r14
    407c:	0f 93       	push	r16
    407e:	81 2c       	mov	r8, r1
    4080:	91 2c       	mov	r9, r1
    4082:	68 94       	set
    4084:	aa 24       	eor	r10, r10
    4086:	a7 f8       	bld	r10, 7
    4088:	68 94       	set
    408a:	cc 24       	eor	r12, r12
    408c:	c7 f8       	bld	r12, 7
    408e:	e1 2c       	mov	r14, r1
    4090:	00 e0       	ldi	r16, 0x00	; 0
    4092:	23 e0       	ldi	r18, 0x03	; 3
    4094:	40 e0       	ldi	r20, 0x00	; 0
    4096:	51 ee       	ldi	r21, 0xE1	; 225
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	4d dc       	rcall	.-1894   	; 0x3938 <serial_new_instance>
    409e:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <_com_serial_instance+0x1>
    40a2:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <_com_serial_instance>
    40a6:	e3 ea       	ldi	r30, 0xA3	; 163
    40a8:	f8 e1       	ldi	r31, 0x18	; 24
    40aa:	8e e0       	ldi	r24, 0x0E	; 14
    40ac:	92 e0       	ldi	r25, 0x02	; 2
    40ae:	91 83       	std	Z+1, r25	; 0x01
    40b0:	80 83       	st	Z, r24
    40b2:	93 83       	std	Z+3, r25	; 0x03
    40b4:	82 83       	std	Z+2, r24	; 0x02
    40b6:	0f 91       	pop	r16
    40b8:	ef 90       	pop	r14
    40ba:	cf 90       	pop	r12
    40bc:	af 90       	pop	r10
    40be:	9f 90       	pop	r9
    40c0:	8f 90       	pop	r8
    40c2:	08 95       	ret

000040c4 <fifo_init>:
    40c4:	fc 01       	movw	r30, r24
    40c6:	41 11       	cpse	r20, r1
    40c8:	01 c0       	rjmp	.+2      	; 0x40cc <fifo_init+0x8>
    40ca:	45 d3       	rcall	.+1674   	; 0x4756 <abort>
    40cc:	84 2f       	mov	r24, r20
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	9c 01       	movw	r18, r24
    40d2:	21 50       	subi	r18, 0x01	; 1
    40d4:	31 09       	sbc	r19, r1
    40d6:	82 23       	and	r24, r18
    40d8:	93 23       	and	r25, r19
    40da:	89 2b       	or	r24, r25
    40dc:	09 f0       	breq	.+2      	; 0x40e0 <fifo_init+0x1c>
    40de:	3b d3       	rcall	.+1654   	; 0x4756 <abort>
    40e0:	41 38       	cpi	r20, 0x81	; 129
    40e2:	08 f0       	brcs	.+2      	; 0x40e6 <fifo_init+0x22>
    40e4:	38 d3       	rcall	.+1648   	; 0x4756 <abort>
    40e6:	12 82       	std	Z+2, r1	; 0x02
    40e8:	13 82       	std	Z+3, r1	; 0x03
    40ea:	44 83       	std	Z+4, r20	; 0x04
    40ec:	44 0f       	add	r20, r20
    40ee:	41 50       	subi	r20, 0x01	; 1
    40f0:	45 83       	std	Z+5, r20	; 0x05
    40f2:	71 83       	std	Z+1, r23	; 0x01
    40f4:	60 83       	st	Z, r22
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	08 95       	ret

000040fc <__subsf3>:
    40fc:	50 58       	subi	r21, 0x80	; 128

000040fe <__addsf3>:
    40fe:	bb 27       	eor	r27, r27
    4100:	aa 27       	eor	r26, r26
    4102:	0e d0       	rcall	.+28     	; 0x4120 <__addsf3x>
    4104:	48 c1       	rjmp	.+656    	; 0x4396 <__fp_round>
    4106:	39 d1       	rcall	.+626    	; 0x437a <__fp_pscA>
    4108:	30 f0       	brcs	.+12     	; 0x4116 <__addsf3+0x18>
    410a:	3e d1       	rcall	.+636    	; 0x4388 <__fp_pscB>
    410c:	20 f0       	brcs	.+8      	; 0x4116 <__addsf3+0x18>
    410e:	31 f4       	brne	.+12     	; 0x411c <__addsf3+0x1e>
    4110:	9f 3f       	cpi	r25, 0xFF	; 255
    4112:	11 f4       	brne	.+4      	; 0x4118 <__addsf3+0x1a>
    4114:	1e f4       	brtc	.+6      	; 0x411c <__addsf3+0x1e>
    4116:	2e c1       	rjmp	.+604    	; 0x4374 <__fp_nan>
    4118:	0e f4       	brtc	.+2      	; 0x411c <__addsf3+0x1e>
    411a:	e0 95       	com	r30
    411c:	e7 fb       	bst	r30, 7
    411e:	24 c1       	rjmp	.+584    	; 0x4368 <__fp_inf>

00004120 <__addsf3x>:
    4120:	e9 2f       	mov	r30, r25
    4122:	4a d1       	rcall	.+660    	; 0x43b8 <__fp_split3>
    4124:	80 f3       	brcs	.-32     	; 0x4106 <__addsf3+0x8>
    4126:	ba 17       	cp	r27, r26
    4128:	62 07       	cpc	r22, r18
    412a:	73 07       	cpc	r23, r19
    412c:	84 07       	cpc	r24, r20
    412e:	95 07       	cpc	r25, r21
    4130:	18 f0       	brcs	.+6      	; 0x4138 <__addsf3x+0x18>
    4132:	71 f4       	brne	.+28     	; 0x4150 <__addsf3x+0x30>
    4134:	9e f5       	brtc	.+102    	; 0x419c <__addsf3x+0x7c>
    4136:	62 c1       	rjmp	.+708    	; 0x43fc <__fp_zero>
    4138:	0e f4       	brtc	.+2      	; 0x413c <__addsf3x+0x1c>
    413a:	e0 95       	com	r30
    413c:	0b 2e       	mov	r0, r27
    413e:	ba 2f       	mov	r27, r26
    4140:	a0 2d       	mov	r26, r0
    4142:	0b 01       	movw	r0, r22
    4144:	b9 01       	movw	r22, r18
    4146:	90 01       	movw	r18, r0
    4148:	0c 01       	movw	r0, r24
    414a:	ca 01       	movw	r24, r20
    414c:	a0 01       	movw	r20, r0
    414e:	11 24       	eor	r1, r1
    4150:	ff 27       	eor	r31, r31
    4152:	59 1b       	sub	r21, r25
    4154:	99 f0       	breq	.+38     	; 0x417c <__addsf3x+0x5c>
    4156:	59 3f       	cpi	r21, 0xF9	; 249
    4158:	50 f4       	brcc	.+20     	; 0x416e <__addsf3x+0x4e>
    415a:	50 3e       	cpi	r21, 0xE0	; 224
    415c:	68 f1       	brcs	.+90     	; 0x41b8 <__addsf3x+0x98>
    415e:	1a 16       	cp	r1, r26
    4160:	f0 40       	sbci	r31, 0x00	; 0
    4162:	a2 2f       	mov	r26, r18
    4164:	23 2f       	mov	r18, r19
    4166:	34 2f       	mov	r19, r20
    4168:	44 27       	eor	r20, r20
    416a:	58 5f       	subi	r21, 0xF8	; 248
    416c:	f3 cf       	rjmp	.-26     	; 0x4154 <__addsf3x+0x34>
    416e:	46 95       	lsr	r20
    4170:	37 95       	ror	r19
    4172:	27 95       	ror	r18
    4174:	a7 95       	ror	r26
    4176:	f0 40       	sbci	r31, 0x00	; 0
    4178:	53 95       	inc	r21
    417a:	c9 f7       	brne	.-14     	; 0x416e <__addsf3x+0x4e>
    417c:	7e f4       	brtc	.+30     	; 0x419c <__addsf3x+0x7c>
    417e:	1f 16       	cp	r1, r31
    4180:	ba 0b       	sbc	r27, r26
    4182:	62 0b       	sbc	r22, r18
    4184:	73 0b       	sbc	r23, r19
    4186:	84 0b       	sbc	r24, r20
    4188:	ba f0       	brmi	.+46     	; 0x41b8 <__addsf3x+0x98>
    418a:	91 50       	subi	r25, 0x01	; 1
    418c:	a1 f0       	breq	.+40     	; 0x41b6 <__addsf3x+0x96>
    418e:	ff 0f       	add	r31, r31
    4190:	bb 1f       	adc	r27, r27
    4192:	66 1f       	adc	r22, r22
    4194:	77 1f       	adc	r23, r23
    4196:	88 1f       	adc	r24, r24
    4198:	c2 f7       	brpl	.-16     	; 0x418a <__addsf3x+0x6a>
    419a:	0e c0       	rjmp	.+28     	; 0x41b8 <__addsf3x+0x98>
    419c:	ba 0f       	add	r27, r26
    419e:	62 1f       	adc	r22, r18
    41a0:	73 1f       	adc	r23, r19
    41a2:	84 1f       	adc	r24, r20
    41a4:	48 f4       	brcc	.+18     	; 0x41b8 <__addsf3x+0x98>
    41a6:	87 95       	ror	r24
    41a8:	77 95       	ror	r23
    41aa:	67 95       	ror	r22
    41ac:	b7 95       	ror	r27
    41ae:	f7 95       	ror	r31
    41b0:	9e 3f       	cpi	r25, 0xFE	; 254
    41b2:	08 f0       	brcs	.+2      	; 0x41b6 <__addsf3x+0x96>
    41b4:	b3 cf       	rjmp	.-154    	; 0x411c <__addsf3+0x1e>
    41b6:	93 95       	inc	r25
    41b8:	88 0f       	add	r24, r24
    41ba:	08 f0       	brcs	.+2      	; 0x41be <__addsf3x+0x9e>
    41bc:	99 27       	eor	r25, r25
    41be:	ee 0f       	add	r30, r30
    41c0:	97 95       	ror	r25
    41c2:	87 95       	ror	r24
    41c4:	08 95       	ret

000041c6 <__divsf3>:
    41c6:	0c d0       	rcall	.+24     	; 0x41e0 <__divsf3x>
    41c8:	e6 c0       	rjmp	.+460    	; 0x4396 <__fp_round>
    41ca:	de d0       	rcall	.+444    	; 0x4388 <__fp_pscB>
    41cc:	40 f0       	brcs	.+16     	; 0x41de <__divsf3+0x18>
    41ce:	d5 d0       	rcall	.+426    	; 0x437a <__fp_pscA>
    41d0:	30 f0       	brcs	.+12     	; 0x41de <__divsf3+0x18>
    41d2:	21 f4       	brne	.+8      	; 0x41dc <__divsf3+0x16>
    41d4:	5f 3f       	cpi	r21, 0xFF	; 255
    41d6:	19 f0       	breq	.+6      	; 0x41de <__divsf3+0x18>
    41d8:	c7 c0       	rjmp	.+398    	; 0x4368 <__fp_inf>
    41da:	51 11       	cpse	r21, r1
    41dc:	10 c1       	rjmp	.+544    	; 0x43fe <__fp_szero>
    41de:	ca c0       	rjmp	.+404    	; 0x4374 <__fp_nan>

000041e0 <__divsf3x>:
    41e0:	eb d0       	rcall	.+470    	; 0x43b8 <__fp_split3>
    41e2:	98 f3       	brcs	.-26     	; 0x41ca <__divsf3+0x4>

000041e4 <__divsf3_pse>:
    41e4:	99 23       	and	r25, r25
    41e6:	c9 f3       	breq	.-14     	; 0x41da <__divsf3+0x14>
    41e8:	55 23       	and	r21, r21
    41ea:	b1 f3       	breq	.-20     	; 0x41d8 <__divsf3+0x12>
    41ec:	95 1b       	sub	r25, r21
    41ee:	55 0b       	sbc	r21, r21
    41f0:	bb 27       	eor	r27, r27
    41f2:	aa 27       	eor	r26, r26
    41f4:	62 17       	cp	r22, r18
    41f6:	73 07       	cpc	r23, r19
    41f8:	84 07       	cpc	r24, r20
    41fa:	38 f0       	brcs	.+14     	; 0x420a <__divsf3_pse+0x26>
    41fc:	9f 5f       	subi	r25, 0xFF	; 255
    41fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4200:	22 0f       	add	r18, r18
    4202:	33 1f       	adc	r19, r19
    4204:	44 1f       	adc	r20, r20
    4206:	aa 1f       	adc	r26, r26
    4208:	a9 f3       	breq	.-22     	; 0x41f4 <__divsf3_pse+0x10>
    420a:	33 d0       	rcall	.+102    	; 0x4272 <__divsf3_pse+0x8e>
    420c:	0e 2e       	mov	r0, r30
    420e:	3a f0       	brmi	.+14     	; 0x421e <__divsf3_pse+0x3a>
    4210:	e0 e8       	ldi	r30, 0x80	; 128
    4212:	30 d0       	rcall	.+96     	; 0x4274 <__divsf3_pse+0x90>
    4214:	91 50       	subi	r25, 0x01	; 1
    4216:	50 40       	sbci	r21, 0x00	; 0
    4218:	e6 95       	lsr	r30
    421a:	00 1c       	adc	r0, r0
    421c:	ca f7       	brpl	.-14     	; 0x4210 <__divsf3_pse+0x2c>
    421e:	29 d0       	rcall	.+82     	; 0x4272 <__divsf3_pse+0x8e>
    4220:	fe 2f       	mov	r31, r30
    4222:	27 d0       	rcall	.+78     	; 0x4272 <__divsf3_pse+0x8e>
    4224:	66 0f       	add	r22, r22
    4226:	77 1f       	adc	r23, r23
    4228:	88 1f       	adc	r24, r24
    422a:	bb 1f       	adc	r27, r27
    422c:	26 17       	cp	r18, r22
    422e:	37 07       	cpc	r19, r23
    4230:	48 07       	cpc	r20, r24
    4232:	ab 07       	cpc	r26, r27
    4234:	b0 e8       	ldi	r27, 0x80	; 128
    4236:	09 f0       	breq	.+2      	; 0x423a <__divsf3_pse+0x56>
    4238:	bb 0b       	sbc	r27, r27
    423a:	80 2d       	mov	r24, r0
    423c:	bf 01       	movw	r22, r30
    423e:	ff 27       	eor	r31, r31
    4240:	93 58       	subi	r25, 0x83	; 131
    4242:	5f 4f       	sbci	r21, 0xFF	; 255
    4244:	2a f0       	brmi	.+10     	; 0x4250 <__divsf3_pse+0x6c>
    4246:	9e 3f       	cpi	r25, 0xFE	; 254
    4248:	51 05       	cpc	r21, r1
    424a:	68 f0       	brcs	.+26     	; 0x4266 <__divsf3_pse+0x82>
    424c:	8d c0       	rjmp	.+282    	; 0x4368 <__fp_inf>
    424e:	d7 c0       	rjmp	.+430    	; 0x43fe <__fp_szero>
    4250:	5f 3f       	cpi	r21, 0xFF	; 255
    4252:	ec f3       	brlt	.-6      	; 0x424e <__divsf3_pse+0x6a>
    4254:	98 3e       	cpi	r25, 0xE8	; 232
    4256:	dc f3       	brlt	.-10     	; 0x424e <__divsf3_pse+0x6a>
    4258:	86 95       	lsr	r24
    425a:	77 95       	ror	r23
    425c:	67 95       	ror	r22
    425e:	b7 95       	ror	r27
    4260:	f7 95       	ror	r31
    4262:	9f 5f       	subi	r25, 0xFF	; 255
    4264:	c9 f7       	brne	.-14     	; 0x4258 <__divsf3_pse+0x74>
    4266:	88 0f       	add	r24, r24
    4268:	91 1d       	adc	r25, r1
    426a:	96 95       	lsr	r25
    426c:	87 95       	ror	r24
    426e:	97 f9       	bld	r25, 7
    4270:	08 95       	ret
    4272:	e1 e0       	ldi	r30, 0x01	; 1
    4274:	66 0f       	add	r22, r22
    4276:	77 1f       	adc	r23, r23
    4278:	88 1f       	adc	r24, r24
    427a:	bb 1f       	adc	r27, r27
    427c:	62 17       	cp	r22, r18
    427e:	73 07       	cpc	r23, r19
    4280:	84 07       	cpc	r24, r20
    4282:	ba 07       	cpc	r27, r26
    4284:	20 f0       	brcs	.+8      	; 0x428e <__divsf3_pse+0xaa>
    4286:	62 1b       	sub	r22, r18
    4288:	73 0b       	sbc	r23, r19
    428a:	84 0b       	sbc	r24, r20
    428c:	ba 0b       	sbc	r27, r26
    428e:	ee 1f       	adc	r30, r30
    4290:	88 f7       	brcc	.-30     	; 0x4274 <__divsf3_pse+0x90>
    4292:	e0 95       	com	r30
    4294:	08 95       	ret

00004296 <__fixunssfsi>:
    4296:	98 d0       	rcall	.+304    	; 0x43c8 <__fp_splitA>
    4298:	88 f0       	brcs	.+34     	; 0x42bc <__fixunssfsi+0x26>
    429a:	9f 57       	subi	r25, 0x7F	; 127
    429c:	90 f0       	brcs	.+36     	; 0x42c2 <__fixunssfsi+0x2c>
    429e:	b9 2f       	mov	r27, r25
    42a0:	99 27       	eor	r25, r25
    42a2:	b7 51       	subi	r27, 0x17	; 23
    42a4:	a0 f0       	brcs	.+40     	; 0x42ce <__fixunssfsi+0x38>
    42a6:	d1 f0       	breq	.+52     	; 0x42dc <__fixunssfsi+0x46>
    42a8:	66 0f       	add	r22, r22
    42aa:	77 1f       	adc	r23, r23
    42ac:	88 1f       	adc	r24, r24
    42ae:	99 1f       	adc	r25, r25
    42b0:	1a f0       	brmi	.+6      	; 0x42b8 <__fixunssfsi+0x22>
    42b2:	ba 95       	dec	r27
    42b4:	c9 f7       	brne	.-14     	; 0x42a8 <__fixunssfsi+0x12>
    42b6:	12 c0       	rjmp	.+36     	; 0x42dc <__fixunssfsi+0x46>
    42b8:	b1 30       	cpi	r27, 0x01	; 1
    42ba:	81 f0       	breq	.+32     	; 0x42dc <__fixunssfsi+0x46>
    42bc:	9f d0       	rcall	.+318    	; 0x43fc <__fp_zero>
    42be:	b1 e0       	ldi	r27, 0x01	; 1
    42c0:	08 95       	ret
    42c2:	9c c0       	rjmp	.+312    	; 0x43fc <__fp_zero>
    42c4:	67 2f       	mov	r22, r23
    42c6:	78 2f       	mov	r23, r24
    42c8:	88 27       	eor	r24, r24
    42ca:	b8 5f       	subi	r27, 0xF8	; 248
    42cc:	39 f0       	breq	.+14     	; 0x42dc <__fixunssfsi+0x46>
    42ce:	b9 3f       	cpi	r27, 0xF9	; 249
    42d0:	cc f3       	brlt	.-14     	; 0x42c4 <__fixunssfsi+0x2e>
    42d2:	86 95       	lsr	r24
    42d4:	77 95       	ror	r23
    42d6:	67 95       	ror	r22
    42d8:	b3 95       	inc	r27
    42da:	d9 f7       	brne	.-10     	; 0x42d2 <__fixunssfsi+0x3c>
    42dc:	3e f4       	brtc	.+14     	; 0x42ec <__fixunssfsi+0x56>
    42de:	90 95       	com	r25
    42e0:	80 95       	com	r24
    42e2:	70 95       	com	r23
    42e4:	61 95       	neg	r22
    42e6:	7f 4f       	sbci	r23, 0xFF	; 255
    42e8:	8f 4f       	sbci	r24, 0xFF	; 255
    42ea:	9f 4f       	sbci	r25, 0xFF	; 255
    42ec:	08 95       	ret

000042ee <__floatunsisf>:
    42ee:	e8 94       	clt
    42f0:	09 c0       	rjmp	.+18     	; 0x4304 <__floatsisf+0x12>

000042f2 <__floatsisf>:
    42f2:	97 fb       	bst	r25, 7
    42f4:	3e f4       	brtc	.+14     	; 0x4304 <__floatsisf+0x12>
    42f6:	90 95       	com	r25
    42f8:	80 95       	com	r24
    42fa:	70 95       	com	r23
    42fc:	61 95       	neg	r22
    42fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4300:	8f 4f       	sbci	r24, 0xFF	; 255
    4302:	9f 4f       	sbci	r25, 0xFF	; 255
    4304:	99 23       	and	r25, r25
    4306:	a9 f0       	breq	.+42     	; 0x4332 <__floatsisf+0x40>
    4308:	f9 2f       	mov	r31, r25
    430a:	96 e9       	ldi	r25, 0x96	; 150
    430c:	bb 27       	eor	r27, r27
    430e:	93 95       	inc	r25
    4310:	f6 95       	lsr	r31
    4312:	87 95       	ror	r24
    4314:	77 95       	ror	r23
    4316:	67 95       	ror	r22
    4318:	b7 95       	ror	r27
    431a:	f1 11       	cpse	r31, r1
    431c:	f8 cf       	rjmp	.-16     	; 0x430e <__floatsisf+0x1c>
    431e:	fa f4       	brpl	.+62     	; 0x435e <__floatsisf+0x6c>
    4320:	bb 0f       	add	r27, r27
    4322:	11 f4       	brne	.+4      	; 0x4328 <__floatsisf+0x36>
    4324:	60 ff       	sbrs	r22, 0
    4326:	1b c0       	rjmp	.+54     	; 0x435e <__floatsisf+0x6c>
    4328:	6f 5f       	subi	r22, 0xFF	; 255
    432a:	7f 4f       	sbci	r23, 0xFF	; 255
    432c:	8f 4f       	sbci	r24, 0xFF	; 255
    432e:	9f 4f       	sbci	r25, 0xFF	; 255
    4330:	16 c0       	rjmp	.+44     	; 0x435e <__floatsisf+0x6c>
    4332:	88 23       	and	r24, r24
    4334:	11 f0       	breq	.+4      	; 0x433a <__floatsisf+0x48>
    4336:	96 e9       	ldi	r25, 0x96	; 150
    4338:	11 c0       	rjmp	.+34     	; 0x435c <__floatsisf+0x6a>
    433a:	77 23       	and	r23, r23
    433c:	21 f0       	breq	.+8      	; 0x4346 <__floatsisf+0x54>
    433e:	9e e8       	ldi	r25, 0x8E	; 142
    4340:	87 2f       	mov	r24, r23
    4342:	76 2f       	mov	r23, r22
    4344:	05 c0       	rjmp	.+10     	; 0x4350 <__floatsisf+0x5e>
    4346:	66 23       	and	r22, r22
    4348:	71 f0       	breq	.+28     	; 0x4366 <__floatsisf+0x74>
    434a:	96 e8       	ldi	r25, 0x86	; 134
    434c:	86 2f       	mov	r24, r22
    434e:	70 e0       	ldi	r23, 0x00	; 0
    4350:	60 e0       	ldi	r22, 0x00	; 0
    4352:	2a f0       	brmi	.+10     	; 0x435e <__floatsisf+0x6c>
    4354:	9a 95       	dec	r25
    4356:	66 0f       	add	r22, r22
    4358:	77 1f       	adc	r23, r23
    435a:	88 1f       	adc	r24, r24
    435c:	da f7       	brpl	.-10     	; 0x4354 <__floatsisf+0x62>
    435e:	88 0f       	add	r24, r24
    4360:	96 95       	lsr	r25
    4362:	87 95       	ror	r24
    4364:	97 f9       	bld	r25, 7
    4366:	08 95       	ret

00004368 <__fp_inf>:
    4368:	97 f9       	bld	r25, 7
    436a:	9f 67       	ori	r25, 0x7F	; 127
    436c:	80 e8       	ldi	r24, 0x80	; 128
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	60 e0       	ldi	r22, 0x00	; 0
    4372:	08 95       	ret

00004374 <__fp_nan>:
    4374:	9f ef       	ldi	r25, 0xFF	; 255
    4376:	80 ec       	ldi	r24, 0xC0	; 192
    4378:	08 95       	ret

0000437a <__fp_pscA>:
    437a:	00 24       	eor	r0, r0
    437c:	0a 94       	dec	r0
    437e:	16 16       	cp	r1, r22
    4380:	17 06       	cpc	r1, r23
    4382:	18 06       	cpc	r1, r24
    4384:	09 06       	cpc	r0, r25
    4386:	08 95       	ret

00004388 <__fp_pscB>:
    4388:	00 24       	eor	r0, r0
    438a:	0a 94       	dec	r0
    438c:	12 16       	cp	r1, r18
    438e:	13 06       	cpc	r1, r19
    4390:	14 06       	cpc	r1, r20
    4392:	05 06       	cpc	r0, r21
    4394:	08 95       	ret

00004396 <__fp_round>:
    4396:	09 2e       	mov	r0, r25
    4398:	03 94       	inc	r0
    439a:	00 0c       	add	r0, r0
    439c:	11 f4       	brne	.+4      	; 0x43a2 <__fp_round+0xc>
    439e:	88 23       	and	r24, r24
    43a0:	52 f0       	brmi	.+20     	; 0x43b6 <__fp_round+0x20>
    43a2:	bb 0f       	add	r27, r27
    43a4:	40 f4       	brcc	.+16     	; 0x43b6 <__fp_round+0x20>
    43a6:	bf 2b       	or	r27, r31
    43a8:	11 f4       	brne	.+4      	; 0x43ae <__fp_round+0x18>
    43aa:	60 ff       	sbrs	r22, 0
    43ac:	04 c0       	rjmp	.+8      	; 0x43b6 <__fp_round+0x20>
    43ae:	6f 5f       	subi	r22, 0xFF	; 255
    43b0:	7f 4f       	sbci	r23, 0xFF	; 255
    43b2:	8f 4f       	sbci	r24, 0xFF	; 255
    43b4:	9f 4f       	sbci	r25, 0xFF	; 255
    43b6:	08 95       	ret

000043b8 <__fp_split3>:
    43b8:	57 fd       	sbrc	r21, 7
    43ba:	90 58       	subi	r25, 0x80	; 128
    43bc:	44 0f       	add	r20, r20
    43be:	55 1f       	adc	r21, r21
    43c0:	59 f0       	breq	.+22     	; 0x43d8 <__fp_splitA+0x10>
    43c2:	5f 3f       	cpi	r21, 0xFF	; 255
    43c4:	71 f0       	breq	.+28     	; 0x43e2 <__fp_splitA+0x1a>
    43c6:	47 95       	ror	r20

000043c8 <__fp_splitA>:
    43c8:	88 0f       	add	r24, r24
    43ca:	97 fb       	bst	r25, 7
    43cc:	99 1f       	adc	r25, r25
    43ce:	61 f0       	breq	.+24     	; 0x43e8 <__fp_splitA+0x20>
    43d0:	9f 3f       	cpi	r25, 0xFF	; 255
    43d2:	79 f0       	breq	.+30     	; 0x43f2 <__fp_splitA+0x2a>
    43d4:	87 95       	ror	r24
    43d6:	08 95       	ret
    43d8:	12 16       	cp	r1, r18
    43da:	13 06       	cpc	r1, r19
    43dc:	14 06       	cpc	r1, r20
    43de:	55 1f       	adc	r21, r21
    43e0:	f2 cf       	rjmp	.-28     	; 0x43c6 <__fp_split3+0xe>
    43e2:	46 95       	lsr	r20
    43e4:	f1 df       	rcall	.-30     	; 0x43c8 <__fp_splitA>
    43e6:	08 c0       	rjmp	.+16     	; 0x43f8 <__fp_splitA+0x30>
    43e8:	16 16       	cp	r1, r22
    43ea:	17 06       	cpc	r1, r23
    43ec:	18 06       	cpc	r1, r24
    43ee:	99 1f       	adc	r25, r25
    43f0:	f1 cf       	rjmp	.-30     	; 0x43d4 <__fp_splitA+0xc>
    43f2:	86 95       	lsr	r24
    43f4:	71 05       	cpc	r23, r1
    43f6:	61 05       	cpc	r22, r1
    43f8:	08 94       	sec
    43fa:	08 95       	ret

000043fc <__fp_zero>:
    43fc:	e8 94       	clt

000043fe <__fp_szero>:
    43fe:	bb 27       	eor	r27, r27
    4400:	66 27       	eor	r22, r22
    4402:	77 27       	eor	r23, r23
    4404:	cb 01       	movw	r24, r22
    4406:	97 f9       	bld	r25, 7
    4408:	08 95       	ret

0000440a <__mulsf3>:
    440a:	0b d0       	rcall	.+22     	; 0x4422 <__mulsf3x>
    440c:	c4 cf       	rjmp	.-120    	; 0x4396 <__fp_round>
    440e:	b5 df       	rcall	.-150    	; 0x437a <__fp_pscA>
    4410:	28 f0       	brcs	.+10     	; 0x441c <__mulsf3+0x12>
    4412:	ba df       	rcall	.-140    	; 0x4388 <__fp_pscB>
    4414:	18 f0       	brcs	.+6      	; 0x441c <__mulsf3+0x12>
    4416:	95 23       	and	r25, r21
    4418:	09 f0       	breq	.+2      	; 0x441c <__mulsf3+0x12>
    441a:	a6 cf       	rjmp	.-180    	; 0x4368 <__fp_inf>
    441c:	ab cf       	rjmp	.-170    	; 0x4374 <__fp_nan>
    441e:	11 24       	eor	r1, r1
    4420:	ee cf       	rjmp	.-36     	; 0x43fe <__fp_szero>

00004422 <__mulsf3x>:
    4422:	ca df       	rcall	.-108    	; 0x43b8 <__fp_split3>
    4424:	a0 f3       	brcs	.-24     	; 0x440e <__mulsf3+0x4>

00004426 <__mulsf3_pse>:
    4426:	95 9f       	mul	r25, r21
    4428:	d1 f3       	breq	.-12     	; 0x441e <__mulsf3+0x14>
    442a:	95 0f       	add	r25, r21
    442c:	50 e0       	ldi	r21, 0x00	; 0
    442e:	55 1f       	adc	r21, r21
    4430:	62 9f       	mul	r22, r18
    4432:	f0 01       	movw	r30, r0
    4434:	72 9f       	mul	r23, r18
    4436:	bb 27       	eor	r27, r27
    4438:	f0 0d       	add	r31, r0
    443a:	b1 1d       	adc	r27, r1
    443c:	63 9f       	mul	r22, r19
    443e:	aa 27       	eor	r26, r26
    4440:	f0 0d       	add	r31, r0
    4442:	b1 1d       	adc	r27, r1
    4444:	aa 1f       	adc	r26, r26
    4446:	64 9f       	mul	r22, r20
    4448:	66 27       	eor	r22, r22
    444a:	b0 0d       	add	r27, r0
    444c:	a1 1d       	adc	r26, r1
    444e:	66 1f       	adc	r22, r22
    4450:	82 9f       	mul	r24, r18
    4452:	22 27       	eor	r18, r18
    4454:	b0 0d       	add	r27, r0
    4456:	a1 1d       	adc	r26, r1
    4458:	62 1f       	adc	r22, r18
    445a:	73 9f       	mul	r23, r19
    445c:	b0 0d       	add	r27, r0
    445e:	a1 1d       	adc	r26, r1
    4460:	62 1f       	adc	r22, r18
    4462:	83 9f       	mul	r24, r19
    4464:	a0 0d       	add	r26, r0
    4466:	61 1d       	adc	r22, r1
    4468:	22 1f       	adc	r18, r18
    446a:	74 9f       	mul	r23, r20
    446c:	33 27       	eor	r19, r19
    446e:	a0 0d       	add	r26, r0
    4470:	61 1d       	adc	r22, r1
    4472:	23 1f       	adc	r18, r19
    4474:	84 9f       	mul	r24, r20
    4476:	60 0d       	add	r22, r0
    4478:	21 1d       	adc	r18, r1
    447a:	82 2f       	mov	r24, r18
    447c:	76 2f       	mov	r23, r22
    447e:	6a 2f       	mov	r22, r26
    4480:	11 24       	eor	r1, r1
    4482:	9f 57       	subi	r25, 0x7F	; 127
    4484:	50 40       	sbci	r21, 0x00	; 0
    4486:	8a f0       	brmi	.+34     	; 0x44aa <__mulsf3_pse+0x84>
    4488:	e1 f0       	breq	.+56     	; 0x44c2 <__mulsf3_pse+0x9c>
    448a:	88 23       	and	r24, r24
    448c:	4a f0       	brmi	.+18     	; 0x44a0 <__mulsf3_pse+0x7a>
    448e:	ee 0f       	add	r30, r30
    4490:	ff 1f       	adc	r31, r31
    4492:	bb 1f       	adc	r27, r27
    4494:	66 1f       	adc	r22, r22
    4496:	77 1f       	adc	r23, r23
    4498:	88 1f       	adc	r24, r24
    449a:	91 50       	subi	r25, 0x01	; 1
    449c:	50 40       	sbci	r21, 0x00	; 0
    449e:	a9 f7       	brne	.-22     	; 0x448a <__mulsf3_pse+0x64>
    44a0:	9e 3f       	cpi	r25, 0xFE	; 254
    44a2:	51 05       	cpc	r21, r1
    44a4:	70 f0       	brcs	.+28     	; 0x44c2 <__mulsf3_pse+0x9c>
    44a6:	60 cf       	rjmp	.-320    	; 0x4368 <__fp_inf>
    44a8:	aa cf       	rjmp	.-172    	; 0x43fe <__fp_szero>
    44aa:	5f 3f       	cpi	r21, 0xFF	; 255
    44ac:	ec f3       	brlt	.-6      	; 0x44a8 <__mulsf3_pse+0x82>
    44ae:	98 3e       	cpi	r25, 0xE8	; 232
    44b0:	dc f3       	brlt	.-10     	; 0x44a8 <__mulsf3_pse+0x82>
    44b2:	86 95       	lsr	r24
    44b4:	77 95       	ror	r23
    44b6:	67 95       	ror	r22
    44b8:	b7 95       	ror	r27
    44ba:	f7 95       	ror	r31
    44bc:	e7 95       	ror	r30
    44be:	9f 5f       	subi	r25, 0xFF	; 255
    44c0:	c1 f7       	brne	.-16     	; 0x44b2 <__mulsf3_pse+0x8c>
    44c2:	fe 2b       	or	r31, r30
    44c4:	88 0f       	add	r24, r24
    44c6:	91 1d       	adc	r25, r1
    44c8:	96 95       	lsr	r25
    44ca:	87 95       	ror	r24
    44cc:	97 f9       	bld	r25, 7
    44ce:	08 95       	ret

000044d0 <__tablejump2__>:
    44d0:	ee 0f       	add	r30, r30
    44d2:	ff 1f       	adc	r31, r31
    44d4:	88 1f       	adc	r24, r24
    44d6:	8b bf       	out	0x3b, r24	; 59
    44d8:	07 90       	elpm	r0, Z+
    44da:	f6 91       	elpm	r31, Z
    44dc:	e0 2d       	mov	r30, r0
    44de:	19 94       	eijmp

000044e0 <calloc>:
    44e0:	0f 93       	push	r16
    44e2:	1f 93       	push	r17
    44e4:	cf 93       	push	r28
    44e6:	df 93       	push	r29
    44e8:	86 9f       	mul	r24, r22
    44ea:	80 01       	movw	r16, r0
    44ec:	87 9f       	mul	r24, r23
    44ee:	10 0d       	add	r17, r0
    44f0:	96 9f       	mul	r25, r22
    44f2:	10 0d       	add	r17, r0
    44f4:	11 24       	eor	r1, r1
    44f6:	c8 01       	movw	r24, r16
    44f8:	0d d0       	rcall	.+26     	; 0x4514 <malloc>
    44fa:	ec 01       	movw	r28, r24
    44fc:	00 97       	sbiw	r24, 0x00	; 0
    44fe:	21 f0       	breq	.+8      	; 0x4508 <calloc+0x28>
    4500:	a8 01       	movw	r20, r16
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	34 d1       	rcall	.+616    	; 0x4770 <memset>
    4508:	ce 01       	movw	r24, r28
    450a:	df 91       	pop	r29
    450c:	cf 91       	pop	r28
    450e:	1f 91       	pop	r17
    4510:	0f 91       	pop	r16
    4512:	08 95       	ret

00004514 <malloc>:
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	82 30       	cpi	r24, 0x02	; 2
    451e:	91 05       	cpc	r25, r1
    4520:	10 f4       	brcc	.+4      	; 0x4526 <malloc+0x12>
    4522:	82 e0       	ldi	r24, 0x02	; 2
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <__flp>
    452a:	f0 91 a2 18 	lds	r31, 0x18A2	; 0x8018a2 <__flp+0x1>
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	a0 e0       	ldi	r26, 0x00	; 0
    4534:	b0 e0       	ldi	r27, 0x00	; 0
    4536:	30 97       	sbiw	r30, 0x00	; 0
    4538:	19 f1       	breq	.+70     	; 0x4580 <malloc+0x6c>
    453a:	40 81       	ld	r20, Z
    453c:	51 81       	ldd	r21, Z+1	; 0x01
    453e:	02 81       	ldd	r16, Z+2	; 0x02
    4540:	13 81       	ldd	r17, Z+3	; 0x03
    4542:	48 17       	cp	r20, r24
    4544:	59 07       	cpc	r21, r25
    4546:	c8 f0       	brcs	.+50     	; 0x457a <malloc+0x66>
    4548:	84 17       	cp	r24, r20
    454a:	95 07       	cpc	r25, r21
    454c:	69 f4       	brne	.+26     	; 0x4568 <malloc+0x54>
    454e:	10 97       	sbiw	r26, 0x00	; 0
    4550:	31 f0       	breq	.+12     	; 0x455e <malloc+0x4a>
    4552:	12 96       	adiw	r26, 0x02	; 2
    4554:	0c 93       	st	X, r16
    4556:	12 97       	sbiw	r26, 0x02	; 2
    4558:	13 96       	adiw	r26, 0x03	; 3
    455a:	1c 93       	st	X, r17
    455c:	27 c0       	rjmp	.+78     	; 0x45ac <malloc+0x98>
    455e:	00 93 a1 18 	sts	0x18A1, r16	; 0x8018a1 <__flp>
    4562:	10 93 a2 18 	sts	0x18A2, r17	; 0x8018a2 <__flp+0x1>
    4566:	22 c0       	rjmp	.+68     	; 0x45ac <malloc+0x98>
    4568:	21 15       	cp	r18, r1
    456a:	31 05       	cpc	r19, r1
    456c:	19 f0       	breq	.+6      	; 0x4574 <malloc+0x60>
    456e:	42 17       	cp	r20, r18
    4570:	53 07       	cpc	r21, r19
    4572:	18 f4       	brcc	.+6      	; 0x457a <malloc+0x66>
    4574:	9a 01       	movw	r18, r20
    4576:	bd 01       	movw	r22, r26
    4578:	ef 01       	movw	r28, r30
    457a:	df 01       	movw	r26, r30
    457c:	f8 01       	movw	r30, r16
    457e:	db cf       	rjmp	.-74     	; 0x4536 <malloc+0x22>
    4580:	21 15       	cp	r18, r1
    4582:	31 05       	cpc	r19, r1
    4584:	f9 f0       	breq	.+62     	; 0x45c4 <malloc+0xb0>
    4586:	28 1b       	sub	r18, r24
    4588:	39 0b       	sbc	r19, r25
    458a:	24 30       	cpi	r18, 0x04	; 4
    458c:	31 05       	cpc	r19, r1
    458e:	80 f4       	brcc	.+32     	; 0x45b0 <malloc+0x9c>
    4590:	8a 81       	ldd	r24, Y+2	; 0x02
    4592:	9b 81       	ldd	r25, Y+3	; 0x03
    4594:	61 15       	cp	r22, r1
    4596:	71 05       	cpc	r23, r1
    4598:	21 f0       	breq	.+8      	; 0x45a2 <malloc+0x8e>
    459a:	fb 01       	movw	r30, r22
    459c:	93 83       	std	Z+3, r25	; 0x03
    459e:	82 83       	std	Z+2, r24	; 0x02
    45a0:	04 c0       	rjmp	.+8      	; 0x45aa <malloc+0x96>
    45a2:	90 93 a2 18 	sts	0x18A2, r25	; 0x8018a2 <__flp+0x1>
    45a6:	80 93 a1 18 	sts	0x18A1, r24	; 0x8018a1 <__flp>
    45aa:	fe 01       	movw	r30, r28
    45ac:	32 96       	adiw	r30, 0x02	; 2
    45ae:	44 c0       	rjmp	.+136    	; 0x4638 <malloc+0x124>
    45b0:	fe 01       	movw	r30, r28
    45b2:	e2 0f       	add	r30, r18
    45b4:	f3 1f       	adc	r31, r19
    45b6:	81 93       	st	Z+, r24
    45b8:	91 93       	st	Z+, r25
    45ba:	22 50       	subi	r18, 0x02	; 2
    45bc:	31 09       	sbc	r19, r1
    45be:	39 83       	std	Y+1, r19	; 0x01
    45c0:	28 83       	st	Y, r18
    45c2:	3a c0       	rjmp	.+116    	; 0x4638 <malloc+0x124>
    45c4:	20 91 9f 18 	lds	r18, 0x189F	; 0x80189f <__brkval>
    45c8:	30 91 a0 18 	lds	r19, 0x18A0	; 0x8018a0 <__brkval+0x1>
    45cc:	23 2b       	or	r18, r19
    45ce:	41 f4       	brne	.+16     	; 0x45e0 <malloc+0xcc>
    45d0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    45d4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    45d8:	30 93 a0 18 	sts	0x18A0, r19	; 0x8018a0 <__brkval+0x1>
    45dc:	20 93 9f 18 	sts	0x189F, r18	; 0x80189f <__brkval>
    45e0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    45e4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    45e8:	21 15       	cp	r18, r1
    45ea:	31 05       	cpc	r19, r1
    45ec:	41 f4       	brne	.+16     	; 0x45fe <malloc+0xea>
    45ee:	2d b7       	in	r18, 0x3d	; 61
    45f0:	3e b7       	in	r19, 0x3e	; 62
    45f2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    45f6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    45fa:	24 1b       	sub	r18, r20
    45fc:	35 0b       	sbc	r19, r21
    45fe:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <__brkval>
    4602:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <__brkval+0x1>
    4606:	e2 17       	cp	r30, r18
    4608:	f3 07       	cpc	r31, r19
    460a:	a0 f4       	brcc	.+40     	; 0x4634 <malloc+0x120>
    460c:	2e 1b       	sub	r18, r30
    460e:	3f 0b       	sbc	r19, r31
    4610:	28 17       	cp	r18, r24
    4612:	39 07       	cpc	r19, r25
    4614:	78 f0       	brcs	.+30     	; 0x4634 <malloc+0x120>
    4616:	ac 01       	movw	r20, r24
    4618:	4e 5f       	subi	r20, 0xFE	; 254
    461a:	5f 4f       	sbci	r21, 0xFF	; 255
    461c:	24 17       	cp	r18, r20
    461e:	35 07       	cpc	r19, r21
    4620:	48 f0       	brcs	.+18     	; 0x4634 <malloc+0x120>
    4622:	4e 0f       	add	r20, r30
    4624:	5f 1f       	adc	r21, r31
    4626:	50 93 a0 18 	sts	0x18A0, r21	; 0x8018a0 <__brkval+0x1>
    462a:	40 93 9f 18 	sts	0x189F, r20	; 0x80189f <__brkval>
    462e:	81 93       	st	Z+, r24
    4630:	91 93       	st	Z+, r25
    4632:	02 c0       	rjmp	.+4      	; 0x4638 <malloc+0x124>
    4634:	e0 e0       	ldi	r30, 0x00	; 0
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	cf 01       	movw	r24, r30
    463a:	df 91       	pop	r29
    463c:	cf 91       	pop	r28
    463e:	1f 91       	pop	r17
    4640:	0f 91       	pop	r16
    4642:	08 95       	ret

00004644 <free>:
    4644:	cf 93       	push	r28
    4646:	df 93       	push	r29
    4648:	00 97       	sbiw	r24, 0x00	; 0
    464a:	09 f4       	brne	.+2      	; 0x464e <free+0xa>
    464c:	81 c0       	rjmp	.+258    	; 0x4750 <free+0x10c>
    464e:	fc 01       	movw	r30, r24
    4650:	32 97       	sbiw	r30, 0x02	; 2
    4652:	13 82       	std	Z+3, r1	; 0x03
    4654:	12 82       	std	Z+2, r1	; 0x02
    4656:	a0 91 a1 18 	lds	r26, 0x18A1	; 0x8018a1 <__flp>
    465a:	b0 91 a2 18 	lds	r27, 0x18A2	; 0x8018a2 <__flp+0x1>
    465e:	10 97       	sbiw	r26, 0x00	; 0
    4660:	81 f4       	brne	.+32     	; 0x4682 <free+0x3e>
    4662:	20 81       	ld	r18, Z
    4664:	31 81       	ldd	r19, Z+1	; 0x01
    4666:	82 0f       	add	r24, r18
    4668:	93 1f       	adc	r25, r19
    466a:	20 91 9f 18 	lds	r18, 0x189F	; 0x80189f <__brkval>
    466e:	30 91 a0 18 	lds	r19, 0x18A0	; 0x8018a0 <__brkval+0x1>
    4672:	28 17       	cp	r18, r24
    4674:	39 07       	cpc	r19, r25
    4676:	51 f5       	brne	.+84     	; 0x46cc <free+0x88>
    4678:	f0 93 a0 18 	sts	0x18A0, r31	; 0x8018a0 <__brkval+0x1>
    467c:	e0 93 9f 18 	sts	0x189F, r30	; 0x80189f <__brkval>
    4680:	67 c0       	rjmp	.+206    	; 0x4750 <free+0x10c>
    4682:	ed 01       	movw	r28, r26
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	ce 17       	cp	r28, r30
    468a:	df 07       	cpc	r29, r31
    468c:	40 f4       	brcc	.+16     	; 0x469e <free+0x5a>
    468e:	4a 81       	ldd	r20, Y+2	; 0x02
    4690:	5b 81       	ldd	r21, Y+3	; 0x03
    4692:	9e 01       	movw	r18, r28
    4694:	41 15       	cp	r20, r1
    4696:	51 05       	cpc	r21, r1
    4698:	f1 f0       	breq	.+60     	; 0x46d6 <free+0x92>
    469a:	ea 01       	movw	r28, r20
    469c:	f5 cf       	rjmp	.-22     	; 0x4688 <free+0x44>
    469e:	d3 83       	std	Z+3, r29	; 0x03
    46a0:	c2 83       	std	Z+2, r28	; 0x02
    46a2:	40 81       	ld	r20, Z
    46a4:	51 81       	ldd	r21, Z+1	; 0x01
    46a6:	84 0f       	add	r24, r20
    46a8:	95 1f       	adc	r25, r21
    46aa:	c8 17       	cp	r28, r24
    46ac:	d9 07       	cpc	r29, r25
    46ae:	59 f4       	brne	.+22     	; 0x46c6 <free+0x82>
    46b0:	88 81       	ld	r24, Y
    46b2:	99 81       	ldd	r25, Y+1	; 0x01
    46b4:	84 0f       	add	r24, r20
    46b6:	95 1f       	adc	r25, r21
    46b8:	02 96       	adiw	r24, 0x02	; 2
    46ba:	91 83       	std	Z+1, r25	; 0x01
    46bc:	80 83       	st	Z, r24
    46be:	8a 81       	ldd	r24, Y+2	; 0x02
    46c0:	9b 81       	ldd	r25, Y+3	; 0x03
    46c2:	93 83       	std	Z+3, r25	; 0x03
    46c4:	82 83       	std	Z+2, r24	; 0x02
    46c6:	21 15       	cp	r18, r1
    46c8:	31 05       	cpc	r19, r1
    46ca:	29 f4       	brne	.+10     	; 0x46d6 <free+0x92>
    46cc:	f0 93 a2 18 	sts	0x18A2, r31	; 0x8018a2 <__flp+0x1>
    46d0:	e0 93 a1 18 	sts	0x18A1, r30	; 0x8018a1 <__flp>
    46d4:	3d c0       	rjmp	.+122    	; 0x4750 <free+0x10c>
    46d6:	e9 01       	movw	r28, r18
    46d8:	fb 83       	std	Y+3, r31	; 0x03
    46da:	ea 83       	std	Y+2, r30	; 0x02
    46dc:	49 91       	ld	r20, Y+
    46de:	59 91       	ld	r21, Y+
    46e0:	c4 0f       	add	r28, r20
    46e2:	d5 1f       	adc	r29, r21
    46e4:	ec 17       	cp	r30, r28
    46e6:	fd 07       	cpc	r31, r29
    46e8:	61 f4       	brne	.+24     	; 0x4702 <free+0xbe>
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	84 0f       	add	r24, r20
    46f0:	95 1f       	adc	r25, r21
    46f2:	02 96       	adiw	r24, 0x02	; 2
    46f4:	e9 01       	movw	r28, r18
    46f6:	99 83       	std	Y+1, r25	; 0x01
    46f8:	88 83       	st	Y, r24
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	9b 83       	std	Y+3, r25	; 0x03
    4700:	8a 83       	std	Y+2, r24	; 0x02
    4702:	e0 e0       	ldi	r30, 0x00	; 0
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	12 96       	adiw	r26, 0x02	; 2
    4708:	8d 91       	ld	r24, X+
    470a:	9c 91       	ld	r25, X
    470c:	13 97       	sbiw	r26, 0x03	; 3
    470e:	00 97       	sbiw	r24, 0x00	; 0
    4710:	19 f0       	breq	.+6      	; 0x4718 <free+0xd4>
    4712:	fd 01       	movw	r30, r26
    4714:	dc 01       	movw	r26, r24
    4716:	f7 cf       	rjmp	.-18     	; 0x4706 <free+0xc2>
    4718:	8d 91       	ld	r24, X+
    471a:	9c 91       	ld	r25, X
    471c:	11 97       	sbiw	r26, 0x01	; 1
    471e:	9d 01       	movw	r18, r26
    4720:	2e 5f       	subi	r18, 0xFE	; 254
    4722:	3f 4f       	sbci	r19, 0xFF	; 255
    4724:	82 0f       	add	r24, r18
    4726:	93 1f       	adc	r25, r19
    4728:	20 91 9f 18 	lds	r18, 0x189F	; 0x80189f <__brkval>
    472c:	30 91 a0 18 	lds	r19, 0x18A0	; 0x8018a0 <__brkval+0x1>
    4730:	28 17       	cp	r18, r24
    4732:	39 07       	cpc	r19, r25
    4734:	69 f4       	brne	.+26     	; 0x4750 <free+0x10c>
    4736:	30 97       	sbiw	r30, 0x00	; 0
    4738:	29 f4       	brne	.+10     	; 0x4744 <free+0x100>
    473a:	10 92 a2 18 	sts	0x18A2, r1	; 0x8018a2 <__flp+0x1>
    473e:	10 92 a1 18 	sts	0x18A1, r1	; 0x8018a1 <__flp>
    4742:	02 c0       	rjmp	.+4      	; 0x4748 <free+0x104>
    4744:	13 82       	std	Z+3, r1	; 0x03
    4746:	12 82       	std	Z+2, r1	; 0x02
    4748:	b0 93 a0 18 	sts	0x18A0, r27	; 0x8018a0 <__brkval+0x1>
    474c:	a0 93 9f 18 	sts	0x189F, r26	; 0x80189f <__brkval>
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	08 95       	ret

00004756 <abort>:
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	f8 94       	cli
    475c:	7d c3       	rjmp	.+1786   	; 0x4e58 <_exit>

0000475e <memcpy>:
    475e:	fb 01       	movw	r30, r22
    4760:	dc 01       	movw	r26, r24
    4762:	02 c0       	rjmp	.+4      	; 0x4768 <memcpy+0xa>
    4764:	01 90       	ld	r0, Z+
    4766:	0d 92       	st	X+, r0
    4768:	41 50       	subi	r20, 0x01	; 1
    476a:	50 40       	sbci	r21, 0x00	; 0
    476c:	d8 f7       	brcc	.-10     	; 0x4764 <memcpy+0x6>
    476e:	08 95       	ret

00004770 <memset>:
    4770:	dc 01       	movw	r26, r24
    4772:	01 c0       	rjmp	.+2      	; 0x4776 <memset+0x6>
    4774:	6d 93       	st	X+, r22
    4776:	41 50       	subi	r20, 0x01	; 1
    4778:	50 40       	sbci	r21, 0x00	; 0
    477a:	e0 f7       	brcc	.-8      	; 0x4774 <memset+0x4>
    477c:	08 95       	ret

0000477e <strcasestr>:
    477e:	fb 01       	movw	r30, r22
    4780:	51 91       	ld	r21, Z+
    4782:	55 23       	and	r21, r21
    4784:	b1 f0       	breq	.+44     	; 0x47b2 <strcasestr+0x34>
    4786:	bf 01       	movw	r22, r30
    4788:	dc 01       	movw	r26, r24
    478a:	05 2e       	mov	r0, r21
    478c:	4d 91       	ld	r20, X+
    478e:	44 23       	and	r20, r20
    4790:	69 f0       	breq	.+26     	; 0x47ac <strcasestr+0x2e>
    4792:	10 d0       	rcall	.+32     	; 0x47b4 <strcasestr+0x36>
    4794:	d9 f7       	brne	.-10     	; 0x478c <strcasestr+0xe>
    4796:	cd 01       	movw	r24, r26
    4798:	01 90       	ld	r0, Z+
    479a:	00 20       	and	r0, r0
    479c:	49 f0       	breq	.+18     	; 0x47b0 <strcasestr+0x32>
    479e:	4d 91       	ld	r20, X+
    47a0:	41 11       	cpse	r20, r1
    47a2:	08 d0       	rcall	.+16     	; 0x47b4 <strcasestr+0x36>
    47a4:	c9 f3       	breq	.-14     	; 0x4798 <strcasestr+0x1a>
    47a6:	fb 01       	movw	r30, r22
    47a8:	41 11       	cpse	r20, r1
    47aa:	ee cf       	rjmp	.-36     	; 0x4788 <strcasestr+0xa>
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	01 97       	sbiw	r24, 0x01	; 1
    47b2:	08 95       	ret
    47b4:	40 25       	eor	r20, r0
    47b6:	39 f0       	breq	.+14     	; 0x47c6 <strcasestr+0x48>
    47b8:	40 32       	cpi	r20, 0x20	; 32
    47ba:	29 f4       	brne	.+10     	; 0x47c6 <strcasestr+0x48>
    47bc:	40 29       	or	r20, r0
    47be:	4b 57       	subi	r20, 0x7B	; 123
    47c0:	46 5e       	subi	r20, 0xE6	; 230
    47c2:	08 f0       	brcs	.+2      	; 0x47c6 <strcasestr+0x48>
    47c4:	18 94       	sez
    47c6:	08 95       	ret

000047c8 <strcat>:
    47c8:	fb 01       	movw	r30, r22
    47ca:	dc 01       	movw	r26, r24
    47cc:	0d 90       	ld	r0, X+
    47ce:	00 20       	and	r0, r0
    47d0:	e9 f7       	brne	.-6      	; 0x47cc <strcat+0x4>
    47d2:	11 97       	sbiw	r26, 0x01	; 1
    47d4:	01 90       	ld	r0, Z+
    47d6:	0d 92       	st	X+, r0
    47d8:	00 20       	and	r0, r0
    47da:	e1 f7       	brne	.-8      	; 0x47d4 <strcat+0xc>
    47dc:	08 95       	ret

000047de <strcpy>:
    47de:	fb 01       	movw	r30, r22
    47e0:	dc 01       	movw	r26, r24
    47e2:	01 90       	ld	r0, Z+
    47e4:	0d 92       	st	X+, r0
    47e6:	00 20       	and	r0, r0
    47e8:	e1 f7       	brne	.-8      	; 0x47e2 <strcpy+0x4>
    47ea:	08 95       	ret

000047ec <strncasecmp>:
    47ec:	fb 01       	movw	r30, r22
    47ee:	dc 01       	movw	r26, r24
    47f0:	41 50       	subi	r20, 0x01	; 1
    47f2:	50 40       	sbci	r21, 0x00	; 0
    47f4:	88 f0       	brcs	.+34     	; 0x4818 <strncasecmp+0x2c>
    47f6:	8d 91       	ld	r24, X+
    47f8:	81 34       	cpi	r24, 0x41	; 65
    47fa:	1c f0       	brlt	.+6      	; 0x4802 <strncasecmp+0x16>
    47fc:	8b 35       	cpi	r24, 0x5B	; 91
    47fe:	0c f4       	brge	.+2      	; 0x4802 <strncasecmp+0x16>
    4800:	80 5e       	subi	r24, 0xE0	; 224
    4802:	61 91       	ld	r22, Z+
    4804:	61 34       	cpi	r22, 0x41	; 65
    4806:	1c f0       	brlt	.+6      	; 0x480e <strncasecmp+0x22>
    4808:	6b 35       	cpi	r22, 0x5B	; 91
    480a:	0c f4       	brge	.+2      	; 0x480e <strncasecmp+0x22>
    480c:	60 5e       	subi	r22, 0xE0	; 224
    480e:	86 1b       	sub	r24, r22
    4810:	61 11       	cpse	r22, r1
    4812:	71 f3       	breq	.-36     	; 0x47f0 <strncasecmp+0x4>
    4814:	99 0b       	sbc	r25, r25
    4816:	08 95       	ret
    4818:	88 1b       	sub	r24, r24
    481a:	fc cf       	rjmp	.-8      	; 0x4814 <strncasecmp+0x28>

0000481c <printf>:
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
    4824:	ae 01       	movw	r20, r28
    4826:	4a 5f       	subi	r20, 0xFA	; 250
    4828:	5f 4f       	sbci	r21, 0xFF	; 255
    482a:	fa 01       	movw	r30, r20
    482c:	61 91       	ld	r22, Z+
    482e:	71 91       	ld	r23, Z+
    4830:	af 01       	movw	r20, r30
    4832:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <__iob+0x2>
    4836:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <__iob+0x3>
    483a:	61 d0       	rcall	.+194    	; 0x48fe <vfprintf>
    483c:	df 91       	pop	r29
    483e:	cf 91       	pop	r28
    4840:	08 95       	ret

00004842 <puts>:
    4842:	0f 93       	push	r16
    4844:	1f 93       	push	r17
    4846:	cf 93       	push	r28
    4848:	df 93       	push	r29
    484a:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <__iob+0x2>
    484e:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <__iob+0x3>
    4852:	23 81       	ldd	r18, Z+3	; 0x03
    4854:	21 ff       	sbrs	r18, 1
    4856:	1b c0       	rjmp	.+54     	; 0x488e <puts+0x4c>
    4858:	8c 01       	movw	r16, r24
    485a:	d0 e0       	ldi	r29, 0x00	; 0
    485c:	c0 e0       	ldi	r28, 0x00	; 0
    485e:	f8 01       	movw	r30, r16
    4860:	81 91       	ld	r24, Z+
    4862:	8f 01       	movw	r16, r30
    4864:	60 91 a5 18 	lds	r22, 0x18A5	; 0x8018a5 <__iob+0x2>
    4868:	70 91 a6 18 	lds	r23, 0x18A6	; 0x8018a6 <__iob+0x3>
    486c:	db 01       	movw	r26, r22
    486e:	18 96       	adiw	r26, 0x08	; 8
    4870:	ed 91       	ld	r30, X+
    4872:	fc 91       	ld	r31, X
    4874:	19 97       	sbiw	r26, 0x09	; 9
    4876:	88 23       	and	r24, r24
    4878:	31 f0       	breq	.+12     	; 0x4886 <puts+0x44>
    487a:	19 95       	eicall
    487c:	89 2b       	or	r24, r25
    487e:	79 f3       	breq	.-34     	; 0x485e <puts+0x1c>
    4880:	df ef       	ldi	r29, 0xFF	; 255
    4882:	cf ef       	ldi	r28, 0xFF	; 255
    4884:	ec cf       	rjmp	.-40     	; 0x485e <puts+0x1c>
    4886:	8a e0       	ldi	r24, 0x0A	; 10
    4888:	19 95       	eicall
    488a:	89 2b       	or	r24, r25
    488c:	19 f0       	breq	.+6      	; 0x4894 <puts+0x52>
    488e:	8f ef       	ldi	r24, 0xFF	; 255
    4890:	9f ef       	ldi	r25, 0xFF	; 255
    4892:	02 c0       	rjmp	.+4      	; 0x4898 <puts+0x56>
    4894:	8d 2f       	mov	r24, r29
    4896:	9c 2f       	mov	r25, r28
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	08 95       	ret

000048a2 <sprintf>:
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	cd b7       	in	r28, 0x3d	; 61
    48ac:	de b7       	in	r29, 0x3e	; 62
    48ae:	2e 97       	sbiw	r28, 0x0e	; 14
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	de bf       	out	0x3e, r29	; 62
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	0e 89       	ldd	r16, Y+22	; 0x16
    48bc:	1f 89       	ldd	r17, Y+23	; 0x17
    48be:	86 e0       	ldi	r24, 0x06	; 6
    48c0:	8c 83       	std	Y+4, r24	; 0x04
    48c2:	1a 83       	std	Y+2, r17	; 0x02
    48c4:	09 83       	std	Y+1, r16	; 0x01
    48c6:	8f ef       	ldi	r24, 0xFF	; 255
    48c8:	9f e7       	ldi	r25, 0x7F	; 127
    48ca:	9e 83       	std	Y+6, r25	; 0x06
    48cc:	8d 83       	std	Y+5, r24	; 0x05
    48ce:	ae 01       	movw	r20, r28
    48d0:	46 5e       	subi	r20, 0xE6	; 230
    48d2:	5f 4f       	sbci	r21, 0xFF	; 255
    48d4:	68 8d       	ldd	r22, Y+24	; 0x18
    48d6:	79 8d       	ldd	r23, Y+25	; 0x19
    48d8:	ce 01       	movw	r24, r28
    48da:	01 96       	adiw	r24, 0x01	; 1
    48dc:	10 d0       	rcall	.+32     	; 0x48fe <vfprintf>
    48de:	ef 81       	ldd	r30, Y+7	; 0x07
    48e0:	f8 85       	ldd	r31, Y+8	; 0x08
    48e2:	e0 0f       	add	r30, r16
    48e4:	f1 1f       	adc	r31, r17
    48e6:	10 82       	st	Z, r1
    48e8:	2e 96       	adiw	r28, 0x0e	; 14
    48ea:	0f b6       	in	r0, 0x3f	; 63
    48ec:	f8 94       	cli
    48ee:	de bf       	out	0x3e, r29	; 62
    48f0:	0f be       	out	0x3f, r0	; 63
    48f2:	cd bf       	out	0x3d, r28	; 61
    48f4:	df 91       	pop	r29
    48f6:	cf 91       	pop	r28
    48f8:	1f 91       	pop	r17
    48fa:	0f 91       	pop	r16
    48fc:	08 95       	ret

000048fe <vfprintf>:
    48fe:	2f 92       	push	r2
    4900:	3f 92       	push	r3
    4902:	4f 92       	push	r4
    4904:	5f 92       	push	r5
    4906:	6f 92       	push	r6
    4908:	7f 92       	push	r7
    490a:	8f 92       	push	r8
    490c:	9f 92       	push	r9
    490e:	af 92       	push	r10
    4910:	bf 92       	push	r11
    4912:	cf 92       	push	r12
    4914:	df 92       	push	r13
    4916:	ef 92       	push	r14
    4918:	ff 92       	push	r15
    491a:	0f 93       	push	r16
    491c:	1f 93       	push	r17
    491e:	cf 93       	push	r28
    4920:	df 93       	push	r29
    4922:	cd b7       	in	r28, 0x3d	; 61
    4924:	de b7       	in	r29, 0x3e	; 62
    4926:	2b 97       	sbiw	r28, 0x0b	; 11
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	f8 94       	cli
    492c:	de bf       	out	0x3e, r29	; 62
    492e:	0f be       	out	0x3f, r0	; 63
    4930:	cd bf       	out	0x3d, r28	; 61
    4932:	6c 01       	movw	r12, r24
    4934:	7b 01       	movw	r14, r22
    4936:	8a 01       	movw	r16, r20
    4938:	fc 01       	movw	r30, r24
    493a:	17 82       	std	Z+7, r1	; 0x07
    493c:	16 82       	std	Z+6, r1	; 0x06
    493e:	83 81       	ldd	r24, Z+3	; 0x03
    4940:	81 ff       	sbrs	r24, 1
    4942:	bf c1       	rjmp	.+894    	; 0x4cc2 <vfprintf+0x3c4>
    4944:	ce 01       	movw	r24, r28
    4946:	01 96       	adiw	r24, 0x01	; 1
    4948:	3c 01       	movw	r6, r24
    494a:	f6 01       	movw	r30, r12
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	f7 01       	movw	r30, r14
    4950:	93 fd       	sbrc	r25, 3
    4952:	85 91       	lpm	r24, Z+
    4954:	93 ff       	sbrs	r25, 3
    4956:	81 91       	ld	r24, Z+
    4958:	7f 01       	movw	r14, r30
    495a:	88 23       	and	r24, r24
    495c:	09 f4       	brne	.+2      	; 0x4960 <vfprintf+0x62>
    495e:	ad c1       	rjmp	.+858    	; 0x4cba <vfprintf+0x3bc>
    4960:	85 32       	cpi	r24, 0x25	; 37
    4962:	39 f4       	brne	.+14     	; 0x4972 <vfprintf+0x74>
    4964:	93 fd       	sbrc	r25, 3
    4966:	85 91       	lpm	r24, Z+
    4968:	93 ff       	sbrs	r25, 3
    496a:	81 91       	ld	r24, Z+
    496c:	7f 01       	movw	r14, r30
    496e:	85 32       	cpi	r24, 0x25	; 37
    4970:	21 f4       	brne	.+8      	; 0x497a <vfprintf+0x7c>
    4972:	b6 01       	movw	r22, r12
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	d6 d1       	rcall	.+940    	; 0x4d24 <fputc>
    4978:	e8 cf       	rjmp	.-48     	; 0x494a <vfprintf+0x4c>
    497a:	91 2c       	mov	r9, r1
    497c:	21 2c       	mov	r2, r1
    497e:	31 2c       	mov	r3, r1
    4980:	ff e1       	ldi	r31, 0x1F	; 31
    4982:	f3 15       	cp	r31, r3
    4984:	d8 f0       	brcs	.+54     	; 0x49bc <vfprintf+0xbe>
    4986:	8b 32       	cpi	r24, 0x2B	; 43
    4988:	79 f0       	breq	.+30     	; 0x49a8 <vfprintf+0xaa>
    498a:	38 f4       	brcc	.+14     	; 0x499a <vfprintf+0x9c>
    498c:	80 32       	cpi	r24, 0x20	; 32
    498e:	79 f0       	breq	.+30     	; 0x49ae <vfprintf+0xb0>
    4990:	83 32       	cpi	r24, 0x23	; 35
    4992:	a1 f4       	brne	.+40     	; 0x49bc <vfprintf+0xbe>
    4994:	23 2d       	mov	r18, r3
    4996:	20 61       	ori	r18, 0x10	; 16
    4998:	1d c0       	rjmp	.+58     	; 0x49d4 <vfprintf+0xd6>
    499a:	8d 32       	cpi	r24, 0x2D	; 45
    499c:	61 f0       	breq	.+24     	; 0x49b6 <vfprintf+0xb8>
    499e:	80 33       	cpi	r24, 0x30	; 48
    49a0:	69 f4       	brne	.+26     	; 0x49bc <vfprintf+0xbe>
    49a2:	23 2d       	mov	r18, r3
    49a4:	21 60       	ori	r18, 0x01	; 1
    49a6:	16 c0       	rjmp	.+44     	; 0x49d4 <vfprintf+0xd6>
    49a8:	83 2d       	mov	r24, r3
    49aa:	82 60       	ori	r24, 0x02	; 2
    49ac:	38 2e       	mov	r3, r24
    49ae:	e3 2d       	mov	r30, r3
    49b0:	e4 60       	ori	r30, 0x04	; 4
    49b2:	3e 2e       	mov	r3, r30
    49b4:	2a c0       	rjmp	.+84     	; 0x4a0a <vfprintf+0x10c>
    49b6:	f3 2d       	mov	r31, r3
    49b8:	f8 60       	ori	r31, 0x08	; 8
    49ba:	1d c0       	rjmp	.+58     	; 0x49f6 <vfprintf+0xf8>
    49bc:	37 fc       	sbrc	r3, 7
    49be:	2d c0       	rjmp	.+90     	; 0x4a1a <vfprintf+0x11c>
    49c0:	20 ed       	ldi	r18, 0xD0	; 208
    49c2:	28 0f       	add	r18, r24
    49c4:	2a 30       	cpi	r18, 0x0A	; 10
    49c6:	40 f0       	brcs	.+16     	; 0x49d8 <vfprintf+0xda>
    49c8:	8e 32       	cpi	r24, 0x2E	; 46
    49ca:	b9 f4       	brne	.+46     	; 0x49fa <vfprintf+0xfc>
    49cc:	36 fc       	sbrc	r3, 6
    49ce:	75 c1       	rjmp	.+746    	; 0x4cba <vfprintf+0x3bc>
    49d0:	23 2d       	mov	r18, r3
    49d2:	20 64       	ori	r18, 0x40	; 64
    49d4:	32 2e       	mov	r3, r18
    49d6:	19 c0       	rjmp	.+50     	; 0x4a0a <vfprintf+0x10c>
    49d8:	36 fe       	sbrs	r3, 6
    49da:	06 c0       	rjmp	.+12     	; 0x49e8 <vfprintf+0xea>
    49dc:	8a e0       	ldi	r24, 0x0A	; 10
    49de:	98 9e       	mul	r9, r24
    49e0:	20 0d       	add	r18, r0
    49e2:	11 24       	eor	r1, r1
    49e4:	92 2e       	mov	r9, r18
    49e6:	11 c0       	rjmp	.+34     	; 0x4a0a <vfprintf+0x10c>
    49e8:	ea e0       	ldi	r30, 0x0A	; 10
    49ea:	2e 9e       	mul	r2, r30
    49ec:	20 0d       	add	r18, r0
    49ee:	11 24       	eor	r1, r1
    49f0:	22 2e       	mov	r2, r18
    49f2:	f3 2d       	mov	r31, r3
    49f4:	f0 62       	ori	r31, 0x20	; 32
    49f6:	3f 2e       	mov	r3, r31
    49f8:	08 c0       	rjmp	.+16     	; 0x4a0a <vfprintf+0x10c>
    49fa:	8c 36       	cpi	r24, 0x6C	; 108
    49fc:	21 f4       	brne	.+8      	; 0x4a06 <vfprintf+0x108>
    49fe:	83 2d       	mov	r24, r3
    4a00:	80 68       	ori	r24, 0x80	; 128
    4a02:	38 2e       	mov	r3, r24
    4a04:	02 c0       	rjmp	.+4      	; 0x4a0a <vfprintf+0x10c>
    4a06:	88 36       	cpi	r24, 0x68	; 104
    4a08:	41 f4       	brne	.+16     	; 0x4a1a <vfprintf+0x11c>
    4a0a:	f7 01       	movw	r30, r14
    4a0c:	93 fd       	sbrc	r25, 3
    4a0e:	85 91       	lpm	r24, Z+
    4a10:	93 ff       	sbrs	r25, 3
    4a12:	81 91       	ld	r24, Z+
    4a14:	7f 01       	movw	r14, r30
    4a16:	81 11       	cpse	r24, r1
    4a18:	b3 cf       	rjmp	.-154    	; 0x4980 <vfprintf+0x82>
    4a1a:	98 2f       	mov	r25, r24
    4a1c:	9f 7d       	andi	r25, 0xDF	; 223
    4a1e:	95 54       	subi	r25, 0x45	; 69
    4a20:	93 30       	cpi	r25, 0x03	; 3
    4a22:	28 f4       	brcc	.+10     	; 0x4a2e <vfprintf+0x130>
    4a24:	0c 5f       	subi	r16, 0xFC	; 252
    4a26:	1f 4f       	sbci	r17, 0xFF	; 255
    4a28:	9f e3       	ldi	r25, 0x3F	; 63
    4a2a:	99 83       	std	Y+1, r25	; 0x01
    4a2c:	0d c0       	rjmp	.+26     	; 0x4a48 <vfprintf+0x14a>
    4a2e:	83 36       	cpi	r24, 0x63	; 99
    4a30:	31 f0       	breq	.+12     	; 0x4a3e <vfprintf+0x140>
    4a32:	83 37       	cpi	r24, 0x73	; 115
    4a34:	71 f0       	breq	.+28     	; 0x4a52 <vfprintf+0x154>
    4a36:	83 35       	cpi	r24, 0x53	; 83
    4a38:	09 f0       	breq	.+2      	; 0x4a3c <vfprintf+0x13e>
    4a3a:	55 c0       	rjmp	.+170    	; 0x4ae6 <vfprintf+0x1e8>
    4a3c:	20 c0       	rjmp	.+64     	; 0x4a7e <vfprintf+0x180>
    4a3e:	f8 01       	movw	r30, r16
    4a40:	80 81       	ld	r24, Z
    4a42:	89 83       	std	Y+1, r24	; 0x01
    4a44:	0e 5f       	subi	r16, 0xFE	; 254
    4a46:	1f 4f       	sbci	r17, 0xFF	; 255
    4a48:	88 24       	eor	r8, r8
    4a4a:	83 94       	inc	r8
    4a4c:	91 2c       	mov	r9, r1
    4a4e:	53 01       	movw	r10, r6
    4a50:	12 c0       	rjmp	.+36     	; 0x4a76 <vfprintf+0x178>
    4a52:	28 01       	movw	r4, r16
    4a54:	f2 e0       	ldi	r31, 0x02	; 2
    4a56:	4f 0e       	add	r4, r31
    4a58:	51 1c       	adc	r5, r1
    4a5a:	f8 01       	movw	r30, r16
    4a5c:	a0 80       	ld	r10, Z
    4a5e:	b1 80       	ldd	r11, Z+1	; 0x01
    4a60:	36 fe       	sbrs	r3, 6
    4a62:	03 c0       	rjmp	.+6      	; 0x4a6a <vfprintf+0x16c>
    4a64:	69 2d       	mov	r22, r9
    4a66:	70 e0       	ldi	r23, 0x00	; 0
    4a68:	02 c0       	rjmp	.+4      	; 0x4a6e <vfprintf+0x170>
    4a6a:	6f ef       	ldi	r22, 0xFF	; 255
    4a6c:	7f ef       	ldi	r23, 0xFF	; 255
    4a6e:	c5 01       	movw	r24, r10
    4a70:	4e d1       	rcall	.+668    	; 0x4d0e <strnlen>
    4a72:	4c 01       	movw	r8, r24
    4a74:	82 01       	movw	r16, r4
    4a76:	f3 2d       	mov	r31, r3
    4a78:	ff 77       	andi	r31, 0x7F	; 127
    4a7a:	3f 2e       	mov	r3, r31
    4a7c:	15 c0       	rjmp	.+42     	; 0x4aa8 <vfprintf+0x1aa>
    4a7e:	28 01       	movw	r4, r16
    4a80:	22 e0       	ldi	r18, 0x02	; 2
    4a82:	42 0e       	add	r4, r18
    4a84:	51 1c       	adc	r5, r1
    4a86:	f8 01       	movw	r30, r16
    4a88:	a0 80       	ld	r10, Z
    4a8a:	b1 80       	ldd	r11, Z+1	; 0x01
    4a8c:	36 fe       	sbrs	r3, 6
    4a8e:	03 c0       	rjmp	.+6      	; 0x4a96 <vfprintf+0x198>
    4a90:	69 2d       	mov	r22, r9
    4a92:	70 e0       	ldi	r23, 0x00	; 0
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <vfprintf+0x19c>
    4a96:	6f ef       	ldi	r22, 0xFF	; 255
    4a98:	7f ef       	ldi	r23, 0xFF	; 255
    4a9a:	c5 01       	movw	r24, r10
    4a9c:	2d d1       	rcall	.+602    	; 0x4cf8 <strnlen_P>
    4a9e:	4c 01       	movw	r8, r24
    4aa0:	f3 2d       	mov	r31, r3
    4aa2:	f0 68       	ori	r31, 0x80	; 128
    4aa4:	3f 2e       	mov	r3, r31
    4aa6:	82 01       	movw	r16, r4
    4aa8:	33 fc       	sbrc	r3, 3
    4aaa:	19 c0       	rjmp	.+50     	; 0x4ade <vfprintf+0x1e0>
    4aac:	82 2d       	mov	r24, r2
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	88 16       	cp	r8, r24
    4ab2:	99 06       	cpc	r9, r25
    4ab4:	a0 f4       	brcc	.+40     	; 0x4ade <vfprintf+0x1e0>
    4ab6:	b6 01       	movw	r22, r12
    4ab8:	80 e2       	ldi	r24, 0x20	; 32
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	33 d1       	rcall	.+614    	; 0x4d24 <fputc>
    4abe:	2a 94       	dec	r2
    4ac0:	f5 cf       	rjmp	.-22     	; 0x4aac <vfprintf+0x1ae>
    4ac2:	f5 01       	movw	r30, r10
    4ac4:	37 fc       	sbrc	r3, 7
    4ac6:	85 91       	lpm	r24, Z+
    4ac8:	37 fe       	sbrs	r3, 7
    4aca:	81 91       	ld	r24, Z+
    4acc:	5f 01       	movw	r10, r30
    4ace:	b6 01       	movw	r22, r12
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	28 d1       	rcall	.+592    	; 0x4d24 <fputc>
    4ad4:	21 10       	cpse	r2, r1
    4ad6:	2a 94       	dec	r2
    4ad8:	21 e0       	ldi	r18, 0x01	; 1
    4ada:	82 1a       	sub	r8, r18
    4adc:	91 08       	sbc	r9, r1
    4ade:	81 14       	cp	r8, r1
    4ae0:	91 04       	cpc	r9, r1
    4ae2:	79 f7       	brne	.-34     	; 0x4ac2 <vfprintf+0x1c4>
    4ae4:	e1 c0       	rjmp	.+450    	; 0x4ca8 <vfprintf+0x3aa>
    4ae6:	84 36       	cpi	r24, 0x64	; 100
    4ae8:	11 f0       	breq	.+4      	; 0x4aee <vfprintf+0x1f0>
    4aea:	89 36       	cpi	r24, 0x69	; 105
    4aec:	39 f5       	brne	.+78     	; 0x4b3c <vfprintf+0x23e>
    4aee:	f8 01       	movw	r30, r16
    4af0:	37 fe       	sbrs	r3, 7
    4af2:	07 c0       	rjmp	.+14     	; 0x4b02 <vfprintf+0x204>
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	0c 5f       	subi	r16, 0xFC	; 252
    4afe:	1f 4f       	sbci	r17, 0xFF	; 255
    4b00:	08 c0       	rjmp	.+16     	; 0x4b12 <vfprintf+0x214>
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	07 2e       	mov	r0, r23
    4b08:	00 0c       	add	r0, r0
    4b0a:	88 0b       	sbc	r24, r24
    4b0c:	99 0b       	sbc	r25, r25
    4b0e:	0e 5f       	subi	r16, 0xFE	; 254
    4b10:	1f 4f       	sbci	r17, 0xFF	; 255
    4b12:	f3 2d       	mov	r31, r3
    4b14:	ff 76       	andi	r31, 0x6F	; 111
    4b16:	3f 2e       	mov	r3, r31
    4b18:	97 ff       	sbrs	r25, 7
    4b1a:	09 c0       	rjmp	.+18     	; 0x4b2e <vfprintf+0x230>
    4b1c:	90 95       	com	r25
    4b1e:	80 95       	com	r24
    4b20:	70 95       	com	r23
    4b22:	61 95       	neg	r22
    4b24:	7f 4f       	sbci	r23, 0xFF	; 255
    4b26:	8f 4f       	sbci	r24, 0xFF	; 255
    4b28:	9f 4f       	sbci	r25, 0xFF	; 255
    4b2a:	f0 68       	ori	r31, 0x80	; 128
    4b2c:	3f 2e       	mov	r3, r31
    4b2e:	2a e0       	ldi	r18, 0x0A	; 10
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	a3 01       	movw	r20, r6
    4b34:	33 d1       	rcall	.+614    	; 0x4d9c <__ultoa_invert>
    4b36:	88 2e       	mov	r8, r24
    4b38:	86 18       	sub	r8, r6
    4b3a:	44 c0       	rjmp	.+136    	; 0x4bc4 <vfprintf+0x2c6>
    4b3c:	85 37       	cpi	r24, 0x75	; 117
    4b3e:	31 f4       	brne	.+12     	; 0x4b4c <vfprintf+0x24e>
    4b40:	23 2d       	mov	r18, r3
    4b42:	2f 7e       	andi	r18, 0xEF	; 239
    4b44:	b2 2e       	mov	r11, r18
    4b46:	2a e0       	ldi	r18, 0x0A	; 10
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	25 c0       	rjmp	.+74     	; 0x4b96 <vfprintf+0x298>
    4b4c:	93 2d       	mov	r25, r3
    4b4e:	99 7f       	andi	r25, 0xF9	; 249
    4b50:	b9 2e       	mov	r11, r25
    4b52:	8f 36       	cpi	r24, 0x6F	; 111
    4b54:	c1 f0       	breq	.+48     	; 0x4b86 <vfprintf+0x288>
    4b56:	18 f4       	brcc	.+6      	; 0x4b5e <vfprintf+0x260>
    4b58:	88 35       	cpi	r24, 0x58	; 88
    4b5a:	79 f0       	breq	.+30     	; 0x4b7a <vfprintf+0x27c>
    4b5c:	ae c0       	rjmp	.+348    	; 0x4cba <vfprintf+0x3bc>
    4b5e:	80 37       	cpi	r24, 0x70	; 112
    4b60:	19 f0       	breq	.+6      	; 0x4b68 <vfprintf+0x26a>
    4b62:	88 37       	cpi	r24, 0x78	; 120
    4b64:	21 f0       	breq	.+8      	; 0x4b6e <vfprintf+0x270>
    4b66:	a9 c0       	rjmp	.+338    	; 0x4cba <vfprintf+0x3bc>
    4b68:	e9 2f       	mov	r30, r25
    4b6a:	e0 61       	ori	r30, 0x10	; 16
    4b6c:	be 2e       	mov	r11, r30
    4b6e:	b4 fe       	sbrs	r11, 4
    4b70:	0d c0       	rjmp	.+26     	; 0x4b8c <vfprintf+0x28e>
    4b72:	fb 2d       	mov	r31, r11
    4b74:	f4 60       	ori	r31, 0x04	; 4
    4b76:	bf 2e       	mov	r11, r31
    4b78:	09 c0       	rjmp	.+18     	; 0x4b8c <vfprintf+0x28e>
    4b7a:	34 fe       	sbrs	r3, 4
    4b7c:	0a c0       	rjmp	.+20     	; 0x4b92 <vfprintf+0x294>
    4b7e:	29 2f       	mov	r18, r25
    4b80:	26 60       	ori	r18, 0x06	; 6
    4b82:	b2 2e       	mov	r11, r18
    4b84:	06 c0       	rjmp	.+12     	; 0x4b92 <vfprintf+0x294>
    4b86:	28 e0       	ldi	r18, 0x08	; 8
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	05 c0       	rjmp	.+10     	; 0x4b96 <vfprintf+0x298>
    4b8c:	20 e1       	ldi	r18, 0x10	; 16
    4b8e:	30 e0       	ldi	r19, 0x00	; 0
    4b90:	02 c0       	rjmp	.+4      	; 0x4b96 <vfprintf+0x298>
    4b92:	20 e1       	ldi	r18, 0x10	; 16
    4b94:	32 e0       	ldi	r19, 0x02	; 2
    4b96:	f8 01       	movw	r30, r16
    4b98:	b7 fe       	sbrs	r11, 7
    4b9a:	07 c0       	rjmp	.+14     	; 0x4baa <vfprintf+0x2ac>
    4b9c:	60 81       	ld	r22, Z
    4b9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ba0:	82 81       	ldd	r24, Z+2	; 0x02
    4ba2:	93 81       	ldd	r25, Z+3	; 0x03
    4ba4:	0c 5f       	subi	r16, 0xFC	; 252
    4ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ba8:	06 c0       	rjmp	.+12     	; 0x4bb6 <vfprintf+0x2b8>
    4baa:	60 81       	ld	r22, Z
    4bac:	71 81       	ldd	r23, Z+1	; 0x01
    4bae:	80 e0       	ldi	r24, 0x00	; 0
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	0e 5f       	subi	r16, 0xFE	; 254
    4bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb6:	a3 01       	movw	r20, r6
    4bb8:	f1 d0       	rcall	.+482    	; 0x4d9c <__ultoa_invert>
    4bba:	88 2e       	mov	r8, r24
    4bbc:	86 18       	sub	r8, r6
    4bbe:	fb 2d       	mov	r31, r11
    4bc0:	ff 77       	andi	r31, 0x7F	; 127
    4bc2:	3f 2e       	mov	r3, r31
    4bc4:	36 fe       	sbrs	r3, 6
    4bc6:	0d c0       	rjmp	.+26     	; 0x4be2 <vfprintf+0x2e4>
    4bc8:	23 2d       	mov	r18, r3
    4bca:	2e 7f       	andi	r18, 0xFE	; 254
    4bcc:	a2 2e       	mov	r10, r18
    4bce:	89 14       	cp	r8, r9
    4bd0:	58 f4       	brcc	.+22     	; 0x4be8 <vfprintf+0x2ea>
    4bd2:	34 fe       	sbrs	r3, 4
    4bd4:	0b c0       	rjmp	.+22     	; 0x4bec <vfprintf+0x2ee>
    4bd6:	32 fc       	sbrc	r3, 2
    4bd8:	09 c0       	rjmp	.+18     	; 0x4bec <vfprintf+0x2ee>
    4bda:	83 2d       	mov	r24, r3
    4bdc:	8e 7e       	andi	r24, 0xEE	; 238
    4bde:	a8 2e       	mov	r10, r24
    4be0:	05 c0       	rjmp	.+10     	; 0x4bec <vfprintf+0x2ee>
    4be2:	b8 2c       	mov	r11, r8
    4be4:	a3 2c       	mov	r10, r3
    4be6:	03 c0       	rjmp	.+6      	; 0x4bee <vfprintf+0x2f0>
    4be8:	b8 2c       	mov	r11, r8
    4bea:	01 c0       	rjmp	.+2      	; 0x4bee <vfprintf+0x2f0>
    4bec:	b9 2c       	mov	r11, r9
    4bee:	a4 fe       	sbrs	r10, 4
    4bf0:	0f c0       	rjmp	.+30     	; 0x4c10 <vfprintf+0x312>
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	e8 0d       	add	r30, r8
    4bf6:	f1 1d       	adc	r31, r1
    4bf8:	80 81       	ld	r24, Z
    4bfa:	80 33       	cpi	r24, 0x30	; 48
    4bfc:	21 f4       	brne	.+8      	; 0x4c06 <vfprintf+0x308>
    4bfe:	9a 2d       	mov	r25, r10
    4c00:	99 7e       	andi	r25, 0xE9	; 233
    4c02:	a9 2e       	mov	r10, r25
    4c04:	09 c0       	rjmp	.+18     	; 0x4c18 <vfprintf+0x31a>
    4c06:	a2 fe       	sbrs	r10, 2
    4c08:	06 c0       	rjmp	.+12     	; 0x4c16 <vfprintf+0x318>
    4c0a:	b3 94       	inc	r11
    4c0c:	b3 94       	inc	r11
    4c0e:	04 c0       	rjmp	.+8      	; 0x4c18 <vfprintf+0x31a>
    4c10:	8a 2d       	mov	r24, r10
    4c12:	86 78       	andi	r24, 0x86	; 134
    4c14:	09 f0       	breq	.+2      	; 0x4c18 <vfprintf+0x31a>
    4c16:	b3 94       	inc	r11
    4c18:	a3 fc       	sbrc	r10, 3
    4c1a:	10 c0       	rjmp	.+32     	; 0x4c3c <vfprintf+0x33e>
    4c1c:	a0 fe       	sbrs	r10, 0
    4c1e:	06 c0       	rjmp	.+12     	; 0x4c2c <vfprintf+0x32e>
    4c20:	b2 14       	cp	r11, r2
    4c22:	80 f4       	brcc	.+32     	; 0x4c44 <vfprintf+0x346>
    4c24:	28 0c       	add	r2, r8
    4c26:	92 2c       	mov	r9, r2
    4c28:	9b 18       	sub	r9, r11
    4c2a:	0d c0       	rjmp	.+26     	; 0x4c46 <vfprintf+0x348>
    4c2c:	b2 14       	cp	r11, r2
    4c2e:	58 f4       	brcc	.+22     	; 0x4c46 <vfprintf+0x348>
    4c30:	b6 01       	movw	r22, r12
    4c32:	80 e2       	ldi	r24, 0x20	; 32
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	76 d0       	rcall	.+236    	; 0x4d24 <fputc>
    4c38:	b3 94       	inc	r11
    4c3a:	f8 cf       	rjmp	.-16     	; 0x4c2c <vfprintf+0x32e>
    4c3c:	b2 14       	cp	r11, r2
    4c3e:	18 f4       	brcc	.+6      	; 0x4c46 <vfprintf+0x348>
    4c40:	2b 18       	sub	r2, r11
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <vfprintf+0x34a>
    4c44:	98 2c       	mov	r9, r8
    4c46:	21 2c       	mov	r2, r1
    4c48:	a4 fe       	sbrs	r10, 4
    4c4a:	0f c0       	rjmp	.+30     	; 0x4c6a <vfprintf+0x36c>
    4c4c:	b6 01       	movw	r22, r12
    4c4e:	80 e3       	ldi	r24, 0x30	; 48
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	68 d0       	rcall	.+208    	; 0x4d24 <fputc>
    4c54:	a2 fe       	sbrs	r10, 2
    4c56:	16 c0       	rjmp	.+44     	; 0x4c84 <vfprintf+0x386>
    4c58:	a1 fc       	sbrc	r10, 1
    4c5a:	03 c0       	rjmp	.+6      	; 0x4c62 <vfprintf+0x364>
    4c5c:	88 e7       	ldi	r24, 0x78	; 120
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	02 c0       	rjmp	.+4      	; 0x4c66 <vfprintf+0x368>
    4c62:	88 e5       	ldi	r24, 0x58	; 88
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	b6 01       	movw	r22, r12
    4c68:	0c c0       	rjmp	.+24     	; 0x4c82 <vfprintf+0x384>
    4c6a:	8a 2d       	mov	r24, r10
    4c6c:	86 78       	andi	r24, 0x86	; 134
    4c6e:	51 f0       	breq	.+20     	; 0x4c84 <vfprintf+0x386>
    4c70:	a1 fe       	sbrs	r10, 1
    4c72:	02 c0       	rjmp	.+4      	; 0x4c78 <vfprintf+0x37a>
    4c74:	8b e2       	ldi	r24, 0x2B	; 43
    4c76:	01 c0       	rjmp	.+2      	; 0x4c7a <vfprintf+0x37c>
    4c78:	80 e2       	ldi	r24, 0x20	; 32
    4c7a:	a7 fc       	sbrc	r10, 7
    4c7c:	8d e2       	ldi	r24, 0x2D	; 45
    4c7e:	b6 01       	movw	r22, r12
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	50 d0       	rcall	.+160    	; 0x4d24 <fputc>
    4c84:	89 14       	cp	r8, r9
    4c86:	30 f4       	brcc	.+12     	; 0x4c94 <vfprintf+0x396>
    4c88:	b6 01       	movw	r22, r12
    4c8a:	80 e3       	ldi	r24, 0x30	; 48
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	4a d0       	rcall	.+148    	; 0x4d24 <fputc>
    4c90:	9a 94       	dec	r9
    4c92:	f8 cf       	rjmp	.-16     	; 0x4c84 <vfprintf+0x386>
    4c94:	8a 94       	dec	r8
    4c96:	f3 01       	movw	r30, r6
    4c98:	e8 0d       	add	r30, r8
    4c9a:	f1 1d       	adc	r31, r1
    4c9c:	80 81       	ld	r24, Z
    4c9e:	b6 01       	movw	r22, r12
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	40 d0       	rcall	.+128    	; 0x4d24 <fputc>
    4ca4:	81 10       	cpse	r8, r1
    4ca6:	f6 cf       	rjmp	.-20     	; 0x4c94 <vfprintf+0x396>
    4ca8:	22 20       	and	r2, r2
    4caa:	09 f4       	brne	.+2      	; 0x4cae <vfprintf+0x3b0>
    4cac:	4e ce       	rjmp	.-868    	; 0x494a <vfprintf+0x4c>
    4cae:	b6 01       	movw	r22, r12
    4cb0:	80 e2       	ldi	r24, 0x20	; 32
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	37 d0       	rcall	.+110    	; 0x4d24 <fputc>
    4cb6:	2a 94       	dec	r2
    4cb8:	f7 cf       	rjmp	.-18     	; 0x4ca8 <vfprintf+0x3aa>
    4cba:	f6 01       	movw	r30, r12
    4cbc:	86 81       	ldd	r24, Z+6	; 0x06
    4cbe:	97 81       	ldd	r25, Z+7	; 0x07
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <vfprintf+0x3c8>
    4cc2:	8f ef       	ldi	r24, 0xFF	; 255
    4cc4:	9f ef       	ldi	r25, 0xFF	; 255
    4cc6:	2b 96       	adiw	r28, 0x0b	; 11
    4cc8:	0f b6       	in	r0, 0x3f	; 63
    4cca:	f8 94       	cli
    4ccc:	de bf       	out	0x3e, r29	; 62
    4cce:	0f be       	out	0x3f, r0	; 63
    4cd0:	cd bf       	out	0x3d, r28	; 61
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	ff 90       	pop	r15
    4cdc:	ef 90       	pop	r14
    4cde:	df 90       	pop	r13
    4ce0:	cf 90       	pop	r12
    4ce2:	bf 90       	pop	r11
    4ce4:	af 90       	pop	r10
    4ce6:	9f 90       	pop	r9
    4ce8:	8f 90       	pop	r8
    4cea:	7f 90       	pop	r7
    4cec:	6f 90       	pop	r6
    4cee:	5f 90       	pop	r5
    4cf0:	4f 90       	pop	r4
    4cf2:	3f 90       	pop	r3
    4cf4:	2f 90       	pop	r2
    4cf6:	08 95       	ret

00004cf8 <strnlen_P>:
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	05 90       	lpm	r0, Z+
    4cfc:	61 50       	subi	r22, 0x01	; 1
    4cfe:	70 40       	sbci	r23, 0x00	; 0
    4d00:	01 10       	cpse	r0, r1
    4d02:	d8 f7       	brcc	.-10     	; 0x4cfa <strnlen_P+0x2>
    4d04:	80 95       	com	r24
    4d06:	90 95       	com	r25
    4d08:	8e 0f       	add	r24, r30
    4d0a:	9f 1f       	adc	r25, r31
    4d0c:	08 95       	ret

00004d0e <strnlen>:
    4d0e:	fc 01       	movw	r30, r24
    4d10:	61 50       	subi	r22, 0x01	; 1
    4d12:	70 40       	sbci	r23, 0x00	; 0
    4d14:	01 90       	ld	r0, Z+
    4d16:	01 10       	cpse	r0, r1
    4d18:	d8 f7       	brcc	.-10     	; 0x4d10 <strnlen+0x2>
    4d1a:	80 95       	com	r24
    4d1c:	90 95       	com	r25
    4d1e:	8e 0f       	add	r24, r30
    4d20:	9f 1f       	adc	r25, r31
    4d22:	08 95       	ret

00004d24 <fputc>:
    4d24:	0f 93       	push	r16
    4d26:	1f 93       	push	r17
    4d28:	cf 93       	push	r28
    4d2a:	df 93       	push	r29
    4d2c:	fb 01       	movw	r30, r22
    4d2e:	23 81       	ldd	r18, Z+3	; 0x03
    4d30:	21 fd       	sbrc	r18, 1
    4d32:	03 c0       	rjmp	.+6      	; 0x4d3a <fputc+0x16>
    4d34:	8f ef       	ldi	r24, 0xFF	; 255
    4d36:	9f ef       	ldi	r25, 0xFF	; 255
    4d38:	2c c0       	rjmp	.+88     	; 0x4d92 <fputc+0x6e>
    4d3a:	22 ff       	sbrs	r18, 2
    4d3c:	16 c0       	rjmp	.+44     	; 0x4d6a <fputc+0x46>
    4d3e:	46 81       	ldd	r20, Z+6	; 0x06
    4d40:	57 81       	ldd	r21, Z+7	; 0x07
    4d42:	24 81       	ldd	r18, Z+4	; 0x04
    4d44:	35 81       	ldd	r19, Z+5	; 0x05
    4d46:	42 17       	cp	r20, r18
    4d48:	53 07       	cpc	r21, r19
    4d4a:	44 f4       	brge	.+16     	; 0x4d5c <fputc+0x38>
    4d4c:	a0 81       	ld	r26, Z
    4d4e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d50:	9d 01       	movw	r18, r26
    4d52:	2f 5f       	subi	r18, 0xFF	; 255
    4d54:	3f 4f       	sbci	r19, 0xFF	; 255
    4d56:	31 83       	std	Z+1, r19	; 0x01
    4d58:	20 83       	st	Z, r18
    4d5a:	8c 93       	st	X, r24
    4d5c:	26 81       	ldd	r18, Z+6	; 0x06
    4d5e:	37 81       	ldd	r19, Z+7	; 0x07
    4d60:	2f 5f       	subi	r18, 0xFF	; 255
    4d62:	3f 4f       	sbci	r19, 0xFF	; 255
    4d64:	37 83       	std	Z+7, r19	; 0x07
    4d66:	26 83       	std	Z+6, r18	; 0x06
    4d68:	14 c0       	rjmp	.+40     	; 0x4d92 <fputc+0x6e>
    4d6a:	8b 01       	movw	r16, r22
    4d6c:	ec 01       	movw	r28, r24
    4d6e:	fb 01       	movw	r30, r22
    4d70:	00 84       	ldd	r0, Z+8	; 0x08
    4d72:	f1 85       	ldd	r31, Z+9	; 0x09
    4d74:	e0 2d       	mov	r30, r0
    4d76:	19 95       	eicall
    4d78:	89 2b       	or	r24, r25
    4d7a:	e1 f6       	brne	.-72     	; 0x4d34 <fputc+0x10>
    4d7c:	d8 01       	movw	r26, r16
    4d7e:	16 96       	adiw	r26, 0x06	; 6
    4d80:	8d 91       	ld	r24, X+
    4d82:	9c 91       	ld	r25, X
    4d84:	17 97       	sbiw	r26, 0x07	; 7
    4d86:	01 96       	adiw	r24, 0x01	; 1
    4d88:	17 96       	adiw	r26, 0x07	; 7
    4d8a:	9c 93       	st	X, r25
    4d8c:	8e 93       	st	-X, r24
    4d8e:	16 97       	sbiw	r26, 0x06	; 6
    4d90:	ce 01       	movw	r24, r28
    4d92:	df 91       	pop	r29
    4d94:	cf 91       	pop	r28
    4d96:	1f 91       	pop	r17
    4d98:	0f 91       	pop	r16
    4d9a:	08 95       	ret

00004d9c <__ultoa_invert>:
    4d9c:	fa 01       	movw	r30, r20
    4d9e:	aa 27       	eor	r26, r26
    4da0:	28 30       	cpi	r18, 0x08	; 8
    4da2:	51 f1       	breq	.+84     	; 0x4df8 <__ultoa_invert+0x5c>
    4da4:	20 31       	cpi	r18, 0x10	; 16
    4da6:	81 f1       	breq	.+96     	; 0x4e08 <__ultoa_invert+0x6c>
    4da8:	e8 94       	clt
    4daa:	6f 93       	push	r22
    4dac:	6e 7f       	andi	r22, 0xFE	; 254
    4dae:	6e 5f       	subi	r22, 0xFE	; 254
    4db0:	7f 4f       	sbci	r23, 0xFF	; 255
    4db2:	8f 4f       	sbci	r24, 0xFF	; 255
    4db4:	9f 4f       	sbci	r25, 0xFF	; 255
    4db6:	af 4f       	sbci	r26, 0xFF	; 255
    4db8:	b1 e0       	ldi	r27, 0x01	; 1
    4dba:	3e d0       	rcall	.+124    	; 0x4e38 <__ultoa_invert+0x9c>
    4dbc:	b4 e0       	ldi	r27, 0x04	; 4
    4dbe:	3c d0       	rcall	.+120    	; 0x4e38 <__ultoa_invert+0x9c>
    4dc0:	67 0f       	add	r22, r23
    4dc2:	78 1f       	adc	r23, r24
    4dc4:	89 1f       	adc	r24, r25
    4dc6:	9a 1f       	adc	r25, r26
    4dc8:	a1 1d       	adc	r26, r1
    4dca:	68 0f       	add	r22, r24
    4dcc:	79 1f       	adc	r23, r25
    4dce:	8a 1f       	adc	r24, r26
    4dd0:	91 1d       	adc	r25, r1
    4dd2:	a1 1d       	adc	r26, r1
    4dd4:	6a 0f       	add	r22, r26
    4dd6:	71 1d       	adc	r23, r1
    4dd8:	81 1d       	adc	r24, r1
    4dda:	91 1d       	adc	r25, r1
    4ddc:	a1 1d       	adc	r26, r1
    4dde:	20 d0       	rcall	.+64     	; 0x4e20 <__ultoa_invert+0x84>
    4de0:	09 f4       	brne	.+2      	; 0x4de4 <__ultoa_invert+0x48>
    4de2:	68 94       	set
    4de4:	3f 91       	pop	r19
    4de6:	2a e0       	ldi	r18, 0x0A	; 10
    4de8:	26 9f       	mul	r18, r22
    4dea:	11 24       	eor	r1, r1
    4dec:	30 19       	sub	r19, r0
    4dee:	30 5d       	subi	r19, 0xD0	; 208
    4df0:	31 93       	st	Z+, r19
    4df2:	de f6       	brtc	.-74     	; 0x4daa <__ultoa_invert+0xe>
    4df4:	cf 01       	movw	r24, r30
    4df6:	08 95       	ret
    4df8:	46 2f       	mov	r20, r22
    4dfa:	47 70       	andi	r20, 0x07	; 7
    4dfc:	40 5d       	subi	r20, 0xD0	; 208
    4dfe:	41 93       	st	Z+, r20
    4e00:	b3 e0       	ldi	r27, 0x03	; 3
    4e02:	0f d0       	rcall	.+30     	; 0x4e22 <__ultoa_invert+0x86>
    4e04:	c9 f7       	brne	.-14     	; 0x4df8 <__ultoa_invert+0x5c>
    4e06:	f6 cf       	rjmp	.-20     	; 0x4df4 <__ultoa_invert+0x58>
    4e08:	46 2f       	mov	r20, r22
    4e0a:	4f 70       	andi	r20, 0x0F	; 15
    4e0c:	40 5d       	subi	r20, 0xD0	; 208
    4e0e:	4a 33       	cpi	r20, 0x3A	; 58
    4e10:	18 f0       	brcs	.+6      	; 0x4e18 <__ultoa_invert+0x7c>
    4e12:	49 5d       	subi	r20, 0xD9	; 217
    4e14:	31 fd       	sbrc	r19, 1
    4e16:	40 52       	subi	r20, 0x20	; 32
    4e18:	41 93       	st	Z+, r20
    4e1a:	02 d0       	rcall	.+4      	; 0x4e20 <__ultoa_invert+0x84>
    4e1c:	a9 f7       	brne	.-22     	; 0x4e08 <__ultoa_invert+0x6c>
    4e1e:	ea cf       	rjmp	.-44     	; 0x4df4 <__ultoa_invert+0x58>
    4e20:	b4 e0       	ldi	r27, 0x04	; 4
    4e22:	a6 95       	lsr	r26
    4e24:	97 95       	ror	r25
    4e26:	87 95       	ror	r24
    4e28:	77 95       	ror	r23
    4e2a:	67 95       	ror	r22
    4e2c:	ba 95       	dec	r27
    4e2e:	c9 f7       	brne	.-14     	; 0x4e22 <__ultoa_invert+0x86>
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	61 05       	cpc	r22, r1
    4e34:	71 05       	cpc	r23, r1
    4e36:	08 95       	ret
    4e38:	9b 01       	movw	r18, r22
    4e3a:	ac 01       	movw	r20, r24
    4e3c:	0a 2e       	mov	r0, r26
    4e3e:	06 94       	lsr	r0
    4e40:	57 95       	ror	r21
    4e42:	47 95       	ror	r20
    4e44:	37 95       	ror	r19
    4e46:	27 95       	ror	r18
    4e48:	ba 95       	dec	r27
    4e4a:	c9 f7       	brne	.-14     	; 0x4e3e <__ultoa_invert+0xa2>
    4e4c:	62 0f       	add	r22, r18
    4e4e:	73 1f       	adc	r23, r19
    4e50:	84 1f       	adc	r24, r20
    4e52:	95 1f       	adc	r25, r21
    4e54:	a0 1d       	adc	r26, r0
    4e56:	08 95       	ret

00004e58 <_exit>:
    4e58:	f8 94       	cli

00004e5a <__stop_program>:
    4e5a:	ff cf       	rjmp	.-2      	; 0x4e5a <__stop_program>
